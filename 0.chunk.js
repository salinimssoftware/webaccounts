webpackJsonpac__name_([0],{

/***/ 1163:
/***/ (function(module, exports) {

module.exports = ".container{\r\n  width: 60% !important;\r\n}\r\n\r\nth {\r\n    background: skyblue;\r\n    border: 1px solid #dbd7d7;\r\n  \r\n  }\r\n  \r\n  td {\r\n    height: 30px;\r\n    border: 1px solid #dbd7d7;\r\n  }\r\n  \r\n  .borderdiv {\r\n    border: 1px solid rgba(119, 119, 119, 0.15)\r\n  }\r\n  \r\n  .rowdiv {\r\n    border: 1px solid rgba(119, 119, 119, 0.15);\r\n    text-align: center;\r\n  }\r\n  \r\n  .smalllabeldiv {\r\n    height: 16px;\r\n  }\r\n  \r\n  .smallHeader {\r\n    font-size: 11px;\r\n    font-weight: bold;\r\n    margin: 0px;\r\n  \r\n  }\r\n  \r\n  \r\n  .scrolldiv {\r\n    max-height: 75px;\r\n    padding-right: 30px;\r\n    overflow: auto;\r\n    scrollbar-3dlight-color: #FFFFFF;\r\n    scrollbar-arrow-color: #000000;\r\n    scrollbar-base-color: #FF9999;\r\n    scrollbar-darkshadow-color: #000000;\r\n    scrollbar-face-color: #000000;\r\n    scrollbar-highlight-color: #000000;\r\n    scrollbar-shadow-color: #0033CC;\r\n  }\r\n  \r\n  .multiboxspan {\r\n    font-size: 11px;\r\n    font-weight: bold;\r\n    position: relative;\r\n    float: left;\r\n    display: block;\r\n    margin: 2px;\r\n    border: 1px solid silver;\r\n    border-radius: 5px;\r\n    background-color: lavenderblush;\r\n  }\r\n  \r\n  .smallBoldLabel {\r\n    font-size: 11px;\r\n    font-weight: bold;\r\n    margin: 0px;\r\n    /* float: left; */\r\n    /* margin-left: 10px; */\r\n    color: #222;\r\n    /* font-family: arial; */\r\n  \r\n  }\r\n  \r\n  .table-container {\r\n    height: 87vh;\r\n  \r\n  }\r\n  \r\n  table {\r\n    display: flex;\r\n    flex-flow: column;\r\n    height: 95%;\r\n  \r\n  }\r\n  \r\n  table thead\r\n  table tfoot {\r\n    /* head takes the height it requires, \r\n      and it's not scaled when table is resized */\r\n    flex: 0 0 auto;\r\n    width: calc(100% - 0.9em);\r\n  \r\n  }\r\n  \r\n  table tbody {\r\n    /* body takes all the remaining available space */\r\n    flex: 1 1 auto;\r\n    display: block;\r\n    /* overflow-y: scroll; */\r\n  }\r\n  \r\n  table tbody tr {\r\n    width: 100.4%;\r\n  }\r\n  \r\n  table thead,\r\n  table tfoot,\r\n  table tbody tr {\r\n    display: table;\r\n    table-layout: fixed;\r\n  }\r\n  \r\n  .reportTabel tr:hover {\r\n    background-color: #e0e0e0;\r\n  }\r\n  \r\n  .reportTabel tr.active td {\r\n    background-color: #ABDCFB !important;\r\n    color: white;\r\n  }\r\n  \r\n  .reportTabel tr:nth-child(odd) {\r\n    background-color: #F2F2F2;\r\n  }\r\n  \r\n  .reportTabel tr:nth-child(even) {\r\n    background-color: #FFFFFF;\r\n  }\r\n  \r\n  /* New */\r\n  \r\n  legend {\r\n    font-size: 13px;\r\n    font-weight: bold;\r\n    color: #222;\r\n    width: auto;\r\n  }\r\n  \r\n  fieldset {\r\n    margin-bottom: 1%;\r\n  }\r\n\r\n  .table-first-header{\r\n    position: sticky;\r\n    top: 0;\r\n  }\r\n\r\n  .table-second-header{\r\n    position: sticky;\r\n    top: 20px;\r\n  }\r\n  "

/***/ }),

/***/ 1181:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_forms__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_repositories_masterRepo_service__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__common_services_permission__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__PLedger_service__ = __webpack_require__(1235);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__common_Transaction_Components_transaction_service__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__common_services_navigation_perventor_navigation_perventor_service__ = __webpack_require__(93);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__common_services_spinner_spinner_service__ = __webpack_require__(20);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PLedgerComponent; });











var PLedgerComponent = (function () {
    function PLedgerComponent(preventNavigationService, alertService, loadingService, MasterService, PartyService, router, _activatedRoute, _fb, dialog, _authService, _trnMainService) {
        this.preventNavigationService = preventNavigationService;
        this.alertService = alertService;
        this.loadingService = loadingService;
        this.MasterService = MasterService;
        this.PartyService = PartyService;
        this._activatedRoute = _activatedRoute;
        this._fb = _fb;
        this.dialog = dialog;
        this._authService = _authService;
        this._trnMainService = _trnMainService;
        this.onClose = new __WEBPACK_IMPORTED_MODULE_1__angular_core__["EventEmitter"]();
        this.SavePartyEmit = new __WEBPACK_IMPORTED_MODULE_1__angular_core__["EventEmitter"]();
        this.majorParentAcList = [];
        this.acParentList = [];
        this.acListtree = {};
        this.ledgerAcObj = {};
        this.viewMode = false;
        this.subcriptions = [];
        this.initialTextReadOnly = false;
        this.ID = "";
        this.acGroups = [];
        this.actype = "";
        this.disableActype = false;
        this.formObj = {};
        this.Title = "";
        this.PartyGrpList = [];
        this.ChannelList = [];
        this.GeoList = [];
        this.RouteList = [];
        this.BranchList = [];
        this.editModel = {};
        this.CardName = [];
        this.StateList = [];
        this.DistrictList = [];
        this.TrnMainObj = {};
        this.HideACNAME = false;
        this.partyList = [];
        this.solist = [];
        this.SOTableList = [];
        this.router = router;
        this.TrnMainObj = this._trnMainService.TrnMainObj;
        // this.service.getNewValues(selectL)
        //     .subscribe(data => {
        //         if (data.status == 'ok') {
        //             this.ledgerAcObj.PARENT = data.result.parent.ACID;
        //             this.PARENTACNAME = data.result.parent.ACNAME;
        //             this.ledgerAcObj.PType = data.result.parent.PType;
        //         }
        //     }
        //     , error => {
        //         this.router.navigate([this.returnUrl]);
        //         console.log(error);
        //     }
        //     );
    }
    PLedgerComponent.prototype.ngAfterViewInit = function () {
        this.HideACNAME = false;
        this.AfterView();
    };
    PLedgerComponent.prototype.AfterView = function () {
        var _this = this;
        //console.log("CheckPtype", this.PType, this.isGroup);
        // if (this.PType == 'C' && (this.isGroup == false || this.isGroup == 'false')) {
        if (this.PType == "C" && this.isGroup == 0) {
            this.formObj.Name = "Customer Name";
            this.formObj.PSType = "Sales Type";
            this.formObj.PMode = "Payment Mode";
            this.form.patchValue({
                PType: "C",
                TYPE: "A"
            });
        }
        else if (this.PType == "C" && this.isGroup == 1) {
            this.formObj.Name = "Group Name";
            this.form.patchValue({ PType: "C", TYPE: "G" });
        }
        else if (this.PType == "V" && this.isGroup == 0) {
            this.formObj.Name = "Supplier Name";
            this.formObj.PSType = "Purchase Type";
            this.formObj.PMode = "Purchase Mode";
            this.form.patchValue({ PType: "V", TYPE: "A" });
        }
        else if (this.PType == "V" && this.isGroup == 1) {
            this.form.patchValue({ PType: "V", TYPE: "G" });
        }
        // document.getElementById('id') = 'General';
        this.PartyService.getPartyGroupByPtype(this.PType).subscribe(function (res) {
            if (res.status == "ok") {
                _this.PartyGrpList = res.result;
            }
        });
        this.PartyService.getDIV().subscribe(function (res) {
            _this.BranchList = res;
        });
        this.PartyService.getHierachy().subscribe(function (res) {
            if (res.status == "ok") {
                _this.GeoList = res.result.GEO;
                _this.ChannelList = res.result.CHANNEL;
                _this.RouteList = res.result.Route;
            }
        });
        this.MasterService.GETTRNTYPE().subscribe(function (res) {
            if (res.status == 'ok') {
                _this.CardName = res.result;
            }
        });
        this.MasterService.getState().subscribe(function (res) {
            if (res.status == 'ok') {
                _this.StateList = res.result;
            }
        });
        this.MasterService.getDistrict().subscribe(function (res) {
            if (res.status == 'ok') {
                _this.DistrictList = res.result;
            }
        });
        this.userProfile = this._authService.getUserProfile();
    };
    PLedgerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.form = this._fb.group({
            PARENT: [""],
            TITLE: [""],
            ACNAME: ["", __WEBPACK_IMPORTED_MODULE_3__angular_forms__["Validators"].required],
            SHORTNAME: [""],
            CUSTOMERID: [""],
            CATEGORY: [""],
            Currency: [""],
            PMODE: [""],
            CRLIMIT: [0],
            CRPERIOD: [0],
            PSTYPE: [""],
            DIV: [""],
            GSTTYPE: [""],
            MAILTYPE: [""],
            ISACTIVE: [1],
            ADDRESS: [""],
            TEMPADDRESS: [""],
            CITY: [""],
            STATE: [""],
            AREA: [""],
            LANDMARK: [""],
            PHONE: [""],
            MOBILE: ["", __WEBPACK_IMPORTED_MODULE_3__angular_forms__["Validators"].required],
            EMAIL: [""],
            POSTALCODE: [""],
            FAX: [""],
            VATNO: [""],
            ADHARNO: [""],
            GSTNO: [""],
            PRICELEVELCONFIG: [""],
            PRICELEVEL: [""],
            CTYPE: [""],
            ERPPLANTCODE: [""],
            ERPSTOCKLOCATIONCODE: [""],
            CBALANCE: [0],
            PType: [""],
            MAPID: [""],
            ACCODE: [""],
            ACID: [""],
            TYPE: [""],
            Channel: [""],
            SO: [""],
            GEO: [""],
            ROUTE: [""],
            RouteDays: [""],
            DISTRICT: [""],
            CONTACTPERSON: [""],
            CONTACTMOBILE: [""],
            CONTACTEMAIL: [""]
        });
        this.form.valueChanges.subscribe(function (data) {
            _this.MasterService.PLedgerObj = data;
        });
        this.onFormChanges();
        this.CrDisabled = 'enabled';
        if (!!this._activatedRoute.snapshot.params["mode"])
            this.mode = this._activatedRoute.snapshot.params["mode"];
        if (!!this._activatedRoute.snapshot.params["isGroup"])
            this.isGroup = this._activatedRoute.snapshot.params["isGroup"];
        if (!!this._activatedRoute.snapshot.params["ACID"])
            this.ACID = this._activatedRoute.snapshot.params["ACID"];
        if (!!this._activatedRoute.snapshot.params["PType"])
            this.PType = this._activatedRoute.snapshot.params["PType"];
        if (!!this._activatedRoute.snapshot.params["Title"])
            this.Title = this._activatedRoute.snapshot.params["Title"];
        if (!!this._activatedRoute.snapshot.params["returnUrl"])
            this.returnUrl = this._activatedRoute.snapshot.params["returnUrl"];
        this.getGroups();
        // this.MasterService.getAllAccount().subscribe(res => { this.ledgerAcList.push(<TAcList>res); });
        if (this.mode == "edit") {
            this.form.get("PARENT").disable();
            this.form.get("ACNAME").disable();
            this.form.get("SHORTNAME").disable();
            this.form.get("CUSTOMERID").disable();
            this.form.get("VATNO").disable();
            this.form.get("ACCODE").disable();
            this.form.get("CRLIMIT").disable();
            this.loadingService.show("Getting data, Please wait...");
            this.MasterService.getAllAccount(this.ACID).subscribe(function (data) {
                _this.loadingService.hide();
                _this.editModel = data.result;
                if (data.result2 != null || data.result2 != undefined) {
                    _this.SOTableList.push(data.result2);
                }
                _this.setEditFromValue();
            }, function (error) {
                _this.loadingService.hide();
            });
        }
        else {
            if (this.Title == "AddLedger") {
                this.modeTitle = "Add Party Ledger";
            }
            else if (this.Title == "AddGroup") {
                this.modeTitle = "Add Party Group";
            }
        }
    };
    PLedgerComponent.prototype.BindValue = function (value, isGroup) {
        if (isGroup === void 0) { isGroup = 0; }
        this.PType = value;
        this.isGroup = isGroup;
        this.HideACNAME = true;
        this.AfterView();
        return;
        // this.HideACNAME=false;
        // this.form.patchValue({
        //   PType: '',
        //   TYPE: '',
        //   PARENT:''
        // });
        // this.isGroup=isGroup
        // if (value == "C" && this.isGroup == 0) {
        //   this.HideACNAME=true;
        //   this.formObj.Name = "Customer Name";
        //   this.formObj.PSType = "Sales Type";
        //   this.formObj.PMode = "Payment Mode";
        //   this.form.patchValue({
        //     PType: "C",
        //     TYPE: "A",
        //     PARENT:'PA'
        //   });
        // } else if (value == "C" && this.isGroup == 1) {
        //   this.formObj.Name = "Group Name";
        //   this.form.patchValue({ PType: "C", TYPE: "G",PARENT:'PA' });
        // }
        // // else if (this.PType == 'V' && (this.isGroup == false || this.isGroup == 'false')) {
        // if (value == "V" && this.isGroup == 0) {
        //   //console.log("reached supllier")
        //   this.HideACNAME=true;
        //   this.formObj.Name = "Supplier Name";
        //   this.formObj.PSType = "Purchase Type";
        //   this.formObj.PMode = "Purchase Mode";
        //   this.form.patchValue({ PType: "V", TYPE: "A",PARENT:'PA' });
        // } else if (this.PType == "V" && this.isGroup == 1) {
        //   this.form.patchValue({ PType: "V", TYPE: "G",PARENT:'PA' });
        // }
    };
    PLedgerComponent.prototype.setEditFromValue = function (data) {
        if (data === void 0) { data = null; }
        if (data != null && data != undefined && data != "") {
            this.editModel = data;
        }
        this.form.patchValue({
            PARENT: this.editModel.PARENT,
            TITLE: this.editModel.TITLE,
            ACNAME: this.editModel.ACNAME,
            SHORTNAME: this.editModel.shortname,
            CUSTOMERID: this.editModel.customerID,
            CATEGORY: this.editModel.CATEGORY,
            Currency: this.editModel.Currency,
            PMODE: this.editModel.PMODE,
            CRLIMIT: this.editModel.CRLIMIT,
            CRPERIOD: this.editModel.CRPERIOD,
            PSTYPE: this.editModel.PSTYPE,
            DIV: this.editModel.DIV,
            GSTTYPE: this.editModel.GSTTYPE,
            MAILTYPE: this.editModel.MAILTYPE,
            ISACTIVE: this.editModel.ISACTIVE,
            ADDRESS: this.editModel.ADDRESS,
            TEMPADDRESS: this.editModel.TEMPADDRESS,
            CITY: this.editModel.CITY,
            STATE: this.editModel.STATE,
            AREA: this.editModel.AREA,
            LANDMARK: this.editModel.LANDMARK,
            PHONE: this.editModel.PHONE,
            MOBILE: this.editModel.MOBILE,
            EMAIL: this.editModel.EMAIL,
            POSTALCODE: this.editModel.POSTALCODE,
            FAX: this.editModel.FAX,
            VATNO: this.editModel.VATNO,
            ADHARNO: this.editModel.ADHARNO,
            GSTNO: this.editModel.GSTNO,
            PRICELEVELCONFIG: this.editModel.PRICELEVELCONFIG,
            PRICELEVEL: this.editModel.PRICELEVEL,
            CTYPE: this.editModel.CTYPE,
            ERPPLANTCODE: this.editModel.ERPPLANTCODE,
            CBALANCE: this.editModel.CBALANCE,
            PType: this.editModel.PType,
            MAPID: this.editModel.MAPID,
            ACCODE: this.editModel.ACCODE,
            ACID: this.editModel.ACID,
            TYPE: this.editModel.TYPE,
            isAutoGSTApplicable: this.editModel.isAutoGSTApplicable,
            isRCMApplicable: this.editModel.isRCMApplicable,
            isReverseChargeApplicable: this.editModel.isReverseChargeApplicable
        });
        this.geo = this.editModel.GEO;
    };
    PLedgerComponent.prototype.onFormChanges = function () {
        var _this = this;
        this.form.valueChanges.subscribe(function () {
            if (_this.form.dirty)
                _this.preventNavigationService.preventNavigation(true);
        });
    };
    PLedgerComponent.prototype.majorgroupChange = function () {
        this.filter(this.form.get("majorparent").value);
    };
    PLedgerComponent.prototype.filter = function (majorparent) {
        var _this = this;
        this.MasterService.getpartyListTree().subscribe(function (data) {
            var f = data.filter(function (x) { return x.ACID == majorparent; })[0];
            if (f != null) {
                _this.acParentList = f.children;
            }
        });
    };
    PLedgerComponent.prototype.SumbitSave = function () {
        var _this = this;
        var gsttype = this.form.get("GSTTYPE").value;
        if (gsttype == "Regular" || gsttype == "Composite") {
            if (this.form.get("GSTNO").value == null || this.form.get("GSTNO").value == "") {
                this.alertService.error("Please insert the GST NO.");
                return;
            }
        }
        //console.log("gstsss",gsttype);
        if (this.PType == 'C') {
            if (this.form.get("CUSTOMERID").value == "" || this.form.get("CUSTOMERID").value == null) {
                this.alertService.warning("Customer-ID is required!");
                return;
            }
        }
        if (this.PType == 'V') {
            if (this.form.get('ERPPLANTCODE').value == "" || this.form.get('ERPPLANTCODE').value == null) {
                this.alertService.warning("ERPPLANTCODE is required!");
                return;
            }
        }
        if (this.form.value.MOBILE.length != 10) {
            this.alertService.warning("Mobile number is invalid! Please enter atleast 10 digit number. ");
            return;
        }
        if (this.form.value.VATNO) {
            // console.log({ billtotel: parseFloat(this.form.value.VATNO) });
            var pno = parseFloat(this.form.value.VATNO);
            // if (pno.toString().length != 9) {
            //   this.alertService.error("PAN No is not correct");
            //   return;
            // }
        }
        try {
            var al = {};
            this.form.value.MAPID = "N";
            if (this.mode == "edit") {
                al.ACID = this.ACID;
            }
            var saveModel = this.form.value;
            if (this.PType == 'C') {
                saveModel.PType = "C";
            }
            else {
                saveModel.PType = "V";
            }
            saveModel.GEO = this.geo;
            saveModel.PRICELEVEL = this.geo;
            saveModel.TYPE = "A";
            if (this.mode != "edit") {
                saveModel.PARENT = "PA";
            }
            saveModel.ACNAME = this.form.controls['ACNAME'].value;
            saveModel.SHORTNAME = this.form.controls['SHORTNAME'].value;
            saveModel.ACCODE = saveModel.CUSTOMERID = this.form.controls['CUSTOMERID'].value;
            saveModel.VATNO = this.form.controls['VATNO'].value;
            saveModel.LEVELS = 10;
            // saveModel.ACCODE = this.form.controls['ACCODE'].value;
            saveModel.CRLIMIT = this.form.controls['CRLIMIT'].value;
            this.loadingService.show("Saving Data please wait...");
            var sub = this.MasterService.saveAccount(this.mode, saveModel, this.SOTableList).subscribe(function (data) {
                _this.loadingService.hide();
                if (data.status == "ok") {
                    _this.alertService.success("Data Saved Successfully");
                    _this.preventNavigationService.preventNavigation(false);
                    setTimeout(function () {
                        _this.onClose.emit(true);
                        _this.router.navigate([_this.returnUrl]);
                    }, 1000);
                }
                else {
                    //alert(data.result);
                    //the ConnectionString in the server is not initialized means the the token 's user is not int the list of database user so it could't make connectionstring. Re authorization is requierd
                    if (data.result._body ==
                        "The ConnectionString property has not been initialized.") {
                        _this.router.navigate(["/login", _this.router.url]);
                        return;
                    }
                    //Some other issues need to check
                    _this.alertService.error("Error in Saving Data:" + data.result._body);
                }
            }, function (error) {
                _this.loadingService.hide();
                _this.alertService.error(error);
            });
            this.subcriptions.push(sub);
        }
        catch (e) {
            this.alertService.error(e);
        }
    };
    PLedgerComponent.prototype.cancel = function () {
        try {
            this.router.navigate([this.returnUrl]);
        }
        catch (ex) {
            console.log(ex);
            this.alertService.error(ex);
        }
    };
    PLedgerComponent.prototype.changePtype = function (value) {
        this.form.get("Ptype").patchValue(value);
    };
    PLedgerComponent.prototype.onGrpChange = function (event, i, selected) {
        var _this = this;
        try {
            if (selected) {
                // this.actype = selected.ACTYPE
                // this.changeACtype(selected.ACTYPE);
                // this.disableActype == true;
                //latest selected
                this.parentGroup = selected;
            }
            //let newGroup: GroupAccounts = event.value;
            console.log({
                onGrpChangeEvent: event,
                eventIndex: i,
                selected: selected
            });
            var opt_1 = [];
            var ind = i;
            if (event) {
                if (this.acGroups.length > ind + 1) {
                    this.acGroups.splice(ind + 1, this.acGroups.length - 1);
                }
                // console.log({ GroupchageEvent: event, value: event.value.ACNAME });
                this.lastParentID = event.value.ACID;
                this.PartyService.getChildrenGroups(event.value.ACID)
                    .flatMap(function (data) { return data; })
                    .subscribe(function (data) {
                    // console.log({ children: data });
                    if (data.TYPE == "G")
                        opt_1.push({ label: data.ACNAME, value: data });
                }, function (Error) { return console.log({ groupchangeError: Error }); }, function () {
                    if (opt_1.length > 0) {
                        _this.acGroups.push({
                            group: event.value.ACNAME,
                            value: event.value,
                            options: opt_1
                        });
                    }
                    //this.groupListSubject.next(subjectData);
                    // console.log({ negroup2: { group: event.value.ACNAME, value: event.value, options: opt }, subjectData2: subjectData });
                });
            }
        }
        catch (ex) {
            console.log({ onGroupChange: ex });
        }
    };
    PLedgerComponent.prototype.getGroups = function () {
        var _this = this;
        //console.log("Has SUB is false");
        this.actype = "";
        this.disableActype = false;
        this.acGroups = [];
        this.getMainGroup();
        if (!this.ACID)
            return;
        console.log({ acid: this.ACID });
        this.PartyService.getParentGroups(this.ACID)
            .flatMap(function (data) { return data; })
            .subscribe(function (data) {
            try {
                data.SELECTEDGROUPAC = data.CHILDLIST.find(function (itm) { return itm.ACID == data.SELECTEDGROUP; });
                _this.parentGroup = data.SELECTEDGROUPAC;
                console.log({
                    selectedGroup: data.SELECTEDGROUP,
                    selectedGroupAC: data.SELECTEDGROUPAC
                });
                // if (data.SELECTEDGROUPAC.HASSUBLEDGER == 1 && this.hasSubLedger == 0) {
                //     this.hasSubLedger = 1;
                //     this.changehassubEvent(true);
                //     this.disableHassubledger = true;
                //     //console.log("Disable AHS SUB")
                // }
                var opt_2 = [];
                data.CHILDLIST.forEach(function (child) {
                    opt_2.push({ label: child.ACNAME, value: child });
                });
                _this.acGroups.push({
                    group: data.ACNAME,
                    value: data,
                    options: opt_2
                });
            }
            catch (ex) {
                console.log({ getParentGroups: ex });
            }
        }, function (error) {
            console.log({ getgroupError: error });
        }, function () {
            if (_this.acGroups.length > 1) {
                var selectedGroup = _this.acGroups[0].options.find(function (itm) { return itm.value.ACID == _this.acGroups[1].value.ACID; });
                if (selectedGroup) {
                    _this.acGroups[0].value.SELECTEDGROUPAC = selectedGroup.value;
                }
                // console.log({ selectedGroupValue: selectedGroup.value });
                // if (selectedGroup.value.Ptype) {
                //     alert("REACHED")
                //     this.actype = selectedGroup.value.Ptype
                //     this.changePtype(selectedGroup.value.Ptype);
                //     this.disableActype == true;
                // }
                // console.log({groupTofind:this.acGroups[1],options:this.acGroups[0].options,selected:this.acGroups[0].value.SELECTEDGROUPAC,selected2:this.acGroups[1].value.SELECTEDGROUPAC})
            }
        });
        return;
    };
    PLedgerComponent.prototype.getMainGroup = function () {
        var opt = [];
        this.PartyService.getTopGroups()
            .flatMap(function (data) { return data; })
            .subscribe(function (data) {
            opt.push({ label: data.ACNAME, value: data });
        });
        this.acGroups.push({
            group: "Main Group",
            value: { ACNAME: "MAIN GROUP", ACID: null, PARENT: null },
            options: opt
        });
    };
    PLedgerComponent.prototype.clickedNotActive = function (value) {
        if (this.form == null) {
            return;
        }
        this.form.get("isNotActive").patchValue(value);
    };
    PLedgerComponent.prototype.NotActive = function () { };
    PLedgerComponent.prototype.RouteClick = function (value) {
        this.RCODE = value;
        // //console.log("RouteClick", value)
        this.PartyService.getSOFromRoute(value).subscribe(function (res) {
            // //console.log("RES", res)
            // if (res.status == "ok") {
            //   this.solist = res.result;
            // }
        });
    };
    PLedgerComponent.prototype.SOChange = function (value) {
        var soName = this.solist.filter(function (x) { return x.CODE == value; })[0];
        //console.log("Changed", soName);
        this.form.patchValue({
            SO: soName ? soName.CODE : ""
        });
    };
    PLedgerComponent.prototype.RouteAdd = function () {
        var a = {};
        var formValue = this.form.value;
        var route = this.RouteList.filter(function (x) { return x.RouteCode == formValue.ROUTE; })[0];
        var soName = this.solist.filter(function (x) { return x.CODE == formValue.SO; })[0];
        if (soName == undefined || soName == null) {
            this.alertService.info("All fields are required.");
            return;
        }
        a.SONAME = soName ? soName.NAME : "";
        a.RouteName = route ? route.RouteName : "";
        a.SOCODE = soName ? soName.CODE : "";
        a.PCL = soName ? soName.PCL : "";
        this.SOTableList.push(a);
        this.form.patchValue({
            ROUTE: "",
            SO: "",
            SONAME: "",
            RouteDays: ""
        });
    };
    PLedgerComponent.prototype.deleteSOList = function (index) {
        this.SOTableList.splice(index, 1);
    };
    PLedgerComponent.prototype.ChangePMODE = function (value) {
        this.Crvalue = value;
        if (value == "credit" || value == "cashandcredit") {
            this.CrDisabled = 'enable';
        }
        else {
            this.CrDisabled = 'disabled';
            this.form.patchValue({
                CRLIMIT: 0,
                CRPERIOD: 0
            });
        }
    };
    PLedgerComponent.prototype.CreditDisabled = function () {
        try {
            if (this.Crvalue == "credit" || this.Crvalue == 'cashandcredit') {
                this.CrDisabled = 'enable';
                return "white";
            }
            else {
                this.CrDisabled = 'disabled';
                return "#EBEBE4";
            }
        }
        catch (ex) {
            console.log(ex);
            this.alertService.error(ex);
        }
    };
    PLedgerComponent.prototype.changePriceLevel = function () {
        alert("Changes on Pricelevel will affects the Category also!");
    };
    return PLedgerComponent;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["Output"])("onClose"),
    __metadata("design:type", Object)
], PLedgerComponent.prototype, "onClose", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["Input"])(),
    __metadata("design:type", String)
], PLedgerComponent.prototype, "rootID", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["Input"])(),
    __metadata("design:type", String)
], PLedgerComponent.prototype, "PType", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["Input"])(),
    __metadata("design:type", String)
], PLedgerComponent.prototype, "mode", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["Input"])(),
    __metadata("design:type", String)
], PLedgerComponent.prototype, "grp", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["Output"])(),
    __metadata("design:type", Object)
], PLedgerComponent.prototype, "SavePartyEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["Input"])(),
    __metadata("design:type", Number)
], PLedgerComponent.prototype, "fromTree", void 0);
PLedgerComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["Component"])({
        selector: "PLedger",
        template: __webpack_require__(1363),
        providers: [__WEBPACK_IMPORTED_MODULE_6__PLedger_service__["a" /* PLedgerservice */], __WEBPACK_IMPORTED_MODULE_7__common_Transaction_Components_transaction_service__["a" /* TransactionService */]],
        styles: [__webpack_require__(9), __webpack_require__(39)]
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_8__common_services_navigation_perventor_navigation_perventor_service__["a" /* PreventNavigationService */],
        __WEBPACK_IMPORTED_MODULE_9__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_10__common_services_spinner_spinner_service__["a" /* SpinnerService */],
        __WEBPACK_IMPORTED_MODULE_4__common_repositories_masterRepo_service__["a" /* MasterRepo */],
        __WEBPACK_IMPORTED_MODULE_6__PLedger_service__["a" /* PLedgerservice */],
        __WEBPACK_IMPORTED_MODULE_2__angular_router__["Router"],
        __WEBPACK_IMPORTED_MODULE_2__angular_router__["ActivatedRoute"],
        __WEBPACK_IMPORTED_MODULE_3__angular_forms__["FormBuilder"],
        __WEBPACK_IMPORTED_MODULE_0__angular_material__["a" /* MdDialog */],
        __WEBPACK_IMPORTED_MODULE_5__common_services_permission__["a" /* AuthService */],
        __WEBPACK_IMPORTED_MODULE_7__common_Transaction_Components_transaction_service__["a" /* TransactionService */]])
], PLedgerComponent);



/***/ }),

/***/ 1235:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common_repositories_masterRepo_service__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_http__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__common_services_permission__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_rxjs_subject__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_rxjs_subject___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_rxjs_subject__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__global_state__ = __webpack_require__(14);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PLedgerservice; });








var PLedgerservice = (function () {
    function PLedgerservice(http, activatedRoute, authService, state, masterService) {
        this.http = http;
        this.activatedRoute = activatedRoute;
        this.authService = authService;
        this.state = state;
        this.masterService = masterService;
    }
    Object.defineProperty(PLedgerservice.prototype, "apiUrl", {
        get: function () {
            var url = this.state.getGlobalSetting("apiUrl");
            var apiUrl = "";
            if (!!url && url.length > 0) {
                apiUrl = url[0];
            }
            ;
            return apiUrl;
        },
        enumerable: true,
        configurable: true
    });
    PLedgerservice.prototype.getParentWisePartyList = function (ACID) {
        return this.http.get(this.apiUrl + '/getParentWiseAccount/' + ACID, this.getRequestOption()).flatMap(function (response) { return response.json() || []; });
    };
    PLedgerservice.prototype.getNewValues = function (mcode) {
        var res = { status: "error", result: "" };
        var returnSubject = new __WEBPACK_IMPORTED_MODULE_6_rxjs_subject__["Subject"]();
        this.http.get(this.apiUrl + '/getNewValues/' + mcode, this.getRequestOption()).subscribe(function (response) {
            var data = response.json();
            if (data.status == 'ok') {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
            else {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
        }, function (error) {
            res.status = 'error';
            res.result = error;
            returnSubject.next(res);
            returnSubject.unsubscribe();
        });
        return returnSubject;
    };
    PLedgerservice.prototype.getPartyList = function (mcode) {
        var res = { status: "error", result: "" };
        var returnSubject = new __WEBPACK_IMPORTED_MODULE_6_rxjs_subject__["Subject"]();
        this.http.get(this.apiUrl + '/getPartyList/' + mcode, this.getRequestOption()).subscribe(function (response) {
            var data = response.json();
            if (data.status == 'ok') {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
            else {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
        }, function (error) {
            res.status = 'error';
            res.result = error;
            returnSubject.next(res);
            returnSubject.unsubscribe();
        });
        return returnSubject;
    };
    PLedgerservice.prototype.getAllParty = function (ACID) {
        var res = { status: "error", result: "" };
        var returnSubject = new __WEBPACK_IMPORTED_MODULE_6_rxjs_subject__["Subject"]();
        this.http.get(this.apiUrl + '/getAllData/' + ACID, this.getRequestOption()).subscribe(function (response) {
            var data = response.json();
            if (data.status == 'ok') {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
            else {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
        }, function (error) {
            res.status = 'error';
            res.result = error;
            returnSubject.next(res);
            returnSubject.unsubscribe();
        });
        return returnSubject;
    };
    PLedgerservice.prototype.savePartyList = function (mode, prodObj, RGLIST, AlternateUnits, PBarCodeCollection) {
        var res = { status: "error", result: "" };
        var returnSubject = new __WEBPACK_IMPORTED_MODULE_6_rxjs_subject__["Subject"]();
        var opt = this.getRequestOption();
        var hd = new __WEBPACK_IMPORTED_MODULE_2__angular_http__["Headers"]({ 'Content-Type': 'application/json' });
        var op = new __WEBPACK_IMPORTED_MODULE_2__angular_http__["RequestOptions"]();
        var bodyData = { mode: mode, data: { product: prodObj, rglist: RGLIST, alternateunits: AlternateUnits, pbarcodes: PBarCodeCollection } };
        ////console.log("product json");
        var data = JSON.stringify(bodyData, undefined, 2);
        //console.log(data);
        this.http.post(this.apiUrl + "/savePartyList", bodyData, this.getRequestOption())
            .subscribe(function (data) {
            var retData = data.json();
            //console.log(retData);
            if (retData.status == "ok") {
                res.status = "ok";
                res.result = retData.result;
                returnSubject.next(res);
                returnSubject.unsubscribe();
            }
            else {
                res.status = "error1";
                res.result = retData.result;
                //console.log(res);
                returnSubject.next(res);
                returnSubject.unsubscribe();
            }
        }, function (error) {
            res.status = "error2", res.result = error;
            //console.log(res);
            returnSubject.next(res);
            returnSubject.unsubscribe();
        });
        return returnSubject;
    };
    PLedgerservice.prototype.getRequestOption = function () {
        var headers = new __WEBPACK_IMPORTED_MODULE_2__angular_http__["Headers"]({ 'Content-type': 'application/json', 'Authorization': this.authService.getAuth().token });
        //console.log({ headers: headers });
        return new __WEBPACK_IMPORTED_MODULE_2__angular_http__["RequestOptions"]({ headers: headers });
    };
    PLedgerservice.prototype.getParentGroups = function (acid) {
        var _this = this;
        //console.log({ acid: acid })
        return new __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__["Observable"](function (observer) {
            _this.http.get(_this.masterService.apiUrl + '/getParents?acid=' + acid, _this.masterService.getRequestOption())
                .map(function (data) {
                //console.log({ parentGrop: data })
                return data.json();
            })
                .subscribe(function (res) {
                if (res.status == 'ok') {
                    observer.next(res.result);
                }
            }, function (error) {
                _this.masterService.resolveError(error, 'getParents');
                observer.complete();
            }, function () {
                observer.complete();
            });
        });
    };
    PLedgerservice.prototype.getChildrenGroups = function (acid) {
        var _this = this;
        //console.log({ getChildrenAcid: acid, url: this.masterService.apiUrl + '/getChildren?' + acid });
        return new __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__["Observable"](function (observer) {
            _this.http.get(_this.masterService.apiUrl + '/getChildren?acid=' + acid, _this.masterService.getRequestOption())
                .map(function (data) { return data.json(); })
                .subscribe(function (res) {
                //console.log({ getChildrenResult: res });
                observer.next(res.result);
            }, function (error) {
                _this.masterService.resolveError(error, 'getChildren');
                observer.complete();
            }, function () {
                observer.complete();
            });
        });
    };
    PLedgerservice.prototype.getTopGroups = function () {
        var _this = this;
        return new __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__["Observable"](function (observer) {
            _this.http.get(_this.masterService.apiUrl + '/getTopPartyGroups', _this.masterService.getRequestOption())
                .map(function (data) { return data.json(); })
                .subscribe(function (res) {
                observer.next(res.result);
            }, function (error) {
                _this.masterService.resolveError(error, 'getTopGroups');
                observer.complete();
            }, function () {
                observer.complete();
            });
        });
    };
    PLedgerservice.prototype.getPartyGroupByPtype = function (pType) {
        var res = { status: "error", result: "" };
        var returnSubject = new __WEBPACK_IMPORTED_MODULE_6_rxjs_subject__["Subject"]();
        this.http.get(this.apiUrl + '/getPartyGroup/' + pType, this.getRequestOption()).subscribe(function (response) {
            var data = response.json();
            if (data.status == 'ok') {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
            else {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
        }, function (error) {
            res.status = 'error';
            res.result = error;
            returnSubject.next(res);
            returnSubject.unsubscribe();
        });
        return returnSubject;
    };
    PLedgerservice.prototype.getDIV = function () {
        var res = { status: "error", result: "" };
        var returnSubject = new __WEBPACK_IMPORTED_MODULE_6_rxjs_subject__["Subject"]();
        this.http.get(this.apiUrl + '/getDIV', this.getRequestOption()).subscribe(function (response) {
            var data = response.json();
            if (data.status == 'ok') {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
            else {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
        }, function (error) {
            res.status = 'error';
            res.result = error;
            returnSubject.next(res);
            returnSubject.unsubscribe();
        });
        return returnSubject;
    };
    PLedgerservice.prototype.getPartyItemByPtype = function (pType) {
        var res = { status: "error", result: "" };
        var returnSubject = new __WEBPACK_IMPORTED_MODULE_6_rxjs_subject__["Subject"]();
        this.http.get(this.apiUrl + '/getPartyItem/' + pType, this.getRequestOption()).subscribe(function (response) {
            var data = response.json();
            if (data.status == 'ok') {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
            else {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
        }, function (error) {
            res.status = 'error';
            res.result = error;
            returnSubject.next(res);
            returnSubject.unsubscribe();
        });
        return returnSubject;
    };
    PLedgerservice.prototype.getAccountLedgerItem = function (prefix) {
        if (prefix === void 0) { prefix = ''; }
        var res = { status: "error", result: "" };
        var returnSubject = new __WEBPACK_IMPORTED_MODULE_6_rxjs_subject__["Subject"]();
        this.http.get(this.apiUrl + '/getAccountItem/' + prefix, this.getRequestOption()).subscribe(function (response) {
            var data = response.json();
            if (data.status == 'ok') {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
            else {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
        }, function (error) {
            res.status = 'error';
            res.result = error;
            returnSubject.next(res);
            returnSubject.unsubscribe();
        });
        return returnSubject;
    };
    PLedgerservice.prototype.getAllAccount = function () {
        var res = { status: "error", result: "" };
        var returnSubject = new __WEBPACK_IMPORTED_MODULE_6_rxjs_subject__["Subject"]();
        this.http.get(this.apiUrl + '/getAllAccountItem/', this.getRequestOption()).subscribe(function (response) {
            var data = response.json();
            if (data.status == 'ok') {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
            else {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
        }, function (error) {
            res.status = 'error';
            res.result = error;
            returnSubject.next(res);
            returnSubject.unsubscribe();
        });
        return returnSubject;
    };
    PLedgerservice.prototype.getAccountLedgerGroup = function () {
        var res = { status: "error", result: "" };
        var returnSubject = new __WEBPACK_IMPORTED_MODULE_6_rxjs_subject__["Subject"]();
        this.http.get(this.apiUrl + '/getAccountGroup', this.getRequestOption()).subscribe(function (response) {
            var data = response.json();
            if (data.status == 'ok') {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
            else {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
        }, function (error) {
            res.status = 'error';
            res.result = error;
            returnSubject.next(res);
            returnSubject.unsubscribe();
        });
        return returnSubject;
    };
    PLedgerservice.prototype.getHierachy = function () {
        var res = { status: "error", result: "" };
        var returnSubject = new __WEBPACK_IMPORTED_MODULE_6_rxjs_subject__["Subject"]();
        this.http.get(this.apiUrl + '/getAllHierachy', this.getRequestOption()).subscribe(function (response) {
            var data = response.json();
            if (data.status == 'ok') {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
            else {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
        }, function (error) {
            res.status = 'error';
            res.result = error;
            returnSubject.next(res);
            returnSubject.unsubscribe();
        });
        return returnSubject;
    };
    PLedgerservice.prototype.getSOFromRoute = function (rcode) {
        var res = { status: "error", result: "" };
        var returnSubject = new __WEBPACK_IMPORTED_MODULE_6_rxjs_subject__["Subject"]();
        this.http.get(this.apiUrl + '/getSOfromRCode/' + rcode, this.getRequestOption()).subscribe(function (response) {
            var data = response.json();
            if (data.status == 'ok') {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
            else {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
        }, function (error) {
            res.status = 'error';
            res.result = error;
            returnSubject.next(res);
            returnSubject.unsubscribe();
        });
        return returnSubject;
    };
    PLedgerservice.prototype.getAllMainGroup = function () {
        var res = { status: "error", result: "" };
        var returnSubject = new __WEBPACK_IMPORTED_MODULE_6_rxjs_subject__["Subject"]();
        this.http.get(this.apiUrl + '/AllPrimaryGroup/', this.getRequestOption()).subscribe(function (response) {
            var data = response.json();
            if (data.status == 'ok') {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
            else {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
        }, function (error) {
            res.status = 'error';
            res.result = error;
            returnSubject.next(res);
            returnSubject.unsubscribe();
        });
        return returnSubject;
    };
    PLedgerservice.prototype.getAllAccountGroup = function () {
        var res = { status: "error", result: "" };
        var returnSubject = new __WEBPACK_IMPORTED_MODULE_6_rxjs_subject__["Subject"]();
        this.http.get(this.apiUrl + '/AllAccountGroup/', this.getRequestOption()).subscribe(function (response) {
            var data = response.json();
            if (data.status == 'ok') {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
            else {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
        }, function (error) {
            res.status = 'error';
            res.result = error;
            returnSubject.next(res);
            returnSubject.unsubscribe();
        });
        return returnSubject;
    };
    return PLedgerservice;
}());
PLedgerservice = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__angular_http__["Http"], __WEBPACK_IMPORTED_MODULE_4__angular_router__["ActivatedRoute"], __WEBPACK_IMPORTED_MODULE_5__common_services_permission__["a" /* AuthService */], __WEBPACK_IMPORTED_MODULE_7__global_state__["a" /* GlobalState */], __WEBPACK_IMPORTED_MODULE_0__common_repositories_masterRepo_service__["a" /* MasterRepo */]])
], PLedgerservice);



/***/ }),

/***/ 1271:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_http__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_services_permission__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_subject__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_subject___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_rxjs_subject__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__global_state__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_repositories_masterRepo_service__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_rxjs_Observable__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_rxjs_Observable__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TreeViewAcService; });








var TreeViewAcService = (function () {
    function TreeViewAcService(http, activatedRoute, authService, state, masterService) {
        this.http = http;
        this.activatedRoute = activatedRoute;
        this.authService = authService;
        this.state = state;
        this.masterService = masterService;
        this.selectAcdivisionList = [];
        this.selectAcdivisionObj = {};
    }
    Object.defineProperty(TreeViewAcService.prototype, "apiUrl", {
        get: function () {
            var url = this.state.getGlobalSetting("apiUrl");
            var apiUrl = "";
            if (!!url && url.length > 0) {
                apiUrl = url[0];
            }
            ;
            return apiUrl;
        },
        enumerable: true,
        configurable: true
    });
    TreeViewAcService.prototype.getParentWiseAccountList = function (ACID) {
        var _this = this;
        this.selectAcdivisionList = [];
        this.selectAcdivisionObj = {};
        //   return this.http.get(this.apiUrl + '/getParentWiseAccount/'+ACID, this.getRequestOption()).flatMap(response => response.json() || []);
        var res = { status: "error", result: "" };
        var returnSubject = new __WEBPACK_IMPORTED_MODULE_4_rxjs_subject__["Subject"]();
        this.http.get(this.apiUrl + '/getParentWiseAccount/' + ACID, this.getRequestOption()).subscribe(function (response) {
            var data = response.json();
            //console.log("CheckValue^^",data);
            if (data.status == 'ok') {
                _this.selectAcdivisionList = data.result2;
                _this.selectAcdivisionObj = data.result;
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
            else {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
        }, function (error) {
            res.status = 'error';
            res.result = error;
            returnSubject.next(res);
            returnSubject.unsubscribe();
        });
        return returnSubject;
    };
    TreeViewAcService.prototype.getAccDivisionMapping = function (ACID) {
        var res = { status: "error", result: "" };
        var returnSubject = new __WEBPACK_IMPORTED_MODULE_4_rxjs_subject__["Subject"]();
        this.http.get(this.apiUrl + '/getParentWiseAccount/' + ACID, this.getRequestOption()).subscribe(function (response) {
            var data = response.json();
            if (data.status == 'ok') {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
            else {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
        }, function (error) {
            res.status = 'error';
            res.result = error;
            returnSubject.next(res);
            returnSubject.unsubscribe();
        });
        return returnSubject;
    };
    TreeViewAcService.prototype.getAccountAutomationGSTRate = function (ACID, parent) {
        return this.http.get(this.apiUrl + ("/getAccountAutomationGSTRate?ACID=" + ACID + "&PARENT=" + parent), this.getRequestOption()).map(function (response) { return response.json() || []; });
    };
    TreeViewAcService.prototype.getNewValues = function (mcode) {
        var res = { status: "error", result: "" };
        var returnSubject = new __WEBPACK_IMPORTED_MODULE_4_rxjs_subject__["Subject"]();
        this.http.get(this.apiUrl + '/getNewValues/' + mcode, this.getRequestOption()).subscribe(function (response) {
            var data = response.json();
            if (data.status == 'ok') {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
            else {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
        }, function (error) {
            res.status = 'error';
            res.result = error;
            returnSubject.next(res);
            returnSubject.unsubscribe();
        });
        return returnSubject;
    };
    // getAccount(ACID:string){
    //          let res={status:"error",result:""};
    //         let returnSubject:Subject<any>=new Subject();
    //        this.http.get(this.apiUrl + '/getAllData/'+ACID, this.getRequestOption()).subscribe(response=>{
    //                 let data = response.json();
    //                 if(data.status == 'ok'){
    //                     returnSubject.next(data);
    //                     returnSubject.unsubscribe();
    //                 }
    //                 else{
    //                     returnSubject.next(data)
    //                     returnSubject.unsubscribe();
    //                 }
    //             },error =>{
    //                 res.status='error';res.result=error;
    //                 returnSubject.next(res);
    //                 returnSubject.unsubscribe();
    //             }
    //             );
    //             return returnSubject;
    //     }
    TreeViewAcService.prototype.getPartyList = function (mcode) {
        var res = { status: "error", result: "" };
        var returnSubject = new __WEBPACK_IMPORTED_MODULE_4_rxjs_subject__["Subject"]();
        this.http.get(this.apiUrl + '/getPartyList/' + mcode, this.getRequestOption()).subscribe(function (response) {
            var data = response.json();
            if (data.status == 'ok') {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
            else {
                returnSubject.next(data);
                returnSubject.unsubscribe();
            }
        }, function (error) {
            res.status = 'error';
            res.result = error;
            returnSubject.next(res);
            returnSubject.unsubscribe();
        });
        return returnSubject;
    };
    TreeViewAcService.prototype.savePartyList = function (mode, prodObj, RGLIST, AlternateUnits, PBarCodeCollection) {
        var res = { status: "error", result: "" };
        var returnSubject = new __WEBPACK_IMPORTED_MODULE_4_rxjs_subject__["Subject"]();
        var opt = this.getRequestOption();
        var hd = new __WEBPACK_IMPORTED_MODULE_0__angular_http__["Headers"]({ 'Content-Type': 'application/json' });
        var op = new __WEBPACK_IMPORTED_MODULE_0__angular_http__["RequestOptions"]();
        var bodyData = { mode: mode, data: { product: prodObj, rglist: RGLIST, alternateunits: AlternateUnits, pbarcodes: PBarCodeCollection } };
        ////console.log("product json");
        var data = JSON.stringify(bodyData, undefined, 2);
        //console.log(data);
        this.http.post(this.apiUrl + "/savePartyList", bodyData, this.getRequestOption())
            .subscribe(function (data) {
            var retData = data.json();
            //console.log(retData);
            if (retData.status == "ok") {
                res.status = "ok";
                res.result = retData.result;
                returnSubject.next(res);
                returnSubject.unsubscribe();
            }
            else {
                res.status = "error1";
                res.result = retData.result;
                //console.log(res);
                returnSubject.next(res);
                returnSubject.unsubscribe();
            }
        }, function (error) {
            res.status = "error2", res.result = error;
            //console.log(res);
            returnSubject.next(res);
            returnSubject.unsubscribe();
        });
        return returnSubject;
    };
    TreeViewAcService.prototype.getRequestOption = function () {
        var headers = new __WEBPACK_IMPORTED_MODULE_0__angular_http__["Headers"]({ 'Content-type': 'application/json', 'Authorization': this.authService.getAuth().token });
        //console.log({ headers: headers });
        return new __WEBPACK_IMPORTED_MODULE_0__angular_http__["RequestOptions"]({ headers: headers });
    };
    TreeViewAcService.prototype.getParentGroups = function (acid) {
        var _this = this;
        //console.log({acid:acid})
        return new __WEBPACK_IMPORTED_MODULE_7_rxjs_Observable__["Observable"](function (observer) {
            _this.http.get(_this.masterService.apiUrl + '/getParents?acid=' + acid, _this.masterService.getRequestOption())
                .map(function (data) {
                //console.log({parentGrop:data})
                return data.json();
            })
                .subscribe(function (res) {
                if (res.status == 'ok') {
                    observer.next(res.result);
                }
            }, function (error) {
                _this.masterService.resolveError(error, 'getParents');
                observer.complete();
            }, function () {
                observer.complete();
            });
        });
    };
    TreeViewAcService.prototype.getChildrenGroups = function (acid) {
        var _this = this;
        //console.log({getChildrenAcid:acid,url:this.masterService.apiUrl + '/getChildren?' + acid});
        return new __WEBPACK_IMPORTED_MODULE_7_rxjs_Observable__["Observable"](function (observer) {
            _this.http.get(_this.masterService.apiUrl + '/getChildren?acid=' + acid, _this.masterService.getRequestOption())
                .map(function (data) { return data.json(); })
                .subscribe(function (res) {
                //console.log({getChildrenResult:res});
                observer.next(res.result);
            }, function (error) {
                _this.masterService.resolveError(error, 'getChildren');
                observer.complete();
            }, function () {
                observer.complete();
            });
        });
    };
    TreeViewAcService.prototype.getTopGroups = function () {
        var _this = this;
        return new __WEBPACK_IMPORTED_MODULE_7_rxjs_Observable__["Observable"](function (observer) {
            _this.http.get(_this.masterService.apiUrl + '/getTopGroups', _this.masterService.getRequestOption())
                .map(function (data) { return data.json(); })
                .subscribe(function (res) {
                observer.next(res.result);
            }, function (error) {
                _this.masterService.resolveError(error, 'getTopGroups');
                observer.complete();
            }, function () {
                observer.complete();
            });
        });
    };
    return TreeViewAcService;
}());
TreeViewAcService = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_0__angular_http__["Http"], __WEBPACK_IMPORTED_MODULE_2__angular_router__["ActivatedRoute"], __WEBPACK_IMPORTED_MODULE_3__common_services_permission__["a" /* AuthService */], __WEBPACK_IMPORTED_MODULE_5__global_state__["a" /* GlobalState */], __WEBPACK_IMPORTED_MODULE_6__common_repositories_masterRepo_service__["a" /* MasterRepo */]])
], TreeViewAcService);



/***/ }),

/***/ 1363:
/***/ (function(module, exports) {

module.exports = "<style>\r\n  label {\r\n    width: 150px;\r\n    font-size: 15px;\r\n    color: #403c3c;\r\n  }\r\n\r\n  input {\r\n    height: 30px;\r\n  }\r\n</style>\r\n<!-- begin form here -->\r\n<form [formGroup]=\"form\">\r\n  <div class=\"sticky-top\">\r\n    <div class=\"row clearfix\" style=\" padding: 0px 20px;\">\r\n      <div class=\"col-md-6\">\r\n        <h3 class=\"page-title\">{{ Title }}</h3>\r\n      </div>\r\n      <div class=\"col-md-6\" style=\"float: right;\">\r\n        <div class=\"col-md-6\" style=\"display: contents;\">\r\n          <button style=\"float:right\" type=\"button\" (click)=\"cancel()\" title=\"Cancel\" class=\"btn btn-info\">\r\n            Back\r\n          </button>\r\n        </div>\r\n        <button style=\"float:right;margin-right:10px\" type=\"button\" (click)=\"SumbitSave()\" title=\"onSave\"\r\n          class=\"btn btn-info\" [disabled]=\"!this.parentGroup\" *ngIf=\"grp == 'G'\">\r\n          Save\r\n        </button>\r\n        <button style=\"float:right;margin-right:10px\" type=\"button\" [disabled]=\"!form.valid\"  (click)=\"SumbitSave()\" title=\"onSave\"\r\n          class=\"btn btn-info\">\r\n          Save\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"main-container\" style=\"padding-top : 10px; margin-bottom: 0px\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12\">\r\n        <div class=\"tabbable\" id=\"warehouse-tabs\">\r\n          <ul class=\"nav nav-tabs\">\r\n            <li class=\"nav-item\">\r\n              <a class=\"nav-link active\" href=\"#general-info4\" data-toggle=\"tab\">General Info</a>\r\n            </li>\r\n            <li class=\"nav-item\">\r\n              <a class=\"nav-link\" href=\"#contact-details\" data-toggle=\"tab\">Contact Details</a>\r\n            </li>\r\n            <li class=\"nav-item\">\r\n              <a class=\"nav-link\" href=\"#gst\" data-toggle=\"tab\">GST</a>\r\n            </li>\r\n            <li class=\"nav-item\">\r\n              <a class=\"nav-link\" href=\"#other\" data-toggle=\"tab\">Other</a>\r\n            </li>\r\n            <!-- <li class=\"nav-item\">\r\n              <a class=\"nav-link\" href=\"#route\" data-toggle=\"tab\">Route</a>\r\n            </li> -->\r\n          </ul>\r\n          <div class=\"tab-content\">\r\n            <div class=\"tab-pane active\" id=\"general-info4\">\r\n              <!-- General Info -->\r\n              <div class=\"form-group row\">\r\n                <div class=\"col-sm-12\">\r\n                  \r\n                  <div *ngIf='HideACNAME==false' class=\"form-group row col-sm-6\">\r\n                    <label class=\"col-sm-2 form-control-label\">{{ formObj.Name }}<a style=\"color: red\">*</a>:</label>\r\n                    <div class=\"col-sm-6\">\r\n                      <input type=\"text\" class=\"form-control\" formControlName=\"ACNAME\" placeholder=\"Name\" />\r\n                      <div *ngIf=\"\r\n                          !form.controls['ACNAME'].valid &&\r\n                          form.controls['ACNAME']?.touched\r\n                        \" class=\"text-danger\">\r\n                        <span *ngIf=\"form.get('ACNAME').hasError('required')\">\r\n                          Name is required.\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div *ngIf=\"isGroup == 0\">\r\n                    <div *ngIf=\"PType == 'V'\" class=\"form-group row col-sm-6\">\r\n                      <label class=\"col-sm-2 form-control-label\">Precise Name:</label>\r\n                      <div class=\"col-sm-6\">\r\n                        <input type=\"text\" class=\"form-control\" formControlName=\"SHORTNAME\" placeholder=\"Short Name\" />\r\n                      </div>\r\n                    </div>\r\n                    <div *ngIf=\"PType == 'C' && fromTree != 1 \" class=\"form-group row col-sm-6\">\r\n                      <label class=\"col-sm-2 form-control-label\">Customer ID<a style=\"color: red\">*</a> :</label>\r\n                      <div class=\"col-sm-6\">\r\n                        <input type=\"text\" class=\"form-control\" formControlName=\"CUSTOMERID\" placeholder=\"SAP-CODE\" />\r\n                      </div>\r\n                    </div>\r\n                    <div *ngIf=\"PType == 'C' && fromTree != 1 \" class=\"form-group row col-sm-6\">\r\n                      <label class=\"col-sm-2 form-control-label\">Category:</label>\r\n                      <div class=\"col-sm-6\">\r\n                        <select class=\"form-control\" [(ngModel)]=\"geo\" [ngModelOptions]=\"{standalone:true}\"\r\n                          style=\"height:30px;padding-bottom: 0px;\">\r\n                          <option>None</option>\r\n                          <option *ngFor=\"let i of GeoList\" value=\"{{i.OrgTypeCode}}\">{{\r\n                            i.OrgTypeName\r\n                          }}</option>\r\n                        </select>\r\n                      </div>\r\n                    </div>\r\n                    <div *ngIf=\"PType == 'V'\" class=\"form-group row col-sm-6\">\r\n                      <label class=\"col-sm-2 form-control-label\">Currency :</label>\r\n                      <div class=\"col-sm-6\">\r\n                        <select class=\"form-control\" formControlName=\"Currency\"\r\n                          style=\"height:30px;padding-bottom: 0px;\">\r\n                          <option value=\"INDIAN RUPEE\">INDIAN RUPEE</option>\r\n                          <option value=\"USD\">USD</option>\r\n                        </select>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"form-group row col-sm-6\">\r\n                      <label class=\"col-sm-2 form-control-label\">{{ formObj.PMode }}\r\n                      </label>\r\n                      <div class=\"col-sm-6\">\r\n                        <select class=\"form-control\" formControlName=\"PMODE\" style=\"height:30px;padding-bottom: 0px;\"\r\n                          (change)=\"ChangePMODE($event.target.value)\">\r\n                          <option value=\"cash\">Cash</option>\r\n                          <option value=\"credit\">Credit</option>\r\n                          <option value=\"cashandcredit\">Both Cash and Credit</option>\r\n                        </select>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div class=\"form-group row col-sm-6\">\r\n                      <label class=\"col-sm-2 form-control-label\">Credit Limit:\r\n                      </label>\r\n                      <div class=\"col-sm-6\">\r\n                        <input [style.background-color]=\"CreditDisabled()\"\r\n                          [readOnly]=\"CrDisabled == 'disabled' ? true : false\" type=\"number\" class=\"form-control\"\r\n                          formControlName=\"CRLIMIT\" placeholder=\"CRLIMIT\" />\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"form-group row col-sm-6\">\r\n                      <label class=\"col-sm-2 form-control-label\">Credit Days:\r\n                      </label>\r\n                      <div class=\"col-sm-6\">\r\n                        <input [style.background-color]=\"CreditDisabled()\"\r\n                          [readOnly]=\"CrDisabled == 'disabled' ? true : false\" type=\"number\" class=\"form-control\"\r\n                          formControlName=\"CRPERIOD\" placeholder=\"CRPERIOD\" />\r\n                      </div>\r\n                    </div>\r\n\r\n                    <!-- <div *ngIf=\"PType == 'V'\" class=\"form-group row col-sm-6\">\r\n                      <label class=\"col-sm-2 form-control-label\">Credit Balance:\r\n                      </label>\r\n                      <div class=\"col-sm-6\">\r\n                        <input type=\"number\" class=\"form-control\" formControlName=\"CBALANCE\" placeholder=\"CRPERIOD\" />\r\n                      </div>\r\n                    </div> -->\r\n\r\n                    <div class=\"form-group row col-sm-6\">\r\n                      <label class=\"col-sm-2 form-control-label\">\r\n                        {{ formObj.PSType }} <a style=\"color: red\">*</a></label>\r\n                      <div class=\"col-sm-6\">\r\n                        <select class=\"form-control\" formControlName=\"PSTYPE\" style=\"height:30px;padding-bottom: 0px;\">\r\n                          <option value=\"local\">Local</option>\r\n                          <option value=\"interstate\">Interstate</option>\r\n                        </select>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div *ngIf=\"PType == 'V'\" class=\"form-group row col-sm-6\">\r\n                      <label class=\"col-sm-2 form-control-label\">Branch:</label>\r\n                      <div class=\"col-sm-6\">\r\n                        <select class=\"form-control\" formControlName=\"DIV\" style=\"height:30px;padding-bottom: 0px;\">\r\n                          <option *ngFor=\"let i of BranchList\" value=\"{{ i.INITIAL }}\">{{ i.NAME }}</option>\r\n                        </select>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div class=\"form-group row col-sm-6\">\r\n                      <label class=\"col-sm-2 form-control-label\">GST Type <a style=\"color: red\">*</a></label>\r\n                      <div class=\"col-sm-6\">\r\n                        <select class=\"form-control\" formControlName=\"GSTTYPE\" style=\"height:30px;padding-bottom: 0px;\">\r\n                          <option value=\"Regular\">Regular</option>\r\n                          <option value=\"Composite\">Composite</option>\r\n                          <option value=\"Unregistered\">Unregistered</option>\r\n                          <option value=\"UIN Holder\">UIN Holder</option>\r\n                        </select>\r\n                      </div>\r\n                    </div>\r\n                    <!-- *ngIf=\"PType == 'V'\" -->\r\n                    <div class=\"form-group row col-sm-6\" *ngIf=\"fromTree != 1 && fromTree != 2  \"   >\r\n                      <label class=\"col-sm-2 form-control-label\">Integration Type:</label>\r\n                      <div class=\"col-sm-6\">\r\n                        <select class=\"form-control\" formControlName=\"MAILTYPE\"\r\n                          style=\"height:30px;padding-bottom: 0px;\">\r\n                          <option value=\"None\">None</option>\r\n                          <option value=\"SAP\">SAP</option>\r\n                          <option CSV=\"None\">CSV</option>\r\n                          <option value=\"EDI\">EDI</option>\r\n                          <option value=\"Inline HTML\">Inline HTML</option>\r\n                        </select>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div class=\"form-group row col-sm-6\">\r\n                      <label class=\"col-sm-2 form-control-label\">Status:</label>\r\n                      <div class=\"col-sm-6\">\r\n                        <select class=\"form-control\" formControlName=\"ISACTIVE\"\r\n                          style=\"height:30px;padding-bottom: 0px;\">\r\n                          <option value=1>Active</option>\r\n                          <option value=0>Inactive</option>\r\n                        </select>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"tab-pane\" id=\"contact-details\">\r\n              <!-- Contact Details -->\r\n              <div class=\"form-group row\">\r\n                <div class=\"col-sm-12\">\r\n                  <div class=\"form-group row col-sm-6\">\r\n                    <label class=\"col-sm-6 form-control-label\">Address</label>\r\n                    <div class=\"col-sm-6\">\r\n                      <input type=\"text\" class=\"form-control\" formControlName=\"TEMPADDRESS\" placeholder=\"Temp Address\" />\r\n                    </div>\r\n                  </div>\r\n                  <div *ngIf=\"PType == 'C' && fromTree != 1 \" class=\"form-group row col-sm-6\">\r\n                    <label class=\"col-sm-6 form-control-label\">Shipping Address:</label>\r\n                    <div class=\"col-sm-6\">\r\n                      <input type=\"text\" class=\"form-control\" formControlName=\"ADDRESS\"\r\n                        placeholder=\"Shipping Address\" />\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"form-group row col-sm-6\">\r\n                    <label class=\"col-sm-6 form-control-label\">State <a style=\"color: red\">*</a></label>\r\n                    <div class=\"col-sm-6\">\r\n\r\n                      <select class=\"form-control\" style=\"color:black\" name=\"STATE\" id=\"STATE\" formControlName=\"STATE\">\r\n                        <option *ngFor=\"let i of StateList\" value={{i.StateCode}}>{{i.StateName}}</option>\r\n                      </select>\r\n                      <!-- <div\r\n                        *ngIf=\"\r\n                          !form.controls['STATE'].valid &&\r\n                          form.controls['STATE']?.touched\r\n                        \"\r\n                        class=\"text-danger\"\r\n                      >\r\n                        <span *ngIf=\"form.get('STATE').hasError('required')\">\r\n                          State is required.\r\n                        </span>\r\n                      </div> -->\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"form-group row col-sm-6\">\r\n                    <label class=\"col-sm-2 form-control-label\">City:</label>\r\n                    <div class=\"col-sm-6\">\r\n                      <input type=\"text\" class=\"form-control\" formControlName=\"CITY\" placeholder=\"City\" />\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"form-group row col-sm-6\">\r\n                    <label class=\"col-sm-2 form-control-label\">District:</label>\r\n                    <div class=\"col-sm-6\">\r\n                      <select formControlName=\"DISTRICT\" class=\"form-control\">\r\n                        <option *ngFor=\"let i of DistrictList\" value={{i.Name}} >{{i.Name}}</option>\r\n                        \r\n                      </select>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"form-group row col-sm-6\">\r\n                    <label class=\"col-sm-2 form-control-label\">Area:</label>\r\n                    <div class=\"col-sm-6\">\r\n                      <input type=\"text\" class=\"form-control\" formControlName=\"AREA\" placeholder=\"AREA\" />\r\n                    </div>\r\n                  </div>\r\n                  <div *ngIf=\"PType == 'C'\" class=\"form-group row col-sm-6\">\r\n                    <label class=\"col-sm-2 form-control-label\">Land Mark:</label>\r\n                    <div class=\"col-sm-6\">\r\n                      <input type=\"text\" class=\"form-control\" formControlName=\"LANDMARK\" placeholder=\"LandMark\" />\r\n                      <div *ngIf=\"\r\n                          !form.controls['LANDMARK'].valid &&\r\n                          form.controls['LANDMARK']?.touched\r\n                        \" class=\"text-danger\">\r\n                        <span *ngIf=\"form.get('LANDMARK').hasError('required')\">\r\n                          Postal Code is required.\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"form-group row col-sm-6\">\r\n                    <label class=\"col-sm-2 form-control-label\">Phone:</label>\r\n                    <div class=\"col-sm-6\">\r\n                      <input type=\"text\" class=\"form-control\" formControlName=\"PHONE\" placeholder=\"PHONE\" />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"form-group row col-sm-6\">\r\n                    <label class=\"col-sm-2 form-control-label\">Mobile <a style=\"color: red\">*</a></label>\r\n                    <div class=\"col-sm-6\">\r\n                      <input type=\"text\" class=\"form-control\" formControlName=\"MOBILE\" placeholder=\"MOBILE\" />\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"form-group row col-sm-6\">\r\n                    <label class=\"col-sm-2 form-control-label\">Email </label>\r\n                    <div class=\"col-sm-6\">\r\n                      <input type=\"text\" class=\"form-control\" formControlName=\"EMAIL\" placeholder=\"EMAIL\" />\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div *ngIf=\"PType == 'V'\" class=\"form-group row col-sm-6\">\r\n                    <label class=\"col-sm-2 form-control-label\">Fax</label>\r\n                    <div class=\"col-sm-6\">\r\n                      <input type=\"text\" class=\"form-control\" formControlName=\"FAX\" placeholder=\"FAX\" />\r\n                    </div>\r\n                  </div>\r\n                  <div *ngIf=\"PType == 'V'\" class=\"form-group row col-sm-6\">\r\n                    <label class=\"col-sm-2 form-control-label\">Postal Code\r\n                    </label>\r\n                    <div class=\"col-sm-6\">\r\n                      <input type=\"text\" class=\"form-control\" formControlName=\"POSTALCODE\" placeholder=\"POSTALCODE\" />\r\n                      <div *ngIf=\"\r\n                          !form.controls['POSTALCODE'].valid &&\r\n                          form.controls['POSTALCODE']?.touched\r\n                        \" class=\"text-danger\">\r\n                        <span *ngIf=\"form.get('POSTALCODE').hasError('required')\">\r\n                          Postal Code is required.\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div *ngIf=\"isGroup == 0\" class=\"form-group row col-sm-6\">\r\n                    <label class=\"col-sm-2 form-control-label\">TITLE:</label>\r\n                    <div class=\"col-sm-6\">\r\n                      <select class=\"form-control\" formControlName=\"TITLE\" style=\"height:30px;padding-bottom: 0px;\">\r\n                        <option value=\"Mr\">Mr.</option>\r\n                        <option value=\"Mrs\">Mrs.</option>\r\n                        <option value=\"Mrs\">Others.</option>\r\n                      </select>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"form-group row col-sm-6\">\r\n                    <label class=\"col-sm-2 form-control-label\">Contact Person </label>\r\n                    <div class=\"col-sm-6\">\r\n                      <input type=\"text\" class=\"form-control\" formControlName=\"CONTACTPERSON\" placeholder=\"Contact Person Name\" />\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"form-group row col-sm-6\">\r\n                    <label class=\"col-sm-2 form-control-label\">Person Mobile </label>\r\n                    <div class=\"col-sm-6\">\r\n                      <input type=\"text\" class=\"form-control\" formControlName=\"CONTACTMOBILE\" placeholder=\"Contact Persons Mobile\" />\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"form-group row col-sm-6\">\r\n                    <label class=\"col-sm-2 form-control-label\">Person Email </label>\r\n                    <div class=\"col-sm-6\">\r\n                      <input type=\"text\" class=\"form-control\" formControlName=\"CONTACTEMAIL\" placeholder=\"Contact Persons Email\" />\r\n                    </div>\r\n                  </div>\r\n                  <div *ngIf=\"PType == 'V'&& userProfile.CompanyInfo.ORG_TYPE!= 'retailer' && fromTree != 2  \" class=\"form-group row col-sm-6\">\r\n                      <label class=\"col-sm-6 form-control-label\">ERP Stock Location Code</label>\r\n                      <div class=\"col-sm-6\">\r\n                        <input type=\"text\" class=\"form-control\" formControlName=\"ERPSTOCKLOCATIONCODE\" placeholder=\"ERP Stock Location Code\" />\r\n                      </div>\r\n                    </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"tab-pane\" id=\"gst\">\r\n              <!-- GST  -->\r\n              <div class=\"form-group row\">\r\n                <div class=\"col-sm-12\">\r\n                  <div class=\"form-group row col-sm-6\">\r\n                    <label class=\"col-sm-2 form-control-label\">PANNO:</label>\r\n                    <div class=\"col-sm-6\">\r\n                      <input type=\"text\" class=\"form-control\" formControlName=\"VATNO\" placeholder=\"VNO\" />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"form-group row col-sm-6\">\r\n                    <label class=\"col-sm-2 form-control-label\">GST No:</label>\r\n                    <div class=\"col-sm-6\">\r\n                      <input type=\"text\" class=\"form-control\" formControlName=\"GSTNO\" placeholder=\"GSTNO\" />\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"form-group row col-sm-6\">\r\n                    <label class=\"col-sm-6 form-control-label\">Aadhar No:</label>\r\n                    <div class=\"col-sm-6\">\r\n                      <input type=\"text\" class=\"form-control\" formControlName=\"ADHARNO\" placeholder=\"ANO\" />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"tab-pane\" id=\"other\">\r\n              <!-- OTHER  -->\r\n              <div class=\"form-group row\">\r\n                <div class=\"col-sm-12\">\r\n                  <!-- <div *ngIf=\"PType == 'C'\" class=\"form-group row col-sm-6\">\r\n                    <label class=\"col-sm-2 form-control-label\"\r\n                      >Category/Channel:</label\r\n                    >\r\n                    <div class=\"col-sm-6\">\r\n                      <select\r\n                        class=\"form-control\"\r\n                        formControlName=\"Channel\"\r\n                        style=\"height:30px;padding-bottom: 0px;\"\r\n                      >\r\n                        <option>None</option>\r\n                        <option\r\n                          *ngFor=\"let i of ChannelList\"\r\n                          value=\"i.ChannelCode\"\r\n                          >{{ i.ChannelName }}</option\r\n                        >\r\n                      </select>\r\n                    </div>\r\n                  </div> -->\r\n\r\n                  <div *ngIf=\"PType == 'C'\" class=\"form-group row col-sm-6\">\r\n                    <label class=\"col-sm-2 form-control-label\">Customer Type:</label>\r\n                    <div class=\"col-sm-6\">\r\n                      <select class=\"form-control\" formControlName=\"CTYPE\" style=\"height:30px;padding-bottom: 0px;\">\r\n                        <option value=\"RETAIL INVOICE\">RETAIL INVOICE</option>\r\n                        <option value=\"E-COMMERCE\">E-COMMERCE</option>\r\n                        <option value=\"EXEMPTED\">EXEMPTED</option>\r\n                        <option value=\"TAX INVOICE\">TAX INVOICE</option>\r\n                      </select>\r\n                    </div>\r\n                  </div>\r\n                  <div *ngIf=\"PType == 'C' && fromTree != 1 \" class=\"form-group row col-sm-6\">\r\n                    <label class=\"col-sm-2 form-control-label\">Price Level:</label>\r\n                    <div class=\"col-sm-6\">\r\n                      <select class=\"form-control\" [(ngModel)]=\"geo\" [ngModelOptions]=\"{standalone:true}\"\r\n                        style=\"height:30px;padding-bottom: 0px;\" (change)=\"changePriceLevel()\">\r\n                        <option>None</option>\r\n                        <option *ngFor=\"let i of GeoList\" value=\"{{i.OrgTypeCode}}\">{{\r\n                          i.OrgTypeName\r\n                        }}</option>\r\n                      </select>\r\n                    </div>\r\n                  </div>\r\n                  <!-- <div *ngIf=\"PType == 'C'\" class=\"form-group row col-sm-6\">\r\n                    <label class=\"col-sm-2 form-control-label\"\r\n                      >Price Level Config:</label\r\n                    >\r\n                    <div class=\"col-sm-6\">\r\n                      <select\r\n                        class=\"form-control\"\r\n                        formControlName=\"PRICELEVELCONFIG\"\r\n                        style=\"height:30px;padding-bottom: 0px;\"\r\n                      >\r\n                        <option value=\"None\">None</option>\r\n                        <option value=\"Apply from Pricelevl Master\"\r\n                          >Apply from Pricelevl Master</option\r\n                        >\r\n                        <option value=\"Apply from Pricelevel Table\"\r\n                          >Apply from Pricelevel Table</option\r\n                        >\r\n                        <option value=\"Apply from PL.Table then PL.Master\"\r\n                          >Apply from PL.Table then PL.Master</option\r\n                        >\r\n                      </select>\r\n                    </div>\r\n                  </div>  -->\r\n                  <!-- <div *ngIf=\"PType == 'V'\" class=\"form-group row col-sm-6\">\r\n                    <label class=\"col-sm-2 form-control-label\">ERP Plant Code<a style=\"color: red\">*</a></label>\r\n                    <div class=\"col-sm-6\">\r\n                      <input type=\"text\" class=\"form-control\" formControlName=\"ERPPLANTCODE\" placeholder=\"SAP-CODE\" />\r\n                    </div>\r\n                  </div> -->\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"tab-pane\" id=\"route\">\r\n              <!-- ROUTE -->\r\n              <div class=\"form-group row\">\r\n                <div class=\"col-sm-6\">\r\n                  <div class=\"form-group row col-sm-12\">\r\n                    <label class=\"col-sm-2 form-control-label\">Route:</label>\r\n                    <div class=\"col-sm-6\">\r\n                      <select class=\"form-control\" formControlName=\"ROUTE\" style=\"height:30px;padding-bottom: 0px;\"\r\n                        (change)=\"RouteClick($event.target.value)\">\r\n                        <option>None</option>\r\n                        <option *ngFor=\"let i of RouteList\" value=\"{{ i.RouteCode }}\">{{ i?.RouteName }}</option>\r\n                      </select>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"form-group row col-sm-12\">\r\n                    <label class=\"col-sm-2 form-control-label\">Sales Officer:</label>\r\n                    <div class=\"col-sm-6\">\r\n                      <select class=\"form-control\" formControlName=\"SO\" style=\"height:30px;padding-bottom: 0px;\"\r\n                        (change)=\"SOChange($event.target.value)\">\r\n                        <option>None</option>\r\n                        <option [value]=\"i.CODE\" *ngFor=\"let i of solist\">{{\r\n                          i.NAME\r\n                        }}</option>\r\n                      </select>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"form-group row col-sm-12\">\r\n                    <label class=\"col-sm-2 form-control-label\">Officer Code:</label>\r\n                    <div class=\"col-sm-6\">\r\n                      <select class=\"form-control\" formControlName=\"SO\" (change)=\"SOChange($event.target.value)\"\r\n                        style=\"height:30px;padding-bottom: 0px;\">\r\n                        <option>None</option>\r\n                        <option [value]=\"i.CODE\" *ngFor=\"let i of solist\">{{ i.CODE }}</option>\r\n                      </select>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"form-group row col-sm-12\">\r\n                    <label class=\"col-sm-2 form-control-label\">Route Days:</label>\r\n                    <div class=\"col-sm-6\">\r\n                      <select class=\"form-control\" formControlName=\"RouteDays\" style=\"height:30px;padding-bottom: 0px;\">\r\n                        <option>Sunday</option>\r\n                        <option>Monday</option>\r\n                        <option>Tuesday</option>\r\n                        <option>Wednesday</option>\r\n                        <option>Thursday</option>\r\n                        <option>Friday</option>\r\n                        <option>Saturday</option>\r\n                      </select>\r\n                    </div>\r\n                  </div>\r\n                  <button type=\"button\" class=\"btn btn-secondary\" (click)=\"RouteAdd()\">\r\n                    Add\r\n                  </button>\r\n                </div>\r\n\r\n                <div class=\"col-sm-6\">\r\n                  <div class=\"form-group row col-sm-12\" style=\"border: 1px solid #cccccc;    height: 180px;\">\r\n                    <table style=\"width:100%;height: 110px;\">\r\n                      <tr>\r\n                        <th style=\"width:5%\">SNO</th>\r\n                        <th style=\"width:35%\">Route Name</th>\r\n                        <th style=\"width:35%\">Sales Officer</th>\r\n                        <th style=\"width:20%\">Officer Code</th>\r\n\r\n                        <th style=\"width:5%\"></th>\r\n                      </tr>\r\n                     <ng-container *ngIf=\"SOTableList.length\">\r\n                      <tr *ngFor=\"let i of SOTableList;let ind = index\">\r\n                        <td>1</td>\r\n                        <td>{{ i?.RouteName }}</td>\r\n                        <td>{{ i?.SONAME }}</td>\r\n                        <td>{{ i?.SOCODE }}</td>\r\n                        <td>\r\n                          <button class=\"glyphicon glyphicon-trash\" (click)=\"deleteSOList(ind)\"></button>\r\n                        </td>\r\n                      </tr>\r\n                     </ng-container>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</form>"

/***/ }),

/***/ 1375:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MasterDialogReport; });


var MasterDialogReport = (function () {
    function MasterDialogReport(dialogref, data) {
        this.dialogref = dialogref;
        this.data = data;
        this.ReportParameters = {};
        this.activeurlpath = data.activeurlpath;
        this.currentreportparam = data.reportparam;
    }
    MasterDialogReport.prototype.reportdataEmit = function (event) {
        this.dialogref.close(event);
    };
    return MasterDialogReport;
}());
MasterDialogReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'masterdreportdialog',
        template: __webpack_require__(1743),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
    }),
    __param(1, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object])
], MasterDialogReport);



/***/ }),

/***/ 1376:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ReportsComponent; });


var ReportsComponent = (function () {
    function ReportsComponent(reportFilterService) {
        this.reportFilterService = reportFilterService;
    }
    return ReportsComponent;
}());
ReportsComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'report',
        template: '<router-outlet></router-outlet>'
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__components_ReportMain_ReportMain_service__["a" /* ReportMainService */]])
], ReportsComponent);



/***/ }),

/***/ 1377:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_ng2_bootstrap__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_repositories_masterRepo_service__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__common_services_permission__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__ReportDialogs_MasterDialogReport_MasterDialogReport__ = __webpack_require__(1375);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_angular2_hotkeys__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_angular2_hotkeys___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_angular2_hotkeys__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_lodash__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_rxjs__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_rxjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_rxjs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_util__ = __webpack_require__(1458);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_util___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_util__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__common_Transaction_Components_transaction_service__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__common_popupLists_report_filter_report_filter_service__ = __webpack_require__(555);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__common_services_spinner_spinner_service__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__context_menu_context_menu_data__ = __webpack_require__(1378);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__ReportMain_service__ = __webpack_require__(211);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ReportMain; });


















var ReportMain = (function () {
    function ReportMain(masterService, authService, router, arouter, dialog, alertService, reportMainService, reportService, spinnerService, _hotkeysService, _trnMainService) {
        var _this = this;
        this.masterService = masterService;
        this.authService = authService;
        this.router = router;
        this.arouter = arouter;
        this.dialog = dialog;
        this.alertService = alertService;
        this.reportMainService = reportMainService;
        this.reportService = reportService;
        this.spinnerService = spinnerService;
        this._hotkeysService = _hotkeysService;
        this._trnMainService = _trnMainService;
        this.reportMaster = {};
        this.mainUrl = "/pages/reports/";
        this.reportHeaders = [];
        this.reportData = [];
        this.reportDetail = [];
        this.reportContextMenu = [];
        this.trialUrl = false;
        this.paramValue = [];
        this.ReportColumnName = [];
        this.reportColumnFormate = [];
        this.hideShow = false;
        this.isVisible = false;
        this.previouslyLoadedReportsList = [];
        this.optionalreportHeaders = [];
        this.reportFooter = [];
        this.hasDynamicColumns = "0";
        this.allHeaders = [];
        this.hasDynamicHeaders = 0;
        this.mergereportHeaders = [];
        this.vouchercount = 0;
        this.gridACListPartyPopupSettings = new __WEBPACK_IMPORTED_MODULE_12__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.checkedRows = [];
        this.celldataList = [];
        // this.rowsperpage = 100;
        this.selectedRowIndex = 0;
        this.userSetting = this.authService.getSetting();
        /**
            * Context menu
            */
        this.contextMenuView = new __WEBPACK_IMPORTED_MODULE_16__context_menu_context_menu_data__["a" /* ContextMenuView */]();
        this.reportLoadedSuccess = false;
        this.activeurlpath = arouter.snapshot.url[0].path;
        this.userProfile = this.authService.getUserProfile();
        this.reportMainService.reportUrlPath = this.activeurlpath;
        // ////console.log("activeUrlPath",this.activeurlpath);
        if (this.activeurlpath == 'debtorsreport') {
            this.instanceWiseRepName = 'Debtors Report0';
        }
        else if (this.activeurlpath == 'summaryledgerreport') {
            this.instanceWiseRepName = 'Summary Ledger Report0';
        }
        else if (this.activeurlpath == 'accountledgerreport') {
            this.instanceWiseRepName = 'Account Ledger Report' + (this.reportMainService.AccLedger_loadedTimes - 1);
        }
        else if (this.activeurlpath == 'creditorsreport') {
            this.instanceWiseRepName = 'Creditors Report0';
        }
        else if (this.activeurlpath == 'summarypartyledger') {
            this.instanceWiseRepName = 'Summary Party Ledger Report' + (this.reportMainService.SummaryParty_loadedTimes - 1);
        }
        else if (this.activeurlpath == 'partyledgerreport') {
            this.instanceWiseRepName = 'Party Ledger Report' + (this.reportMainService.PartyLedger_loadedTimes - 1);
        }
        else if (this.activeurlpath == 'sub-ledger-report-acbase') {
            this.instanceWiseRepName = 'Sub Ledger Report ACBASE' + (this.reportMainService.SubLedgerAcbase_loadedTimes - 1);
        }
        else if (this.activeurlpath == 'sub-ledger-report') {
            this.instanceWiseRepName = 'Sub Ledger Report' + (this.reportMainService.SubLedger_loadedTimes - 1);
        }
        else if (this.activeurlpath == 'debtorsagingreport') {
            this.instanceWiseRepName = 'Debtors Ageing Report0';
        }
        else if (this.activeurlpath == 'creditorsagingreport') {
            this.instanceWiseRepName = 'Creditors Ageing Report0';
        }
        else if (this.activeurlpath == 'debtorsoutstandingreport') {
            this.instanceWiseRepName = 'Debtors Outstanding Report0';
        }
        else if (this.activeurlpath == 'creditorsoutstandingreport') {
            this.instanceWiseRepName = 'Creditors Outstanding Report0';
        }
        else if (this.activeurlpath == 'voucher-regeister-report') {
            this.instanceWiseRepName = 'Voucher Register Report0';
        }
        else if (this.activeurlpath == 'cash-bank-book-report') {
            this.instanceWiseRepName = 'Cash/Bank Book Report0';
        }
        else if (this.activeurlpath == 'day-book-report') {
            this.instanceWiseRepName = 'Day Book Report0';
        }
        else if (this.activeurlpath == 'trial-balance-report') {
            this.instanceWiseRepName = 'Trial Balance Report0';
        }
        else if (this.activeurlpath == 'additionalcost-itemwise-report') {
            this.instanceWiseRepName = 'Additional Cost Itemwise Report0';
        }
        else if (this.activeurlpath == 'additionalcost-voucherwise-report') {
            this.instanceWiseRepName = 'Additional Cost Voucherwise Report0';
        }
        else if (this.activeurlpath == 'salesreturnsummary-report') {
            this.instanceWiseRepName = 'Sales Return Summary Report0';
        }
        else if (this.activeurlpath == 'salesreturnsummaryretailer-report') {
            this.instanceWiseRepName = 'Sales Return Summary Retailer Report0';
        }
        else if (this.activeurlpath == 'salesreturn-reportdetail') {
            this.instanceWiseRepName = 'Sales Return Report Detail0';
        }
        else if (this.activeurlpath == 'stocksummary-reportdms') {
            this.instanceWiseRepName = 'Sales Summary Retailer Report0';
        }
        else if (this.activeurlpath == 'currentstock-warehousewise-reportdms') {
            this.instanceWiseRepName = 'Stock Report - Warehouse Wise0';
        }
        else if (this.activeurlpath == 'stockabc-analysis-reportdms') {
            this.instanceWiseRepName = 'Stock Abc Analysis Report0)';
        }
        else if (this.activeurlpath == 'stocksummary-reportdms') {
            this.instanceWiseRepName = 'Stock Summary Report0)';
        }
        else if (this.activeurlpath == 'stockvaluation-reportdms') {
            this.instanceWiseRepName = 'Stock Valuation Report0)';
        }
        else if (this.activeurlpath == 'stockledger-reportdms') {
            this.instanceWiseRepName = 'Stock Ledger Report0)';
        }
        else if (this.activeurlpath == 'consolidated-trialbalance-report') {
            this.instanceWiseRepName = 'Consolidated Trial Balance Report0';
        }
        else if (this.activeurlpath == 'profit-loss-report') {
            this.instanceWiseRepName = 'Profit Loss Report0';
        }
        else if (this.activeurlpath == 'balance-sheet-report') {
            this.instanceWiseRepName = 'Balance Sheet Report0';
        }
        else if (this.activeurlpath == 'tds-report') {
            this.instanceWiseRepName = 'TDS Report0';
        }
        else if (this.activeurlpath == 'consolidated-balance-sheet-report') {
            this.instanceWiseRepName = 'Consolidated Balance Sheet Report0';
        }
        else if (this.activeurlpath == 'consolidated-profit-loss-report') {
            this.instanceWiseRepName = 'Consolidated Profit and Loss Report0';
        }
        else if (this.activeurlpath == 'incometax-depreciation-report') {
            this.instanceWiseRepName = 'As Per Income Tax Depreciation Report0';
        }
        var existingDataFromReportDataStore = this.reportMainService.reportDataStore[this.instanceWiseRepName];
        this.arouter.queryParams.subscribe(function (params) {
            var mode = params.mode;
            if (mode == "DRILL" && _this.reportService.drillParam.returnUrl) {
                setTimeout(function () {
                    _this.loadReport(_this.reportService.drillParam);
                    _this.reportparam = _this.reportService.drillParam.reportparam;
                    _this.reportname = _this.reportService.drillParam.reportname;
                    if (!_this.rowsperpage) {
                        _this.rowsperpage = 100;
                    }
                    _this.ReportCriteriaDisplay(_this.reportService.drillParam.reportparam, _this.reportService.drillParam.reportname, _this.reportService.drillParam.reportname);
                });
            }
            else {
                if (existingDataFromReportDataStore != null && existingDataFromReportDataStore != undefined) {
                    _this.reportHeaders = existingDataFromReportDataStore.data.result.headers;
                    _this.allHeaders = existingDataFromReportDataStore.data.result.allHeaders;
                    _this.prepareOptionalHeader(_this.reportHeaders);
                    for (var _i = 0, _a = _this.reportHeaders; _i < _a.length; _i++) {
                        var i = _a[_i];
                        if (i.size == null || i.size == 0) {
                            i.width = 'auto';
                        }
                        else {
                            i.width = i.size + 'px';
                        }
                    }
                    _this.loadReportDataFromExistingStore();
                    _this.ReportCriteriaDisplay(_this.reportparam, _this.reportname, _this.showReportName);
                    if (_this.hasDynamicHeaders == 1) {
                        _this.prepareOptionalDynamicHeader(_this.allHeaders);
                    }
                    if (_this.hasDynamicHeaders != 1 && _this.MergeReportHeader != 0) {
                        _this.preparereportHeader(_this.reportHeaders);
                    }
                    else if (_this.hasDynamicHeaders != 1 && _this.MergeReportHeader != 1) {
                        _this.mergereportHeaders = _this.reportHeaders;
                    }
                    else {
                        var sortedArray = __WEBPACK_IMPORTED_MODULE_8_lodash___default.a.sortBy(_this.reportHeaders, 'colPosition');
                        _this.mergereportHeaders = sortedArray;
                    }
                    _this.reportMainService.getReportColumnFormate(_this.reportname)
                        .subscribe(function (res) {
                        if (res.status == "ok") {
                            _this.reportColumnFormate = res.result;
                            _this.rowsperpage = res.result ? res.result[0].rowsperpage : '100';
                        }
                        else {
                            _this.reportColumnFormate = [];
                        }
                    });
                    if (_this.reportColumnFormate.length == 0) {
                        _this.ReportColumnName = _this.reportHeaders.map(function (x) {
                            return {
                                ReportName: _this.reportname,
                                ColumnName: x.colHeader,
                                MappingName: x.mappingName,
                                Show: x.Visible,
                                ColWidth: x.size,
                                Format: x.stringFormat,
                                Align: x.alignment,
                                ColumnPosition: x.colPosition,
                                ColGroup: x.ColGroup,
                                GroupSummary: x.groupSummaryFunction,
                                GSFunction: x.groupSummaryFunction,
                                TableSummary: x.showTables,
                                TSFunction: x.tableSummaryFunction,
                                ReportTitle: _this.reportTitle,
                                rowsperpage: _this.rowsperpage
                            };
                        });
                        _this.ReportColumnName.forEach(function (x, z) { x.Show = 1, x.TableSummary = 0, x.GroupSummary = 0, x.ColumnPosition = z + 1; });
                    }
                    else {
                        _this.ReportColumnName = _this.reportColumnFormate.map(function (x) {
                            return {
                                ReportName: _this.reportname,
                                ColumnName: x.ColumnName,
                                MappingName: x.MappingName,
                                Show: x.Show,
                                ColWidth: x.ColWidth,
                                Format: x.Format,
                                Align: x.Align,
                                ColumnPosition: x.ColumnPosition,
                                ColGroup: x.ColGroup,
                                GroupSummary: x.GroupSummary,
                                GSFunction: x.GSFunction,
                                TableSummary: x.TableSummary,
                                TSFunction: x.TSFunction,
                                ReportTitle: _this.reportTitle,
                                rowsperpage: x.rowsperpage
                            };
                        });
                    }
                }
                else {
                    // ////console.log("@@here?1",params.instancename)
                    if (!params.instancename) {
                        _this.fiterClickEvent();
                    }
                }
            }
        });
        this.previouslyLoadedReportsList = this.reportMainService.previouslyLoadedReportList;
        this._hotkeysService.add(new __WEBPACK_IMPORTED_MODULE_7_angular2_hotkeys__["Hotkey"]('shift+tab', function (event) {
            _this.showPreviouslyLoadedReports();
            return false;
        }));
        this._hotkeysService.add(new __WEBPACK_IMPORTED_MODULE_7_angular2_hotkeys__["Hotkey"]('shift+p', function (event) {
            _this.printExcelFormat();
            return false;
        }));
    }
    ReportMain.prototype.ngOnInit = function () {
        var _this = this;
        if (this.activeurlpath == 'trialbalance') {
            return this.trialUrl = true;
        }
        this._hotkeysService.add(new __WEBPACK_IMPORTED_MODULE_7_angular2_hotkeys__["Hotkey"]("f10", function (event) {
            event.preventDefault();
            _this.hideShow = !_this.hideShow;
            _this.isVisible = !_this.isVisible;
            return false;
        }));
    };
    ReportMain.prototype.ngOnDestroy = function () {
        this.dialog.closeAll();
    };
    ReportMain.prototype.storeAndUpdateReportDataStore = function (reportParam, reportData) {
        // ////console.log("repData",this.instanceWiseRepName);
        this.reportMainService.reportDataStore[this.instanceWiseRepName] = {
            param: reportParam,
            data: reportData
        };
        // ////console.log("daa",this.reportMainService.reportDataStore);
    };
    ReportMain.prototype.loadReport = function (reportData) {
        var _this = this;
        this.DialogMessage = "Report Loading Please Wait...";
        this.childModal.show();
        var agingLimit = this.masterService.userProfile.userRights.find(function (x) { return x.right == 'StockAgeingLimit'; }).value;
        reportData.AgeLimit = agingLimit;
        this.masterService.getReportData(reportData, "/loadReports").subscribe(function (data) {
            var reportresult = data;
            _this.report_Result = reportresult;
            if (reportresult.status == "ok") {
                _this.storeAndUpdateReportDataStore(reportData, reportresult);
                _this.reportHeaders = reportresult.result.headers;
                _this.reportMainService.reportLoadSubject.next();
                _this.reportMainService.assignPrevioiusDate = true;
                for (var _i = 0, _a = _this.reportHeaders; _i < _a.length; _i++) {
                    var i = _a[_i];
                    if (i.size == null || i.size == 0) {
                        i.width = 'auto';
                    }
                    else {
                        i.width = i.size + 'px';
                    }
                }
                _this.prepareOptionalHeader(_this.reportHeaders);
                _this.reportData = reportresult.result.data;
                _this.reportDetail = reportresult.result.repDetails;
                _this.reportmasterDetail = reportresult.result.reportmasterDetail;
                _this.reportContextMenu = reportresult.result.reportContextMenu;
                _this.reportFooter = reportresult.result.totalRowData;
                _this.allHeaders = reportresult.result.allHeaders;
                _this.hasDynamicColumns = _this.reportmasterDetail.HASDYNAMICCOLUMNS;
                _this.dynamicColumnLevel = _this.reportmasterDetail.DYNAMICCOLUMNSLEVEL;
                _this.dynamicColumnWidth = _this.reportmasterDetail.DYNAMICCOLUMNWIDTH;
                _this.hasDynamicHeaders = _this.reportmasterDetail.DYNAMICHEADER;
                _this.leftcolumnnumber = _this.reportmasterDetail.LEFTCOLUMNNUMBER;
                _this.rightcolumnnumber = _this.reportmasterDetail.RIGHTCOLUMNNUMBER;
                _this.MergeReportHeader = _this.reportmasterDetail.MERGEREPORTHEADER;
                _this.ShowLineInFinalReport = _this.reportmasterDetail.SHOWLINEINFINALREPORT;
                if (_this.hasDynamicHeaders != 1 && _this.MergeReportHeader != 0) {
                    _this.preparereportHeader(_this.reportHeaders);
                }
                else if (_this.hasDynamicHeaders != 1 && _this.MergeReportHeader != 1) {
                    _this.mergereportHeaders = _this.reportHeaders;
                }
                if (_this.reportColumnFormate.length == 0) {
                    _this.ReportColumnName = _this.reportHeaders.map(function (x) {
                        return {
                            ReportName: _this.reportname,
                            ColumnName: x.colHeader,
                            MappingName: x.mappingName,
                            Show: x.Visible,
                            ColWidth: x.size,
                            Format: x.stringFormat,
                            Align: x.alignment,
                            ColumnPosition: x.colPosition,
                            ColGroup: x.ColGroup,
                            GroupSummary: x.groupSummaryFunction,
                            GSFunction: x.groupSummaryFunction,
                            TableSummary: x.showTables,
                            TSFunction: x.tableSummaryFunction,
                            ReportTitle: _this.reportTitle,
                            rowsperpage: _this.rowsperpage
                        };
                    });
                    _this.ReportColumnName.forEach(function (x, z) { x.Show = 1, x.TableSummary = 0, x.GroupSummary = 0, x.ColumnPosition = z + 1; });
                }
                else {
                    // ////console.log("reportformat", this.reportColumnFormate)
                    _this.ReportColumnName = _this.reportColumnFormate.map(function (x) {
                        return {
                            ReportName: _this.reportname,
                            ColumnName: x.ColumnName,
                            MappingName: x.MappingName,
                            Show: x.Show,
                            ColWidth: x.ColWidth,
                            Format: x.Format,
                            Align: x.Align,
                            ColumnPosition: x.ColumnPosition,
                            ColGroup: x.ColGroup,
                            GroupSummary: x.GroupSummary,
                            GSFunction: x.GSFunction,
                            TableSummary: x.TableSummary,
                            TSFunction: x.TSFunction,
                            ReportTitle: _this.reportTitle,
                            rowsperpage: x.rowsperpage
                        };
                    });
                    // ////console.log("reportformat", this.ReportColumnName)
                }
                if (_this.reportmasterDetail.HASDYNAMICCOLUMNS) {
                    var dynamicOptionalHeader_1 = 'Default';
                    _this.allHeaders.forEach(function (x, index) {
                        if (_this.reportmasterDetail.DYNAMICHEADER == 1 && x.mappingName.includes("~")) {
                            var abc = x.mappingName.split('~');
                            dynamicOptionalHeader_1 = abc[1];
                        }
                        else {
                            dynamicOptionalHeader_1 = 'Default';
                        }
                        if (index + 1 >= _this.reportmasterDetail.DYNAMICCOLUMNSLEVEL) {
                            _this.reportHeaders.push({
                                alignment: 1,
                                allowMerge: false,
                                colHeader: dynamicOptionalHeader_1 == 'Default' ? x.colHeader : dynamicOptionalHeader_1,
                                colNo: 0,
                                colPosition: dynamicOptionalHeader_1 == 'Default' ? index + 5000 : index + 1,
                                mappingName: x.mappingName,
                                showGroupSummary: false,
                                showTableSummary: false,
                                size: Number(_this.reportmasterDetail.DYNAMICCOLUMNWIDTH),
                                width: Number(_this.reportmasterDetail.DYNAMICCOLUMNWIDTH) + "px",
                                visible: 1,
                            });
                        }
                    });
                    var sortedArray = __WEBPACK_IMPORTED_MODULE_8_lodash___default.a.sortBy(_this.reportHeaders, 'colPosition');
                    // this.reportHeaders=sortedArray;
                    _this.mergereportHeaders = sortedArray;
                    if (_this.reportmasterDetail.DYNAMICHEADER == 1) {
                        _this.prepareOptionalDynamicHeader(_this.allHeaders);
                    }
                }
                _this.DialogMessage = "Report Loaded successfully.";
                _this.reportLoadedSuccess = true;
                setTimeout(function () {
                    _this.childModal.hide();
                }, 2000);
            }
            else {
                _this.DialogMessage = reportresult.result;
                _this.childModal.show();
                setTimeout(function () {
                    _this.childModal.hide();
                }, 3000);
            }
        }, function (Error) {
            // ////console.log("error", Error);
            _this.DialogMessage = Error;
            setTimeout(function () {
                _this.childModal.hide();
            }, 3000);
        });
    };
    // reportDialogChooser(url)
    // {
    //   switch (url) {
    //     case this.mainUrl+"dailysalessummary":
    //         this.dialogReport=MasterDialogReport;
    //         break;
    //     default:
    //     this.dialogReport="nofound";
    //     break;
    // }
    // }
    ReportMain.prototype.fiterClickEvent = function () {
        var _this = this;
        var dialogRef = this.dialog.open(__WEBPACK_IMPORTED_MODULE_6__ReportDialogs_MasterDialogReport_MasterDialogReport__["a" /* MasterDialogReport */], { hasBackdrop: true, data: { activeurlpath: this.activeurlpath, instanceWiseRepName: this.instanceWiseRepName, reportparam: this.reportparam, reportname: this.reportname } });
        dialogRef.afterClosed().subscribe(function (result) {
            if (result !== undefined) {
                if (result.status == 'ok') {
                    console.log(result);
                    _this.reportname = result.data.reportname;
                    _this.reportparam = result.data.reportparam;
                    _this.showReportName = result.data.REPORTDISPLAYNAME ? result.data.REPORTDISPLAYNAME : result.data.reportname;
                    _this.instanceWiseRepName = result.data.instanceWiseRepName;
                    _this.loadReport(result.data);
                    // ////console.log("reportData",result.data);
                    _this.reportMainService.SelectedAccount = '';
                    //For Displaying Name according to the Reports
                    _this.ReportCriteriaDisplay(_this.reportparam, _this.reportname, _this.showReportName);
                    _this.reportMainService.getReportColumnFormate(_this.reportname)
                        .subscribe(function (res) {
                        if (res.status == "ok") {
                            _this.reportColumnFormate = res.result;
                            // ////console.log("reportcolumnformat", this.reportColumnFormate);
                            _this.rowsperpage = res.result ? res.result[0].rowsperpage : '100';
                        }
                        else {
                            _this.reportColumnFormate = [];
                        }
                    });
                    _this.previouslyLoadedReportsList = _this.reportMainService.previouslyLoadedReportList;
                    // ////console.log("@@previouslyLoadedReportsList3",this.previouslyLoadedReportsList)
                }
            }
            dialogRef = null;
        });
    };
    ReportMain.prototype.getFormattedValue = function (value) {
        if (value != null) {
            if (typeof value === 'number') {
                return value.toLocaleString('en-us', { minimumFractionDigits: 2 });
            }
            else if (new Date(value).toString() != 'Invalid Date') {
                return new Date(value).toJSON().split('T')[0];
            }
        }
        return value;
    };
    ReportMain.prototype.SettingClickEvent = function () {
    };
    ReportMain.prototype.ExportReportInExcel = function (extension) {
        // this.excelDownloadFromHtml_manualTable();
        this.downloadReportPrepareFromAPI(extension);
    };
    ReportMain.prototype.excelDownloadFromHtml_manualTable = function () {
        try {
            var header = '<p style=" text-align:center;font-weight:bold;font-size:16px;">' + this.activeurlpath.toUpperCase() + '</p><p style=" text-align:center;font-weight:bold;font-size:14px;">' + this.userProfile.CompanyInfo.NAME + '</p><p style=" text-align:center;font-weight:bold;font-size:13px">' + this.userProfile.CompanyInfo.ADDRESS + '</p><p style=" text-align:center;font-weight:bold"> PAN No : <label style="letter-spacing:5px">' + this.userProfile.CompanyInfo.VAT + '</label></p>';
            if (this.reportname == 'Party Ledger Report' || this.reportname == 'Party Ledger Report_1' || this.reportname == 'Party Ledger Report_2') {
                this.param = '<p style="text-align:right;font-size:14px;">' + 'From Date :' + this.reportparam.DATE1 + '</p><p style=" text-align:right;font-size:14px;">' + 'To Date :' + this.reportparam.DATE2 + '</p><p style=" text-align:left;font-size:16px;">' + 'CUSTOMER :' + this.reportparam.ACNAME + '</p><p style=" text-align:left;font-size:14px;">' + 'PAN No :' + this.reportparam.VATNO + '</p><p style=" text-align:left;font-size:14px;">' + 'Address :' + this.reportparam.ADDRESS + '</p><p style=" text-align:left;font-size:14px;">' + 'Contact Number :' + this.reportparam.PHONE + '</p><p style=" text-align:left;font-size:14px;">' + 'Email :' + this.reportparam.EMAIL + '</p>';
            }
            else {
                this.param = '<label style=" text-align:center;font-weight:bold;font-size:12px;">' + this.getReportParamForPreviewKey(this.reportparam, this.reportDetail) + '</label>' + '<label></label>';
            }
            var table = '<table style="border:thin solid black;">  <thead>   <tr>';
            for (var _i = 0, _a = this.reportHeaders; _i < _a.length; _i++) {
                var column1 = _a[_i];
                table += '<th style="border:thin solid black;">' + column1.colHeader + '</th>';
            }
            ;
            table += '</tr> </thead>';
            table += '<tbody>';
            for (var _b = 0, _c = this.reportData; _b < _c.length; _b++) {
                var row = _c[_b];
                table += '<tr>';
                for (var _d = 0, _e = this.reportHeaders; _d < _e.length; _d++) {
                    var column1 = _e[_d];
                    var v = row[column1.mappingName];
                    if (v == null)
                        v = "";
                    table += '<td style="border:thin solid black;">' + v + '</td>';
                }
                ;
                '</tr>';
            }
            ;
            for (var _f = 0, _g = this.reportFooter; _f < _g.length; _f++) {
                var row = _g[_f];
                table += '<tr>';
                for (var _h = 0, _j = this.reportHeaders; _h < _j.length; _h++) {
                    var column1 = _j[_h];
                    var v = row[column1.mappingName];
                    if (v == null)
                        v = "";
                    table += '<td style="border:thin solid black;">' + v + '</td>';
                }
                ;
                '</tr>';
            }
            ;
            table += '</tbody></table>';
            // var Ht = header + param + table;
            var Ht = header + this.param + table;
            var blob = new Blob([Ht], { type: "application/vnd.ms-excel" });
            var blobUrl = URL.createObjectURL(blob);
            var downloadLink = document.createElement("a");
            downloadLink.href = blobUrl;
            downloadLink.download = this.excelReportNameProvide() + ".xls";
            document.body.appendChild(downloadLink);
            downloadLink.click();
            document.body.removeChild(downloadLink);
        }
        catch (ex) {
            alert(ex);
        }
        ;
    };
    ReportMain.prototype.repName = function () {
        var reName;
    };
    ReportMain.prototype.excelReportNameProvide = function () {
        var excelReportName = this.activeurlpath;
        return excelReportName;
    };
    ReportMain.prototype.excelNameChooser = function () {
        var _this = this;
        try {
            // if(this.reportname=="CUSTOMERVSITEMWISESALES"){
            //     return "CUSTOMER_VS_ITEM_WISE_SALES_REPORT ("+ this.masterService.customerList.find(x=>x.ACID== this.reportMaster.reportQuery.find(x=>x.param=="CUSTOMER").value).ACNAME+")";}
            if (this.reportname == "DEBITORSREPORT") {
                return "DEBTORS REPORT ( FROM: " + this.reportMaster.reportQuery.find(function (x) { return x.param == "DATE1"; }).value + "  TO:" + this.reportMaster.reportQuery.find(function (x) { return x.param == "DATE2"; }).value + " )";
            }
            if (this.reportname == "DEBITORSREPORTEXD") {
                return "DEBTORS REPORT EXTENDED( FROM: " + this.reportMaster.reportQuery.find(function (x) { return x.param == "DATE1"; }).value + "  TO:" + this.reportMaster.reportQuery.find(function (x) { return x.param == "DATE2"; }).value + " )";
            }
            if (this.reportname == "SALESBOOKREPORT") {
                return "SALES REPORT ( FROM: " + this.reportMaster.reportQuery.find(function (x) { return x.param == "DATE1"; }).value + "  TO:" + this.reportMaster.reportQuery.find(function (x) { return x.param == "DATE2"; }).value + " )";
            }
            if (this.reportname == "STOCKREPORT") {
                return "STOCK REPORT ( FROM: " + this.reportMaster.reportQuery.find(function (x) { return x.param == "DATE1"; }).value + "  TO:" + this.reportMaster.reportQuery.find(function (x) { return x.param == "DATE2"; }).value + " )";
            }
            if (this.reportname == "STOCKREPORTEXD") {
                return "STOCK REPORT EXTENDED( FROM: " + this.reportMaster.reportQuery.find(function (x) { return x.param == "DATE1"; }).value + "  TO:" + this.reportMaster.reportQuery.find(function (x) { return x.param == "DATE2"; }).value + " )";
            }
            if (this.reportname == "DEBITORSREPORT_AGING") {
                return "DEBTORS AGEING REPORT ( As On Dated: " + this.reportMaster.reportQuery.find(function (x) { return x.param == "DATE2"; }).value + " )";
            }
            if (this.reportname == "DEBITORSREPORT_AGINGEXD") {
                return "DEBTORS AGEING REPORT EXTENDED( As On Dated: " + this.reportMaster.reportQuery.find(function (x) { return x.param == "DATE2"; }).value + " )";
            }
            if (this.reportname == "DEBITORSREPORT_AGINGEXD") {
                return "DEBTORS AGEING REPORT EXTENDED( As On Dated: " + this.reportMaster.reportQuery.find(function (x) { return x.param == "DATE2"; }).value + " )";
            }
            if (this.reportname == "STOCKLEDGERREPORT") {
                var CC = this.masterService._itemList.find(function (x) { return x.MCODE == _this.reportMaster.reportQuery.find(function (x) { return x.param == "MCODE"; }).value; });
                if (CC != null) {
                    return "STOCK LEDGER REPRT ( " + CC.MENUCODE + "  " + CC.DESCA + " )";
                }
            }
            return this.reportMaster.title;
        }
        catch (ex) {
            return this.reportMaster.title;
        }
    };
    ReportMain.prototype.getReportParamForPreviewKey = function (param, reportdetails) {
        var key = Object.keys(param);
        var allValue = "";
        for (var i in key) {
            var label = key[i];
            var paramDetails = reportdetails.filter(function (x) { return x.PROPNAME == key[i]; })[0];
            if (paramDetails != null) {
                if (paramDetails.PRINTLABEL != null && paramDetails.PRINTLABEL != "") {
                    label = paramDetails.PRINTLABEL;
                }
            }
            var value = param[key[i]];
            // //console.log("@@label",label)
            if (label == 'DATE1' || label == 'DATE2') {
                allValue += label + ":" + value + " , ";
            }
        }
        return allValue;
    };
    ReportMain.prototype.getReportParamForPreview = function (reportparam, reportdetails) {
        var key = Object.keys(reportparam);
        console.log("ss", key);
        var pp = "(";
        for (var i in key) {
            var label = key[i];
            var paramDetails = reportdetails.filter(function (x) { return x.PROPNAME == key[i]; })[0];
            if (paramDetails != null) {
                if (paramDetails.PRINTLABEL != null && paramDetails.PRINTLABEL != "") {
                    label = paramDetails.PRINTLABEL;
                }
            }
            var value = reportparam[key[i]];
            if (label.toUpperCase() == "LEDGERDISPLAYNAME") {
                if (value != '') {
                    pp += " @Ledger : " + value + " ";
                }
            }
            else if (label.toUpperCase() == "ACCOUNTGROUPDISPLAYNAME") {
                if (value != '') {
                    pp += " @Account Group : " + value + " ";
                }
            }
            else if (label.toUpperCase() == "PARTYGROUPDISPLAYNAME") {
                if (value != '') {
                    pp += " @Party Group : " + value + " ";
                }
            }
            else if (label.toUpperCase() == "REPORTOPTIONDISPLAYNAME") {
                if (value != '') {
                    pp += " " + value + " ";
                }
            }
            else if (label.toUpperCase() == "MAINLEDGERDISPLAYNAME") {
                if (value != '') {
                    pp += "@Main Ledger : " + value + " ";
                }
            }
            else if (label.toUpperCase() == "SUBLEDGERDISPLAYNAME") {
                if (value != '') {
                    pp += "@Sub Ledger : " + value + " ";
                }
            }
            else if (label.toUpperCase() == "VTYPEDISPLAYNAME") {
                if (value != '') {
                    pp += "@Voucher Name : " + value + " ";
                }
            }
            else if (label.toUpperCase() == "DATE1") {
                pp += " @As On Dated : " + value + " ";
            }
            else if (label.toUpperCase() == "DATE2") {
                pp += " To : " + value + " ";
            }
            else if (label.toUpperCase() == "BSDATE1") {
                pp += " ( " + value + " ";
            }
            else if (label.toUpperCase() == "BSDATE2") {
                pp += " - " + value + " ) ";
            }
            else if (label.toUpperCase() == "DATE") {
                pp += " @As On Dated  : " + value + " ";
            }
            else if (label.toUpperCase() == "BSDATE") {
                pp += " Miti : " + value + " )";
            }
            else if (label.toUpperCase() == "DIVISIONNAME") {
                if (value != '') {
                    pp += " @Division : " + value + "";
                }
            }
            else if (label.toUpperCase() == "COSTCENTERCATEGORYNAME") {
                if (value != '') {
                    pp += " @CostcenterCategory : " + value + " ";
                }
            }
            else if (label.toUpperCase() == "COSTCENTERDISPLAYNAME") {
                if (value != '') {
                    pp += " @Costcenter : " + value + " ";
                }
            }
            else if (label.toUpperCase() == "FROM_VNO") {
                if (value != '') {
                    pp += " @Voucher Range From : " + value + " ";
                }
            }
            else if (label.toUpperCase() == "To_VNO") {
                if (value != '') {
                    pp += " To : " + value + " ";
                }
            }
            else if (label.toUpperCase() == "SUMMARYREPORTDISPLAYNAME") {
                if (value != '') {
                    pp += " " + value + " ";
                }
            }
            else if (label.toUpperCase() == "SUPPLIERDISPLAYNAME") {
                if (value != '') {
                    pp += " " + value + " ";
                }
            }
            else if (label.toUpperCase() == "INTERVAL") {
                alert("d");
                if (value != '') {
                    pp += " @INTERVAL : " + value + "";
                }
            }
        }
        pp = pp.substring(0, pp.length - 1);
        pp += ")";
        return pp;
    };
    ReportMain.prototype.SaveInReportColumnFormat = function () {
        this.showReportColumnFormatPopup = true;
    };
    ReportMain.prototype.CancelCommand = function () {
        this.showReportColumnFormatPopup = false;
    };
    ReportMain.prototype.OkCommand = function () {
        var _this = this;
        this.showReportColumnFormatPopup = false;
        this.ReportColumnName.forEach(function (x) { x.ReportTitle = _this.reportTitle, x.rowsperpage = _this.rowsperpage; });
        this.masterService.masterPostmethod("/updateReportMaster", { REPORTNAME: this.reportname, hasDynamicColumns: this.hasDynamicColumns,
            dynamicColumnLevel: this.dynamicColumnLevel, dynamicColumnWidth: this.dynamicColumnWidth, hasDynamicHeaders: this.hasDynamicHeaders,
            leftcolumnnumber: this.leftcolumnnumber, rightcolumnnumber: this.rightcolumnnumber, MergeReportHeader: this.MergeReportHeader,
            ShowLineInFinalReport: this.ShowLineInFinalReport }).subscribe(function (res) {
        });
        this.spinnerService.show("Data is saving ....");
        this.reportMainService.saveReportColumnFormat(this.ReportColumnName, '/saveReportColumnFormat')
            .subscribe(function (res) {
            if (res.status == "ok") {
                // this.loadingService.hide();
                _this.spinnerService.hide();
                _this.alertService.info('Report format is successfully saved');
                _this.reportColumnFormate = [];
            }
            else {
                _this.spinnerService.hide();
            }
        }, function (error) {
            _this.spinnerService.hide();
        });
    };
    ReportMain.prototype.changeDate = function (DATE1, DATE2, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            this.FromdateInAD = this.masterService.toBSDateReport(DATE1);
            console.log("dd", this.FromdateInAD);
            this.TodateInAD = this.masterService.toBSDateReport(DATE2);
            // var adDate1 = (DATE1.replace("-", "/")).replace("-", "/");
            // var bsDate1 = adbs.ad2bs(adDate1);
            // var adDate2 = (DATE2.replace("-", "/")).replace("-", "/");
            // var bsDate2 = adbs.ad2bs(adDate2);
            // this.FromdateInAD = bsDate1.en.year + '-' + bsDate1.en.month + '-' + (bsDate1.en.day == '1' || bsDate1.en.day == '2' || bsDate1.en.day == '3' || bsDate1.en.day == '4' || bsDate1.en.day == '5' || bsDate1.en.day == '6' || bsDate1.en.day == '7' || bsDate1.en.day == '8' || bsDate1.en.day == '9' ? '0' + bsDate1.en.day : bsDate1.en.day);
            // this.TodateInAD = bsDate2.en.year + '-' + bsDate2.en.month + '-' + (bsDate2.en.day == '1' || bsDate2.en.day == '2' || bsDate2.en.day == '3' || bsDate2.en.day == '4' || bsDate2.en.day == '5' || bsDate2.en.day == '6' || bsDate2.en.day == '7' || bsDate2.en.day == '8' || bsDate2.en.day == '9' ? '0' + bsDate2.en.day : bsDate2.en.day);
        }
    };
    ReportMain.prototype.showPreviouslyLoadedReports = function () {
        this.showReportListDialog = true;
        // setTimeout(() => {
        //   this.reportnameinlist.nativeElement.focus();
        // }, 10);
    };
    ReportMain.prototype.CancelReportList = function () {
        this.showReportListDialog = false;
    };
    ReportMain.prototype.closeReport = function () {
        var _this = this;
        // ////console.log("@@activeurlpath",this.activeurlpath)
        // this.reportHeaders = [];
        // this.reportData = [];
        // this.reportparam = [];
        if (this.activeurlpath == 'summaryledgerreport') {
            if (this.reportMainService.loadedTimes > 0) {
                this.reportMainService.loadedTimes = this.reportMainService.loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'accountledgerreport') {
            if (this.reportMainService.AccLedger_loadedTimes > 0) {
                this.reportMainService.AccLedger_loadedTimes = this.reportMainService.AccLedger_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'summarypartyledger') {
            if (this.reportMainService.SummaryParty_loadedTimes > 0) {
                this.reportMainService.SummaryParty_loadedTimes = this.reportMainService.SummaryParty_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'partyledgerreport') {
            if (this.reportMainService.PartyLedger_loadedTimes > 0) {
                this.reportMainService.PartyLedger_loadedTimes = this.reportMainService.PartyLedger_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'sub-ledger-report') {
            if (this.reportMainService.SubLedger_loadedTimes > 0) {
                this.reportMainService.SubLedger_loadedTimes = this.reportMainService.SubLedger_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'debtorsreport') {
            if (this.reportMainService.loadedTimesD > 0) {
                this.reportMainService.loadedTimesD = this.reportMainService.loadedTimesD - 1;
            }
        }
        else if (this.activeurlpath == 'creditorsreport') {
            if (this.reportMainService.Creditors_loadedTimes > 0) {
                this.reportMainService.Creditors_loadedTimes = this.reportMainService.Creditors_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'debtorsagingreport') {
            if (this.reportMainService.DebtorsAgeing_loadedTimes > 0) {
                this.reportMainService.DebtorsAgeing_loadedTimes = this.reportMainService.DebtorsAgeing_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'creditorsagingreport') {
            if (this.reportMainService.CreditorsAgeing_loadedTimes > 0) {
                this.reportMainService.CreditorsAgeing_loadedTimes = this.reportMainService.CreditorsAgeing_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'voucher-regeister-report') {
            if (this.reportMainService.VoucherReg_loadedTimes > 0) {
                this.reportMainService.VoucherReg_loadedTimes = this.reportMainService.VoucherReg_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'cash-bank-book-report') {
            if (this.reportMainService.CashBank_loadedTimes > 0) {
                this.reportMainService.CashBank_loadedTimes = this.reportMainService.CashBank_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'day-book-report') {
            if (this.reportMainService.DayBook_loadedTimes > 0) {
                this.reportMainService.DayBook_loadedTimes = this.reportMainService.DayBook_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'debtorsoutstandingreport') {
            if (this.reportMainService.DebtorsOuts_loadedTimes > 0) {
                this.reportMainService.DebtorsOuts_loadedTimes = this.reportMainService.DebtorsOuts_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'creditorsoutstandingreport') {
            if (this.reportMainService.CreditorsOuts_loadedTimes > 0) {
                this.reportMainService.CreditorsOuts_loadedTimes = this.reportMainService.CreditorsOuts_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'sub-ledger-report-acbase') {
            if (this.reportMainService.SubLedgerAcbase_loadedTimes > 0) {
                this.reportMainService.SubLedgerAcbase_loadedTimes = this.reportMainService.SubLedgerAcbase_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'trial-balance-report') {
            if (this.reportMainService.TrialBalance_loadedTimes > 0) {
                this.reportMainService.TrialBalance_loadedTimes = this.reportMainService.TrialBalance_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'additionalcost-itemwise-report') {
            if (this.reportMainService.AdditionalCostDetail_loadedTimes > 0) {
                this.reportMainService.AdditionalCostDetail_loadedTimes = this.reportMainService.AdditionalCostDetail_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'additionalcost-voucherwise-report') {
            if (this.reportMainService.AdditionalCostSummary_loadedTimes > 0) {
                this.reportMainService.AdditionalCostSummary_loadedTimes = this.reportMainService.AdditionalCostSummary_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'salesreturnsummary-report') {
            if (this.reportMainService.SalesReturnSummary_loadedTimes > 0) {
                this.reportMainService.SalesReturnSummary_loadedTimes = this.reportMainService.SalesReturnSummary_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'salesreturnsummaryretailer-report') {
            if (this.reportMainService.SalesReturnSummaryRetailer_loadedTimes > 0) {
                this.reportMainService.SalesReturnSummaryRetailer_loadedTimes = this.reportMainService.SalesReturnSummaryRetailer_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'salesreturn-reportdetail') {
            if (this.reportMainService.SalesReturnReportDetail_loadedTimes > 0) {
                this.reportMainService.SalesReturnReportDetail_loadedTimes = this.reportMainService.SalesReturnReportDetail_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'stocksummary-reportdms') {
            if (this.reportMainService.StockSummaryAccount_loadedTimes > 0) {
                this.reportMainService.StockSummaryAccount_loadedTimes = this.reportMainService.StockSummaryAccount_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'currentstock-warehousewise-reportdms') {
            if (this.reportMainService.CurrentStockWarehouseWiseAccount_loadedTimes > 0) {
                this.reportMainService.CurrentStockWarehouseWiseAccount_loadedTimes = this.reportMainService.CurrentStockWarehouseWiseAccount_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'stockabc-analysis-reportdms') {
            if (this.reportMainService.StockAbcAnalysisAccount_loadedTimes > 0) {
                this.reportMainService.StockAbcAnalysisAccount_loadedTimes = this.reportMainService.StockAbcAnalysisAccount_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'consolidated-trialbalance-report') {
            if (this.reportMainService.consolidated_TrialBalance_loadedTimes > 0) {
                this.reportMainService.consolidated_TrialBalance_loadedTimes = this.reportMainService.consolidated_TrialBalance_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'profit-loss-report') {
            if (this.reportMainService.ProfitLoss_loadedTimes > 0) {
                this.reportMainService.ProfitLoss_loadedTimes = this.reportMainService.ProfitLoss_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'balance-sheet-report') {
            if (this.reportMainService.BalanceSheet_loadedTimes > 0) {
                this.reportMainService.BalanceSheet_loadedTimes = this.reportMainService.BalanceSheet_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'tds-report') {
            if (this.reportMainService.TDS_loadedTimes > 0) {
                this.reportMainService.TDS_loadedTimes = this.reportMainService.TDS_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'consolidated-balance-sheet-report') {
            if (this.reportMainService.Consolidated_BalanceSheet_loadedTimes > 0) {
                this.reportMainService.Consolidated_BalanceSheet_loadedTimes = this.reportMainService.Consolidated_BalanceSheet_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'consolidated-profit-loss-report') {
            if (this.reportMainService.Consolidated_ProfitLoss_loadedTimes > 0) {
                this.reportMainService.Consolidated_ProfitLoss_loadedTimes = this.reportMainService.Consolidated_ProfitLoss_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'bill-tracking-report') {
            if (this.reportMainService.BillTracking_loadedTimes > 0) {
                this.reportMainService.BillTracking_loadedTimes = this.reportMainService.BillTracking_loadedTimes - 1;
            }
        }
        else if (this.activeurlpath == 'creditorsbill-tracking-report') {
            if (this.reportMainService.CreditorsBillTracking_loadedTimes > 0) {
                this.reportMainService.CreditorsBillTracking_loadedTimes = this.reportMainService.CreditorsBillTracking_loadedTimes - 1;
            }
        }
        // this.reportDisplayName = '';
        // this.labelDisplayName = '';
        // this.ledgerDisplayName = '';
        // this.detailreportDisplayName = '';
        // this.accountDisplayName = '';
        // this.entryuserDisplayName = '';
        // this.costcenterDisplayName = '';
        this.reportMainService.reportDataStore[this.activeurlpath] = undefined;
        this.reportMainService.reportDataStore[this.instanceWiseRepName] = undefined;
        var xyz = this.reportMainService.previouslyLoadedReportList.findIndex(function (report) { return report.instanceWiseRepName == _this.instanceWiseRepName; });
        // ////console.log("@@xyz",xyz)
        this.reportMainService.previouslyLoadedReportList.splice(xyz, 1);
        // ////console.log("@@previouslyLoadedReportList ma k xa?",this.reportMainService.previouslyLoadedReportList)
        if (this.reportMainService.previouslyLoadedReportList.length == 0) {
            this.router.navigate(["/pages/dashboard/dashboard"]);
        }
        else {
            this.instanceWiseRepName = this.reportMainService.previouslyLoadedReportList[this.reportMainService.previouslyLoadedReportList.length - 1].instanceWiseRepName;
            this.loadReportDataFromExistingStore();
            this.ReportCriteriaDisplay(this.reportparam, this.reportname, this.showReportName);
            this.router.navigate([this.reportMainService.previouslyLoadedReportList[this.reportMainService.previouslyLoadedReportList.length - 1].activeurlpath,
                {
                    queryParams: {
                        instancename: this.reportMainService.previouslyLoadedReportList[this.reportMainService.previouslyLoadedReportList.length - 1].instanceWiseRepName
                    }
                }]);
        }
    };
    ReportMain.prototype.popReportandClose = function (report) {
        // ////console.log("@@report", report)
        this.reportMainService.previouslyLoadedReportList.splice(report, 1);
        var routepaths = report.split('/');
        var activeurlpath2;
        if (routepaths && routepaths.length) {
            activeurlpath2 = routepaths[routepaths.length - 1];
            // ////console.log("@@activeurlpath2", activeurlpath2)
        }
        this.closeReportShorcut(activeurlpath2);
    };
    ReportMain.prototype.closeReportShorcut = function (activeurlpath) {
        // ////console.log("@@activeurlpath", activeurlpath)
        this.reportHeaders = [];
        this.allHeaders = [];
        this.reportData = [];
        this.reportparam = [];
        if (activeurlpath == 'summaryledgerreport') {
            this.reportMainService.SummaryLedgerObj = {};
        }
        else if (activeurlpath == 'accountledgerreport') {
            this.reportMainService.AccoutLedgerObj = {};
        }
        else if (activeurlpath == 'summarypartyledger') {
            this.reportMainService.SummaryPartyLedgerObj = {};
        }
        else if (activeurlpath == 'partyledgerreport') {
            this.reportMainService.PartyLedgerObj = {};
        }
        else if (activeurlpath == 'sub-ledger-report') {
            this.reportMainService.SubLedgerObj = {};
        }
        else if (activeurlpath == 'debtorsreport') {
            this.reportMainService.DebtorsReportObj = {};
        }
        else if (activeurlpath == 'creditorsreport') {
            this.reportMainService.CreditorsReportObj = {};
        }
        else if (activeurlpath == 'debtorsagingreport') {
            this.reportMainService.DebtorsAgeingObj = {};
        }
        else if (activeurlpath == 'creditorsagingreport') {
            this.reportMainService.CreditorsAgeingObj = {};
        }
        else if (activeurlpath == 'actual-vs-budget-report') {
            this.reportMainService.ActualVsBudgetObj = {};
        }
        else if (activeurlpath == 'voucher-regeister-report') {
            this.reportMainService.VoucherRegisterObj = {};
        }
        else if (activeurlpath == 'cash-bank-book-report') {
            this.reportMainService.CashAndBankBookObj = {};
        }
        else if (activeurlpath == 'day-book-report') {
            this.reportMainService.DayBookObj = {};
        }
        else if (activeurlpath == 'debtorsoutstandingreport') {
            this.reportMainService.DebtorsOutstandingObj = {};
        }
        else if (activeurlpath == 'creditorsoutstandingreport') {
            this.reportMainService.CreditorsOutstandingObj = {};
        }
        this.reportDisplayName = '';
        this.labelDisplayName = '';
        this.ledgerDisplayName = '';
        this.detailreportDisplayName = '';
        this.accountDisplayName = '';
        this.entryuserDisplayName = '';
        this.costcenterDisplayName = '';
        this.supplierDisplayName = '';
        this.voucherDisplayName = '';
        this.reportMainService.reportDataStore[activeurlpath] = undefined;
    };
    ReportMain.prototype.updown = function ($event) {
        if ($event.code == "F2") {
            $event.preventDefault();
            this.fiterClickEvent();
        }
        if ($event.code == "F9") {
            $event.preventDefault();
            this.ExportReportInExcel('xlsx');
        }
        // if ($event.code == "F4") {
        //   $event.preventDefault();
        //   this.showPreviouslyLoadedReports();
        // }
        if ($event.code == "Escape") {
            if (this.showReportListDialog == true) {
                this.CancelReportList();
            }
            else {
                if (this.reportLoadedSuccess == true) {
                    $event.preventDefault();
                    this.closeReport();
                }
            }
        }
        if (this.selectedRowIndex == null)
            this.selectedRowIndex = 0;
        if ($event.code === "ArrowDown") {
            $event.preventDefault();
            if (this.showReportListDialog == true) {
                this.selectedRowIndex = this.selectedRowIndex + 1;
                if (this.selectedRowIndex > (this.previouslyLoadedReportsList.length - 1))
                    this.selectedRowIndex = this.previouslyLoadedReportsList.length - 1;
            }
            else {
                this.body.nativeElement.scrollTop = this.body.nativeElement.scrollTop + 15;
                this.HighlightRow = this.HighlightRow + 1;
                if (this.HighlightRow > (this.reportData.length - 1))
                    this.HighlightRow = this.reportData.length - 1;
            }
        }
        else if ($event.code === "ArrowUp") {
            $event.preventDefault();
            if (this.showReportListDialog == true) {
                this.selectedRowIndex = this.selectedRowIndex - 1;
                if (this.selectedRowIndex < 0)
                    this.selectedRowIndex = 0;
            }
            else {
                if (this.body.nativeElement.scrollTop > 0) {
                    this.body.nativeElement.scrollTop = this.body.nativeElement.scrollTop - 15;
                }
                this.HighlightRow = this.HighlightRow - 1;
                if (this.HighlightRow < 0)
                    this.HighlightRow = 0;
            }
        }
        if ($event.code === "Enter" || $event.code === "NumpadEnter") {
            if (this.showReportListDialog == true) {
                $event.preventDefault();
                if (this.selectedRowIndex != null) {
                    if (this.previouslyLoadedReportsList[this.selectedRowIndex] != null) {
                        var abc = this.previouslyLoadedReportsList[this.selectedRowIndex].activeurlpath;
                        // ////console.log("main1",this.previouslyLoadedReportsList[this.selectedRowIndex])
                        this.instanceWiseRepName = this.previouslyLoadedReportsList[this.selectedRowIndex].instanceWiseRepName;
                        this.loadReportDataFromExistingStore();
                        this.ReportCriteriaDisplay(this.reportparam, this.reportname, this.showReportName);
                        this.router.navigate([this.previouslyLoadedReportsList[this.selectedRowIndex].activeurlpath,
                            {
                                queryParams: {
                                    instancename: this.previouslyLoadedReportsList[this.selectedRowIndex].instanceWiseRepName
                                }
                            }]);
                    }
                }
            }
        }
    };
    ReportMain.prototype.onClickLoadedReportList = function (i, value) {
        this.selectedRowIndex = i;
        if (value) {
            //  ////console.log("@@value",value);
            this.instanceWiseRepName = value.instanceWiseRepName;
            this.loadReportDataFromExistingStore();
            this.ReportCriteriaDisplay(this.reportparam, this.reportname, this.showReportName);
            this.router.navigate([this.previouslyLoadedReportsList[i].activeurlpath], {
                queryParams: {
                    instancename: this.previouslyLoadedReportsList[i].instanceWiseRepName
                }
            });
        }
    };
    ReportMain.prototype.loadReportDataFromExistingStore = function () {
        // ////console.log("reportStoredata",this.reportMainService.reportDataStore);
        var existingDataFromReportDataStore = this.reportMainService.reportDataStore[this.instanceWiseRepName];
        if (existingDataFromReportDataStore != null && existingDataFromReportDataStore != undefined) {
            this.reportData = existingDataFromReportDataStore.data.result.data;
            this.reportDetail = existingDataFromReportDataStore.data.result.repDetails;
            this.reportname = existingDataFromReportDataStore.param.reportname;
            this.reportparam = existingDataFromReportDataStore.param.reportparam;
            this.reportContextMenu = existingDataFromReportDataStore.data.result.reportContextMenu;
            this.reportmasterDetail = existingDataFromReportDataStore.data.result.reportmasterDetail;
            this.reportFooter = existingDataFromReportDataStore.data.result.totalRowData;
            this.showReportName = existingDataFromReportDataStore.param.REPORTDISPLAYNAME ? existingDataFromReportDataStore.param.REPORTDISPLAYNAME : existingDataFromReportDataStore.param.reportname;
            this.hasDynamicHeaders = this.reportmasterDetail.DYNAMICHEADER;
            this.leftcolumnnumber = this.reportmasterDetail.LEFTCOLUMNNUMBER;
            this.rightcolumnnumber = this.reportmasterDetail.RIGHTCOLUMNNUMBER;
            this.MergeReportHeader = this.reportmasterDetail.MERGEREPORTHEADER;
            this.ShowLineInFinalReport = this.reportmasterDetail.SHOWLINEINFINALREPORT;
        }
    };
    ReportMain.prototype.getCNDNMODE = function (data) {
    };
    ReportMain.prototype.drillDownReport = function (data) {
        var _this = this;
        this.loadReportDataFromExistingStore();
        // ////console.log("@@data", data);
        // ////console.log("@@this.reportmasterDetail", this.reportmasterDetail)
        if (this.reportmasterDetail.DRILLTO && this.reportmasterDetail.DRILLTO != "VOUCHER" && (this.reportmasterDetail.REPORTNAME != 'Sub Ledger Report ACBASE' && this.reportmasterDetail.REPORTNAME != 'Debtors Bill Tracking Report' && this.reportmasterDetail.REPORTNAME != 'Creditors Bill Tracking Report')) {
            if (this.reportmasterDetail.DRILLKEY == 'ACID') {
                if ((data.ACID && (data.ACID != 'AG01001' && data.ACID != 'AG01002'))) {
                    // ////console.log("@@dataACID", data);
                    // if (data.ACID && data.ACID.startsWith("PA")) {
                    //   if(this.masterService.userSetting.DISPLAY == 1){
                    //     this.reportmasterDetail.DRILLTO = 'Party Ledger Report_1';
                    //   }else{
                    //     this.reportmasterDetail.DRILLTO = 'Party Ledger Report';
                    //   }
                    // } else {
                    //   if(this.masterService.userSetting.DISPLAY == 1){
                    //     this.reportmasterDetail.DRILLTO = 'Account Ledger Report_1';
                    //   }else{
                    //     this.reportmasterDetail.DRILLTO = 'Account Ledger Report';
                    //   }
                    // }
                    if (data.ACCODE && data.ACCODE.startsWith("SL")) {
                        this.reportmasterDetail.DRILLTO = 'Sub Ledger Report';
                    }
                }
                if ((data.ACID && data.ACID == 'AG01001') && (data.TYPE && data.TYPE == 'G')) {
                    // ////console.log("@@dataACID1", data.ACID);
                    this.reportmasterDetail.DRILLTO = 'Debtors Report';
                }
                if ((data.ACID && data.ACID == 'AG01002') && (data.TYPE && data.TYPE == 'G')) {
                    // ////console.log("@@dataACID2", data.ACID);
                    this.reportmasterDetail.DRILLTO = 'Creditors Report';
                }
            }
            if (this.reportmasterDetail.DRILLKEY == 'ACID_A') {
                if ((data.ACID_A && (data.ACID_A != 'AG01001' && data.ACID_A != 'AG01002'))) {
                    // //console.log("dataACID_A", data);
                    // if (data.ACID_A && data.ACID_A.startsWith("PA")) {
                    //   this.reportmasterDetail.DRILLTO = 'Party Ledger Report';
                    // } else {
                    //   this.reportmasterDetail.DRILLTO = 'Account Ledger Report';
                    // }
                    if (data.ACCODE && data.ACCODE.startsWith("SL")) {
                        this.reportmasterDetail.DRILLTO = 'Sub Ledger Report';
                    }
                }
                if ((data.ACID_A && data.ACID_A == 'AG01001') && (data.TYPE && data.TYPE == 'G')) {
                    this.reportmasterDetail.DRILLTO = 'Debtors Report';
                }
                if ((data.ACID_A && data.ACID_A == 'AG01002') && (data.TYPE && data.TYPE == 'G')) {
                    this.reportmasterDetail.DRILLTO = 'Creditors Report';
                }
            }
        }
        if ((data.ACID && data.ACID.startsWith("PA")) || (data.ACID_A && data.ACID_A.startsWith("PA"))) {
            this.reportMainService.ReportFilterObject.ACIDwithPA = true;
        }
        else {
            this.reportMainService.ReportFilterObject.ACIDwithPA = false;
        }
        // ////console.log("@@data.ACCODE",data.ACCODE)
        if (data.ACCODE && data.ACCODE.startsWith("SL")) {
            this.reportMainService.ReportFilterObject.ACCODEwithSL = true;
        }
        else {
            this.reportMainService.ReportFilterObject.ACCODEwithSL = false;
        }
        // if( data.IsSLedger ){
        // var abc='SL1_AC2551';
        // var xyz=abc.split("_")
        // ////console.log("@xyz",xyz,xyz[0],xyz[1])
        // }else{
        // }
        // ////console.log("@@this.reportmasterDetail.DRILLTO",this.reportmasterDetail.DRILLTO)
        if (!this.reportmasterDetail.hasOwnProperty('DRILLKEY') ||
            !this.reportmasterDetail.hasOwnProperty('DRILLTO') ||
            !this.reportmasterDetail.hasOwnProperty('ISDRILLABLE') ||
            !this.reportmasterDetail.ISDRILLABLE) {
            return;
        }
        if (this.reportmasterDetail.DRILLTO == 'VOUCHER') {
            var voucher = data[this.reportmasterDetail.DRILLKEY].substring(0, 2).toUpperCase();
            if (voucher == 'TI' || voucher == 'CN' || voucher == 'PI' || voucher == 'DN') {
                this.masterService.getPclandCNDNmode(voucher, data[this.reportmasterDetail.DRILLKEY]).subscribe(function (res) {
                    if (res.result && res.result[0].CNDN_MODE == 1) {
                        _this.CNDN_MODE = 1;
                    }
                    else {
                        _this.CNDN_MODE = 0;
                        if (res.result && res.result[0].PCL == 'pc001') {
                            _this.masterService.PCL_VALUE = 1;
                        }
                        else if (res.result && res.result[0].PCL == 'pc002') {
                            _this.masterService.PCL_VALUE = 2;
                        }
                        else {
                            _this.masterService.PCL_VALUE = 2;
                        }
                    }
                }, function (err) {
                }, function () {
                    _this.routerToVouchers(data);
                });
            }
            else {
                this.routerToVouchers(data);
            }
        }
        else {
            this.routerToVouchers(data);
        }
    };
    ReportMain.prototype.routerToVouchers = function (data) {
        ////console.log("CheckHere!", data)
        switch (this.reportmasterDetail.DRILLTO) {
            case 'Account Ledger Report':
            case 'Account Ledger Report_1':
            case 'Account Ledger Report_2':
                this.resolveDrillDownParam(this.reportmasterDetail.DRILLTO, data, data['TYPE']);
                this.router.navigate(["/pages/financialreports/account-ledger-reports/accountledgerreport"], {
                    queryParams: {
                        mode: 'DRILL',
                        selectedDiv: this.reportparam.DIV
                    }
                });
                break;
            case 'Party Ledger Report':
            case 'Party Ledger Report_1':
            case 'Party Ledger Report_2':
                this.resolveDrillDownParam(this.reportmasterDetail.DRILLTO, data, data['TYPE']);
                this.router.navigate(["/pages/financialreports/account-ledger-reports/partyledgerreport"], {
                    queryParams: {
                        mode: 'DRILL',
                    }
                });
                break;
            case 'Day Book Report_1':
            case 'VTYPE':
                this.resolveDrillDownParam(this.reportmasterDetail.DRILLTO, data);
                this.router.navigate(["/pages/financialreports/registerBookReports/day-book-report"], {
                    queryParams: {
                        mode: 'DRILL'
                    }
                });
                break;
            case 'Summary Ledger Report':
                this.resolveDrillDownParam(this.reportmasterDetail.DRILLTO, data, data['TYPE'], this.reportMainService.ReportFilterObject.ACIDwithPA, this.reportMainService.ReportFilterObject.ACCODEwithSL);
                this.router.navigate(["/pages/financialreports/account-ledger-reports/summaryledgerreport"], {
                    queryParams: {
                        mode: 'DRILL'
                    }
                });
                break;
            case 'Summary Party Ledger Report':
                this.resolveDrillDownParam(this.reportmasterDetail.DRILLTO, data, data['TYPE'], this.reportMainService.ReportFilterObject.ACIDwithPA, this.reportMainService.ReportFilterObject.ACCODEwithSL);
                this.router.navigate(["/pages/financialreports/account-ledger-reports/summarypartyledger"], {
                    queryParams: {
                        mode: 'DRILL'
                    }
                });
                break;
            case 'Sub Ledger Report':
                this.resolveDrillDownParam(this.reportmasterDetail.DRILLTO, data, data['TYPE'], this.reportMainService.ReportFilterObject.ACIDwithPA, this.reportMainService.ReportFilterObject.ACCODEwithSL);
                this.router.navigate(["/pages/financialreports/account-ledger-reports/sub-ledger-report"], {
                    queryParams: {
                        mode: 'DRILL'
                    }
                });
                break;
            case 'VOUCHER':
                if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10_util__["isNullOrUndefined"])(data[this.reportmasterDetail.DRILLKEY]))
                    return;
                this.router.navigate([this.getDrillRouteVoucherWise(data[this.reportmasterDetail.DRILLKEY])], {
                    queryParams: {
                        mode: 'DRILL',
                        voucher: data[this.reportmasterDetail.DRILLKEY],
                        returnUrl: this.activeurlpath,
                        pcl: this.masterService.PCL_VALUE,
                        Div: this.reportparam.DIV
                    }
                });
                break;
            case 'Debtors Report':
                this.resolveDrillDownParam(this.reportmasterDetail.DRILLTO, data, data['TYPE']);
                this.router.navigate(["/pages/financialreports/additionalreport/debtorsreport"], {
                    queryParams: {
                        mode: 'DRILL'
                    }
                });
                break;
            case 'Creditors Report':
                this.resolveDrillDownParam(this.reportmasterDetail.DRILLTO, data, data['TYPE']);
                this.router.navigate(["/pages/financialreports/additionalreport/creditorsreport"], {
                    queryParams: {
                        mode: 'DRILL'
                    }
                });
                break;
            case 'Debtors Bill Tracking Report':
            case 'Debtors Bill Tracking Report_1':
                this.resolveDrillDownParam(this.reportmasterDetail.DRILLTO, data, data['TYPE']);
                this.router.navigate(["/pages/financialreports/additionalreport/bill-tracking-report"], {
                    queryParams: {
                        mode: 'DRILL'
                    }
                });
                break;
            case 'Creditors Bill Tracking Report':
            case 'Creditors Bill Tracking Report_1':
                this.resolveDrillDownParam(this.reportmasterDetail.DRILLTO, data, data['TYPE']);
                this.router.navigate(["/pages/financialreports/additionalreport/creditorsbill-tracking-report"], {
                    queryParams: {
                        mode: 'DRILL'
                    }
                });
                break;
            default:
                break;
        }
    };
    ReportMain.prototype.getDrillRouteVoucherWise = function (voucherNo) {
        var voucher = voucherNo && voucherNo.substring(0, 2).toUpperCase();
        switch (voucher) {
            case 'JV':
                return '/pages/account/acvouchers/journal-voucher';
            case 'PV':
                return '/pages/account/acvouchers/expense-voucher';
            case 'RV':
                return '/pages/account/acvouchers/income-voucher';
            case 'CN':
            case 'RR':
                // ////console.log("@@this.CNDN_MODE-CN", this.CNDN_MODE)
                // ////console.log("@@CN- this.masterService.PCL_VALUE", this.masterService.PCL_VALUE);
                if (this.CNDN_MODE == 1) {
                    return '/pages/account/acvouchers/credit-note';
                }
                else {
                    return '/pages/transaction/sales/add-creditnote-itembase';
                }
            case 'DN':
            case 'DX':
                // ////console.log("@@this.CNDN_MODEDN", this.CNDN_MODE)
                // ////console.log("@@DN- this.masterService.PCL_VALUE", this.masterService.PCL_VALUE)
                if (this.CNDN_MODE == 1) {
                    return '/pages/account/acvouchers/debit-note';
                }
                else {
                    return '/pages/transaction/purchases/add-debitnote-itembase';
                }
            case 'CP':
                return '/pages/account/acvouchers/capital-voucher';
            case 'CV':
            case 'CE':
                return '/pages/account/acvouchers/contra-voucher';
            case 'AD':
                return '/pages/account/acvouchers/additional-cost';
            case 'TI':
            case 'SI':
                // ////console.log("@@TAX- this.masterService.PCL_VALUE", this.masterService.PCL_VALUE)
                return '/pages/transaction/sales/addsientry';
            case 'PI':
                // ////console.log("@@PI- this.masterService.PCL_VALUE", this.masterService.PCL_VALUE)
                return '/pages/transaction/purchases/add-purchase-invoice';
            case 'CX':
                return '/pages/account/acvouchers/cellpay-voucher';
            case 'PC':
                return '/pages/account/acvouchers/postdirectory';
            default:
                break;
        }
    };
    ReportMain.prototype.onRightClick = function (event, data) {
        event.preventDefault();
        if (!this.reportContextMenu.length)
            return;
        var subject = new __WEBPACK_IMPORTED_MODULE_9_rxjs__["Subject"]();
        /**
         * determines what to do on context menu option clicked
         */
        this.conTextMenuAction(subject, data);
        this.contextMenuView.mouseEvent = event;
        this.contextMenuView.menuItems = this.buildContextMenuItems(subject);
        this.contextMenuView.show = true;
    };
    ReportMain.prototype.buildContextMenuItems = function (subject) {
        var items = [];
        for (var _i = 0, _a = this.reportContextMenu; _i < _a.length; _i++) {
            var ctx = _a[_i];
            items.push(new __WEBPACK_IMPORTED_MODULE_16__context_menu_context_menu_data__["b" /* MenuItem */](ctx.menuname, ctx.commandname, subject));
        }
        return items;
    };
    ReportMain.prototype.conTextMenuAction = function (subject, drillToData) {
        var _this = this;
        var ovservable = subject.asObservable();
        ovservable.subscribe(function (item) {
            _this.reportmasterDetail.DRILLTO = item.value;
            if (item.label == "DRILL TO LEDGER" || item.label == "DRILL TO LEDGER (LEFT SIDE)" || item.label == "DRILL TO DETAIL") {
                _this.reportmasterDetail.DRILLKEY = 'ACID';
            }
            if (item.label == "DRILL TO LEDGER (RIGHT SIDE)") {
                _this.reportmasterDetail.DRILLKEY = 'ACID_A';
            }
            _this.drillDownReport(drillToData);
            _this.contextMenuView.show = true;
        });
    };
    ReportMain.prototype.resolveDrillDownParam = function (reporttype, dataToDrill, extraparam, ACIDWithPA, ACCODEWithSL) {
        if (extraparam === void 0) { extraparam = null; }
        if (ACIDWithPA === void 0) { ACIDWithPA = false; }
        if (ACCODEWithSL === void 0) { ACCODEWithSL = false; }
        this.reportService.drillParam = {};
        this.reportService.drillParam.reportparam = {};
        this.reportService.drillParam.returnUrl = this.arouter.snapshot['_routerState'].url;
        this.reportService.drillParam.reportparam.mode = 'DRILL';
        //console.log("@@dataToDrill", dataToDrill)
        // ////console.log("@@extraparam", extraparam)
        //console.log("@@reporttype", reporttype)
        // ////console.log("@@ACIDWithPA",ACIDWithPA)
        // ////console.log("@@heretocheck",this.reportService.drillParam.reportparam)
        switch (reporttype) {
            case 'Summary Ledger Report':
                this.reportService.drillParam.reportparam.ACID = dataToDrill[this.reportmasterDetail.DRILLKEY];
                this.reportService.drillParam.reportparam.DATE1 = this.reportparam.DATE1;
                this.reportService.drillParam.reportparam.DATE2 = this.reportparam.DATE2;
                this.reportService.drillParam.reportparam.DIV = this.reportparam.DIV;
                this.reportService.drillParam.reportparam.COMID = this.masterService.userProfile.CompanyInfo.COMPANYID;
                this.reportService.drillParam.reportparam.PHISCALID = this.reportparam.PHISCALID;
                this.reportService.drillParam.reportparam.CUSTOMERNAME = this.reportmasterDetail.DRILLKEY == 'ACID_A' ? dataToDrill['ACNAME_A'] : dataToDrill['ACNAME'];
                if (extraparam == "G") {
                    // ////console.log("@@dataToDrill['ACID']", dataToDrill['ACID'])
                    this.reportService.drillParam.reportname = 'Summary Ledger Report';
                    this.reportService.drillParam.reportparam.AREA = "%";
                    this.reportService.drillParam.reportparam.COSTCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                    this.reportService.drillParam.reportparam.CCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                    this.reportService.drillParam.reportparam.ISPARTYGROUPLEDGER = "0";
                    this.reportService.drillParam.reportparam.PARENT = this.reportService.drillParam.reportparam.ACID;
                    this.reportService.drillParam.reportparam.REPORTTYPE = 0;
                    var summary = this.reportMainService.previouslyLoadedReportList.findIndex(function (report) { return report.reportname == 'Account Group Ledger Report'; });
                    if (summary >= 0) {
                        this.reportMainService.previouslyLoadedReportList.splice(summary, 1);
                    }
                    this.reportMainService.previouslyLoadedReportList.push({
                        reportname: 'Account Group Ledger Report',
                        activeurlpath: '/pages/financialreports/account-ledger-reports/summaryledgerreport',
                        activerurlpath2: 'summaryledgerreport'
                    });
                    return "/pages/financialreports/account-ledger-reports/summaryledgerreport";
                }
                else if (ACCODEWithSL == false && ACIDWithPA == false && (dataToDrill['ACID'] != 'AG001001' && dataToDrill['ACID'] != 'AG001002')) {
                    this.reportService.drillParam.reportname = 'Account Ledger Report';
                    this.reportService.drillParam.reportparam.IGNOREOPPOSITAC = 0;
                    this.reportService.drillParam.reportparam.MERGEREPORT = 0;
                    this.reportService.drillParam.reportparam.REPORTTYPE = 0;
                    this.reportService.drillParam.reportparam.SHOWNARATION = 0;
                    this.reportService.drillParam.reportparam.SHOWNDATE = 0;
                    this.reportService.drillParam.reportparam.COSTCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                    this.reportService.drillParam.reportparam.CCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                    this.reportService.drillParam.reportparam.REPORTTYPE = 2;
                    var acc = this.reportMainService.previouslyLoadedReportList.findIndex(function (report) { return report.reportname == 'Account Ledger Report'; });
                    if (acc >= 0) {
                        this.reportMainService.previouslyLoadedReportList.splice(acc, 1);
                    }
                    this.reportMainService.previouslyLoadedReportList.push({
                        reportname: 'Account Ledger Report',
                        activeurlpath: '/pages/financialreports/account-ledger-reports/accountledgerreport',
                        activerurlpath2: 'accountledgerreport'
                    });
                    return "/pages/financialreports/account-ledger-reports/accountledgerreport";
                }
                else if (ACCODEWithSL == false && ACIDWithPA == true && (dataToDrill['ACID'] != 'AG001001' && dataToDrill['ACID'] != 'AG001002')) {
                    this.reportService.drillParam.reportname = 'Party Ledger Report';
                    this.reportService.drillParam.reportparam.IGNOREOPPOSITAC = 0;
                    this.reportService.drillParam.reportparam.MERGEREPORT = 0;
                    this.reportService.drillParam.reportparam.REPORTTYPE = 0;
                    this.reportService.drillParam.reportparam.SHOWNARATION = 0;
                    this.reportService.drillParam.reportparam.SHOWNDATE = 0;
                    this.reportService.drillParam.reportparam.COSTCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                    this.reportService.drillParam.reportparam.CCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                    if (this.reportMainService.PartyLedger_loadedTimes == 0) {
                        this.reportMainService.previouslyLoadedReportList.push({
                            reportname: 'Party Ledger Report',
                            activeurlpath: '/pages/financialreports/account-ledger-reports/partyledgerreport',
                            activerurlpath2: 'partyledgerreport',
                            instanceWiseRepName: 'Party Ledger Report' + this.reportMainService.PartyLedger_loadedTimes,
                        });
                    }
                    else {
                        this.reportMainService.previouslyLoadedReportList.push({
                            reportname: 'Party Ledger Report' + '_' + this.reportMainService.PartyLedger_loadedTimes,
                            activeurlpath: '/pages/financialreports/account-ledger-reports/partyledgerreport',
                            activerurlpath2: 'partyledgerreport',
                            instanceWiseRepName: 'Party Ledger Report' + this.reportMainService.PartyLedger_loadedTimes,
                        });
                    }
                    this.instanceWiseRepName = 'Party Ledger Report' + this.reportMainService.PartyLedger_loadedTimes;
                    this.storeAndUpdateReportDataStore(this.reportService.drillParam, this.report_Result);
                    this.reportMainService.PartyLedger_loadedTimes = this.reportMainService.PartyLedger_loadedTimes + 1;
                    return "/pages/financialreports/account-ledger-reports/partyledgerreport";
                }
                else if (ACCODEWithSL == true) {
                    this.reportService.drillParam.reportname = 'Sub Ledger Report';
                    this.reportService.drillParam.reportparam.IGNOREOPPOSITAC = 0;
                    this.reportService.drillParam.reportparam.MERGEREPORT = 0;
                    this.reportService.drillParam.reportparam.REPORTTYPE = 0;
                    this.reportService.drillParam.reportparam.SHOWNARATION = 0;
                    this.reportService.drillParam.reportparam.SHOWNDATE = 0;
                    this.reportService.drillParam.reportparam.COSTCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                    this.reportService.drillParam.reportparam.CCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                    var sub_1 = this.reportMainService.previouslyLoadedReportList.findIndex(function (report) { return report.reportname == 'Sub Ledger Report'; });
                    if (sub_1 >= 0) {
                        this.reportMainService.previouslyLoadedReportList.splice(sub_1, 1);
                    }
                    this.reportMainService.previouslyLoadedReportList.push({
                        reportname: 'Sub Ledger Report',
                        activeurlpath: '/pages/financialreports/account-ledger-reports/sub-ledger-report',
                        activerurlpath2: 'sub-ledger-report'
                    });
                    return "/pages/financialreports/account-ledger-reports/sub-ledger-report";
                }
                break;
            case 'Day Book Report_1':
            case 'VTYPE':
                this.reportService.drillParam.reportname = 'Day Book Report_1';
                this.reportService.drillParam.reportparam.COMID = this.reportparam.COMID;
                this.reportService.drillParam.reportparam.DATE1 = dataToDrill['DATE'] ? dataToDrill['DATE'] : this.reportparam.DATE1;
                this.reportService.drillParam.reportparam.DATE2 = dataToDrill['DATE'] ? dataToDrill['DATE'] : this.reportparam.DATE2;
                this.reportService.drillParam.reportparam.BSDATE1 = dataToDrill['BSDATE'] ? dataToDrill['BSDATE'] : this.reportparam.BSDATE1;
                this.reportService.drillParam.reportparam.BSDATE2 = dataToDrill['BSDATE'] ? dataToDrill['BSDATE'] : this.reportparam.BSDATE2;
                this.reportService.drillParam.reportparam.DETAILREPORT = "1";
                this.reportService.drillParam.reportparam.DIV = this.reportparam.DIV;
                this.reportService.drillParam.reportparam.PHISCALID = this.reportparam.PHISCALID;
                this.reportService.drillParam.reportparam.USR = this.reportparam.USR;
                // this.reportService.drillParam.reportparam.VTYPE = this.gerVoucherTypeFromName(this.reportmasterDetail.DRILLKEY);
                this.reportService.drillParam.reportparam.VTYPE = dataToDrill['VOUCHER_ID'] ? dataToDrill['VOUCHER_ID'] : this.gerVoucherTypeFromName(dataToDrill['VOUCHERNAME']);
                break;
            case 'Account Ledger Report':
                //console.log("@@Account Ledger Report",this.reportparam)
                this.reportService.drillParam.reportparam.ACID = dataToDrill[this.reportmasterDetail.DRILLKEY];
                this.reportService.drillParam.reportparam.DATE1 = dataToDrill['DATE'] ? dataToDrill['DATE'] : (this.reportparam.DATE1 ? this.reportparam.DATE1 : this.masterService.PhiscalObj.BeginDate.split('T')[0]);
                this.reportService.drillParam.reportparam.DATE2 = dataToDrill['DATE'] ? dataToDrill['DATE'] : (this.reportparam.DATE2 ? this.reportparam.DATE2 : this.reportparam.DATE);
                this.reportService.drillParam.reportparam.BSDATE1 = dataToDrill['BSDATE'] ? dataToDrill['BSDATE'] : (this.reportparam.BSDATE1 ? this.reportparam.BSDATE1 : this.masterService.toBSDate(this.reportService.drillParam.reportparam.DATE1));
                this.reportService.drillParam.reportparam.BSDATE2 = dataToDrill['BSDATE'] ? dataToDrill['BSDATE'] : (this.reportparam.BSDATE2 ? this.reportparam.BSDATE2 : this.reportparam.BSDATE);
                this.reportService.drillParam.reportparam.DIV = this.reportparam.DIV;
                this.reportService.drillParam.reportparam.COMID = this.masterService.userProfile.CompanyInfo.COMPANYID;
                this.reportService.drillParam.reportparam.PHISCALID = this.reportparam.PHISCALID;
                this.reportService.drillParam.reportname = 'Account Ledger Report';
                this.reportService.drillParam.reportparam.IGNOREOPPOSITAC = 0;
                this.reportService.drillParam.reportparam.MERGEREPORT = 0;
                this.reportService.drillParam.reportparam.REPORTTYPE = 0;
                this.reportService.drillParam.reportparam.SHOWNARATION = 0;
                this.reportService.drillParam.reportparam.SHOWNDATE = 0;
                this.reportService.drillParam.reportparam.COSTCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                this.reportService.drillParam.reportparam.CCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                this.reportService.drillParam.reportparam.CUSTOMERNAME = this.reportmasterDetail.DRILLKEY == 'ACID_A' ? dataToDrill['ACNAME_A'] : (dataToDrill['ACNAME'] ? dataToDrill['ACNAME'] : this.reportparam.ACNAME);
                this.reportService.drillParam.reportparam.PARENT = this.reportService.drillParam.reportparam.ACID;
                this.reportService.drillParam.reportparam.ACNAME = this.reportmasterDetail.DRILLKEY == 'ACID_A' ? dataToDrill['ACNAME_A'] : dataToDrill['ACNAME'];
                var accountledger1 = this.reportMainService.previouslyLoadedReportList.findIndex(function (report) { return report.reportname == 'Account Ledger Report'; });
                if (accountledger1 >= 0) {
                    this.reportMainService.previouslyLoadedReportList.splice(accountledger1, 1);
                }
                this.reportMainService.previouslyLoadedReportList.push({
                    reportname: 'Account Ledger Report',
                    activeurlpath: '/pages/financialreports/account-ledger-reports/accountledgerreport',
                    activerurlpath2: 'accountledgerreport'
                });
                break;
            case 'Account Ledger Report_1':
                this.reportService.drillParam.reportparam.ACID = dataToDrill[this.reportmasterDetail.DRILLKEY];
                this.reportService.drillParam.reportparam.DATE1 = dataToDrill['DATE'] ? dataToDrill['DATE'] : (this.reportparam.DATE1 ? this.reportparam.DATE1 : this.masterService.PhiscalObj.BeginDate.split('T')[0]);
                this.reportService.drillParam.reportparam.DATE2 = dataToDrill['DATE'] ? dataToDrill['DATE'] : (this.reportparam.DATE2 ? this.reportparam.DATE2 : this.reportparam.DATE);
                this.reportService.drillParam.reportparam.BSDATE1 = dataToDrill['BSDATE'] ? dataToDrill['BSDATE'] : (this.reportparam.BSDATE1 ? this.reportparam.BSDATE1 : this.masterService.toBSDate(this.reportService.drillParam.reportparam.DATE1));
                this.reportService.drillParam.reportparam.BSDATE2 = dataToDrill['BSDATE'] ? dataToDrill['BSDATE'] : (this.reportparam.BSDATE2 ? this.reportparam.BSDATE2 : this.reportparam.BSDATE);
                this.reportService.drillParam.reportparam.DIV = this.reportparam.DIV;
                this.reportService.drillParam.reportparam.COMID = this.masterService.userProfile.CompanyInfo.COMPANYID;
                this.reportService.drillParam.reportparam.PHISCALID = this.reportparam.PHISCALID;
                this.reportService.drillParam.reportname = 'Account Ledger Report_1';
                this.reportService.drillParam.reportparam.IGNOREOPPOSITAC = 1;
                this.reportService.drillParam.reportparam.MERGEREPORT = 0;
                this.reportService.drillParam.reportparam.REPORTTYPE = 0;
                this.reportService.drillParam.reportparam.SHOWNARATION = 0;
                this.reportService.drillParam.reportparam.SHOWNDATE = 1;
                this.reportService.drillParam.reportparam.COSTCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                this.reportService.drillParam.reportparam.CCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                this.reportService.drillParam.reportparam.CUSTOMERNAME = this.reportmasterDetail.DRILLKEY == 'ACID_A' ? dataToDrill['ACNAME_A'] : (dataToDrill['ACNAME'] ? dataToDrill['ACNAME'] : this.reportparam.ACNAME);
                this.reportService.drillParam.reportparam.PARENT = this.reportService.drillParam.reportparam.ACID;
                this.reportService.drillParam.reportparam.ACNAME = this.reportmasterDetail.DRILLKEY == 'ACID_A' ? dataToDrill['ACNAME_A'] : dataToDrill['ACNAME'];
                this.reportService.drillParam.reportparam.SUMMARYLEDGER = 1;
                var accountledger_1 = this.reportMainService.previouslyLoadedReportList.findIndex(function (report) { return report.reportname == 'Account Ledger Report'; });
                if (accountledger_1 >= 0) {
                    this.reportMainService.previouslyLoadedReportList.splice(accountledger_1, 1);
                }
                this.reportMainService.previouslyLoadedReportList.push({
                    reportname: 'Account Ledger Report',
                    activeurlpath: '/pages/financialreports/account-ledger-reports/accountledgerreport',
                    activerurlpath2: 'accountledgerreport'
                });
                break;
            case 'Account Ledger Report_2':
                this.reportService.drillParam.reportparam.ACID = dataToDrill[this.reportmasterDetail.DRILLKEY];
                this.reportService.drillParam.reportparam.DATE1 = dataToDrill['DATE'] ? dataToDrill['DATE'] : (this.reportparam.DATE1 ? this.reportparam.DATE1 : this.masterService.PhiscalObj.BeginDate.split('T')[0]);
                this.reportService.drillParam.reportparam.DATE2 = dataToDrill['DATE'] ? dataToDrill['DATE'] : (this.reportparam.DATE2 ? this.reportparam.DATE2 : this.reportparam.DATE);
                this.reportService.drillParam.reportparam.BSDATE1 = dataToDrill['BSDATE'] ? dataToDrill['BSDATE'] : (this.reportparam.BSDATE1 ? this.reportparam.BSDATE1 : this.masterService.toBSDate(this.reportService.drillParam.reportparam.DATE1));
                this.reportService.drillParam.reportparam.BSDATE2 = dataToDrill['BSDATE'] ? dataToDrill['BSDATE'] : (this.reportparam.BSDATE2 ? this.reportparam.BSDATE2 : this.reportparam.BSDATE);
                this.reportService.drillParam.reportparam.DIV = this.reportparam.DIV;
                this.reportService.drillParam.reportparam.COMID = this.masterService.userProfile.CompanyInfo.COMPANYID;
                this.reportService.drillParam.reportparam.PHISCALID = this.reportparam.PHISCALID;
                this.reportService.drillParam.reportname = 'Account Ledger Report_2';
                this.reportService.drillParam.reportparam.IGNOREOPPOSITAC = 0;
                this.reportService.drillParam.reportparam.MERGEREPORT = 0;
                this.reportService.drillParam.reportparam.REPORTTYPE = 0;
                this.reportService.drillParam.reportparam.SHOWNARATION = 0;
                this.reportService.drillParam.reportparam.SHOWNDATE = 1;
                this.reportService.drillParam.reportparam.COSTCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                this.reportService.drillParam.reportparam.CCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                this.reportService.drillParam.reportparam.CUSTOMERNAME = this.reportmasterDetail.DRILLKEY == 'ACID_A' ? dataToDrill['ACNAME_A'] : (dataToDrill['ACNAME'] ? dataToDrill['ACNAME'] : this.reportparam.ACNAME);
                this.reportService.drillParam.reportparam.PARENT = this.reportService.drillParam.reportparam.ACID;
                this.reportService.drillParam.reportparam.ACNAME = this.reportmasterDetail.DRILLKEY == 'ACID_A' ? dataToDrill['ACNAME_A'] : dataToDrill['ACNAME'];
                this.reportService.drillParam.reportparam.SUMMARYLEDGER = 1;
                var accountledger2 = this.reportMainService.previouslyLoadedReportList.findIndex(function (report) { return report.reportname == 'Account Ledger Report'; });
                if (accountledger2 >= 0) {
                    this.reportMainService.previouslyLoadedReportList.splice(accountledger2, 1);
                }
                this.reportMainService.previouslyLoadedReportList.push({
                    reportname: 'Account Ledger Report',
                    activeurlpath: '/pages/financialreports/account-ledger-reports/accountledgerreport',
                    activerurlpath2: 'accountledgerreport'
                });
                break;
            case 'Party Ledger Report':
                //console.log("@@Party Ledger Report",this.reportparam)
                this.reportService.drillParam.reportparam.ACID = dataToDrill[this.reportmasterDetail.DRILLKEY];
                this.reportService.drillParam.reportparam.DATE1 = dataToDrill['DATE'] ? dataToDrill['DATE'] : (this.reportparam.DATE1 ? this.reportparam.DATE1 : this.masterService.PhiscalObj.BeginDate.split('T')[0]);
                this.reportService.drillParam.reportparam.DATE2 = dataToDrill['DATE'] ? dataToDrill['DATE'] : (this.reportparam.DATE2 ? this.reportparam.DATE2 : this.reportparam.DATE);
                this.reportService.drillParam.reportparam.BSDATE1 = dataToDrill['BSDATE'] ? dataToDrill['BSDATE'] : (this.reportparam.BSDATE1 ? this.reportparam.BSDATE1 : this.masterService.toBSDate(this.reportService.drillParam.reportparam.DATE1));
                this.reportService.drillParam.reportparam.BSDATE2 = dataToDrill['BSDATE'] ? dataToDrill['BSDATE'] : (this.reportparam.BSDATE2 ? this.reportparam.BSDATE2 : this.reportparam.BSDATE);
                this.reportService.drillParam.reportparam.DIV = this.reportparam.DIV;
                this.reportService.drillParam.reportparam.COMID = this.masterService.userProfile.CompanyInfo.COMPANYID;
                this.reportService.drillParam.reportparam.PHISCALID = this.reportparam.PHISCALID;
                this.reportService.drillParam.reportname = 'Party Ledger Report';
                this.reportService.drillParam.reportparam.IGNOREOPPOSITAC = 0;
                this.reportService.drillParam.reportparam.MERGEREPORT = 0;
                this.reportService.drillParam.reportparam.REPORTTYPE = 0;
                this.reportService.drillParam.reportparam.SHOWNARATION = 0;
                this.reportService.drillParam.reportparam.SHOWNDATE = 0;
                this.reportService.drillParam.reportparam.COSTCENTER = this.reportparam.COSTCENTER ? this.reportparam.COSTCENTER : this.reportparam.CCENTER;
                this.reportService.drillParam.reportparam.CCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                this.reportMainService.PartyLedgerObj.EnableCombineLedger = false;
                this.reportService.drillParam.reportparam.CUSTOMERNAME = this.reportmasterDetail.DRILLKEY == 'ACID_A' ? dataToDrill['ACNAME_A'] : (dataToDrill['CUSTOMER NAME'] ? dataToDrill['CUSTOMER NAME'] : (dataToDrill['ACNAME'] ? dataToDrill['ACNAME'] : this.reportparam.ACNAME));
                this.reportService.drillParam.reportparam.ACNAME = this.reportmasterDetail.DRILLKEY == 'ACID_A' ? dataToDrill['ACNAME_A'] : (dataToDrill['CUSTOMER NAME'] ? dataToDrill['CUSTOMER NAME'] : dataToDrill['ACNAME']);
                if (this.reportMainService.PartyLedger_loadedTimes == 0) {
                    this.reportMainService.previouslyLoadedReportList.push({
                        reportname: 'Party Ledger Report',
                        activeurlpath: '/pages/financialreports/account-ledger-reports/partyledgerreport',
                        activerurlpath2: 'partyledgerreport',
                        instanceWiseRepName: 'Party Ledger Report' + this.reportMainService.PartyLedger_loadedTimes,
                    });
                }
                else {
                    this.reportMainService.previouslyLoadedReportList.push({
                        reportname: 'Party Ledger Report' + '_' + this.reportMainService.PartyLedger_loadedTimes,
                        activeurlpath: '/pages/financialreports/account-ledger-reports/partyledgerreport',
                        activerurlpath2: 'partyledgerreport',
                        instanceWiseRepName: 'Party Ledger Report' + this.reportMainService.PartyLedger_loadedTimes,
                    });
                }
                this.instanceWiseRepName = 'Party Ledger Reportt' + this.reportMainService.PartyLedger_loadedTimes;
                this.storeAndUpdateReportDataStore(this.reportService.drillParam, this.report_Result);
                this.reportMainService.PartyLedger_loadedTimes = this.reportMainService.PartyLedger_loadedTimes + 1;
                break;
            case 'Party Ledger Report_1':
                // ////console.log("@@reportparam",this.reportparam)
                this.reportService.drillParam.reportparam.ACID = dataToDrill[this.reportmasterDetail.DRILLKEY];
                this.reportService.drillParam.reportparam.DATE1 = dataToDrill['DATE'] ? dataToDrill['DATE'] : (this.reportparam.DATE1 ? this.reportparam.DATE1 : this.masterService.PhiscalObj.BeginDate.split('T')[0]);
                this.reportService.drillParam.reportparam.DATE2 = dataToDrill['DATE'] ? dataToDrill['DATE'] : (this.reportparam.DATE2 ? this.reportparam.DATE2 : this.reportparam.DATE);
                this.reportService.drillParam.reportparam.BSDATE1 = dataToDrill['BSDATE'] ? dataToDrill['BSDATE'] : (this.reportparam.BSDATE1 ? this.reportparam.BSDATE1 : this.masterService.toBSDate(this.reportService.drillParam.reportparam.DATE1));
                this.reportService.drillParam.reportparam.BSDATE2 = dataToDrill['BSDATE'] ? dataToDrill['BSDATE'] : (this.reportparam.BSDATE2 ? this.reportparam.BSDATE2 : this.reportparam.BSDATE);
                this.reportService.drillParam.reportparam.DIV = this.reportparam.DIV;
                this.reportService.drillParam.reportparam.COMID = this.masterService.userProfile.CompanyInfo.COMPANYID;
                this.reportService.drillParam.reportparam.PHISCALID = this.reportparam.PHISCALID;
                this.reportService.drillParam.reportname = 'Party Ledger Report_1';
                this.reportService.drillParam.reportparam.IGNOREOPPOSITAC = 1;
                this.reportService.drillParam.reportparam.MERGEREPORT = 0;
                this.reportService.drillParam.reportparam.REPORTTYPE = 0;
                this.reportService.drillParam.reportparam.SHOWNARATION = 0;
                this.reportService.drillParam.reportparam.SHOWNDATE = 1;
                this.reportService.drillParam.reportparam.COSTCENTER = this.reportparam.COSTCENTER ? this.reportparam.COSTCENTER : this.reportparam.CCENTER;
                this.reportService.drillParam.reportparam.CCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                this.reportMainService.PartyLedgerObj.EnableCombineLedger = false;
                this.reportService.drillParam.reportparam.CUSTOMERNAME = this.reportmasterDetail.DRILLKEY == 'ACID_A' ? dataToDrill['ACNAME_A'] : (dataToDrill['CUSTOMER NAME'] ? dataToDrill['CUSTOMER NAME'] : (dataToDrill['ACNAME'] ? dataToDrill['ACNAME'] : this.reportparam.ACNAME));
                this.reportService.drillParam.reportparam.ACNAME = this.reportmasterDetail.DRILLKEY == 'ACID_A' ? dataToDrill['ACNAME_A'] : (dataToDrill['CUSTOMER NAME'] ? dataToDrill['CUSTOMER NAME'] : dataToDrill['ACNAME']);
                this.reportService.drillParam.reportparam.SUMMARYLEDGER = 1;
                if (this.reportMainService.PartyLedger_loadedTimes == 0) {
                    this.reportMainService.previouslyLoadedReportList.push({
                        reportname: 'Party Ledger Report',
                        activeurlpath: '/pages/financialreports/account-ledger-reports/partyledgerreport',
                        activerurlpath2: 'partyledgerreport',
                        instanceWiseRepName: 'Party Ledger Report' + this.reportMainService.PartyLedger_loadedTimes,
                    });
                }
                else {
                    this.reportMainService.previouslyLoadedReportList.push({
                        reportname: 'Party Ledger Report' + '_' + this.reportMainService.PartyLedger_loadedTimes,
                        activeurlpath: '/pages/financialreports/account-ledger-reports/partyledgerreport',
                        activerurlpath2: 'partyledgerreport',
                        instanceWiseRepName: 'Party Ledger Report' + this.reportMainService.PartyLedger_loadedTimes,
                    });
                }
                this.instanceWiseRepName = 'Party Ledger Report' + this.reportMainService.PartyLedger_loadedTimes;
                this.storeAndUpdateReportDataStore(this.reportService.drillParam, this.report_Result);
                this.reportMainService.PartyLedger_loadedTimes = this.reportMainService.PartyLedger_loadedTimes + 1;
                break;
            case 'Party Ledger Report_2':
                //console.log("@@Party Ledger Report_2",this.reportparam)
                this.reportService.drillParam.reportparam.ACID = dataToDrill[this.reportmasterDetail.DRILLKEY];
                this.reportService.drillParam.reportparam.DATE1 = dataToDrill['DATE'] ? dataToDrill['DATE'] : (this.reportparam.DATE1 ? this.reportparam.DATE1 : this.masterService.PhiscalObj.BeginDate.split('T')[0]);
                this.reportService.drillParam.reportparam.DATE2 = dataToDrill['DATE'] ? dataToDrill['DATE'] : (this.reportparam.DATE2 ? this.reportparam.DATE2 : this.reportparam.DATE);
                this.reportService.drillParam.reportparam.BSDATE1 = dataToDrill['BSDATE'] ? dataToDrill['BSDATE'] : (this.reportparam.BSDATE1 ? this.reportparam.BSDATE1 : this.masterService.toBSDate(this.reportService.drillParam.reportparam.DATE1));
                this.reportService.drillParam.reportparam.BSDATE2 = dataToDrill['BSDATE'] ? dataToDrill['BSDATE'] : (this.reportparam.BSDATE2 ? this.reportparam.BSDATE2 : this.reportparam.BSDATE);
                this.reportService.drillParam.reportparam.DIV = this.reportparam.DIV;
                this.reportService.drillParam.reportparam.COMID = this.masterService.userProfile.CompanyInfo.COMPANYID;
                this.reportService.drillParam.reportparam.PHISCALID = this.reportparam.PHISCALID;
                this.reportService.drillParam.reportname = 'Party Ledger Report_2';
                this.reportService.drillParam.reportparam.IGNOREOPPOSITAC = 0;
                this.reportService.drillParam.reportparam.MERGEREPORT = 0;
                this.reportService.drillParam.reportparam.REPORTTYPE = 0;
                this.reportService.drillParam.reportparam.SHOWNARATION = 0;
                this.reportService.drillParam.reportparam.SHOWNDATE = 1;
                this.reportService.drillParam.reportparam.COSTCENTER = this.reportparam.COSTCENTER ? this.reportparam.COSTCENTER : this.reportparam.CCENTER;
                this.reportService.drillParam.reportparam.CCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                this.reportMainService.PartyLedgerObj.EnableCombineLedger = false;
                this.reportService.drillParam.reportparam.CUSTOMERNAME = this.reportmasterDetail.DRILLKEY == 'ACID_A' ? dataToDrill['ACNAME_A'] : (dataToDrill['CUSTOMER NAME'] ? dataToDrill['CUSTOMER NAME'] : (dataToDrill['ACNAME'] ? dataToDrill['ACNAME'] : this.reportparam.ACNAME));
                this.reportService.drillParam.reportparam.ACNAME = this.reportmasterDetail.DRILLKEY == 'ACID_A' ? dataToDrill['ACNAME_A'] : (dataToDrill['CUSTOMER NAME'] ? dataToDrill['CUSTOMER NAME'] : dataToDrill['ACNAME']);
                this.reportService.drillParam.reportparam.SUMMARYLEDGER = 1;
                if (this.reportMainService.PartyLedger_loadedTimes == 0) {
                    this.reportMainService.previouslyLoadedReportList.push({
                        reportname: 'Party Ledger Report',
                        activeurlpath: '/pages/financialreports/account-ledger-reports/partyledgerreport',
                        activerurlpath2: 'partyledgerreport',
                        instanceWiseRepName: 'Party Ledger Report' + this.reportMainService.PartyLedger_loadedTimes,
                    });
                }
                else {
                    this.reportMainService.previouslyLoadedReportList.push({
                        reportname: 'Party Ledger Report' + '_' + this.reportMainService.PartyLedger_loadedTimes,
                        activeurlpath: '/pages/financialreports/account-ledger-reports/partyledgerreport',
                        activerurlpath2: 'partyledgerreport',
                        instanceWiseRepName: 'Party Ledger Report' + this.reportMainService.PartyLedger_loadedTimes,
                    });
                }
                this.instanceWiseRepName = 'Party Ledger Reportt' + this.reportMainService.PartyLedger_loadedTimes;
                this.storeAndUpdateReportDataStore(this.reportService.drillParam, this.report_Result);
                this.reportMainService.PartyLedger_loadedTimes = this.reportMainService.PartyLedger_loadedTimes + 1;
                break;
            case 'Summary Party Ledger Report':
                this.reportService.drillParam.reportparam.ACID = dataToDrill[this.reportmasterDetail.DRILLKEY];
                this.reportService.drillParam.reportparam.DATE1 = this.reportparam.DATE1;
                this.reportService.drillParam.reportparam.DATE2 = this.reportparam.DATE2;
                this.reportService.drillParam.reportparam.DIV = this.reportparam.DIV;
                this.reportService.drillParam.reportparam.COMID = this.masterService.userProfile.CompanyInfo.COMPANYID;
                this.reportService.drillParam.reportparam.PHISCALID = this.reportparam.PHISCALID;
                if (extraparam === "G") {
                    this.reportService.drillParam.reportname = 'Summary Party Ledger Report';
                    this.reportService.drillParam.reportparam.AREA = "%";
                    this.reportService.drillParam.reportparam.COSTCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                    this.reportService.drillParam.reportparam.CCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                    this.reportService.drillParam.reportparam.ISPARTYGROUPLEDGER = "0";
                    this.reportService.drillParam.reportparam.PARENT = this.reportparam.ACID;
                    var party = this.reportMainService.previouslyLoadedReportList.findIndex(function (report) { return report.reportname == 'Summary Party Ledger Report'; });
                    if (party >= 0) {
                        this.reportMainService.previouslyLoadedReportList.splice(party, 1);
                    }
                    this.reportMainService.previouslyLoadedReportList.push({
                        reportname: 'Summary Party Ledger Report',
                        activeurlpath: '/pages/financialreports/account-ledger-reports/summarypartyledger',
                        activerurlpath2: 'summarypartyledger'
                    });
                    return "/pages/financialreports/account-ledger-reports/summarypartyledger";
                }
                else if (ACCODEWithSL == false && ACIDWithPA == false) {
                    this.reportService.drillParam.reportname = 'Account Ledger Report';
                    this.reportService.drillParam.reportparam.IGNOREOPPOSITAC = 0;
                    this.reportService.drillParam.reportparam.MERGEREPORT = 0;
                    this.reportService.drillParam.reportparam.REPORTTYPE = 0;
                    this.reportService.drillParam.reportparam.SHOWNARATION = 0;
                    this.reportService.drillParam.reportparam.SHOWNDATE = 0;
                    this.reportService.drillParam.reportparam.COSTCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                    this.reportService.drillParam.reportparam.CCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                    var accountledger1_1 = this.reportMainService.previouslyLoadedReportList.findIndex(function (report) { return report.reportname == 'Account Ledger Report'; });
                    if (accountledger1_1 >= 0) {
                        this.reportMainService.previouslyLoadedReportList.splice(accountledger1_1, 1);
                    }
                    this.reportMainService.previouslyLoadedReportList.push({
                        reportname: 'Account Ledger Report',
                        activeurlpath: '/pages/financialreports/account-ledger-reports/accountledgerreport',
                        activerurlpath2: 'accountledgerreport'
                    });
                    return "/pages/financialreports/account-ledger-reports/accountledgerreport";
                }
                else if (ACCODEWithSL == false && ACIDWithPA == true) {
                    this.reportService.drillParam.reportname = 'Party Ledger Report';
                    this.reportService.drillParam.reportparam.IGNOREOPPOSITAC = 0;
                    this.reportService.drillParam.reportparam.MERGEREPORT = 0;
                    this.reportService.drillParam.reportparam.REPORTTYPE = 0;
                    this.reportService.drillParam.reportparam.SHOWNARATION = 0;
                    this.reportService.drillParam.reportparam.SHOWNDATE = 0;
                    this.reportService.drillParam.reportparam.COSTCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                    this.reportService.drillParam.reportparam.CCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                    if (this.reportMainService.PartyLedger_loadedTimes == 0) {
                        this.reportMainService.previouslyLoadedReportList.push({
                            reportname: 'Party Ledger Report',
                            activeurlpath: '/pages/financialreports/account-ledger-reports/partyledgerreport',
                            activerurlpath2: 'partyledgerreport',
                            instanceWiseRepName: 'Party Ledger Report' + this.reportMainService.PartyLedger_loadedTimes,
                        });
                    }
                    else {
                        this.reportMainService.previouslyLoadedReportList.push({
                            reportname: 'Party Ledger Report' + '_' + this.reportMainService.PartyLedger_loadedTimes,
                            activeurlpath: '/pages/financialreports/account-ledger-reports/partyledgerreport',
                            activerurlpath2: 'partyledgerreport',
                            instanceWiseRepName: 'Party Ledger Report' + this.reportMainService.PartyLedger_loadedTimes,
                        });
                    }
                    this.instanceWiseRepName = 'Party Ledger Report' + this.reportMainService.PartyLedger_loadedTimes;
                    this.storeAndUpdateReportDataStore(this.reportService.drillParam, this.report_Result);
                    this.reportMainService.PartyLedger_loadedTimes = this.reportMainService.PartyLedger_loadedTimes + 1;
                    return "/pages/financialreports/account-ledger-reports/partyledgerreport";
                }
                else if (ACCODEWithSL == true) {
                    this.reportService.drillParam.reportname = 'Sub Ledger Report';
                    this.reportService.drillParam.reportparam.IGNOREOPPOSITAC = 0;
                    this.reportService.drillParam.reportparam.MERGEREPORT = 0;
                    this.reportService.drillParam.reportparam.REPORTTYPE = 0;
                    this.reportService.drillParam.reportparam.SHOWNARATION = 0;
                    this.reportService.drillParam.reportparam.SHOWNDATE = 0;
                    this.reportService.drillParam.reportparam.COSTCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                    this.reportService.drillParam.reportparam.CCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                    var sub_2 = this.reportMainService.previouslyLoadedReportList.findIndex(function (report) { return report.reportname == 'Sub Ledger Report'; });
                    if (sub_2 >= 0) {
                        this.reportMainService.previouslyLoadedReportList.splice(sub_2, 1);
                    }
                    this.reportMainService.previouslyLoadedReportList.push({
                        reportname: 'Sub Ledger Report',
                        activeurlpath: '/pages/financialreports/account-ledger-reports/sub-ledger-report',
                        activerurlpath2: 'sub-ledger-report'
                    });
                    return "/pages/financialreports/account-ledger-reports/sub-ledger-report";
                }
                break;
            case 'Sub Ledger Report':
                // ////console.log("@@subb",dataToDrill[this.reportmasterDetail.DRILLKEY])
                var abc = dataToDrill[this.reportmasterDetail.DRILLKEY];
                var xyz = abc.split("_");
                // ////console.log("@xyz",xyz,xyz[0],xyz[1])
                this.reportService.drillParam.reportparam.SL_ACID = xyz[0];
                this.reportService.drillParam.reportparam.DATE1 = this.reportparam.DATE1;
                this.reportService.drillParam.reportparam.DATE2 = this.reportparam.DATE2;
                this.reportService.drillParam.reportparam.DIV = this.reportparam.DIV;
                this.reportService.drillParam.reportparam.COMID = this.masterService.userProfile.CompanyInfo.COMPANYID;
                this.reportService.drillParam.reportparam.PHISCALID = this.reportparam.PHISCALID;
                this.reportService.drillParam.reportname = 'Sub Ledger Report';
                this.reportService.drillParam.reportparam.SHOWNDATE = 0;
                this.reportService.drillParam.reportparam.ACID = xyz[1];
                this.reportService.drillParam.reportparam.COSTCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                this.reportService.drillParam.reportparam.CCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                this.reportService.drillParam.reportparam.ACCNAME = this.reportparam.ACCNAME;
                // this.reportService.drillParam.reportparam.SL_ACNAME = this.reportparam.SL_ACNAME;
                this.reportService.drillParam.reportparam.REPORTTYPE = 1;
                this.reportService.drillParam.reportparam.SL_ACNAME = dataToDrill['ACCOUNT'] ? dataToDrill['ACCOUNT'] : dataToDrill['ACNAME'];
                var sub = this.reportMainService.previouslyLoadedReportList.findIndex(function (report) { return report.reportname == 'Sub Ledger Report'; });
                if (sub >= 0) {
                    this.reportMainService.previouslyLoadedReportList.splice(sub, 1);
                }
                this.reportMainService.previouslyLoadedReportList.push({
                    reportname: 'Sub Ledger Report',
                    activeurlpath: '/pages/financialreports/account-ledger-reports/sub-ledger-report',
                    activerurlpath2: 'sub-ledger-report'
                });
                break;
            case 'Debtors Report':
                this.reportService.drillParam.reportparam.ACID = dataToDrill[this.reportmasterDetail.DRILLKEY];
                this.reportService.drillParam.reportparam.DATE1 = this.reportparam.DATE1;
                this.reportService.drillParam.reportparam.DATE2 = this.reportparam.DATE2;
                this.reportService.drillParam.reportparam.DIV = this.reportparam.DIV;
                this.reportService.drillParam.reportparam.COMID = this.masterService.userProfile.CompanyInfo.COMPANYID;
                this.reportService.drillParam.reportparam.PHISCALID = this.reportparam.PHISCALID;
                this.reportService.drillParam.reportname = 'Debtors Report';
                this.reportService.drillParam.reportparam.COSTCENTER = this.reportparam.COSTCENTER ? this.reportparam.COSTCENTER : this.reportparam.CCENTER;
                this.reportService.drillParam.reportparam.CCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                this.reportService.drillParam.reportparam.SHOWDPARTYDETAIL = 0;
                this.reportService.drillParam.reportparam.REPORTTYPE = 0;
                var debitors = this.reportMainService.previouslyLoadedReportList.findIndex(function (report) { return report.reportname == 'Debtors Report'; });
                if (debitors >= 0) {
                    this.reportMainService.previouslyLoadedReportList.splice(debitors, 1);
                }
                this.reportMainService.previouslyLoadedReportList.push({
                    reportname: 'Debtors Report',
                    activeurlpath: '/pages/financialreports/additionalreport/debtorsreport',
                    activerurlpath2: 'debtorsreport'
                });
                break;
            case 'Creditors Report':
                this.reportService.drillParam.reportname = 'Creditors Report';
                this.reportService.drillParam.reportparam.ACID = dataToDrill[this.reportmasterDetail.DRILLKEY];
                this.reportService.drillParam.reportparam.DATE1 = this.reportparam.DATE1;
                this.reportService.drillParam.reportparam.DATE2 = this.reportparam.DATE2;
                this.reportService.drillParam.reportparam.DIV = this.reportparam.DIV;
                this.reportService.drillParam.reportparam.COMID = this.masterService.userProfile.CompanyInfo.COMPANYID;
                this.reportService.drillParam.reportparam.PHISCALID = this.reportparam.PHISCALID;
                this.reportService.drillParam.reportparam.COSTCENTER = this.reportparam.COSTCENTER ? this.reportparam.COSTCENTER : this.reportparam.CCENTER;
                this.reportService.drillParam.reportparam.CCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                this.reportService.drillParam.reportparam.SHOWDPARTYDETAIL = 0;
                this.reportService.drillParam.reportparam.REPORTTYPE = 0;
                var creditors = this.reportMainService.previouslyLoadedReportList.findIndex(function (report) { return report.reportname == 'Creditors Report'; });
                if (creditors >= 0) {
                    this.reportMainService.previouslyLoadedReportList.splice(creditors, 1);
                }
                this.reportMainService.previouslyLoadedReportList.push({
                    reportname: 'Creditors Report',
                    activeurlpath: '/pages/financialreports/additionalreport/creditorsreport',
                    activerurlpath2: 'creditorsreport'
                });
                break;
            case 'Debtors Bill Tracking Report':
            case 'Debtors Bill Tracking Report_1':
                this.reportService.drillParam.reportname = reporttype;
                this.reportService.drillParam.reportparam.ACID = dataToDrill[this.reportmasterDetail.DRILLKEY];
                this.reportService.drillParam.reportparam.ACNAME = dataToDrill['CUSTOMER NAME'];
                this.reportService.drillParam.reportparam.DATE1 = this.reportparam.DATE1;
                this.reportService.drillParam.reportparam.DATE2 = this.reportparam.DATE2;
                this.reportService.drillParam.reportparam.DIV = this.reportparam.DIV;
                this.reportService.drillParam.reportparam.COMID = this.masterService.userProfile.CompanyInfo.COMPANYID;
                this.reportService.drillParam.reportparam.COMPANYID = this.masterService.userProfile.CompanyInfo.COMPANYID;
                this.reportService.drillParam.reportparam.PHISCALID = this.reportparam.PHISCALID;
                this.reportService.drillParam.reportparam.COSTCENTER = this.reportparam.COSTCENTER ? this.reportparam.COSTCENTER : this.reportparam.CCENTER;
                this.reportService.drillParam.reportparam.CCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                this.reportService.drillParam.reportparam.DETAIL = '1';
                var debtors_bill = this.reportMainService.previouslyLoadedReportList.findIndex(function (report) { return report.reportname == 'Debtors Bill Tracking Report'; });
                if (debtors_bill >= 0) {
                    this.reportMainService.previouslyLoadedReportList.splice(creditors, 1);
                }
                this.reportMainService.previouslyLoadedReportList.push({
                    reportname: 'Debtors Bill Tracking Report',
                    activeurlpath: '/pages/financialreports/additionalreport/bill-tracking-report',
                    activerurlpath2: 'bill-tracking-report'
                });
                break;
            case 'Creditors Bill Tracking Report':
            case 'Creditors Bill Tracking Report_1':
                this.reportService.drillParam.reportname = reporttype;
                this.reportService.drillParam.reportparam.ACID = dataToDrill[this.reportmasterDetail.DRILLKEY];
                this.reportService.drillParam.reportparam.DATE1 = this.reportparam.DATE1;
                this.reportService.drillParam.reportparam.DATE2 = this.reportparam.DATE2;
                this.reportService.drillParam.reportparam.DIV = this.reportparam.DIV;
                this.reportService.drillParam.reportparam.COMID = this.masterService.userProfile.CompanyInfo.COMPANYID;
                this.reportService.drillParam.reportparam.COMPANYID = this.masterService.userProfile.CompanyInfo.COMPANYID;
                this.reportService.drillParam.reportparam.PHISCALID = this.reportparam.PHISCALID;
                this.reportService.drillParam.reportparam.COSTCENTER = this.reportparam.COSTCENTER ? this.reportparam.COSTCENTER : this.reportparam.CCENTER;
                this.reportService.drillParam.reportparam.CCENTER = this.reportparam.CCENTER ? this.reportparam.CCENTER : this.reportparam.COSTCENTER;
                this.reportService.drillParam.reportparam.DETAIL = '1';
                var creditors_bill = this.reportMainService.previouslyLoadedReportList.findIndex(function (report) { return report.reportname == 'Creditors Bill Tracking Report'; });
                if (creditors_bill >= 0) {
                    this.reportMainService.previouslyLoadedReportList.splice(creditors, 1);
                }
                this.reportMainService.previouslyLoadedReportList.push({
                    reportname: 'Creditors Bill Tracking Report',
                    activeurlpath: '/pages/financialreports/additionalreport/creditorsbill-tracking-report',
                    activerurlpath2: 'creditorsbill-tracking-report'
                });
                break;
        }
    };
    ReportMain.prototype.gerVoucherTypeFromName = function (voucherName) {
        switch (voucherName.toUpperCase()) {
            case "JOURNAL":
                return 'JV';
            default:
                break;
        }
    };
    ReportMain.prototype.ReportCriteriaDisplay = function (reportparam, reportname, REPORTDISPLAYNAME) {
        var _this = this;
        // ////console.log("@@criteriapart",reportparam,reportname)
        console.log(reportparam);
        if (reportparam.DIVISIONNAME) {
            this.divisionDisplayName = reportparam.DIVISIONNAME;
        }
        else {
            this.divisionDisplayName = '';
        }
        if (reportparam.COSTCENTERDISPLAYNAME) {
            this.costcenterDisplayName = reportparam.COSTCENTERDISPLAYNAME;
        }
        else {
            this.costcenterDisplayName = '';
        }
        if (reportparam.COSTCENTERCATEGORYNAME) {
            this.costcenterCategoryDisplayName = reportparam.COSTCENTERCATEGORYNAME;
        }
        else {
            this.costcenterCategoryDisplayName = '';
        }
        if (reportparam.INTERVAL) {
            console.log("ss", reportparam.INTERVAL);
            if (reportparam.INTERVAL == "1") {
                this.INTERVALNAME = "Monthly";
            }
            else if (reportparam.INTERVAL == "2") {
                this.INTERVALNAME = "Quaterly";
            }
            else if (reportparam.INTERVAL == "3") {
                this.INTERVALNAME = "Annually";
            }
            else {
                this.INTERVALNAME = "ALL";
            }
        }
        if ((reportname == 'Account Ledger Report' || reportname == 'Account Ledger Report_1' || reportname == 'Account Ledger Report_2')
            && this.reportMainService.AccoutLedgerObj.EnableCombineLedger != true) {
            this.reportDisplayName = 'Account Ledger';
            this.labelDisplayName = 'Ledger';
            this.ledgerDisplayName = reportparam.ACNAME;
            if (reportparam.SUMMARYLEDGER == 0) {
                this.reportTypeDisplay = "@Detail Ledger Report";
            }
            else if (reportparam.SUMMARYLEDGER == 1) {
                this.reportTypeDisplay = "@Summary Ledger Report";
            }
            else {
                this.reportTypeDisplay = '';
            }
            // if (reportparam.COSTCENTER != '%') {
            //   this.masterService.getCostCenterName(reportparam.COSTCENTER).subscribe(
            //     data => {
            //       this.costcenterDisplayName = data.result[0] ? data.result[0].COSTCENTERNAME : '';
            //     })
            // } else {
            //   this.costcenterDisplayName = '';
            // }
        }
        else if ((reportname == 'Party Ledger Report' || reportname == 'Party Ledger Report_1' || this.reportname == 'Party Ledger Report_2') && this.reportMainService.PartyLedgerObj.EnableCombineLedger != true) {
            this.reportDisplayName = 'Party Ledger';
            if (reportparam.ACNAME != '' && reportparam.ACNAME != null && reportparam.ACNAME != undefined) {
                this.labelDisplayName = 'Ledger';
                this.ledgerDisplayName = reportparam.ACNAME;
            }
            if (reportparam.SUMMARYLEDGER == 0) {
                this.reportTypeDisplay = "@Detail Ledger Report";
            }
            else if (reportparam.SUMMARYLEDGER == 1) {
                this.reportTypeDisplay = "@Summary Ledger Report";
            }
            else {
                this.reportTypeDisplay = '';
            }
            // if (reportparam.COSTCENTER != '%') {
            //   this.masterService.getCostCenterName(reportparam.COSTCENTER).subscribe(
            //     data => {
            //       this.costcenterDisplayName = data.result[0] ? data.result[0].COSTCENTERNAME : '';
            //     })
            // } else {
            //   this.costcenterDisplayName = '';
            // }
        }
        else if ((reportname == 'Account Ledger Report' || reportname == 'Account Ledger Report_1' || reportname == 'Account Ledger Report_2')
            && this.reportMainService.AccoutLedgerObj.EnableCombineLedger == true) {
            this.reportDisplayName = 'Account Ledger';
            this.labelDisplayName = 'Ledger';
            this.ledgerDisplayName = 'Combine Ledger Selection';
        }
        else if ((reportname == 'Party Ledger Report' || reportname == 'Party Ledger Report_1' || this.reportname == 'Party Ledger Report_2') && this.reportMainService.PartyLedgerObj.EnableCombineLedger == true) {
            this.reportDisplayName = 'Party Ledger';
            this.labelDisplayName = 'Ledger';
            this.ledgerDisplayName = 'Combine Ledger Selection';
        }
        else if ((reportname == 'Summary Ledger Report' || reportname == 'Summary Ledger Report_1') && reportparam.REPORTTYPE == 0) {
            this.reportDisplayName = 'Account Group Ledger';
            if (reportname == 'Summary Ledger Report') {
                this.labelDisplayName = 'Account Group';
            }
            else {
                this.labelDisplayName = '';
            }
            this.masterService.getAllAccount(reportparam.PARENT).subscribe(function (data) {
                _this.ledgerDisplayName = data.result ? data.result.ACNAME : '';
            });
            // if (reportparam.CCENTER != '%') {
            //   this.masterService.getCostCenterName(reportparam.CCENTER).subscribe(
            //     data => {
            //       this.costcenterDisplayName = data.result[0] ? data.result[0].COSTCENTERNAME : '';
            //     })
            // } else {
            //   this.costcenterDisplayName = '';
            // }
        }
        else if ((reportname == 'Summary Ledger Report' || reportname == 'Summary Ledger Report_1') && reportparam.REPORTTYPE == 2) {
            this.reportDisplayName = 'Account Group Ledger';
            if (reportname == 'Summary Ledger Report') {
                this.labelDisplayName = 'Account Group';
            }
            else {
                this.labelDisplayName = '';
            }
            this.ledgerDisplayName = 'Cost Center Wise Report';
        }
        else if ((reportname == 'Summary Party Ledger Report' || reportname == 'Summary Party Ledger Report_1' ||
            reportname == 'Summary Party Ledger Report_2') && reportparam.REPORTTYPE == 0) {
            this.reportDisplayName = 'Party Group Ledger';
            if (reportname == 'Summary Party Ledger Report') {
                this.labelDisplayName = 'Party Group';
            }
            else {
                this.labelDisplayName = '';
            }
            this.masterService.getAllAccount(reportparam.PARENT).subscribe(function (data) {
                _this.ledgerDisplayName = data.result ? data.result.ACNAME : '';
            });
            // if (reportparam.CCENTER != '%') {
            //   this.masterService.getCostCenterName(reportparam.CCENTER).subscribe(
            //     data => {
            //       this.costcenterDisplayName = data.result[0] ? data.result[0].COSTCENTERNAME : '';
            //     })
            // } else {
            //   this.costcenterDisplayName = '';
            // }
        }
        else if ((reportname == 'Summary Party Ledger Report' || reportname == 'Summary Party Ledger Report_1' ||
            reportname == 'Summary Party Ledger Report_2') && reportparam.REPORTTYPE == 1) {
            this.reportDisplayName = 'Party Group Ledger';
            if (reportname == 'Summary Party Ledger Report') {
                this.labelDisplayName = 'Party Group';
            }
            else {
                this.labelDisplayName = '';
            }
            this.ledgerDisplayName = 'Area Wise Report';
            // if (reportparam.CCENTER != '%') {
            //   this.masterService.getCostCenterName(reportparam.CCENTER).subscribe(
            //     data => {
            //       this.costcenterDisplayName = data.result[0] ? data.result[0].COSTCENTERNAME : '';
            //     })
            // } else {
            //   this.costcenterDisplayName = '';
            // }
        }
        else if ((reportname == 'Summary Party Ledger Report' || reportname == 'Summary Party Ledger Report_1' ||
            reportname == 'Summary Party Ledger Report_2') && reportparam.REPORTTYPE == 2) {
            this.reportDisplayName = 'Party Group Ledger';
            if (reportname == 'Summary Party Ledger Report') {
                this.labelDisplayName = 'Party Group';
            }
            else {
                this.labelDisplayName = '';
            }
            this.ledgerDisplayName = 'Cost Center Wise Report';
        }
        else if (this.reportMainService.ReportFilterObject.EnableCombineLedger == true) {
            this.ledgerDisplayName = 'Combine Ledger Selection';
        }
        else if ((reportname == 'vat register report' || reportname == 'vat register report_1')
            && (reportparam.VTYPE == '%' || reportparam.VTYPE === undefined
                || reportparam.VTYPE == '')) {
            this.reportDisplayName = 'Voucher Register';
            this.labelDisplayName = 'Voucher Name';
            this.ledgerDisplayName = reportparam.VTYPEDISPLAYNAME;
            this.accountDisplayName = reportparam.ACNAME;
            this.entryuserDisplayName = reportparam.USER;
            // if (reportparam.CostCenter != '%') {
            //   this.masterService.getCostCenterName(reportparam.CostCenter).subscribe(
            //     data => {
            //       this.costcenterDisplayName = data.result[0] ? data.result[0].COSTCENTERNAME : '';
            //     })
            // }
        }
        else if (reportname == 'vat register report' || reportname == 'vat register report_1') {
            this.reportDisplayName = 'Voucher Register';
            this.labelDisplayName = 'Voucher Name';
            this.ledgerDisplayName = reportparam.VTYPEDISPLAYNAME;
            this.accountDisplayName = reportparam.ACNAME;
            this.entryuserDisplayName = reportparam.USER;
            // if (reportparam.CostCenter != '%') {
            //   this.masterService.getCostCenterName(reportparam.CostCenter).subscribe(
            //     data => {
            //       this.costcenterDisplayName = data.result[0] ? data.result[0].COSTCENTERNAME : '';
            //     })
            // } else {
            //   this.costcenterDisplayName = '';
            // }
        }
        else if (reportname == 'Sub Ledger Report' || reportname == 'Sub Ledger Report_1') {
            this.reportDisplayName = 'Sub Ledger - Ledger Report';
            if (reportparam.ACID != '%' && reportparam.ACID != '' && reportparam.ACCNAME) {
                this.labelDisplayName = 'Main Ledger';
                this.ledgerDisplayName = reportparam.ACCNAME;
            }
            else {
                this.labelDisplayName = '';
                this.ledgerDisplayName = '';
            }
            if (reportparam.SL_ACID != '%' && reportparam.SL_ACID != '') {
                this.subledgerlabelDisplayName = 'Sub Ledger';
                this.subledgerDisplayName = reportparam.SL_ACNAME;
            }
            else {
                this.subledgerlabelDisplayName = '';
                this.subledgerDisplayName = '';
            }
            // if (reportparam.CCENTER != '%') {
            //   this.masterService.getCostCenterName(reportparam.CCENTER).subscribe(
            //     data => {
            //       this.costcenterDisplayName = data.result[0] ? data.result[0].COSTCENTERNAME : '';
            //     })
            // } else {
            //   this.costcenterDisplayName = '';
            // }
            // ////console.log("@@yeha",reportname,this.labelDisplayName)
        }
        else if (reportname == 'Debtors Report' || reportname == 'Debtors Report_1') {
            this.reportDisplayName = 'Debtors Report';
            this.labelDisplayName = '';
            if (reportparam.OPNINGBLONLY == 1) {
                this.ledgerDisplayName = '@Opening Debtors Only';
            }
            else {
                this.ledgerDisplayName = '';
            }
            if (reportparam.AREAWISEDISPLAYNAME) {
                this.AreawiseDisplayName = reportparam.AREAWISEDISPLAYNAME;
            }
            else {
                this.AreawiseDisplayName = '';
            }
            if (reportparam.PARTYGROUPDISPLAYNAME) {
                this.PartyGroupDisplayName = reportparam.PARTYGROUPDISPLAYNAME;
            }
            else {
                this.PartyGroupDisplayName = '';
            }
            if (reportparam.PARTYCATEGORYDISPLAYNAME) {
                this.PartyCategoryDisplayName = reportparam.PARTYCATEGORYDISPLAYNAME;
            }
            else {
                this.PartyCategoryDisplayName = '';
            }
            // if (reportparam.Debtors_CostCenter != '%') {
            //   this.masterService.getCostCenterName(reportparam.Debtors_CostCenter).subscribe(
            //     data => {
            //       this.costcenterDisplayName = data.result[0] ? data.result[0].COSTCENTERNAME : '';
            //     })
            // } else {
            //   this.costcenterDisplayName = '';
            // }
        }
        else if (reportname == 'Creditors Report' || reportname == 'Creditors Report_1') {
            this.reportDisplayName = 'Creditors Report';
            this.labelDisplayName = '';
            if (reportparam.OPNINGBLONLY == 1) {
                this.ledgerDisplayName = '@Opening Debtors Only';
            }
            else {
                this.ledgerDisplayName = '';
            }
            if (reportparam.AREAWISEDISPLAYNAME) {
                this.AreawiseDisplayName = reportparam.AREAWISEDISPLAYNAME;
            }
            else {
                this.AreawiseDisplayName = '';
            }
            if (reportparam.PARTYGROUPDISPLAYNAME) {
                this.PartyGroupDisplayName = reportparam.PARTYGROUPDISPLAYNAME;
            }
            else {
                this.PartyGroupDisplayName = '';
            }
            if (reportparam.PARTYCATEGORYDISPLAYNAME) {
                this.PartyCategoryDisplayName = reportparam.PARTYCATEGORYDISPLAYNAME;
            }
            else {
                this.PartyCategoryDisplayName = '';
            }
            // if (reportparam.Creditors_CostCenter != '%') {
            //   this.masterService.getCostCenterName(reportparam.Creditors_CostCenter).subscribe(
            //     data => {
            //       this.costcenterDisplayName = data.result[0] ? data.result[0].COSTCENTERNAME : '';
            //     })
            // } else {
            //   this.costcenterDisplayName = '';
            // }
        }
        else if (reportname == 'Debtors Aging Report' || reportname == 'Debtors Aging Report_1') {
            this.reportDisplayName = 'Debtors Ageing Report';
            this.labelDisplayName = '';
            this.ledgerDisplayName = '';
            // if (reportparam.DebtorsAgeing_CostCenter != '%') {
            //   this.masterService.getCostCenterName(reportparam.DebtorsAgeing_CostCenter).subscribe(
            //     data => {
            //       this.costcenterDisplayName = data.result[0] ? data.result[0].COSTCENTERNAME : '';
            //     })
            // } else {
            //   this.costcenterDisplayName = '';
            // }
        }
        else if (reportname == 'Creditors Aging Report' || reportname == 'Creditors Aging Report_1') {
            this.reportDisplayName = 'Creditors Ageing Report';
            this.labelDisplayName = '';
            this.ledgerDisplayName = '';
            // if (reportparam.CreditorsAgeing_CostCenter != '%') {
            //   this.masterService.getCostCenterName(reportparam.CreditorsAgeing_CostCenter).subscribe(
            //     data => {
            //       this.costcenterDisplayName = data.result[0] ? data.result[0].COSTCENTERNAME : '';
            //     })
            // } else {
            //   this.costcenterDisplayName = '';
            // }
        }
        else if (reportname == 'Cash/Bank Book Report' || reportname == 'Cash/Bank Book Report_1' || reportname == 'Cash/Bank Book Report_2') {
            this.reportDisplayName = 'Cash/Bank Book Report';
            this.labelDisplayName = '';
            this.accountDisplayName = reportparam.ACNAME;
            if (reportparam.DETAILREPORT == "0") {
                this.detailreportDisplayName = '@Summary Report';
            }
            else if (reportparam.DETAILREPORT == "1") {
                this.detailreportDisplayName = '@Detail Report';
            }
            if (reportparam.REPORTMODE == 1) {
                this.ledgerDisplayName = '@Cash Book Only';
            }
            else if (reportparam.REPORTMODE == 2) {
                this.ledgerDisplayName = '@Bank Book Only';
            }
            else {
                this.ledgerDisplayName = '';
            }
        }
        else if ((reportname == 'Day Book Report' || reportname == 'Day Book Report_1')
            && (reportparam.VTYPE == '%' || reportparam.VTYPE === undefined
                || reportparam.VTYPE == '')) {
            this.reportDisplayName = 'Day Book Report';
            this.labelDisplayName = 'Voucher Name';
            this.ledgerDisplayName = 'All';
            if (reportparam.USR != '%') {
                this.entryuserDisplayName = reportparam.USR;
            }
            else {
                this.entryuserDisplayName = '';
            }
        }
        else if (reportname == 'Day Book Report' || reportname == 'Day Book Report_1') {
            this.reportDisplayName = 'Day Book Report';
            this.labelDisplayName = 'Voucher Name';
            this.ledgerDisplayName = reportparam.VTYPEDISPLAYNAME;
            if (reportparam.USR != '%') {
                this.entryuserDisplayName = reportparam.USR;
            }
            else {
                this.entryuserDisplayName = '';
            }
        }
        else if (reportname == 'Sub Ledger Report ACBASE' || reportname == 'Sub Ledger Report ACBASE_1') {
            this.reportDisplayName = 'Sub Ledger - Summary Report';
            if (reportparam.ACID != '%' && reportparam.ACID != '') {
                this.labelDisplayName = 'Main Ledger';
                this.ledgerDisplayName = reportparam.ACCNAME;
            }
            else {
                this.labelDisplayName = '';
                this.ledgerDisplayName = '';
            }
            if (reportparam.SL_ACID != '%' && reportparam.SL_ACID != '') {
                this.subledgerlabelDisplayName = 'Sub Ledger';
                this.subledgerDisplayName = reportparam.SL_ACNAME;
            }
            else {
                this.subledgerlabelDisplayName = '';
                this.subledgerDisplayName = '';
            }
            // if (reportparam.CCENTER != '%') {
            //   this.masterService.getCostCenterName(reportparam.CCENTER).subscribe(
            //     data => {
            //       this.costcenterDisplayName = data.result[0] ? data.result[0].COSTCENTERNAME : '';
            //     })
            // } else {
            //   this.costcenterDisplayName = '';
            // }
        }
        else if (reportname == 'Trial Balance Report' || reportname == 'Trial Balance Report_1' || reportname == 'Trial Balance Report_2') {
            this.reportDisplayName = 'Trial Balance Report';
            // if (reportparam.COSTCENTER != '%') {
            //   this.masterService.getCostCenterName(reportparam.COSTCENTER).subscribe(
            //     data => {
            //       this.costcenterDisplayName = data.result[0] ? data.result[0].COSTCENTERNAME : '';
            //     });
            // } else {
            //   this.costcenterDisplayName = '';
            // }
            if (reportparam.LEDGERWISE == 0) {
                this.ledgerDisplayName = '@Group Wise Report';
            }
            else if (reportparam.LEDGERWISE == 1) {
                this.ledgerDisplayName = '@Ledger Wise Report';
            }
            else {
                this.ledgerDisplayName = '';
            }
            if (reportparam.SUMMARYREPORT == 0) {
                this.detailreportDisplayName = '@Detail Report';
            }
            else if (reportparam.SUMMARYREPORT == 1) {
                this.detailreportDisplayName = '@Summary Report';
            }
            else {
                this.detailreportDisplayName = '';
            }
        }
        else if (reportname == 'Additional Cost Voucherwise Summary Report' || reportname == 'Additional Cost Voucherwise Detail Report') {
            this.reportDisplayName = 'Additional Cost Voucherwise Report';
            if (reportparam.SUMMARYREPORT == 0) {
                this.detailreportDisplayName = '@Detail Report';
            }
            else if (reportparam.SUMMARYREPORT == 1) {
                this.detailreportDisplayName = '@Summary Report';
            }
            else {
                this.detailreportDisplayName = '';
            }
            if (reportparam.ACID != '%' && reportparam.ACID != '' && reportparam.ACCNAME) {
                this.supplierDisplayName = reportparam.ACCNAME;
            }
            else {
                this.supplierDisplayName = '';
            }
            if (reportparam.VOUCHER != '%' && reportparam.VOUCHER != '') {
                this.voucherDisplayName = reportparam.VOUCHER;
            }
            else {
                this.voucherDisplayName = '';
            }
        }
        else if (reportname == 'Additional Cost Itemwise Summary Report' || reportname == 'Additional Cost Itemwise Detail Report') {
            this.reportDisplayName = 'Additional Cost Itemwise Report';
            if (reportparam.SUMMARYREPORT == 0) {
                this.detailreportDisplayName = '@Detail Report';
            }
            else if (reportparam.SUMMARYREPORT == 1) {
                this.detailreportDisplayName = '@Summary Report';
            }
            else {
                this.detailreportDisplayName = '';
            }
            if (reportparam.ACID != '%' && reportparam.ACID != '' && reportparam.ACCNAME) {
                this.supplierDisplayName = reportparam.ACCNAME;
            }
            else {
                this.supplierDisplayName = '';
            }
            if (reportparam.VOUCHER != '%' && reportparam.VOUCHER != '') {
                this.voucherDisplayName = reportparam.VOUCHER;
            }
            else {
                this.voucherDisplayName = '';
            }
        }
        else if (reportname.startsWith('Stock Summary') && reportname.includes('Account')) {
            this.reportDisplayName = 'Stock Summary Report';
            if (reportparam.DETAILFORMAT == 1) {
                this.detailreportDisplayName = '@Detail Report';
            }
            else if (reportparam.DETAILFORMAT == 0) {
                this.detailreportDisplayName = '@Summary Report';
            }
            else {
                this.detailreportDisplayName = '';
            }
        }
        else if (reportname.startsWith('Current Stock Warehousewise') && reportname.includes('Account')) {
            this.reportDisplayName = 'Stock Report - Warehouse Wise';
        }
        else if (reportname.startsWith('Stock Abc') && reportname.includes('Account')) {
            this.reportDisplayName = 'Stock Abc Analysis Report';
        }
        else if (reportname.startsWith('Stock Valuation') && reportname.includes('Account')) {
            this.reportDisplayName = 'Stock Valuation Report';
        }
        else if (reportname.startsWith('Stock Ledger') && reportname.includes('Account')) {
            this.reportDisplayName = 'Stock Ledger Report';
        }
        else if (reportname == 'Post Dated Cheque Voucher Report' || reportname == 'Post Dated Cheque Voucher Report_1') {
            this.reportDisplayName = 'Post Dated Cheque Voucher Report';
            if (reportparam.DETAILSREPORT == "0") {
                this.detailreportDisplayName = '@Summary Report';
            }
            else if (reportparam.DETAILSREPORT == "1") {
                this.detailreportDisplayName = '@Detail Report';
            }
        }
        else {
            this.reportDisplayName = REPORTDISPLAYNAME ? REPORTDISPLAYNAME : reportname;
        }
        if ((reportname == 'vat register report' || reportname == 'vat register report_1') &&
            reportparam.REPORT_MODE == 0) {
            this.reportmodeisZero = 0;
        }
        else if ((reportname == 'vat register report' || reportname == 'vat register report_1') &&
            reportparam.REPORT_MODE == 1) {
            this.reportmodeisZero = 1;
        }
        // if (reportparam.VTYPE == 'OB') {
        //   this.ledgerDisplayName = 'A/C OPENING_BLCD';
        // } else if (reportparam.VTYPE == 'CE' || reportparam.VTYPE == 'CV') {
        //   this.ledgerDisplayName = 'CONTRA VOUCHER';
        // } else if (reportparam.VTYPE == 'CN') {
        //   this.ledgerDisplayName = 'CREDIT NOTE VOUCHER';
        // } else if (reportparam.VTYPE == 'DN') {
        //   this.ledgerDisplayName = 'DEBIT NOTE VOUCHER';
        // } else if (reportparam.VTYPE == 'PV') {
        //   this.ledgerDisplayName = 'EXPENSE VOUCHER';
        // } else if (reportparam.VTYPE == 'RV') {
        //   this.ledgerDisplayName = 'INCOME VOUCHER';
        // } else if (reportparam.VTYPE == 'JV') {
        //   this.ledgerDisplayName = 'JOURNAL VOUCHER';
        // } else if (reportparam.VTYPE == 'AO') {
        //   this.ledgerDisplayName = 'Party OPENING_BLCD';
        // } else if (reportparam.VTYPE == 'PI') {
        //   this.ledgerDisplayName = 'PURCHASE VOUCHER';
        // } else if (reportparam.VTYPE == 'TI') {
        //   this.ledgerDisplayName = 'SALES VOUCHER';
        // }
        //For BS Date in Reports Heading
        if (reportparam.DATE1 && reportparam.DATE2) {
            this.changeDate(reportparam.DATE1, reportparam.DATE2, "AD");
        }
        else if (reportparam.DATE) {
            this.changeDate(reportparam.DATE, reportparam.DATE, "AD");
        }
    };
    ReportMain.prototype.prepareOptionalHeader = function (headers) {
        if (headers === void 0) { headers = []; }
        var tmpoptionalreportHeaders = [];
        if (headers.length) {
            for (var _i = 0, headers_1 = headers; _i < headers_1.length; _i++) {
                var head = headers_1[_i];
                if (head.hasOwnProperty('colGroup') && head.colGroup != '' && (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10_util__["isNullOrUndefined"])(head.colGroup))) {
                    var totColGroup = headers.filter(function (x) { return x.colGroup == head.colGroup; });
                    var existingOptHeader = tmpoptionalreportHeaders.filter(function (y) { return y.colGroup == head.colGroup; });
                    if (!existingOptHeader.length) {
                        tmpoptionalreportHeaders.push({
                            colGroup: head.colGroup,
                            width: getMergedHeaderWidth(totColGroup) + 'px',
                            colspan: Number(totColGroup.length),
                            alignment: 'center',
                            mappingName: head.mappingName
                        });
                    }
                }
                else {
                    tmpoptionalreportHeaders.push({
                        colGroup: '',
                        colspan: 1,
                        width: Number(head.size) + 'px',
                        alignment: 'left',
                        mappingName: head.mappingName
                    });
                }
            }
            var filteredOptionalHeader = tmpoptionalreportHeaders.filter(function (z) { return z.colGroup != ''; });
            this.optionalreportHeaders = filteredOptionalHeader.length ? tmpoptionalreportHeaders : [];
        }
        function getMergedHeaderWidth(subHeader) {
            if (subHeader === void 0) { subHeader = []; }
            var totalWidthOfColMerged = 0;
            if (subHeader.length) {
                subHeader.forEach(function (x) {
                    totalWidthOfColMerged = totalWidthOfColMerged + Number(x.size);
                });
                return totalWidthOfColMerged;
            }
            else {
                return 100;
            }
        }
    };
    ReportMain.prototype.getReportHeadingStyles = function () {
        var myStyles = {
            'font-size.px': this.userSetting.REPHEADING_FONTSIZE ? this.userSetting.REPHEADING_FONTSIZE : '12',
            'font-family': this.userSetting.REPHEADING_FONTNAME ? this.userSetting.REPHEADING_FONTNAME : 'Roboto, Arial, sans-serif',
        };
        return myStyles;
    };
    ReportMain.prototype.getReportDetailStyles = function () {
        var myStyles = {
            'font-size.px': this.userSetting.REPDETAIL_FONTSIZE ? this.userSetting.REPDETAIL_FONTSIZE : '11',
            'font-family': this.userSetting.REPDETAIL_FONTNAME ? this.userSetting.REPDETAIL_FONTNAME : 'Tahoma',
        };
        return myStyles;
    };
    ReportMain.prototype.getReportFooterStyles = function () {
        var myStyles = {
            'font-size.px': this.userSetting.REPTOTAL_FONTSIZE ? this.userSetting.REPTOTAL_FONTSIZE : '12',
            'font-family': this.userSetting.REPTOTAL_FONTNAME ? this.userSetting.REPTOTAL_FONTNAME : 'Tahoma',
        };
        return myStyles;
    };
    ReportMain.prototype.clickNext = function () {
        this.body.nativeElement.scrollTop = 0;
    };
    ReportMain.prototype.clicked = function (index) {
        this.HighlightRow = index;
    };
    ReportMain.prototype.clickedPL = function (index, data) {
        //console.log("@@index",index,data)
        this.HighlightRow = index;
    };
    ReportMain.prototype.printExcelFormat = function () {
        var vatno = this.userProfile.CompanyInfo.VAT ? this.userProfile.CompanyInfo.VAT : this.userProfile.CompanyInfo.GSTNO;
        var report_name = this.showReportName ? this.showReportName : this.reportname;
        this.param = '';
        try {
            var popupWin = void 0;
            var header = '<center><label style="font-weight:bold;font-size:16px;">' + report_name.toUpperCase() + '</label></center><center><label style="font-weight:bold;font-size:18px;">' + this.userProfile.CompanyInfo.NAME + '</label></center><center><label style="font-weight:bold;font-size:13px">' + this.userProfile.CompanyInfo.ADDRESS + '</label></center><center><label style="font-weight:bold"> PAN No : <label style="letter-spacing:5px">' + vatno + '</label></label></center><br>';
            if ((this.reportname == 'Party Ledger Report' || this.reportname == 'Party Ledger Report_1' || this.reportname == 'Party Ledger Report_2') && this.reportparam.ACNAME != "") {
                this.param = '<label style=" text-align:left;font-size:14px;font-weight:bold;">' + 'CUSTOMER : ' + this.reportparam.ACNAME + '</label><br><label style=" text-align:left;font-size:14px;">' + 'PAN No : ' + this.reportparam.VATNO + '</label>&nbsp;<label style=" text-align:left;font-size:14px;">' + 'Address : ' + this.reportparam.ADDRESS + '</label><br><label style=" text-align:left;font-size:14px;">' + 'Contact Number : ' + this.reportparam.PHONE + '</label>&nbsp;<label style=" text-align:left;font-size:14px;">' + 'Email : ' + this.reportparam.EMAIL + '</label><br><br>';
                // //console.log("Reached inside", this.param)
            }
            this.param += '<label style="font-weight:bold;font-size:12px;">' + this.getReportParamForPreview(this.reportparam, this.reportDetail) + '</label>' + '<label></label>';
            var table = '<table>  <thead>   <tr>';
            if (this.reportname == 'Trial Balance Report' || this.reportname == 'Trial Balance Report_1') {
                var table1 = '<th style="border-top:2px solid black;border-right:2px solid black;padding : 0px; font-size:14px;" colspan="1">' + " " + '</th>';
                table1 += '<th style="border-top:2px solid black;border-right:2px solid black;padding : 0px; font-size:14px;" colspan="2">' + " CLOSING BALANCE" + '</th>';
                table += table1;
            }
            else if (this.reportname == 'Trial Balance Report_2') {
                var table1 = '<th style="border-top:2px solid black;border-right:2px solid black;padding : 0px; font-size:14px;" colspan="1">' + " " + '</th>';
                table1 += '<th style="border-top:2px solid black;border-right:2px solid black;padding : 0px; font-size:14px;" colspan="2">' + " OPENING BALANCE" + '</th>';
                table1 += '<th style="border-top:2px solid black;border-right:2px solid black;padding : 0px; font-size:14px;" colspan="2">' + " RUNNING BALANCE" + '</th>';
                table1 += '<th style="border-top:2px solid black;border-right:2px solid black;padding : 0px; font-size:14px;" colspan="2">' + " CLOSING BALANCE" + '</th>';
                table += table1;
            }
            table += '</tr> </thead> <thead> <tr>';
            for (var _i = 0, _a = this.reportHeaders; _i < _a.length; _i++) {
                var column1 = _a[_i];
                var table1 = void 0;
                if (column1.colPosition == 1) {
                    table1 = '<th style="border-top:2px solid black;border-left:2px solid black;border-right:2px solid black;padding : 0px; font-size:14px;" >' + column1.colHeader + '</th>';
                }
                else {
                    table1 = '<th style="border-top:2px solid black;border-right:2px solid black;padding : 0px; font-size:14px;" >' + column1.colHeader + '</th>';
                }
                table += table1;
            }
            ;
            table += '</tr> </thead>';
            table += '<tbody style="border-left: 2px solid black;">';
            for (var _b = 0, _c = this.reportData; _b < _c.length; _b++) {
                var row = _c[_b];
                if (row.FFLG == 'B') {
                    table += '<tr style="font-weight:bold;">';
                }
                else {
                    table += '<tr>';
                }
                for (var _d = 0, _e = this.reportHeaders; _d < _e.length; _d++) {
                    var column1 = _e[_d];
                    var v = row[column1.mappingName];
                    if (v == null)
                        v = "";
                    var table1 = void 0;
                    if (column1.alignment && column1.alignment == 1) {
                        table1 = '<td style="border-top:2px solid black;border-right:2px solid black;padding : 0px;height: 5px;text-align:right;font-size:14px;"><pre style="margin: 0 !important;overflow: hidden;">' + v + '</pre></td>';
                    }
                    else {
                        if (column1.colPosition == 1) {
                            table1 = '<td style="border-top:2px solid black;border-left:2px solid black;border-right:2px solid black;padding : 0px;height: 5px;font-size:14px;"><pre style="margin: 0 !important;overflow: hidden;">' + v + '</pre></td>';
                        }
                        else {
                            table1 = '<td style="border-top:2px solid black;border-right:2px solid black;padding : 0px;height: 5px;font-size:14px;"><pre style="margin: 0 !important;overflow: hidden;">' + v + '</pre></td>';
                        }
                    }
                    table += table1;
                    '</tr>';
                }
                ;
            }
            table += '</tbody><tfoot>';
            for (var _f = 0, _g = this.reportFooter; _f < _g.length; _f++) {
                var row = _g[_f];
                table += '<tr>';
                for (var _h = 0, _j = this.reportHeaders; _h < _j.length; _h++) {
                    var column1 = _j[_h];
                    var v = row[column1.mappingName];
                    if (v == null)
                        v = "";
                    if (column1.alignment && column1.alignment == 0) {
                        table += '<td style="border-top:2px solid black;border-right:2px solid black;border-bottom:2px solid black;padding : 0px;text-align:inherit;font-size:14px;font-weight:bold;">' + v + '</td>';
                    }
                    else {
                        if (column1.colPosition == 1) {
                            table += '<td style="border-top:2px solid black;border-right:2px solid black;border-left:2px solid black;border-bottom:2px solid black;padding : 0px;text-align:inherit;font-size:14px;font-weight:bold;">' + v + '</td>';
                        }
                        else {
                            table += '<td style="border-top:2px solid black;border-right:2px solid black;border-bottom:2px solid black;padding : 0px;text-align:right;font-size:14px;font-weight:bold;">' + v + '</td>';
                        }
                    }
                }
                ;
                '</tr>';
            }
            ;
            table += '</tfoot></table>';
            // //console.log("@@table",table)
            var Ht = header + this.param + table;
            popupWin = window.open('', '_blank', 'top=0,left=0,height=1000px,width=1500px');
            popupWin.document.write(table);
            popupWin.document.title = this.reportname;
            popupWin.document.body.innerHTML = Ht;
            popupWin.focus();
            popupWin.print();
        }
        catch (ex) {
            alert(ex);
        }
        ;
    };
    ReportMain.prototype.SaveReport = function () {
        var _this = this;
        ////console.log("@@this.reportparam", this.reportparam)
        this.masterService.SaveAdditionalCostReport(this.reportparam).subscribe(function (res) {
            if (res.status == "ok") {
                _this.alertService.info('Additional Cost Report is successfully saved');
            }
            else {
            }
        });
    };
    ReportMain.prototype.downloadReportPrepareFromAPI = function (extension) {
        var _this = this;
        var item = 1;
        var excelColumnName = this.reportHeaders.map(function (x) {
            return {
                SNO: item++,
                ReportName: _this.reportname,
                ColumnName: x.colHeader,
                MappingName: x.mappingName,
                MergeHeader: x.colGroup
            };
        });
        this.DialogMessage = "Report is Downloading...";
        this.childModal.show();
        var paramObj = { reportname: this.reportname, reportparam: this.reportparam,
            columnSetting: excelColumnName ? excelColumnName : this.reportHeaders, REPORTDISPLAYNAME: this.showReportName ? this.showReportName : this.reportname, extension: extension };
        this.masterService.DownLoadAllExcelReportPreparedFromAPI(paramObj).subscribe(function (data) {
            _this.downloadFile(data);
            setTimeout(function () {
                _this.childModal.hide();
            }, 2000);
        }, function (error) {
        });
    };
    ReportMain.prototype.downloadFile = function (response) {
        var element = document.createElement("a");
        element.href = URL.createObjectURL(response.content);
        element.download = response.filename;
        document.body.appendChild(element);
        element.click();
    };
    ReportMain.prototype.prepareOptionalDynamicHeader = function (headers) {
        if (headers === void 0) { headers = []; }
        var tmpoptionalreportHeaders = [];
        var index = 0;
        if (headers.length) {
            for (var i in headers) {
                if (this.reportmasterDetail.HASDYNAMICCOLUMNS && this.reportmasterDetail.DYNAMICHEADER == 1) {
                    var dynamicOptionalHeader = 'Default';
                    var totColGroup2 = void 0;
                    if (this.reportmasterDetail.DYNAMICHEADER == 1 && headers[i].mappingName.includes("~")) {
                        var abc = headers[i].mappingName.split('~');
                        dynamicOptionalHeader = abc[0];
                    }
                    else {
                        dynamicOptionalHeader = 'Default';
                    }
                    totColGroup2 = this.allHeaders.filter(function (x) { return x.mappingName.split('~')[0] == headers[i].mappingName.split('~')[0]; });
                    var existingOptHeader2 = tmpoptionalreportHeaders.filter(function (y) { return y.mappingName.split('~')[0] == headers[i].mappingName.split('~')[0]; });
                    if (index + 1 >= this.reportmasterDetail.DYNAMICCOLUMNSLEVEL) {
                        if (!existingOptHeader2.length) {
                            tmpoptionalreportHeaders.push({
                                colGroup: dynamicOptionalHeader == 'Default' ? '' : dynamicOptionalHeader,
                                width: getMergedDynamicHeaderWidth(totColGroup2, this.reportmasterDetail.DYNAMICCOLUMNWIDTH) + 'px',
                                colspan: Number(totColGroup2.length),
                                alignment: 'center',
                                mappingName: headers[i].mappingName,
                                colPosition: dynamicOptionalHeader == 'Default' ? headers[i].colPosition + 5000 : headers[i].colPosition,
                                visible: headers[i].visible
                            });
                        }
                    }
                    else {
                        tmpoptionalreportHeaders.push({
                            colGroup: '',
                            colspan: 1,
                            width: Number(headers[i].size) + 'px',
                            alignment: 'center',
                            mappingName: headers[i].mappingName,
                            colPosition: headers[i].colPosition,
                            visible: headers[i].visible
                        });
                    }
                }
                index++;
            }
            var sortedArray = __WEBPACK_IMPORTED_MODULE_8_lodash___default.a.sortBy(tmpoptionalreportHeaders, 'colPosition');
            tmpoptionalreportHeaders = sortedArray;
            var _filteredheaders = tmpoptionalreportHeaders.filter(function (x) { return (x.visible == 1) || (x.visible == 0 && x.mappingName.includes("~")); });
            this.optionalreportHeaders = _filteredheaders.length ? _filteredheaders : (tmpoptionalreportHeaders.length ? tmpoptionalreportHeaders : []);
        }
        function getMergedDynamicHeaderWidth(subHeader, DYNAMICCOLUMNWIDTH) {
            if (subHeader === void 0) { subHeader = []; }
            //console.log("@@DYNAMICCOLUMNWIDTH",DYNAMICCOLUMNWIDTH)
            var totalWidthOfColMerged = 0;
            if (subHeader.length) {
                subHeader.forEach(function (x) {
                    totalWidthOfColMerged = totalWidthOfColMerged + Number(DYNAMICCOLUMNWIDTH);
                });
                return totalWidthOfColMerged;
            }
            else {
                return 100;
            }
        }
    };
    ReportMain.prototype.preparereportHeader = function (headers) {
        if (headers === void 0) { headers = []; }
        var tmpreportHeaders = [];
        if (headers.length) {
            for (var _i = 0, headers_2 = headers; _i < headers_2.length; _i++) {
                var head = headers_2[_i];
                if (head.hasOwnProperty('colHeader') && head.colHeader != '' && (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10_util__["isNullOrUndefined"])(head.colHeader))) {
                    var totColHeader = headers.filter(function (x) { return x.colHeader == head.colHeader; });
                    var existingOptHeader = tmpreportHeaders.filter(function (y) { return y.colHeader == head.colHeader; });
                    if (!existingOptHeader.length) {
                        tmpreportHeaders.push({
                            width: getMergedHeaderWidth(totColHeader) + 'px',
                            colspan: Number(totColHeader.length),
                            alignment: 'center',
                            mappingName: head.mappingName,
                            colHeader: head.colHeader
                        });
                    }
                }
                else {
                    tmpreportHeaders.push({
                        colHeader: head.colHeader,
                        colspan: 1,
                        width: Number(head.size) + 'px',
                        alignment: 'center',
                        mappingName: head.mappingName
                    });
                }
            }
            this.mergereportHeaders = tmpreportHeaders ? tmpreportHeaders : [];
        }
        function getMergedHeaderWidth(subHeader) {
            if (subHeader === void 0) { subHeader = []; }
            var totalWidthOfColMerged = 0;
            if (subHeader.length) {
                subHeader.forEach(function (x) {
                    totalWidthOfColMerged = totalWidthOfColMerged + Number(x.size);
                });
                return totalWidthOfColMerged;
            }
            else {
                return 100;
            }
        }
    };
    ReportMain.prototype.refreshReportColumns = function () {
        var _this = this;
        this.reportMainService.refreshReportColumnFormate(this.reportname, this.reportparam)
            .subscribe(function (res) {
            if (res.status == "ok") {
                _this.reportColumnFormate = res.result;
                _this.rowsperpage = res.result ? res.result[0].rowsperpage : '100';
                if (_this.reportColumnFormate.length == 0) {
                    _this.ReportColumnName = _this.reportHeaders.map(function (x) {
                        return {
                            ReportName: _this.reportname,
                            ColumnName: x.colHeader,
                            MappingName: x.mappingName,
                            Show: x.Visible,
                            ColWidth: x.size,
                            Format: x.stringFormat,
                            Align: x.alignment,
                            ColumnPosition: x.colPosition,
                            ColGroup: x.ColGroup,
                            GroupSummary: x.groupSummaryFunction,
                            GSFunction: x.groupSummaryFunction,
                            TableSummary: x.showTables,
                            TSFunction: x.tableSummaryFunction,
                            ReportTitle: _this.reportTitle,
                            rowsperpage: _this.rowsperpage
                        };
                    });
                    _this.ReportColumnName.forEach(function (x, z) { x.Show = 1, x.TableSummary = 0, x.GroupSummary = 0, x.ColumnPosition = z + 1; });
                }
                else {
                    _this.ReportColumnName = _this.reportColumnFormate.map(function (x) {
                        return {
                            ReportName: _this.reportname,
                            ColumnName: x.ColumnName,
                            MappingName: x.MappingName,
                            Show: x.Show,
                            ColWidth: x.ColWidth,
                            Format: x.Format,
                            Align: x.Align,
                            ColumnPosition: x.ColumnPosition,
                            ColGroup: x.ColGroup,
                            GroupSummary: x.GroupSummary,
                            GSFunction: x.GSFunction,
                            TableSummary: x.TableSummary,
                            TSFunction: x.TSFunction,
                            ReportTitle: _this.reportTitle,
                            rowsperpage: x.rowsperpage
                        };
                    });
                }
            }
            else {
                _this.reportColumnFormate = [];
            }
        });
    };
    ReportMain.prototype.checkData = function (index, data) {
        if (data.isCheck == true) {
            this.checkedRows.push(data);
        }
    };
    ReportMain.prototype.showcellpayPopup = function () {
        this.cellpayPayment();
    };
    ReportMain.prototype.cellpayPayment = function () {
        var _this = this;
        this.celldataList = this.checkedRows.filter(function (x) { return x.isCheck == true; });
        //console.log("dataList", this.celldataList)
        if (this.celldataList.length == 0) {
            return;
        }
        this.reportService.drillParam.reportparam.ACID = this.celldataList[0]['ACID'];
        this.reportService.drillParam.reportparam.ACNAME = this.celldataList[0]['CUSTOMER NAME'];
        //console.log("this.celldataList[0]['DR AMOUNT']", this.celldataList[0]['DR AMOUNT'])
        this.reportService.drillParam.reportparam.DRAMNT = this.celldataList[0]['DR AMOUNT'];
        // this.router.navigate(
        //   [this.getDrillRouteVoucherWise('CX')],
        //   {
        //     queryParams: {
        //       mode: 'PAYMENT',
        //       returnUrl: this.activeurlpath,
        //     }
        //   }
        // ); 
        this._trnMainService.initialFormLoad(75);
        //console.log("TrntranList", this._trnMainService.TrnMainObj.TrntranList)
        this._trnMainService.TrnMainObj.TRNMODE = 'Party Payment';
        // this._trnMainService.TrnMainObj.TRNAC = 'AG124';
        // this._trnMainService.TrnMainObj.TRNACName = 'GLOBAL IME BANK - 02654666522222';
        this._trnMainService.TrnMainObj.TrntranList[0].AccountItem.ACID = this.reportService.drillParam.reportparam.ACID;
        this._trnMainService.TrnMainObj.TrntranList[0].A_ACID = this.reportService.drillParam.reportparam.ACID;
        this._trnMainService.TrnMainObj.TrntranList[0].AccountItem.ACNAME = this.reportService.drillParam.reportparam.ACNAME;
        this._trnMainService.TrnMainObj.TrntranList[0].acitem = this._trnMainService.TrnMainObj.TrntranList[0].AccountItem;
        var dramnt = this.reportService.drillParam.reportparam.DRAMNT;
        var result = dramnt.replace(/,/g, "");
        // //console.log("@@result", result)
        this._trnMainService.TrnMainObj.TrntranList[0].DRAMNT = result;
        var ACID = this.reportService.drillParam.reportparam.ACID;
        var ACNAME = this.reportService.drillParam.reportparam.ACNAME;
        // this._trnMainService.getAccountWiseTrnAmount(ACID);
        this.masterService.getDetailsOfAccount(ACNAME).subscribe(function (res) {
            if (res.status == "ok") {
                var accDetails = res.result;
                _this.checkBankDetails(accDetails[0]);
            }
        });
    };
    ReportMain.prototype.checkBankDetails = function (ac) {
        var _this = this;
        this.masterService.getAllAccount(ac.ACID)
            .subscribe(function (data) {
            if (data.status == 'ok') {
                if (data.result5.length > 0) {
                    _this._trnMainService.TrnMainObj.TrntranList[0].disableBank = false;
                    _this._trnMainService.TrnMainObj.TrntranList[0].hasAdditionalBank = true;
                    _this._trnMainService.TrnMainObj.TrntranList[0].BANKNAME = ac.BANKNAME;
                    _this._trnMainService.TrnMainObj.TrntranList[0].BANKCODE = ac.BANKCODE;
                    _this._trnMainService.TrnMainObj.TrntranList[0].ChequeNo = ac.BANKACCOUNTNUMBER;
                }
                else {
                    _this._trnMainService.TrnMainObj.TrntranList[0].BANKID = ac.BANKID;
                    _this._trnMainService.TrnMainObj.TrntranList[0].BANKNAME = ac.BANKNAME;
                    _this._trnMainService.TrnMainObj.TrntranList[0].BANKCODE = ac.BANKCODE;
                    _this._trnMainService.TrnMainObj.TrntranList[0].ChequeNo = ac.BANKACCOUNTNUMBER;
                    _this._trnMainService.TrnMainObj.TrntranList[0].hasAdditionalBank = false;
                    if (ac.BANKCODE) {
                        _this._trnMainService.TrnMainObj.TrntranList[0].disableBank = true;
                    }
                    else {
                        _this._trnMainService.TrnMainObj.TrntranList[0].disableBank = false;
                    }
                }
                var dramnt = _this.reportService.drillParam.reportparam.DRAMNT;
                var result = dramnt.replace(/,/g, "");
                _this._trnMainService.TrnMainObj.TrntranList[0].DRAMNT = result;
                _this.AddCellPayFee();
            }
        });
        this._trnMainService.TrnMainObj.TrntranList[0].NARATION1 = "e-transfer";
    };
    ReportMain.prototype.AddCellPayFee = function () {
        var _this = this;
        //console.log("CheckResult", this._trnMainService.TrnMainObj.TrntranList[0])
        this._trnMainService.addRowForTransaction(0);
        var dramnt = this._trnMainService.TrnMainObj.TrntranList[0].DRAMNT;
        var cramnt = this._trnMainService.TrnMainObj.TrntranList[0].DRAMNT;
        if (dramnt == null || dramnt == undefined) {
            this.alertService.warning("DRAMNT missing!");
            return;
        }
        if (this._trnMainService.TrnMainObj.TrntranList[0].acitem.ACNAME != 'CellPay Fee' && (dramnt < 100 || dramnt > 1000000)) {
            this.alertService.warning("Please enter amount between 100 and 1000000!");
            this._trnMainService.TrnMainObj.TrntranList[0].DRAMNT = 0;
            if (this._trnMainService.TrnMainObj.TrntranList[1] && this._trnMainService.TrnMainObj.TrntranList[1].acitem &&
                this._trnMainService.TrnMainObj.TrntranList[1].acitem.ACNAME == 'CellPay Fee') {
                this._trnMainService.TrnMainObj.TrntranList[1].acitem.ACID = '';
                this._trnMainService.TrnMainObj.TrntranList[1].acitem.ACNAME = '';
                this._trnMainService.TrnMainObj.TrntranList[1].DRAMNT = 0;
            }
            return;
        }
        this.CellPayFee = (dramnt ? dramnt : cramnt).toString();
        // //console.log("CellPayFeeACID", this.masterService.userSetting.CellPayFee);
        if (this.masterService.userSetting.CellPayFee == null || this.masterService.userSetting.CellPayFee == '' ||
            this.masterService.userSetting.CellPayFee == undefined) {
            this.alertService.info("Please add CellPayFee ACID in database!");
            return;
        }
        this.masterService.getFeeFromCellPay(this.CellPayFee).subscribe(function (y) {
            _this._trnMainService.TrnMainObj.TrntranList[1].DRAMNT = y.fee;
            var ac = {};
            ac.ACID = _this.masterService.userSetting.CellPayFee ? _this.masterService.userSetting.CellPayFee : 'AG479';
            ac.ACNAME = 'CellPay Fee';
            _this._trnMainService.TrnMainObj.TrntranList[1].AccountItem = ac;
            _this._trnMainService.TrnMainObj.TrntranList[1].acitem = ac;
            _this._trnMainService.TrnMainObj.TrntranList[1].A_ACID = ac.ACID;
            _this._trnMainService.TrnMainObj.TrntranList[1].AccountItem.ACCODE = ac.ACCODE;
            if (_this._trnMainService.TrnMainObj.TrntranList[1].acitem.ACNAME == 'CellPay Fee') {
                _this._trnMainService.TrnMainObj.TrntranList[1].disableCellPayRow = true;
            }
            _this.showCellPayPaymentPopup = true;
        });
    };
    ReportMain.prototype.OkCellpayCommand = function () {
        var _this = this;
        if (this._trnMainService.TrnMainObj.TrntranList[1].DRAMNT && this._trnMainService.TrnMainObj.TrntranList[1].DRAMNT > 0) {
            if (this._trnMainService.TrnMainObj.TRNACName == null ||
                this._trnMainService.TrnMainObj.TRNACName === undefined ||
                this._trnMainService.TrnMainObj.TRNACName == "") {
                alert("CASH/BANK A/C IS NOT SELECTED. PLS SELECT IT FIRST");
                return;
            }
            this.masterService.saveTransaction(this._trnMainService.TrnMainObj.Mode, this._trnMainService.TrnMainObj)
                .subscribe(function (data) {
                if (data.status == "ok") {
                    var xyz = _this.checkedRows.findIndex(function (x) { return x.ACID == _this._trnMainService.TrnMainObj.TrntranList[0].A_ACID; });
                    _this.checkedRows.splice(xyz, 1);
                    _this.spinnerService.hide();
                    _this.showCellPayPaymentPopup = false;
                    _this.cellpayPayment();
                }
            });
        }
    };
    ReportMain.prototype.CancelCellpayCommand = function () {
        this.showCellPayPaymentPopup = false;
    };
    ReportMain.prototype.showAcPartyList = function () {
        //console.log("trnmode", this._trnMainService.TrnMainObj.TRNMODE)
        var TRNMODE = 'PartyPaymentCellpay';
        this.gridACListPartyPopupSettings = {
            title: "Accounts",
            apiEndpoints: "/getAccountPagedListByMapId/Master/" + TRNMODE + "/",
            defaultFilterIndex: 1,
            columns: [
                {
                    key: "ACCODE",
                    title: "AC CODE",
                    hidden: false,
                    noSearch: false
                },
                {
                    key: "ACNAME",
                    title: "A/C NAME",
                    hidden: false,
                    noSearch: false
                }
            ]
        };
        this.genericGridACListParty.show();
    };
    ReportMain.prototype.onAcPartySelect = function (value) {
        this._trnMainService.TrnMainObj.TRNAC = value.ACID;
        this._trnMainService.TrnMainObj.TRNACName = value.ACNAME;
    };
    ReportMain.prototype.exportReportFormat = function () {
        var _this = this;
        this.spinnerService.show('Exporting, Please Wait...');
        this.reportMainService.exportReportFormat(this.reportname).subscribe(function (res) {
            var blob = new Blob([JSON.stringify(res)], { type: "text/html" });
            var reportdownloadname = _this.showReportName + ".txt";
            var url = URL.createObjectURL(blob);
            var a = document.createElement("a");
            a.href = url;
            a.download = reportdownloadname;
            a.click();
            _this.spinnerService.hide();
            _this.CancelCommand();
        }, function (error) {
            _this.alertService.info("Exporting Unsuccessfull!!");
            _this.spinnerService.hide();
            _this.CancelCommand();
        });
    };
    return ReportMain;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('childModal'),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_3_ng2_bootstrap__["b" /* ModalDirective */])
], ReportMain.prototype, "childModal", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])('reportname'),
    __metadata("design:type", String)
], ReportMain.prototype, "reportname", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], ReportMain.prototype, "reportMaster", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('body'),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]
    /**
        * Context menu
        */
    )
], ReportMain.prototype, "body", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("datatable"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"])
], ReportMain.prototype, "datatable", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridACListParty"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_12__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], ReportMain.prototype, "genericGridACListParty", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('reportnameinlist'),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"])
], ReportMain.prototype, "reportnameinlist", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])("document : keydown", ["$event"]),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [KeyboardEvent]),
    __metadata("design:returntype", void 0)
], ReportMain.prototype, "updown", null);
ReportMain = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'reportmain',
        template: __webpack_require__(1785),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_4__common_repositories_masterRepo_service__["a" /* MasterRepo */],
        __WEBPACK_IMPORTED_MODULE_5__common_services_permission__["a" /* AuthService */],
        __WEBPACK_IMPORTED_MODULE_2__angular_router__["Router"],
        __WEBPACK_IMPORTED_MODULE_2__angular_router__["ActivatedRoute"],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["a" /* MdDialog */],
        __WEBPACK_IMPORTED_MODULE_14__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_17__ReportMain_service__["a" /* ReportMainService */],
        __WEBPACK_IMPORTED_MODULE_13__common_popupLists_report_filter_report_filter_service__["a" /* ReportFilterService */],
        __WEBPACK_IMPORTED_MODULE_15__common_services_spinner_spinner_service__["a" /* SpinnerService */],
        __WEBPACK_IMPORTED_MODULE_7_angular2_hotkeys__["HotkeysService"],
        __WEBPACK_IMPORTED_MODULE_11__common_Transaction_Components_transaction_service__["a" /* TransactionService */]])
], ReportMain);



/***/ }),

/***/ 1378:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ContextMenuView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return MenuItem; });
var ContextMenuView = (function () {
    function ContextMenuView() {
        this.show = false;
    }
    return ContextMenuView;
}());

var MenuItem = (function () {
    function MenuItem(label, value, subject) {
        this.label = label;
        this.value = value;
        this.subject = subject;
    }
    return MenuItem;
}());



/***/ }),

/***/ 1458:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = {"ENV":"development","NODE_ENV":"development","HMR":false}.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(1879);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(1662);

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(74), __webpack_require__(581)))

/***/ }),

/***/ 1485:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_Observable__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs_Observable__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__masters_components_PLedger_PLedger_component__ = __webpack_require__(1181);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__common_popupLists_report_filter_report_filter_service__ = __webpack_require__(555);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_moment__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_moment__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AccountLedgerReport; });











var AccountLedgerReport = (function () {
    function AccountLedgerReport(masterService, _authService, alertService, _reportFilterService, arouter, _ActivatedRoute, reportService) {
        var _this = this;
        this.masterService = masterService;
        this._authService = _authService;
        this.alertService = alertService;
        this._reportFilterService = _reportFilterService;
        this.arouter = arouter;
        this._ActivatedRoute = _ActivatedRoute;
        this.reportService = reportService;
        this.acname = '';
        this.accode = '';
        this.account = [];
        this.division = [];
        this.CostcenterList = [];
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.gridPopupSettingsForAccountLedgerList = new __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridPopupSettingsForMultipleAccountLedgerList = new __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridPopupSettingsForMultipleGroupAccountList = new __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.instanceWiseRepName = 'Account Ledger Report';
        this.dropListItem = function (keyword) {
            return new __WEBPACK_IMPORTED_MODULE_3_rxjs_Observable__["Observable"](function (observer) {
                _this.masterService.getAccountListACIDNotLikePA().map(function (data) {
                    _this.result = data.result;
                    return _this.result.filter(function (ac) { return ac.ACNAME.toUpperCase().indexOf(keyword.toUpperCase()) > -1; });
                }).subscribe(function (res) { observer.next(res); });
            }).share();
        };
        this._reportFilterService.AccoutLedgerObj.IGNOREOPPOSITAC = true;
        // this._reportFilterService.AccoutLedgerObj.AccLedger_HIDENARATION=true;
        this._reportFilterService.showAllcontactsInCC = true;
        this._reportFilterService.AccoutLedgerObj.Reportnameis = 'accountledger';
        this._reportFilterService.AccoutLedgerObj.Reportnameis = 'accountledger';
        this.userProfile = this._authService.getUserProfile();
        this.reportNameFormatWise = 'Account Ledger Report';
        this.masterService.getAccountListACIDNotLikePA().subscribe(function (res) {
            _this.account = res.data;
            if (_this.account.length != 0) {
                _this.AccLedger_result = true;
            }
            else {
                _this.AccLedger_result = false;
            }
        });
        this.division = [];
        this.division = [];
        //let data: Array<IDivision> = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                //////console.log("div" + JSON.stringify(res));
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        this.masterService.getCostcenter().subscribe(function (res) {
            _this.CostcenterList = res;
        });
        this.showMultipleCC = true;
        this.getReportTitle();
        this.checkValueForCombine();
        // this.masterService.getAccDivList();
    }
    AccountLedgerReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            var mode = params.mode;
            // ////console.log("@@accledger",this.reportService.drillParam)
            if (mode == "DRILL" && _this.reportService.drillParam.returnUrl && _this.reportService.drillParam.reportname.startsWith('Account Ledger Report')) {
                _this._reportFilterService.AccoutLedgerObj.AccLedger_DATE1 = __WEBPACK_IMPORTED_MODULE_10_moment__(_this.reportService.drillParam.reportparam.DATE1).format('YYYY-MM-DD');
                _this._reportFilterService.AccoutLedgerObj.AccLedger_DATE2 = __WEBPACK_IMPORTED_MODULE_10_moment__(_this.reportService.drillParam.reportparam.DATE2).format('YYYY-MM-DD');
                _this._reportFilterService.AccoutLedgerObj.AccLedger_BSDATE1 = _this.reportService.drillParam.reportparam.BSDATE1;
                _this._reportFilterService.AccoutLedgerObj.AccLedger_BSDATE2 = _this.reportService.drillParam.reportparam.BSDATE2;
                _this._reportFilterService.AccoutLedgerObj.AccLedger_DIV = _this.reportService.drillParam.reportparam.DIV;
                _this._reportFilterService.AccoutLedgerObj.AccLedger_CostCenter = _this.reportService.drillParam.reportparam.COSTCENTER;
                _this._reportFilterService.AccoutLedgerObj.AccLedger_ReportType = 2;
                _this._reportFilterService.AccoutLedgerObj.AccLedger_ACCNAME = _this.reportService.drillParam.reportparam.CUSTOMERNAME ? _this.reportService.drillParam.reportparam.CUSTOMERNAME.trim() : _this.reportService.drillParam.reportparam.CUSTOMERNAME;
                _this._reportFilterService.AccoutLedgerObj.AccLedger_ACID = _this.reportService.drillParam.reportparam.ACID;
                _this._reportFilterService.AccoutLedgerObj.AccLedger_SingleAccount = _this.reportService.drillParam.reportparam.ACID;
                _this.showLedgerTable = true;
                _this._reportFilterService.AccoutLedgerObj.EnableCombineLedger = false;
                _this._reportFilterService.AccoutLedgerObj.AccLedger_multipleAccounts = [];
                _this._reportFilterService.AccoutLedgerObj.AccLedger_multipleCostcenter = [];
                _this._reportFilterService.AccoutLedgerObj.AccLedger_multipleGroupAccounts = [];
                // this.changeEntryDate(this._reportFilterService.AccoutLedgerObj.AccLedger_BSDATE1, "AD");
                // this.changeEndDate(this._reportFilterService.AccoutLedgerObj.AccLedger_BSDATE2, "AD");
                if (_this.reportService.drillParam.reportname == 'Account Ledger Report_2') {
                    _this._reportFilterService.AccoutLedgerObj.AccLedger_SUMMARYREPORT = '1';
                }
                else {
                    _this._reportFilterService.AccoutLedgerObj.AccLedger_SUMMARYREPORT = '0';
                }
                if (_this.masterService.userSetting.DISPLAY == 1) {
                    _this._reportFilterService.AccoutLedgerObj.IGNOREOPPOSITAC = true;
                }
                else {
                    _this._reportFilterService.AccoutLedgerObj.IGNOREOPPOSITAC = false;
                }
            }
            else {
                if (_this._reportFilterService.AccoutLedgerObj.assignPrevioiusDate != true) {
                    _this.masterService.getAccDivList();
                    _this._reportFilterService.AccoutLedgerObj.AccLedger_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                    //console.log("@@this._reportFilterService.AccoutLedgerObj.AccLedger_DATE1",this._reportFilterService.AccoutLedgerObj.AccLedger_DATE1)
                    _this.changeEntryDate(_this._reportFilterService.AccoutLedgerObj.AccLedger_DATE1, "AD");
                    if (_this.userProfile.CompanyInfo.ActualFY == _this.masterService.PhiscalObj.PhiscalID) {
                        _this._reportFilterService.AccoutLedgerObj.AccLedger_DATE2 = new Date().toJSON().split('T')[0];
                        _this.changeEndDate(_this._reportFilterService.AccoutLedgerObj.AccLedger_DATE2, "AD");
                    }
                    else {
                        _this._reportFilterService.AccoutLedgerObj.AccLedger_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                        _this.changeEndDate(_this._reportFilterService.AccoutLedgerObj.AccLedger_DATE2, "AD");
                    }
                    // this._reportFilterService.AccoutLedgerObj.AccLedger_DIV=this.masterService.userProfile.CompanyInfo.INITIAL;
                    _this.masterService.viewDivision.subscribe(function () {
                        if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                            _this._reportFilterService.AccoutLedgerObj.AccLedger_DIV = '%';
                        }
                        else {
                            if (_this.masterService.userSetting.userwisedivision == 1 && _this.division.length == 1) {
                                _this._reportFilterService.AccoutLedgerObj.AccLedger_DIV = _this.division[0].INITIAL;
                            }
                            else {
                                _this._reportFilterService.AccoutLedgerObj.AccLedger_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                            }
                        }
                    });
                    _this._reportFilterService.AccoutLedgerObj.AccLedger_CostCenter = '%';
                    _this._reportFilterService.AccoutLedgerObj.AccLedger_ReportType = 2;
                    _this._reportFilterService.AccoutLedgerObj.AccLedger_multipleCostcenter = [];
                    _this._reportFilterService.AccoutLedgerObj.AccLedger_multipleAccounts = [];
                    _this._reportFilterService.AccoutLedgerObj.AccLedger_multipleGroupAccounts = [];
                    _this._reportFilterService.AccoutLedgerObj.AccLedger_HIDECOSTCENTER = 0;
                    if (_this.masterService.userSetting.DISPLAY == 1) {
                        _this._reportFilterService.AccoutLedgerObj.AccLedger_SUMMARYREPORT = '0';
                        _this._reportFilterService.AccoutLedgerObj.IGNOREOPPOSITAC = true;
                    }
                    else {
                        _this._reportFilterService.AccoutLedgerObj.AccLedger_SUMMARYREPORT = '0';
                    }
                    // this._reportFilterService.AccoutLedgerObj.IGNOREOPPOSITAC= 1;
                    _this.checkValue();
                    if (_this._reportFilterService.AccoutLedgerObj.EnableCombineLedger == true) {
                        _this.checkValue();
                    }
                    else {
                        _this.checkValueForCombine();
                    }
                }
                if (params.instancename) {
                    ////console.log("@@[Account Ledger Report0]",this._reportFilterService.reportDataStore[params.instancename])
                    _this._reportFilterService.AccoutLedgerObj.AccLedger_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                    _this._reportFilterService.AccoutLedgerObj.AccLedger_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                    _this.changeEntryDate(_this._reportFilterService.AccoutLedgerObj.AccLedger_DATE1, "AD");
                    _this.changeEndDate(_this._reportFilterService.AccoutLedgerObj.AccLedger_DATE2, "AD");
                    _this._reportFilterService.AccoutLedgerObj.AccLedger_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
                    _this._reportFilterService.AccoutLedgerObj.AccLedger_CostCenter = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.COSTCENTER;
                    _this._reportFilterService.AccoutLedgerObj.AccLedger_ReportType = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.REPORTTYPE;
                    _this._reportFilterService.AccoutLedgerObj.AccLedger_ACCNAME = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.ACNAME;
                    _this._reportFilterService.AccoutLedgerObj.AccLedger_ACID = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.ACID;
                    _this._reportFilterService.AccoutLedgerObj.AccLedger_SingleAccount = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.ACID;
                    _this._reportFilterService.AccoutLedgerObj.AccLedger_Areawise = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.AREA;
                    _this._reportFilterService.AccoutLedgerObj.IGNOREOPPOSITAC = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.IGNOREOPPOSITAC;
                    _this._reportFilterService.AccoutLedgerObj.MERGEREPORT = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.MERGEREPORT;
                    // this._reportFilterService.AccoutLedgerObj.SHOWNARATION=this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWNARATION;
                    // this._reportFilterService.AccoutLedgerObj.SHOWNDATE=this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWNDATE;
                    _this._reportFilterService.AccoutLedgerObj.AccLedger_SUMMARYREPORT = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SUMMARYLEDGER;
                    _this._reportFilterService.AccoutLedgerObj.AccLedger_HIDENARATION = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.HIDENARATION;
                    _this._reportFilterService.AccoutLedgerObj.AccLedger_HIDEVOUCHERTYPE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.HIDEVOUCHERTYPE;
                    _this._reportFilterService.AccoutLedgerObj.AccLedger_SHOWITEMDETAIL = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWITEMDETAIL;
                    _this._reportFilterService.AccoutLedgerObj.AccLedger_INCLUDEPOSTDATE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.INCLUDEPOSTEDTRANSACTION;
                    _this._reportFilterService.AccoutLedgerObj.AccLedger_HIDECOSTCENTER = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.HIDECOSTCENTER;
                }
            }
        });
    };
    AccountLedgerReport.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.AccoutLedgerObj.AccLedger_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.AccoutLedgerObj.AccLedger_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.AccoutLedgerObj.AccLedger_DATE1 = this.masterService.toBSDate(value);
        }
    };
    AccountLedgerReport.prototype.changeEndDate = function (value, format) {
        ////console.log("valuess",value)
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.AccoutLedgerObj.AccLedger_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_2);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.AccoutLedgerObj.AccLedger_DATE2 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.AccoutLedgerObj.AccLedger_DATE2 = this.masterService.toBSDate(value);
        }
    };
    AccountLedgerReport.prototype.onload = function () {
        // ////console.log("singleAccount",this._reportFilterService.AccoutLedgerObj.AccLedger_SingleAccount,this._reportFilterService.AccoutLedgerObj.DATE2)
        // this.SelectedDivReport = this._reportFilterService.AccoutLedgerObj.AccLedger_DIV;
        if (this._reportFilterService.AccoutLedgerObj.EnableCombineLedger == true && this._reportFilterService.AccoutLedgerObj.AccLedger_ReportType == 2 && (this._reportFilterService.AccoutLedgerObj.AccLedger_multipleAccounts === undefined || this._reportFilterService.AccoutLedgerObj.AccLedger_multipleAccounts.length == 0)) {
            this.alertService.info("Please Select Account");
            return;
        }
        else if ((this._reportFilterService.AccoutLedgerObj.EnableCombineLedger == true && this._reportFilterService.AccoutLedgerObj.AccLedger_ReportType == 4 && (this._reportFilterService.AccoutLedgerObj.AccLedger_showAllContacts == false || this._reportFilterService.AccoutLedgerObj.AccLedger_showAllContacts === undefined)) && (this._reportFilterService.AccoutLedgerObj.AccLedger_multipleCostcenter === undefined || this._reportFilterService.AccoutLedgerObj.AccLedger_multipleCostcenter.length == 0)) {
            this.alertService.info("Please Select Costcenter");
            return;
        }
        else if ((this._reportFilterService.AccoutLedgerObj.EnableCombineLedger == true &&
            this._reportFilterService.AccoutLedgerObj.AccLedger_ReportType == 4
            || this._reportFilterService.AccoutLedgerObj.AccLedger_showAllContacts) &&
            (this._reportFilterService.AccoutLedgerObj.AccLedger_SingleAccount === undefined ||
                this._reportFilterService.AccoutLedgerObj.AccLedger_SingleAccount == '')) {
            this.alertService.info("Please Select Account");
            return;
        }
        else if (this.AccLedger_result == true && (this._reportFilterService.AccoutLedgerObj.EnableCombineLedger === undefined || this._reportFilterService.AccoutLedgerObj.EnableCombineLedger == false)) {
            if (this._reportFilterService.AccoutLedgerObj.AccLedger_SingleAccount === undefined || this._reportFilterService.AccoutLedgerObj.AccLedger_SingleAccount == '' || this._reportFilterService.AccoutLedgerObj.AccLedger_ACCNAME == '') {
                this.alertService.info("Please Select Account");
                return;
            }
            this.DialogClosedResult("ok");
        }
        else {
            this.DialogClosedResult("ok");
        }
    };
    AccountLedgerReport.prototype.getReportTitle = function () {
        var _this = this;
        this.masterService.getReportTitle(this.reportNameFormatWise).subscribe(function (res) {
            ////console.log("newres",res);
            if (res.status == 'ok') {
                _this.reportNameFormatWise = res.result;
                ////console.log("reportName",this.reportNameFormatWise);
            }
        });
    };
    AccountLedgerReport.prototype.DialogClosedResult = function (res) {
        var _this = this;
        var multipleSelectedCC = [];
        var SelectedCC = '';
        if (this._reportFilterService.AccoutLedgerObj.AccLedger_multipleCostcenter === undefined) {
            SelectedCC = this._reportFilterService.AccoutLedgerObj.CCENTER;
        }
        else {
            if (this._reportFilterService.AccoutLedgerObj.AccLedger_multipleCostcenter.length != 0) {
                this._reportFilterService.AccoutLedgerObj.AccLedger_multipleCostcenter.forEach(function (COSTCENTER) {
                    multipleSelectedCC.push(COSTCENTER.CCID);
                    SelectedCC += multipleSelectedCC + ",";
                });
            }
            else {
                SelectedCC = this._reportFilterService.AccoutLedgerObj.CCENTER;
            }
        }
        var multipleSelectedAccount = [];
        //let SelectedAccount = '';
        if (this._reportFilterService.AccoutLedgerObj.AccLedger_multipleAccounts === undefined) {
            this._reportFilterService.SelectedAccount = this._reportFilterService.AccoutLedgerObj.AccLedger_SingleAccount;
        }
        else {
            if (this._reportFilterService.AccoutLedgerObj.AccLedger_multipleAccounts.length != 0) {
                this._reportFilterService.AccoutLedgerObj.AccLedger_multipleAccounts.forEach(function (acList) {
                    _this._reportFilterService.SelectedAccount = '';
                    multipleSelectedAccount.push(acList.ACID);
                    _this._reportFilterService.SelectedAccount += multipleSelectedAccount + ",";
                });
                var nameArr = this._reportFilterService.SelectedAccount.split(',');
                var myArr = nameArr;
                var item = myArr.filter(function (el, i, a) { return i === a.indexOf(el); });
                // ////console.log("@@item",item)
                this._reportFilterService.SelectedAccount = item.toString();
                // ////console.log("@@this._reportFilterService.SelectedAccount",this._reportFilterService.SelectedAccount)
            }
            else {
                this._reportFilterService.SelectedAccount = this._reportFilterService.AccoutLedgerObj.AccLedger_SingleAccount;
            }
        }
        if (this._reportFilterService.AccoutLedgerObj.AccLedger_ReportType != 4) {
            SelectedCC = this._reportFilterService.AccoutLedgerObj.AccLedger_CostCenter;
        }
        var multipleSelectedGroupACC = [];
        // let SelectedGroupACC = '';
        if (this._reportFilterService.AccoutLedgerObj.AccLedger_multipleGroupAccounts === undefined || this._reportFilterService.AccoutLedgerObj.AccLedger_multipleGroupAccounts === null) {
            this._reportFilterService.SelectedGroupAccount = '%';
        }
        else {
            if (this._reportFilterService.AccoutLedgerObj.AccLedger_multipleGroupAccounts.length != 0) {
                this._reportFilterService.AccoutLedgerObj.AccLedger_multipleGroupAccounts.forEach(function (acList) {
                    _this._reportFilterService.SelectedGroupAccount = '';
                    multipleSelectedGroupACC.push(acList.ACID);
                    _this._reportFilterService.SelectedGroupAccount += multipleSelectedGroupACC + ",";
                });
                var nameArr = this._reportFilterService.SelectedGroupAccount.split(',');
                var myArr = nameArr;
                var item = myArr.filter(function (el, i, a) { return i === a.indexOf(el); });
                // ////console.log("@@item",item)
                this._reportFilterService.SelectedGroupAccount = item.toString();
            }
            else {
                this._reportFilterService.SelectedGroupAccount = '%';
            }
        }
        if (this._reportFilterService.AccoutLedgerObj.IGNOREOPPOSITAC == true) {
            this._reportFilterService.AccoutLedgerObj.IGNOREOPPOSITAC = 1;
            this.reportNameFormatWise = 'Account Ledger Report_1';
        }
        else {
            this._reportFilterService.AccoutLedgerObj.IGNOREOPPOSITAC = 0;
            this.reportNameFormatWise = 'Account Ledger Report';
        }
        if (this._reportFilterService.AccoutLedgerObj.AccLedger_SUMMARYREPORT == 1) {
            this.reportNameFormatWise = 'Account Ledger Report_2';
        }
        if (this._reportFilterService.AccoutLedgerObj.SHOWNDATE == true) {
            this._reportFilterService.AccoutLedgerObj.SHOWNDATE = 1;
        }
        else {
            this._reportFilterService.AccoutLedgerObj.SHOWNDATE = 0;
        }
        if (this._reportFilterService.AccoutLedgerObj.MERGEREPORT == true) {
            this._reportFilterService.AccoutLedgerObj.MERGEREPORT = 1;
        }
        else {
            this._reportFilterService.AccoutLedgerObj.MERGEREPORT = 0;
        }
        if (this._reportFilterService.AccoutLedgerObj.SHOWNARATION == true) {
            this._reportFilterService.AccoutLedgerObj.SHOWNARATION = 1;
        }
        else {
            this._reportFilterService.AccoutLedgerObj.SHOWNARATION = 0;
        }
        if (this._reportFilterService.AccoutLedgerObj.AccLedger_showAllContacts == true) {
            this._reportFilterService.AccoutLedgerObj.AccLedger_ReportType = 3;
            SelectedCC = '%';
        }
        if (this._reportFilterService.AccoutLedgerObj.EnableCombineLedger != true) {
            this._reportFilterService.selectedAccountParty = this._reportFilterService.AccoutLedgerObj.AccLedger_SingleAccount;
            SelectedCC = this._reportFilterService.AccoutLedgerObj.AccLedger_CostCenter;
            this._reportFilterService.AccoutLedgerObj.AccLedger_ReportType = 0;
        }
        if (this._reportFilterService.AccoutLedgerObj.AccLedger_ReportType != 2) {
            this._reportFilterService.selectedAccountParty = this._reportFilterService.AccoutLedgerObj.AccLedger_SingleAccount;
        }
        if (this._reportFilterService.AccoutLedgerObj.AccLedger_DIV && this._reportFilterService.AccoutLedgerObj.AccLedger_DIV == '%') {
            this._reportFilterService.AccoutLedgerObj.AccLedger_DIVISIONNAME = 'All';
        }
        else if (this._reportFilterService.AccoutLedgerObj.AccLedger_DIV && this._reportFilterService.AccoutLedgerObj.AccLedger_DIV != '%') {
            var abc = this.division.filter(function (x) { return x.INITIAL == _this._reportFilterService.AccoutLedgerObj.AccLedger_DIV; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.AccoutLedgerObj.AccLedger_DIVISIONNAME = abc[0].NAME;
            }
            else {
                this._reportFilterService.AccoutLedgerObj.AccLedger_DIVISIONNAME = '';
            }
        }
        else {
            this._reportFilterService.AccoutLedgerObj.AccLedger_DIVISIONNAME = '';
        }
        if (this._reportFilterService.AccoutLedgerObj.EnableCombineLedger != true) {
            this.REPORTDISPLAYNAME = 'Account Ledger';
            this._reportFilterService.AccoutLedgerObj.AccLedger_LABELDISPLAYNAME = 'Ledger';
            this._reportFilterService.AccoutLedgerObj.AccLedger_LEDGERDISPLAYNAME = this._reportFilterService.AccoutLedgerObj.AccLedger_ACCNAME;
            if (this._reportFilterService.AccoutLedgerObj.AccLedger_CostCenter && this._reportFilterService.AccoutLedgerObj.AccLedger_CostCenter == '%') {
                this._reportFilterService.AccoutLedgerObj.AccLedger_COSTCENTERDISPLAYNAME = 'All';
            }
            else if (this._reportFilterService.AccoutLedgerObj.AccLedger_CostCenter != '%') {
                var abc = this.CostcenterList.filter(function (x) { return x.CCID == _this._reportFilterService.AccoutLedgerObj.AccLedger_CostCenter; });
                if (abc && abc.length > 0 && abc[0]) {
                    this._reportFilterService.AccoutLedgerObj.AccLedger_COSTCENTERDISPLAYNAME = abc[0].COSTCENTERNAME;
                }
                else {
                    this._reportFilterService.AccoutLedgerObj.AccLedger_COSTCENTERDISPLAYNAME = '';
                }
            }
            else {
                this._reportFilterService.AccoutLedgerObj.AccLedger_COSTCENTERDISPLAYNAME = '';
            }
        }
        if (this._reportFilterService.AccoutLedgerObj.EnableCombineLedger == true) {
            this.REPORTDISPLAYNAME = 'Account Ledger';
            this._reportFilterService.AccoutLedgerObj.AccLedger_LABELDISPLAYNAME = 'Ledger';
            this._reportFilterService.AccoutLedgerObj.AccLedger_LEDGERDISPLAYNAME = 'Combine Ledger Selection';
        }
        if (res == "ok") {
            this._reportFilterService.AccoutLedgerObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.AccLedger_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Account Ledger Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.AccLedger_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Account Ledger Report' + '_' + this._reportFilterService.AccLedger_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.AccLedger_loadedTimes,
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: 'Account Ledger',
                reportname: this.reportNameFormatWise,
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.AccLedger_loadedTimes,
                reportparam: {
                    LABELDISPLAYNAME: this._reportFilterService.AccoutLedgerObj.AccLedger_LABELDISPLAYNAME ? this._reportFilterService.AccoutLedgerObj.AccLedger_LABELDISPLAYNAME : '',
                    LEDGERDISPLAYNAME: this._reportFilterService.AccoutLedgerObj.AccLedger_LEDGERDISPLAYNAME ? this._reportFilterService.AccoutLedgerObj.AccLedger_LEDGERDISPLAYNAME : '',
                    DATE1: this._reportFilterService.AccoutLedgerObj.AccLedger_DATE1,
                    DATE2: this._reportFilterService.AccoutLedgerObj.AccLedger_DATE2,
                    BSDATE1: this._reportFilterService.AccoutLedgerObj.AccLedger_BSDATE1,
                    BSDATE2: this._reportFilterService.AccoutLedgerObj.AccLedger_BSDATE2,
                    DIV: this._reportFilterService.AccoutLedgerObj.AccLedger_DIV ? this._reportFilterService.AccoutLedgerObj.AccLedger_DIV : '%',
                    COSTCENTER: SelectedCC ? SelectedCC : '%',
                    AREA: this._reportFilterService.AccoutLedgerObj.AccLedger_Areawise ? this._reportFilterService.AccoutLedgerObj.AccLedger_Areawise : 0,
                    COMID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    REPORTTYPE: this._reportFilterService.AccoutLedgerObj.AccLedger_ReportType ? this._reportFilterService.AccoutLedgerObj.AccLedger_ReportType : 0,
                    IGNOREOPPOSITAC: this._reportFilterService.AccoutLedgerObj.IGNOREOPPOSITAC,
                    // SHOWNDATE: this._reportFilterService.AccoutLedgerObj.SHOWNDATE,
                    ACID: this._reportFilterService.SelectedAccount ? this._reportFilterService.SelectedAccount : '%',
                    MERGEREPORT: this._reportFilterService.AccoutLedgerObj.MERGEREPORT,
                    // SHOWNARATION: this._reportFilterService.AccoutLedgerObj.SHOWNARATION,
                    ACNAME: this._reportFilterService.AccoutLedgerObj.AccLedger_ACCNAME,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    // REPORTDISPLAYNAME : this.REPORTDISPLAYNAME ? this.REPORTDISPLAYNAME : this.reportNameFormatWise,
                    DIVISIONNAME: this._reportFilterService.AccoutLedgerObj.AccLedger_DIVISIONNAME ? this._reportFilterService.AccoutLedgerObj.AccLedger_DIVISIONNAME : '',
                    SUMMARYLEDGER: this._reportFilterService.AccoutLedgerObj.AccLedger_SUMMARYREPORT ? this._reportFilterService.AccoutLedgerObj.AccLedger_SUMMARYREPORT : 0,
                    COSTCENTERDISPLAYNAME: this._reportFilterService.AccoutLedgerObj.AccLedger_COSTCENTERDISPLAYNAME ? this._reportFilterService.AccoutLedgerObj.AccLedger_COSTCENTERDISPLAYNAME : '',
                    HIDENARATION: this._reportFilterService.AccoutLedgerObj.AccLedger_HIDENARATION ? this._reportFilterService.AccoutLedgerObj.AccLedger_HIDENARATION : 0,
                    HIDEVOUCHERTYPE: this._reportFilterService.AccoutLedgerObj.AccLedger_HIDEVOUCHERTYPE ? this._reportFilterService.AccoutLedgerObj.AccLedger_HIDEVOUCHERTYPE : 0,
                    SHOWITEMDETAIL: this._reportFilterService.AccoutLedgerObj.AccLedger_SHOWITEMDETAIL ? this._reportFilterService.AccoutLedgerObj.AccLedger_SHOWITEMDETAIL : 0,
                    INCLUDEPOSTEDTRANSACTION: this._reportFilterService.AccoutLedgerObj.AccLedger_INCLUDEPOSTDATE ? this._reportFilterService.AccoutLedgerObj.AccLedger_INCLUDEPOSTDATE : 0,
                    HIDECOSTCENTER: this._reportFilterService.AccoutLedgerObj.AccLedger_HIDECOSTCENTER ? this._reportFilterService.AccoutLedgerObj.AccLedger_HIDECOSTCENTER : 0,
                    GROUP_ACID: this._reportFilterService.SelectedGroupAccount ? this._reportFilterService.SelectedGroupAccount : '%',
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.AccLedger_loadedTimes = this._reportFilterService.AccLedger_loadedTimes + 1;
        }
    };
    // Close Method
    AccountLedgerReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("cancel");
    };
    AccountLedgerReport.prototype.checkValue = function () {
        if (this._reportFilterService.AccoutLedgerObj.AccLedger_ReportType == 2) {
            this.showLedgerTable = true;
            this.acname = this._reportFilterService.AccoutLedgerObj.AccLedger_ACCNAME;
            this._reportFilterService.AccoutLedgerObj.AccLedger_ACCNAME = '';
            this.accode = this._reportFilterService.AccoutLedgerObj.AccLedger_ACID;
            this._reportFilterService.AccoutLedgerObj.AccLedger_ACID = '';
            this._reportFilterService.AccoutLedgerObj.AccLedger_SingleAccount = '';
            this._reportFilterService.AccoutLedgerObj.AccLedger_multipleCostcenter = [];
            this._reportFilterService.AccoutLedgerObj.AccLedger_multipleGroupAccounts = [];
        }
        else {
            this.showLedgerTable = false;
            this._reportFilterService.AccoutLedgerObj.AccLedger_ACCNAME = this.acname;
            this._reportFilterService.AccoutLedgerObj.AccLedger_ACID = this.accode;
            this._reportFilterService.AccoutLedgerObj.AccLedger_SingleAccount = this.accode;
        }
        if (this._reportFilterService.AccoutLedgerObj.AccLedger_ReportType == 1) {
            this.showAreaTable = true;
        }
        else {
            this.showAreaTable = false;
        }
        if (this._reportFilterService.AccoutLedgerObj.AccLedger_ReportType == 4) {
            this.showCCtable = true;
            this._reportFilterService.AccoutLedgerObj.AccLedger_multipleAccounts = [];
            this._reportFilterService.AccoutLedgerObj.AccLedger_multipleGroupAccounts = [];
        }
        else {
            this.showCCtable = false;
        }
        if (this._reportFilterService.AccoutLedgerObj.AccLedger_ReportType == 5) {
            this.showAccGrpTable = true;
            this._reportFilterService.AccoutLedgerObj.AccLedger_multipleAccounts = [];
        }
        else {
            this.showAccGrpTable = false;
        }
    };
    AccountLedgerReport.prototype.checkValueForCombine = function () {
        if (this._reportFilterService.AccoutLedgerObj.EnableCombineLedger == true) {
            this.showCombineLedgerList = true;
            this.showMergeCombineLedger = true;
            this.acname = this._reportFilterService.AccoutLedgerObj.AccLedger_ACCNAME;
            this._reportFilterService.AccoutLedgerObj.AccLedger_ACCNAME = '';
            this.accode = this._reportFilterService.AccoutLedgerObj.AccLedger_ACID;
            this._reportFilterService.AccoutLedgerObj.AccLedger_ACID = '';
            this._reportFilterService.AccoutLedgerObj.AccLedger_SingleAccount = '';
            if (this._reportFilterService.AccoutLedgerObj.AccLedger_ReportType == 2) {
                this.showLedgerTable = true;
            }
            else if (this._reportFilterService.AccoutLedgerObj.AccLedger_ReportType == 4) {
                this.showCCtable = true;
            }
            else if (this._reportFilterService.AccoutLedgerObj.AccLedger_ReportType == 5) {
                this.showAccGrpTable = true;
            }
        }
        else {
            this.showCombineLedgerList = false;
            this.showMergeCombineLedger = false;
            this._reportFilterService.AccoutLedgerObj.AccLedger_multipleAccounts = [];
            this._reportFilterService.AccoutLedgerObj.AccLedger_multipleCostcenter = [];
            this._reportFilterService.AccoutLedgerObj.AccLedger_multipleGroupAccounts = [];
            this.showLedgerTable = false;
            this.showCCtable = false;
            this.showAccGrpTable = false;
        }
    };
    AccountLedgerReport.prototype.accodeChanged = function (value) {
        var item;
        item = this.masterService.accountList.find(function (x) { return x.ACCODE == value; });
        this._reportFilterService.AccoutLedgerObj.AccLedger_ACCNAME = '';
        if (item) {
            value = item.ACNAME;
            //console.log(value + "****");
            this._reportFilterService.AccoutLedgerObj.AccLedger_ACCNAME = value;
        }
    };
    AccountLedgerReport.prototype.onEnterAcnameChange = function (value) {
        this.accodeChanged(value);
    };
    AccountLedgerReport.prototype.itemChanged = function (value) {
        //console.log({ itemChangedValue: value });
        if (typeof (value) === "object") {
            this._reportFilterService.AccoutLedgerObj.AccLedger_ACCNAME = value.ACNAME;
            this._reportFilterService.AccoutLedgerObj.AccLedger_ACCODE = value.ACCODE;
            this._reportFilterService.AccoutLedgerObj.AccLedger_ACID = value.ACID;
            this._reportFilterService.AccoutLedgerObj.AccLedger_SingleAccount = value.ACID;
        }
    };
    AccountLedgerReport.prototype.AccountEnterClicked = function () {
        this.gridPopupSettingsForAccountLedgerList = this.masterService.getGenericGridPopUpSettings('AccountLedgerListForReport');
        this.genericGridAccountLedger.show();
    };
    AccountLedgerReport.prototype.dblClickAccountSelect = function (account) {
        this._reportFilterService.AccoutLedgerObj.AccLedger_ACID = account.ACID;
        this._reportFilterService.AccoutLedgerObj.AccLedger_ACCNAME = account.ACNAME;
        this._reportFilterService.AccoutLedgerObj.AccLedger_SingleAccount = account.ACID;
    };
    AccountLedgerReport.prototype.checkCostCenterValue = function () {
        if (this._reportFilterService.AccoutLedgerObj.AccLedger_showAllContacts == true) {
            this.showMultipleCC = false;
        }
        else {
            this.showMultipleCC = true;
        }
    };
    AccountLedgerReport.prototype.addCostcenterToList = function () {
        var ccData = this._reportFilterService.AccoutLedgerObj.CCENTER;
        this._reportFilterService.AccoutLedgerObj.CCENTER = ccData && ccData.CCID ? ccData.CCID : '';
        var selectCCenterList = this._reportFilterService.AccoutLedgerObj.AccLedger_multipleCostcenter.filter(function (centerList) { return centerList.COSTCENTERNAME == ccData.COSTCENTERNAME; });
        if (ccData.COSTCENTERNAME === "" ||
            ccData.COSTCENTERNAME === null ||
            ccData.COSTCENTERNAME === undefined) {
            return;
        }
        if (selectCCenterList.length === 0) {
            this._reportFilterService.AccoutLedgerObj.AccLedger_multipleCostcenter.push({ CCID: ccData.CCID, COSTCENTERNAME: ccData.COSTCENTERNAME });
        }
    };
    AccountLedgerReport.prototype.deleteCostcenter = function (index) {
        this._reportFilterService.AccoutLedgerObj.AccLedger_multipleCostcenter.splice(index, 1);
    };
    AccountLedgerReport.prototype.addAccountToList = function () {
        var _this = this;
        var selectACList = this._reportFilterService.AccoutLedgerObj.AccLedger_multipleAccounts.filter(function (acList) { return acList.ACNAME == _this._reportFilterService.AccoutLedgerObj.multipleACNAME; });
        if (this._reportFilterService.AccoutLedgerObj.multipleACNAME === "" ||
            this._reportFilterService.AccoutLedgerObj.multipleACNAME === null ||
            this._reportFilterService.AccoutLedgerObj.multipleACNAME === undefined) {
            return;
        }
        if (selectACList.length === 0) {
            this._reportFilterService.AccoutLedgerObj.AccLedger_multipleAccounts.push({ ACID: this._reportFilterService.AccoutLedgerObj.multipleACID, ACNAME: this._reportFilterService.AccoutLedgerObj.multipleACNAME });
            this._reportFilterService.AccoutLedgerObj.multipleACNAME = '';
            this._reportFilterService.AccoutLedgerObj.multipleACCODE = '';
        }
    };
    AccountLedgerReport.prototype.deleteAccount = function (index) {
        this._reportFilterService.AccoutLedgerObj.AccLedger_multipleAccounts.splice(index, 1);
    };
    AccountLedgerReport.prototype.MultipleAccountEnterClicked = function () {
        this.gridPopupSettingsForMultipleAccountLedgerList = this.masterService.getGenericGridPopUpSettings('AccountLedgerListForReport');
        this.genericGridMultipleAccountLedger.show();
    };
    AccountLedgerReport.prototype.dblClickMultipleAccountSelect = function (account) {
        this._reportFilterService.AccoutLedgerObj.multipleACID = account.ACID;
        this._reportFilterService.AccoutLedgerObj.multipleACNAME = account.ACNAME;
    };
    AccountLedgerReport.prototype.addGroupAccountToList = function () {
        var _this = this;
        var selectACList = this._reportFilterService.AccoutLedgerObj.AccLedger_multipleGroupAccounts.filter(function (acList) { return acList.ACNAME == _this._reportFilterService.AccoutLedgerObj.Multiple_GROUP_ACNAME; });
        if (this._reportFilterService.AccoutLedgerObj.Multiple_GROUP_ACNAME === "" ||
            this._reportFilterService.AccoutLedgerObj.Multiple_GROUP_ACNAME === null ||
            this._reportFilterService.AccoutLedgerObj.Multiple_GROUP_ACNAME === undefined) {
            return;
        }
        if (selectACList.length === 0) {
            this._reportFilterService.AccoutLedgerObj.AccLedger_multipleGroupAccounts.push({ ACID: this._reportFilterService.AccoutLedgerObj.Multiple_GROUP_ACID, ACNAME: this._reportFilterService.AccoutLedgerObj.Multiple_GROUP_ACNAME });
            console.log(" this._reportFilterService.AccoutLedgerObj.AccLedger_multipleGroupAccounts", this._reportFilterService.AccoutLedgerObj.AccLedger_multipleGroupAccounts);
            this._reportFilterService.AccoutLedgerObj.Multiple_GROUP_ACNAME = '';
            this._reportFilterService.AccoutLedgerObj.multiple_Group_ACCODE = '';
        }
    };
    AccountLedgerReport.prototype.GroupAccountclick = function () {
        this.gridPopupSettingsForMultipleGroupAccountList = this.masterService.getGenericGridPopUpSettings('AccountGroupList');
        this.genericGridMultipleGroupAccount.show();
    };
    AccountLedgerReport.prototype.dblClickGroupAccountSelect = function (account) {
        this._reportFilterService.AccoutLedgerObj.Multiple_GROUP_ACID = account.ACID;
        this._reportFilterService.AccoutLedgerObj.Multiple_GROUP_ACNAME = account.ACNAME;
    };
    AccountLedgerReport.prototype.deleteGroupAccount = function (index) {
        this._reportFilterService.AccoutLedgerObj.AccLedger_multipleGroupAccounts.splice(index, 1);
        this._reportFilterService.SelectedGroupAccount = '';
    };
    return AccountLedgerReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("PLedgerChild"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_4__masters_components_PLedger_PLedger_component__["a" /* PLedgerComponent */])
], AccountLedgerReport.prototype, "PLedgerChild", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], AccountLedgerReport.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridAccountLedger"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], AccountLedgerReport.prototype, "genericGridAccountLedger", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridMultipleAccountLedger"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], AccountLedgerReport.prototype, "genericGridMultipleAccountLedger", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridMultipleGroupAccount"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], AccountLedgerReport.prototype, "genericGridMultipleGroupAccount", void 0);
AccountLedgerReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'account-ledger-report',
        template: __webpack_require__(1718),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_repositories__["a" /* MasterRepo */],
        __WEBPACK_IMPORTED_MODULE_2__common_services_permission_authService_service__["a" /* AuthService */],
        __WEBPACK_IMPORTED_MODULE_5__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_6__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */],
        __WEBPACK_IMPORTED_MODULE_8__angular_router__["Router"],
        __WEBPACK_IMPORTED_MODULE_8__angular_router__["ActivatedRoute"],
        __WEBPACK_IMPORTED_MODULE_9__common_popupLists_report_filter_report_filter_service__["a" /* ReportFilterService */]])
], AccountLedgerReport);



/***/ }),

/***/ 1486:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ActualVsBudgetReport; });







var ActualVsBudgetReport = (function () {
    function ActualVsBudgetReport(masterService, arouter, _authService, _ActivatedRoute, _reportFilterService, alertService) {
        var _this = this;
        this.masterService = masterService;
        this.arouter = arouter;
        this._authService = _authService;
        this._ActivatedRoute = _ActivatedRoute;
        this._reportFilterService = _reportFilterService;
        this.alertService = alertService;
        this.division = [];
        this.CostcenterList = [];
        this.costCenterCategoryList = [];
        this.instanceWiseRepName = 'Actual Vs Budget  Report';
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.account = [];
        this.BudgetObj = {};
        this.gridPopupSettingsForAccountLedgerList = new __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridPopupSettingsForBudgetList = new __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.userProfile = this._authService.getUserProfile();
        this.userSetting = _authService.getSetting();
        this.masterService.getAccountListACIDNotLikePA().subscribe(function (res) {
            _this.account = res.data;
            if (_this.account.length != 0) {
                _this.AccLedger_result = true;
            }
            else {
                _this.AccLedger_result = false;
            }
        });
        // this.division = [];
        // if (this.masterService.userSetting.userwisedivision == 1) {
        //     this.masterService.getDivisionFromRightPrivelege().subscribe(res => {
        //         if (res.status == 'ok') {
        //             this.division = res.result;
        //         }
        //     })
        // }
        // else {
        //     this.masterService.getAllDivisions()
        //         .subscribe(res => {
        //             this.division.push(<Division>res);
        //         }, error => {
        //             this.masterService.resolveError(error, "divisions - getDivisions");
        //         });
        // }
        this.masterService.getCostCenterGroupPagedList().subscribe(function (res) {
            _this.costCenterCategoryList = res.data;
            console.log('costCenterCategoryList', _this.costCenterCategoryList);
            _this.showCostCenterGroupChange();
        });
        // this.masterService.getCostcenter().subscribe(res => {
        //   this.CostcenterList = res;
        // });
    }
    ActualVsBudgetReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            if (_this._reportFilterService.ActualVsBudgetObj.assignPrevioiusDate != true) {
                _this.masterService.getAccDivList();
                _this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                _this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                // this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DIV = this.masterService.userProfile.CompanyInfo.INITIAL;
                _this.masterService.viewDivision.subscribe(function () {
                    if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                        _this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DIV = '%';
                    }
                    else {
                        if (_this.masterService.userSetting.userwisedivision == 1 && _this.division.length == 1) {
                            _this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DIV = _this.division[0].INITIAL;
                        }
                        else {
                            _this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                        }
                    }
                });
                _this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERWISE = 0;
                _this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_CostCenter = '%';
                _this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_OVERVIEWREPORT = '0';
                _this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION = '0';
                _this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_BUDGETSELECTION = '%';
                _this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATETYPE = '2';
                _this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_CheckOption = '0';
                _this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERCATEGORY = '%';
            }
        });
        this.changestartDate(this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATE1, "AD");
        this.changeEndDate(this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATE2, "AD");
    };
    ActualVsBudgetReport.prototype.ngAfterViewInit = function () {
        this.applyHostListener();
    };
    ActualVsBudgetReport.prototype.changestartDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_BSDATE1 = this.masterService.toADDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DATE1 = this.masterService.toBSDate(value);
        }
    };
    ActualVsBudgetReport.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_2);
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATE2 = this.masterService.toADDate(value);
        }
    };
    ActualVsBudgetReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    ActualVsBudgetReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    ActualVsBudgetReport.prototype.onChangeCostcenterWise = function (event) {
        if (event.currentTarget.checked) {
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERWISE = 1;
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_OPT_COSTCENTER = '0';
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION = '3';
        }
        else if (!event.currentTarget.checked) {
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERWISE = 0;
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_CostCenter = '%';
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERNAME = '';
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_OPT_COSTCENTER = '0';
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERCATEGORY = '%';
            if (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_BUDGETINTERVAL && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_BUDGETSELECTION != '%') {
                this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION = this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_BUDGETINTERVAL;
            }
            else {
                this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION = '3';
            }
        }
    };
    ActualVsBudgetReport.prototype.onCostCenterWiseSegregationReportCheck = function (event) {
        if (event.currentTarget.checked) {
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_OPT_COSTCENTER = 1;
            console.log(this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_OPT_COSTCENTER);
        }
        else {
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_OPT_COSTCENTER = 0;
        }
    };
    ActualVsBudgetReport.prototype.DialogClosedResult = function (res) {
        var _this = this;
        var multipleReportFormateName = '';
        if (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_CostCenter && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_CostCenter == '%' && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERWISE == 1) {
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERNAME = 'All';
        }
        else if (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_CostCenter != '%') {
            var abc = this.CostcenterList.filter(function (x) { return x.CCID == _this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_CostCenter; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERNAME = abc[0].COSTCENTERNAME;
            }
            else {
                this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERNAME = '';
            }
        }
        else {
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERNAME = '';
        }
        if (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERCATEGORY && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERCATEGORY == '%' && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERWISE == 1) {
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERCATEGORYNAME = 'All';
        }
        else if (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERCATEGORY != '%') {
            var abc = this.costCenterCategoryList.filter(function (x) { return x.ccgid == _this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERCATEGORY; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERCATEGORYNAME = abc[0].COSTCENTERGROUPNAME;
            }
            else {
                this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERCATEGORYNAME = '';
            }
        }
        else {
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERCATEGORYNAME = '';
        }
        if (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_ShowZeroVariance && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_OverBUdget && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_UnderBudget) {
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_CheckOption = '0';
        }
        else if (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_UnderBudget && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_OverBUdget) {
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_CheckOption = '4';
        }
        else if (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_ShowZeroVariance && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_OverBUdget) {
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_CheckOption = '5';
        }
        else if (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_ShowZeroVariance && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_UnderBudget) {
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_CheckOption = '6';
        }
        else if (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_OverBUdget) {
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_CheckOption = '1';
        }
        else if (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_UnderBudget) {
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_CheckOption = '2';
        }
        else if (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_ShowZeroVariance) {
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_CheckOption = '3';
        }
        else {
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_CheckOption = '0';
        }
        if (res == "ok") {
            this._reportFilterService.ActualVsBudgetObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.ActualVsBUdget_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'BUDGETVSUTILIZATION REPORT',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.ActualVsBUdget_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'BUDGETVSUTILIZATION REPORT' + '_' + this._reportFilterService.ActualVsBUdget_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.ActualVsBUdget_loadedTimes,
                });
            }
        }
        if (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_OVERVIEWREPORT == 0 && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERWISE == 0) {
            this.reportNameFormatWise = 'BUDGETVSUTILIZATION REPORT_1';
        }
        else if (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_OVERVIEWREPORT == 1 && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATETYPE == 1 && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION == 1 && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERWISE == 0) {
            this.reportNameFormatWise = 'BUDGETVSUTILIZATION REPORT_2';
        }
        else if (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_OVERVIEWREPORT == 1 && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATETYPE == 1 && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION == 2 && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERWISE == 0) {
            this.reportNameFormatWise = 'BUDGETVSUTILIZATION REPORT_3';
        }
        else if (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_OVERVIEWREPORT == 1 && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATETYPE == 2 && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION == 1 && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERWISE == 0) {
            this.reportNameFormatWise = 'BUDGETVSUTILIZATION REPORT_4';
        }
        else if (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_OVERVIEWREPORT == 1 && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATETYPE == 2 && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION == 2 && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERWISE == 0) {
            this.reportNameFormatWise = 'BUDGETVSUTILIZATION REPORT_5';
        }
        else if (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_OVERVIEWREPORT == 1 && (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATETYPE == 1 || this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATETYPE == 2) && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION == 3 && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERWISE == 0) {
            this.reportNameFormatWise = 'BUDGETVSUTILIZATION REPORT_6';
        }
        else if (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_OVERVIEWREPORT == 0 && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATETYPE == 2 && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION == 3 && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERWISE == 1) {
            this.reportNameFormatWise = 'BUDGETVSUTILIZATION REPORT_7';
        }
        else if (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_OVERVIEWREPORT == 1 && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATETYPE == 2 && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION == 3 && this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERWISE == 1) {
            this.reportNameFormatWise = 'BUDGETVSUTILIZATION REPORT_8';
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_OVERVIEWREPORT == 0 ? 'BUDGET OVERVIEW REPORT' : 'BUDGET VS UTILIZATION REPORT',
                reportname: this.reportNameFormatWise,
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.ActualVsBUdget_loadedTimes,
                reportparam: {
                    REPORTOPTIONDISPLAYNAME: this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTIONDISPLAYNAME ? this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTIONDISPLAYNAME : '',
                    // DATE1: this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATE1,
                    // DATE2: this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATE2,
                    // BSDATE1: this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_BSDATE1,
                    // BSDATE2: this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_BSDATE2,
                    DIV: this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DIV ? this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DIV : '%',
                    DIVISIONNAME: this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DIV != '%' ? this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DIV : 'ALL',
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    CID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    CCID: this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_CostCenter ? this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_CostCenter : '%',
                    DETAIL: this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_OVERVIEWREPORT ? this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_OVERVIEWREPORT : 0,
                    TYPE: this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION ? this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION : 0,
                    INTERVAL: this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION ? this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION : 0,
                    BUDGET: this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_Budget_Name != '' ? this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_BUDGETSELECTION : '%',
                    MODE: this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_CheckOption,
                    AD_BS: this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATETYPE,
                    ACID: this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_AccLedger_ACID,
                    COSTCENTERWISE: this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERWISE,
                    CCGID: this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERCATEGORY,
                    OPT_CCENTER: this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_OPT_COSTCENTER,
                    COMPANYID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    // COMPANYTYPE: this._reportFilterService.ActualVsBudgetObj.TrialBalance_COMPANYTYPE ? this._reportFilterService.ActualVsBudgetObj.TrialBalance_COMPANYTYPE : 'NONDMS',
                    // DIVISIONNAME : this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DIVISIONNAME ? this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DIVISIONNAME : '',
                    COSTCENTERDISPLAYNAME: this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERNAME ? this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERNAME : '',
                    COSTCENTERCATEGORYNAME: this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERCATEGORYNAME ? this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERCATEGORYNAME : '',
                    INCLUDEPOSTEDTRANSACTION: this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_INCLUDEPOSTDATE ? this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_INCLUDEPOSTDATE : 0,
                    INCLUDEUNAPPROVEDTRANSACTION: this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_INCLUDEUNAPPROVEDTRANSACTION ? this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_INCLUDEUNAPPROVEDTRANSACTION : 0,
                }
            }
        });
        // if(res == "ok"){
        this._reportFilterService.ActualVsBUdget_loadedTimes = this._reportFilterService.ActualVsBUdget_loadedTimes + 1;
        // }
    };
    ActualVsBudgetReport.prototype.AccountEnterClicked = function () {
        this.gridPopupSettingsForAccountLedgerList = this.masterService.getGenericGridPopUpSettings('AccountLedgerListForReport');
        this.genericGridAccountLedger.show();
    };
    ActualVsBudgetReport.prototype.dblClickAccountSelect = function (account) {
        this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_AccLedger_ACID = account.ACID;
        this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_AccLedger_ACCNAME = account.ACNAME;
        // this._reportFilterService.AccoutLedgerObj.AccLedger_SingleAccount = account.ACID;
    };
    ActualVsBudgetReport.prototype.BudgetSelectionClicked = function () {
        var fiscal_Data = this.userProfile.PhiscalYearInfo.PhiscalID;
        var re = /\//gi;
        var fiscalyear = fiscal_Data.replace(re, "ZZ");
        var division = this.userProfile.division;
        this.gridPopupSettingsForBudgetList = {
            title: "Budget List",
            apiEndpoints: "/getBudgetNameList/" + fiscalyear + "/" + division,
            defaultFilterIndex: 1,
            columns: [
                {
                    key: "BUDGET_NUMBER",
                    title: "Budget No",
                    hidden: false,
                    noSearch: false
                },
                {
                    key: "BUDGET_NAME",
                    title: "Budget Name",
                    hidden: false,
                    noSearch: false
                }
            ]
        };
        this.genericGridBudgetList.show();
    };
    ActualVsBudgetReport.prototype.dblClickBudgetSelect = function (value) {
        this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_Budget_Name = value.BUDGET_NAME;
        // this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_Budget_Num = value.BUDGET_NUMBER;
        this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_BUDGETSELECTION = value.BUDGET_NUMBER;
        switch (value.BUDGET_INTERVAL) {
            case 'YEARLY':
                this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_BUDGETINTERVAL = '3';
                break;
            case 'QUARTERLY':
                this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_BUDGETINTERVAL = '2';
                break;
            case 'MONTHLY':
                this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_BUDGETINTERVAL = '1';
                break;
            default: this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_BUDGETINTERVAL = '0';
        }
        if (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERWISE == '0') {
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION = this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_BUDGETINTERVAL;
        }
        // this.masterService.LoadBudgetAllocation(value.VCHRNO)
        //   .subscribe(data => {
        //     if (data.status == 'ok') {
        //       if (data.result && data.result.length && data.result.length > 0) {
        //         this.BudgetObj.MODE = "ADD";
        //         this.BudgetObj.BUDGET_TYPE = data.result[0].BUDGET_TYPE;
        //         this.BudgetObj.BUDGET_INTERVAL = data.result[0].BUDGET_INTERVAL;
        //         this.BudgetObj.INTERVAL_ON_AD_OR_BS = data.result[0].INTERVAL_ON_AD_OR_BS;
        //         this.BudgetObj.TRNDATE = data.result[0].TRNDATE;
        //         this.BudgetObj.BSDATE = data.result[0].BSDATE;
        //         this.BudgetObj.SUBDIVIDED_BY = data.result[0].SUBDIVIDED_BY;
        //         this.BudgetObj.FROM_DATE = data.result[0].FROM_DATE;
        //         this.BudgetObj.FROM_BSDATE = data.result[0].FROM_BSDATE;
        //         this.BudgetObj.TO_DATE = data.result[0].TO_DATE;
        //         this.BudgetObj.TO_BSDATE = data.result[0].TO_BSDATE;
        //         this.BudgetObj.ACTION = data.result[0].ACTION;
        //         this.BudgetObj.ACTION_TYPE = data.result[0].ACTION_TYPE;
        //         // this.ChooseInterval();
        //         // this.SelectionAction();
        //       }
        //       if (data.result2 && data.result2.length && data.result2.length > 0) {
        //         this.temp_DetailList = [];
        //         // this.DetailList = [];
        //         this.BudgetObj.COSTCENTER_CATEGORYID = data.result2[0].COSTCENTER_CATEGORYID;
        //         this.BudgetObj.COSTCENTER_CATEGORYNAME = data.result2[0].COSTCENTER_CATEGORYNAME;
        //         this.BudgetObj.CCID = data.result2[0].CCID;
        //         this.BudgetObj.COSTCENTER_NAME = data.result2[0].COSTCENTER_NAME;
        //         this.temp_DetailList = data.result2;
        //         // this.CalculateSum();
        //       }
        //     }
        //   }, error => {
        //   }
        //   )
    };
    ActualVsBudgetReport.prototype.onBudgetSelectionChange = function () {
        if (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_Budget_Name == '') {
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_BUDGETSELECTION = '%';
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION = '3';
        }
    };
    ActualVsBudgetReport.prototype.overViewSelect = function (event) {
        if (event.target.value == 0) {
            this._reportFilterService.ReportOptionAll = true;
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATETYPE = 2;
            if (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_BUDGETSELECTION == '%' || this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERWISE == 1) {
                this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION = '3';
            }
        }
    };
    ActualVsBudgetReport.prototype.ActualVSbudgetSelect = function (event) {
        if (event.target.value == 1) {
            this._reportFilterService.ReportOptionAll = false;
            this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATETYPE = 2;
            if (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_BUDGETSELECTION == '%' || this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERWISE == 1) {
                this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION = '3';
            }
            else {
                if (this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_BUDGETINTERVAL) {
                    this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION = this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_BUDGETINTERVAL;
                }
                else {
                    this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION = '3';
                }
            }
        }
    };
    ActualVsBudgetReport.prototype.showCostCenterGroupChange = function () {
        var _this = this;
        // this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERCATEGORY = costCentercategory.target.value;
        // if(this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERCATEGORY=='%'){
        //   this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_OPT_COSTCENTER = 0;
        // }
        var costCenterCategoryId = this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERCATEGORY;
        if (this.userSetting.EnableCompulsoryCostCategory == 1) {
            this.masterService.sendCostCenterList(costCenterCategoryId).subscribe(function (res) {
                console.log('res', res);
                // this.costCenterList.push(res.data)
                _this.CostcenterList = res.data;
                console.log('costCenterList', _this.CostcenterList);
            });
        }
    };
    ActualVsBudgetReport.prototype.applyHostListener = function () {
        if (this.budgetSelectionField && this.budgetSelectionField.nativeElement) {
            this.budgetSelectionField.nativeElement.addEventListener('keydown', function (event) {
                if (event.key !== 'Backspace') {
                    event.preventDefault(); // Prevent typing any character except the backspace
                }
            });
        }
    };
    return ActualVsBudgetReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], ActualVsBudgetReport.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridAccountLedger"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], ActualVsBudgetReport.prototype, "genericGridAccountLedger", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridBudgetList"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], ActualVsBudgetReport.prototype, "genericGridBudgetList", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('budgetSelectionField'),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"])
], ActualVsBudgetReport.prototype, "budgetSelectionField", void 0);
ActualVsBudgetReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'actual-vs-budget-report',
        template: __webpack_require__(1719),
        styles: [__webpack_require__(1163), __webpack_require__(120)],
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_4__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_2__common_services_permission_authService_service__["a" /* AuthService */], __WEBPACK_IMPORTED_MODULE_4__angular_router__["ActivatedRoute"], __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_5__common_services_alert_alert_service__["a" /* AlertService */]])
], ActualVsBudgetReport);



/***/ }),

/***/ 1487:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AdditionalCostItemwiseReport; });







var AdditionalCostItemwiseReport = (function () {
    function AdditionalCostItemwiseReport(masterService, dialogref, data, _ActivatedRoute, _reportFilterService, arouter, alertService) {
        var _this = this;
        this.masterService = masterService;
        this.dialogref = dialogref;
        this.data = data;
        this._ActivatedRoute = _ActivatedRoute;
        this._reportFilterService = _reportFilterService;
        this.arouter = arouter;
        this.alertService = alertService;
        this.ReportParameters = {};
        this.division = [];
        this.CostcenterList = [];
        this.instanceWiseRepName = 'Additional Cost Itemwise Report';
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.gridPopupSettingsForVoucherList = new __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridPopupSettingsForAccountList = new __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridCostCenterListPopupSettings = new __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridCostCenterGroupListPopupSettings = new __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        //----------Default values on load
        //   this.multipleReportFormateName = 'Additional Cost Detail Report';
        this.ReportParameters.COMID = this.masterService.userProfile.CompanyInfo.COMPANYID;
        this.division = [];
        //let data: Array<IDivision> = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                //////console.log("div" + JSON.stringify(res));
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        this.masterService.getCostcenter().subscribe(function (res) {
            _this.CostcenterList = res;
        });
        // this.masterService.getAccDivList();
    }
    AdditionalCostItemwiseReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            if (_this._reportFilterService.AdditionalCostDetailObj.assignPrevioiusDate != true) {
                _this.masterService.getAccDivList();
                _this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                _this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                _this.changestartDate(_this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DATE1, "AD");
                _this.changeEndDate(_this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DATE2, "AD");
                // this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DIV = this.masterService.userProfile.CompanyInfo.INITIAL;
                _this.masterService.viewDivision.subscribe(function () {
                    if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                        _this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DIV = '%';
                    }
                    else {
                        if (_this.masterService.userSetting.userwisedivision == 1 && _this.division.length == 1) {
                            _this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DIV = _this.division[0].INITIAL;
                        }
                        else {
                            _this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                        }
                    }
                });
                _this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_ISSUMMARY = '1';
            }
            if (params.instancename) {
                // ////console.log("@@AdditionalCostDetailObj",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                _this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                _this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                _this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
            }
        });
        this.changestartDate(this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DATE1, "AD");
    };
    AdditionalCostItemwiseReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    AdditionalCostItemwiseReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    AdditionalCostItemwiseReport.prototype.DialogClosedResult = function (res) {
        var _this = this;
        this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DIV = (this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DIV == null || this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DIV == "") ? "%" : this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DIV;
        if (this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_ISSUMMARY == '1') {
            this.multipleReportFormateName = 'Additional Cost Itemwise Summary Report';
            this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_SUMMARYREPORTDISPLAYNAME = ' @Summary Report';
        }
        else {
            this.multipleReportFormateName = 'Additional Cost Itemwise Detail Report';
            this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_SUMMARYREPORTDISPLAYNAME = ' @Detail Report';
        }
        if (this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DIV && this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DIV == '%') {
            this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DIVISIONNAME = 'All';
        }
        else if (this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DIV && this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DIV != '%') {
            var abc = this.division.filter(function (x) { return x.INITIAL == _this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DIV; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DIVISIONNAME = abc[0].NAME;
            }
            else {
                this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DIVISIONNAME = '';
            }
        }
        else {
            this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DIVISIONNAME = '';
        }
        if (res == "ok") {
            this._reportFilterService.AdditionalCostDetailObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.AdditionalCostDetail_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Additional Cost Itemwise Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.AdditionalCostDetail_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Additional Cost Itemwise Report' + '_' + this._reportFilterService.AdditionalCostDetail_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.AdditionalCostDetail_loadedTimes,
                });
            }
            if (this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_COSTCENTERNAME == "")
                this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_CCID = '%';
        }
        this.reportdataEmit.emit({
            status: res, data: {
                reportname: this.multipleReportFormateName,
                REPORTDISPLAYNAME: 'Additional Cost Itemwise Report',
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.AdditionalCostDetail_loadedTimes,
                reportparam: {
                    DIVISION: this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DIV,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    COMID: this.ReportParameters.COMID,
                    DATE1: this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DATE1,
                    DATE2: this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DATE2,
                    BSDATE1: this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_BSDATE1,
                    BSDATE2: this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_BSDATE2,
                    VOUCHER: this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_VOUCHERNO ? this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_VOUCHERNO : '%',
                    ACID: this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_ACID ? this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_ACID : '%',
                    ACCNAME: this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_ACNAME ? this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_ACNAME : '%',
                    SUMMARYREPORT: this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_ISSUMMARY,
                    DIVISIONNAME: this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DIVISIONNAME ? this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DIVISIONNAME : '',
                    SUMMARYREPORTDISPLAYNAME: this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_SUMMARYREPORTDISPLAYNAME ? this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_SUMMARYREPORTDISPLAYNAME : '',
                    SUPPLIERDISPLAYNAME: this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_ACNAME ? this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_ACNAME : '',
                    CCID: this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_CCID ? this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_CCID : '%'
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.AdditionalCostDetail_loadedTimes = this._reportFilterService.AdditionalCostDetail_loadedTimes + 1;
        }
    };
    AdditionalCostItemwiseReport.prototype.changestartDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DATE1 = this.masterService.toBSDate(value);
        }
    };
    AdditionalCostItemwiseReport.prototype.changeEndDate = function (value, format) {
        try {
            var adbs = __webpack_require__(19);
            if (format == "AD") {
                var adDate = (value.replace("-", "/")).replace("-", "/");
                var bsDate = adbs.ad2bs(adDate);
                this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_BSDATE2 = this.masterService.toBSDate(value);
            }
            else if (format == "BS") {
                var datearr = value.split('/');
                var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                // var bsDate = (value.replace("-", "/")).replace("-", "/");
                var adDate = adbs.bs2ad(bsDate_2);
                var Engdate = this.masterService.toADDate(value);
                var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
                if (Validatedata == true) {
                    var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                    var adDate1 = adbs.bs2ad(bsDate1);
                    this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DATE2 = this.masterService.toADDate(value);
                }
                else {
                    this.alertService.error("Cannot Change the date");
                    return;
                }
                // this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DATE2 = this.masterService.toBSDate(value);
            }
        }
        catch (e) { }
    };
    AdditionalCostItemwiseReport.prototype.VoucherNoEnterClicked = function () {
        this.gridPopupSettingsForVoucherList = this.masterService.getGenericGridPopUpSettings('PIVoucherListForAdditionalCostReport');
        this.genericGridVoucherNo.show();
    };
    AdditionalCostItemwiseReport.prototype.dblClickVoucherSelect = function (voucher) {
        this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_VOUCHERNO = voucher.VCHRNO;
    };
    AdditionalCostItemwiseReport.prototype.AccountEnterClicked = function () {
        this.gridPopupSettingsForAccountList = {
            title: "Accounts",
            apiEndpoints: "/getAccountPagedListByMapId/Master/SupplierListForReport",
            defaultFilterIndex: 1,
            columns: [
                {
                    key: "ACID",
                    title: "ACID",
                    hidden: false,
                    noSearch: false
                },
                {
                    key: "ACNAME",
                    title: "A/C NAME",
                    hidden: false,
                    noSearch: false
                }
            ]
        };
        this.genericGridAccount.show();
    };
    AdditionalCostItemwiseReport.prototype.dblClickAccountSelect = function (supplier) {
        this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_ACID = supplier.ACID;
        this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_ACNAME = supplier.ACNAME;
    };
    AdditionalCostItemwiseReport.prototype.showCostCenterGroupList = function (i) {
        this.gridCostCenterGroupListPopupSettings = {
            title: "Cost Centers Categories",
            apiEndpoints: "/getCostCenterGroupPagedList",
            defaultFilterIndex: 0,
            columns: [
                {
                    key: "ccgid",
                    title: "ID",
                    hidden: false,
                    noSearch: false
                },
                {
                    key: "COSTCENTERGROUPNAME",
                    title: "Cost Center Category Name",
                    hidden: false,
                    noSearch: false
                },
            ]
        };
        this.genericGridCostCenterGroupList.show();
    };
    AdditionalCostItemwiseReport.prototype.onCostCenterGroupSelect = function (category) {
        var ccgid = category.ccgid;
        this.showCostCenterList(ccgid);
    };
    AdditionalCostItemwiseReport.prototype.showCostCenterList = function (ccgid) {
        this.gridCostCenterListPopupSettings = {
            title: "Cost Centers",
            apiEndpoints: "/getCostCenterPagedListAccordingToId/" + ccgid,
            defaultFilterIndex: 0,
            columns: [
                {
                    key: "COSTCENTERNAME",
                    title: "Cost Center Name",
                    hidden: false,
                    noSearch: false
                }
            ]
        };
        this.genericGridCostCenterList.show();
    };
    AdditionalCostItemwiseReport.prototype.onCostCenterSelect = function (costcenter) {
        this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_COSTCENTERNAME = costcenter.COSTCENTERNAME;
        this._reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_CCID = costcenter.CCID;
    };
    return AdditionalCostItemwiseReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], AdditionalCostItemwiseReport.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridVoucherNo"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], AdditionalCostItemwiseReport.prototype, "genericGridVoucherNo", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridAccount"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], AdditionalCostItemwiseReport.prototype, "genericGridAccount", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridCostCenterList"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], AdditionalCostItemwiseReport.prototype, "genericGridCostCenterList", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridCostCenterGroupList"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], AdditionalCostItemwiseReport.prototype, "genericGridCostCenterGroupList", void 0);
AdditionalCostItemwiseReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'additionalcost-itemwise-report',
        template: __webpack_require__(1720),
        styles: [__webpack_require__(1163), __webpack_require__(120)]
    }),
    __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object, __WEBPACK_IMPORTED_MODULE_4__angular_router__["ActivatedRoute"],
        __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_4__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__["a" /* AlertService */]])
], AdditionalCostItemwiseReport);



/***/ }),

/***/ 1488:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AdditionalCostVoucherwiseReport; });







var AdditionalCostVoucherwiseReport = (function () {
    function AdditionalCostVoucherwiseReport(masterService, dialogref, data, _ActivatedRoute, alertService, _reportFilterService, arouter) {
        var _this = this;
        this.masterService = masterService;
        this.dialogref = dialogref;
        this.data = data;
        this._ActivatedRoute = _ActivatedRoute;
        this.alertService = alertService;
        this._reportFilterService = _reportFilterService;
        this.arouter = arouter;
        this.ReportParameters = {};
        this.division = [];
        this.CostcenterList = [];
        this.instanceWiseRepName = 'Additional Cost Voucherwise Report';
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.gridPopupSettingsForVoucherList = new __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridPopupSettingsForAccountList = new __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridCostCenterListPopupSettings = new __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridCostCenterGroupListPopupSettings = new __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        //----------Default values on load
        //   this.multipleReportFormateName = 'Additional Cost Summary Report';
        this.ReportParameters.COMID = this.masterService.userProfile.CompanyInfo.COMPANYID;
        this.division = [];
        //let data: Array<IDivision> = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                //////console.log("div" + JSON.stringify(res));
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        this.masterService.getCostcenter().subscribe(function (res) {
            _this.CostcenterList = res;
        });
        // this.masterService.getAccDivList();
    }
    AdditionalCostVoucherwiseReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            if (_this._reportFilterService.AdditionalCostSummaryObj.assignPrevioiusDate != true) {
                _this.masterService.getAccDivList();
                _this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                _this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                _this.changestartDate(_this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DATE1, "AD");
                _this.changeEndDate(_this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DATE2, "AD");
                // this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DIV=this.masterService.userProfile.CompanyInfo.INITIAL;
                _this.masterService.viewDivision.subscribe(function () {
                    if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                        _this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DIV = '%';
                    }
                    else {
                        if (_this.masterService.userSetting.userwisedivision == 1 && _this.division.length == 1) {
                            _this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DIV = _this.division[0].INITIAL;
                        }
                        else {
                            _this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                        }
                    }
                });
                _this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_ISSUMMARY = '1';
            }
            if (params.instancename) {
                // ////console.log("@@AdditionalCostSummaryObj",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                _this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                _this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                _this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
            }
        });
        this.changestartDate(this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DATE1, "AD");
        this.changeEndDate(this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DATE2, "AD");
    };
    AdditionalCostVoucherwiseReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    AdditionalCostVoucherwiseReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    AdditionalCostVoucherwiseReport.prototype.DialogClosedResult = function (res) {
        var _this = this;
        this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DIV = (this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DIV == null || this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DIV == "") ? "%" : this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DIV;
        if (this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_ISSUMMARY == '1') {
            this.multipleReportFormateName = 'Additional Cost Voucherwise Summary Report';
            this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_SUMMARYREPORTDISPLAYNAME = ' @Summary Report';
        }
        else {
            this.multipleReportFormateName = 'Additional Cost Voucherwise Detail Report';
            this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_SUMMARYREPORTDISPLAYNAME = ' @Detail Report';
        }
        if (this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DIV && this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DIV == '%') {
            this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DIVISIONNAME = 'All';
        }
        else if (this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DIV && this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DIV != '%') {
            var abc = this.division.filter(function (x) { return x.INITIAL == _this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DIV; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DIVISIONNAME = abc[0].NAME;
            }
            else {
                this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DIVISIONNAME = '';
            }
        }
        else {
            this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DIVISIONNAME = '';
        }
        if (res == "ok") {
            this._reportFilterService.AdditionalCostSummaryObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.AdditionalCostSummary_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Additional Cost Voucherwise Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.AdditionalCostSummary_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Additional Cost Voucherwise Report' + '_' + this._reportFilterService.AdditionalCostSummary_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.AdditionalCostSummary_loadedTimes,
                });
            }
        }
        if (this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_COSTCENTERNAME == "")
            this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_CCID = '%';
        this.reportdataEmit.emit({ status: res, data: { reportname: this.multipleReportFormateName,
                REPORTDISPLAYNAME: 'Additional Cost Voucherwise Report',
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.AdditionalCostSummary_loadedTimes,
                reportparam: {
                    DIVISION: this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DIV,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    COMID: this.ReportParameters.COMID,
                    DATE1: this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DATE1,
                    DATE2: this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DATE2,
                    BSDATE1: this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_BSDATE1,
                    BSDATE2: this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_BSDATE2,
                    VOUCHER: this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_VOUCHERNO ? this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_VOUCHERNO : '%',
                    ACID: this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_ACID ? this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_ACID : '%',
                    ACCNAME: this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_ACNAME ? this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_ACNAME : '%',
                    SUMMARYREPORT: this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_ISSUMMARY,
                    DIVISIONNAME: this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DIVISIONNAME ? this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DIVISIONNAME : '',
                    SUMMARYREPORTDISPLAYNAME: this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_SUMMARYREPORTDISPLAYNAME ? this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_SUMMARYREPORTDISPLAYNAME : '',
                    SUPPLIERDISPLAYNAME: this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_ACNAME ? this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_ACNAME : '',
                    CCID: this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_CCID ? this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_CCID : '%'
                } } });
        if (res == "ok") {
            this._reportFilterService.AdditionalCostSummary_loadedTimes = this._reportFilterService.AdditionalCostSummary_loadedTimes + 1;
        }
    };
    AdditionalCostVoucherwiseReport.prototype.changestartDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DATE1 = this.masterService.toBSDate(value);
        }
    };
    AdditionalCostVoucherwiseReport.prototype.changeEndDate = function (value, format) {
        try {
            var adbs = __webpack_require__(19);
            if (format == "AD") {
                var adDate = (value.replace("-", "/")).replace("-", "/");
                var bsDate = adbs.ad2bs(adDate);
                this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_BSDATE2 = this.masterService.toBSDate(value);
            }
            else if (format == "BS") {
                var datearr = value.split('/');
                var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                // var bsDate = (value.replace("-", "/")).replace("-", "/");
                var adDate = adbs.bs2ad(bsDate_2);
                var Engdate = this.masterService.toADDate(value);
                var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
                if (Validatedata == true) {
                    var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                    var adDate1 = adbs.bs2ad(bsDate1);
                    this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DATE2 = this.masterService.toADDate(value);
                }
                else {
                    this.alertService.error("Cannot Change the date");
                    return;
                }
                // this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DATE2 = this.masterService.toBSDate(value);
            }
        }
        catch (e) { }
    };
    AdditionalCostVoucherwiseReport.prototype.VoucherNoEnterClicked = function () {
        this.gridPopupSettingsForVoucherList = this.masterService.getGenericGridPopUpSettings('PIVoucherListForAdditionalCostReport');
        this.genericGridVoucherNo.show();
    };
    AdditionalCostVoucherwiseReport.prototype.dblClickVoucherSelect = function (voucher) {
        this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_VOUCHERNO = voucher.VCHRNO;
    };
    AdditionalCostVoucherwiseReport.prototype.AccountEnterClicked = function () {
        this.gridPopupSettingsForAccountList = {
            title: "Accounts",
            apiEndpoints: "/getAccountPagedListByMapId/Master/SupplierListForReport",
            defaultFilterIndex: 1,
            columns: [
                {
                    key: "ACID",
                    title: "ACID",
                    hidden: false,
                    noSearch: false
                },
                {
                    key: "ACNAME",
                    title: "A/C NAME",
                    hidden: false,
                    noSearch: false
                }
            ]
        };
        this.genericGridAccount.show();
    };
    AdditionalCostVoucherwiseReport.prototype.dblClickAccountSelect = function (supplier) {
        this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_ACID = supplier.ACID;
        this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_ACNAME = supplier.ACNAME;
    };
    AdditionalCostVoucherwiseReport.prototype.showCostCenterGroupList = function (i) {
        this.gridCostCenterGroupListPopupSettings = {
            title: "Cost Centers Categories",
            apiEndpoints: "/getCostCenterGroupPagedList",
            defaultFilterIndex: 0,
            columns: [
                {
                    key: "ccgid",
                    title: "ID",
                    hidden: false,
                    noSearch: false
                },
                {
                    key: "COSTCENTERGROUPNAME",
                    title: "Cost Center Category Name",
                    hidden: false,
                    noSearch: false
                },
            ]
        };
        this.genericGridCostCenterGroupList.show();
    };
    AdditionalCostVoucherwiseReport.prototype.onCostCenterGroupSelect = function (category) {
        var ccgid = category.ccgid;
        this.showCostCenterList(ccgid);
    };
    AdditionalCostVoucherwiseReport.prototype.showCostCenterList = function (ccgid) {
        this.gridCostCenterListPopupSettings = {
            title: "Cost Centers",
            apiEndpoints: "/getCostCenterPagedListAccordingToId/" + ccgid,
            defaultFilterIndex: 0,
            columns: [
                {
                    key: "COSTCENTERNAME",
                    title: "Cost Center Name",
                    hidden: false,
                    noSearch: false
                }
            ]
        };
        this.genericGridCostCenterList.show();
    };
    AdditionalCostVoucherwiseReport.prototype.onCostCenterSelect = function (costcenter) {
        this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_COSTCENTERNAME = costcenter.COSTCENTERNAME;
        this._reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_CCID = costcenter.CCID;
    };
    return AdditionalCostVoucherwiseReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], AdditionalCostVoucherwiseReport.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridVoucherNo"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], AdditionalCostVoucherwiseReport.prototype, "genericGridVoucherNo", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridAccount"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], AdditionalCostVoucherwiseReport.prototype, "genericGridAccount", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridCostCenterList"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], AdditionalCostVoucherwiseReport.prototype, "genericGridCostCenterList", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridCostCenterGroupList"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], AdditionalCostVoucherwiseReport.prototype, "genericGridCostCenterGroupList", void 0);
AdditionalCostVoucherwiseReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'additionalcost-voucherwise-report',
        template: __webpack_require__(1721),
        styles: [__webpack_require__(1163), __webpack_require__(120)]
    }),
    __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object, __WEBPACK_IMPORTED_MODULE_4__angular_router__["ActivatedRoute"], __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_4__angular_router__["Router"]])
], AdditionalCostVoucherwiseReport);



/***/ }),

/***/ 1489:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BalanceSheetReport; });







var BalanceSheetReport = (function () {
    function BalanceSheetReport(masterService, _authService, _reportFilterService, arouter, alertService, dialogref, _ActivatedRoute, data) {
        var _this = this;
        this.masterService = masterService;
        this._authService = _authService;
        this._reportFilterService = _reportFilterService;
        this.arouter = arouter;
        this.alertService = alertService;
        this.dialogref = dialogref;
        this._ActivatedRoute = _ActivatedRoute;
        this.data = data;
        this.division = [];
        this.instanceWiseRepName = 'Balance Sheet Report';
        this.CostcenterList = [];
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.userProfile = this._authService.getUserProfile();
        this.userSetting = _authService.getSetting();
        this.division = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        this.masterService.getCostcenter().subscribe(function (res) {
            _this.CostcenterList = res;
        });
        // this.masterService.getAccDivList();
    }
    BalanceSheetReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            if (_this._reportFilterService.BalanceSheetObj.assignPrevioiusDate != true) {
                _this.masterService.getAccDivList();
                _this._reportFilterService.BalanceSheetObj.BalanceSheet_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                if (_this.userProfile.CompanyInfo.ActualFY == _this.masterService.PhiscalObj.PhiscalID) {
                    _this._reportFilterService.BalanceSheetObj.BalanceSheet_DATE2 = new Date().toJSON().split('T')[0];
                }
                else {
                    _this._reportFilterService.BalanceSheetObj.BalanceSheet_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                }
                _this.masterService.viewDivision.subscribe(function () {
                    if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                        _this._reportFilterService.BalanceSheetObj.BalanceSheet_DIV = '%';
                    }
                    else {
                        if (_this.masterService.userSetting.userwisedivision == 1 && _this.division.length == 1) {
                            _this._reportFilterService.BalanceSheetObj.BalanceSheet_DIV = _this.division[0].INITIAL;
                        }
                        else {
                            _this._reportFilterService.BalanceSheetObj.BalanceSheet_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                        }
                    }
                });
                _this._reportFilterService.BalanceSheetObj.BalanceSheet_VERTICALFORMAT = '1';
                // this._reportFilterService.BalanceSheetObj.BalanceSheet_OSTOCK = 0;
                // this._reportFilterService.BalanceSheetObj.BalanceSheet_CSTOCK = 0;
                _this._reportFilterService.BalanceSheetObj.BalanceSheet_SHOWSUBLEDGER = 0;
                _this._reportFilterService.BalanceSheetObj.BalanceSheet_SHOWDEBTORSCREDITORS = 0;
                if (_this.userSetting.IS_NESTLE == 1) {
                    _this._reportFilterService.BalanceSheetObj.BalanceSheet_COMPANYTYPE = 'DMS';
                }
                else {
                    _this._reportFilterService.BalanceSheetObj.BalanceSheet_COMPANYTYPE = 'NONDMS';
                }
                _this._reportFilterService.BalanceSheetObj.BalanceSheet_CostCenter = '%';
            }
            if (params.instancename) {
                // ////console.log("@@[plreport0]",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                _this._reportFilterService.BalanceSheetObj.BalanceSheet_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                _this._reportFilterService.BalanceSheetObj.BalanceSheet_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                _this._reportFilterService.BalanceSheetObj.BalanceSheet_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
                _this._reportFilterService.BalanceSheetObj.BalanceSheet_SHOWSUBLEDGER = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWSUBLEDGER;
                _this._reportFilterService.BalanceSheetObj.BalanceSheet_VERTICALFORMAT = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.VERTICALFORMAT;
                _this._reportFilterService.BalanceSheetObj.BalanceSheet_OSTOCK = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.OSTOCK;
                _this._reportFilterService.BalanceSheetObj.BalanceSheet_CSTOCK = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.CSTOCK;
                _this._reportFilterService.BalanceSheetObj.BalanceSheet_SHOWDEBTORSCREDITORS = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWDEBTORSCREDITORS;
                if (_this.userSetting.IS_NESTLE == 1) {
                    _this._reportFilterService.BalanceSheetObj.BalanceSheet_COMPANYTYPE = 'DMS';
                }
                else {
                    _this._reportFilterService.BalanceSheetObj.BalanceSheet_COMPANYTYPE = 'NONDMS';
                }
                _this._reportFilterService.BalanceSheetObj.BalanceSheet_CostCenter = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.COSTCENTER;
            }
        });
        // this.calcStock();
        this.changeEntryDate(this._reportFilterService.BalanceSheetObj.BalanceSheet_DATE1, "AD");
        this.changeEndDate(this._reportFilterService.BalanceSheetObj.BalanceSheet_DATE2, "AD");
    };
    BalanceSheetReport.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.BalanceSheetObj.BalanceSheet_BSDATE1 = this.masterService.toADDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.BalanceSheetObj.BalanceSheet_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
        }
    };
    BalanceSheetReport.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.BalanceSheetObj.BalanceSheet_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            var adDate = adbs.bs2ad(bsDate_2);
            this._reportFilterService.BalanceSheetObj.BalanceSheet_DATE2 = this.masterService.toADDate(value);
        }
    };
    BalanceSheetReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    BalanceSheetReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    BalanceSheetReport.prototype.DialogClosedResult = function (res) {
        var _this = this;
        //console.log("BalanceSheet_STOCK",this._reportFilterService.BalanceSheetObj.BalanceSheet_OSTOCK,this._reportFilterService.BalanceSheetObj.BalanceSheet_CSTOCK)
        // if (this._reportFilterService.BalanceSheetObj.BalanceSheet_OSTOCK === '' || this._reportFilterService.BalanceSheetObj.BalanceSheet_OSTOCK === null ||
        //     this._reportFilterService.BalanceSheetObj.BalanceSheet_OSTOCK === undefined || this._reportFilterService.BalanceSheetObj.BalanceSheet_CSTOCK === '' || this._reportFilterService.BalanceSheetObj.BalanceSheet_CSTOCK === null ||
        //     this._reportFilterService.BalanceSheetObj.BalanceSheet_CSTOCK === undefined) {
        //     this.alertService.info("Please Calculate Stock!!");
        //     return;
        // }
        var multipleReportFormateName = 'Balance Sheet Report';
        if (this._reportFilterService.BalanceSheetObj.BalanceSheet_VERTICALFORMAT == 1) {
            multipleReportFormateName = 'Balance Sheet Report';
        }
        else if (this._reportFilterService.BalanceSheetObj.BalanceSheet_VERTICALFORMAT == 0) {
            multipleReportFormateName = 'BALANCESHEET';
        }
        if (this._reportFilterService.BalanceSheetObj.BalanceSheet_DIV && this._reportFilterService.BalanceSheetObj.BalanceSheet_DIV == '%') {
            this._reportFilterService.BalanceSheetObj.BalanceSheet_DIVISIONNAME = 'All';
        }
        else if (this._reportFilterService.BalanceSheetObj.BalanceSheet_DIV && this._reportFilterService.BalanceSheetObj.BalanceSheet_DIV != '%') {
            var abc = this.division.filter(function (x) { return x.INITIAL == _this._reportFilterService.BalanceSheetObj.BalanceSheet_DIV; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.BalanceSheetObj.BalanceSheet_DIVISIONNAME = abc[0].NAME;
            }
            else {
                this._reportFilterService.BalanceSheetObj.BalanceSheet_DIVISIONNAME = '';
            }
        }
        else {
            this._reportFilterService.BalanceSheetObj.BalanceSheet_DIVISIONNAME = '';
        }
        if (this._reportFilterService.BalanceSheetObj.BalanceSheet_CostCenter && this._reportFilterService.BalanceSheetObj.BalanceSheet_CostCenter == '%') {
            this._reportFilterService.BalanceSheetObj.BalanceSheet_COSTCENTERDISPLAYNAME = 'All';
        }
        else if (this._reportFilterService.BalanceSheetObj.BalanceSheet_CostCenter != '%') {
            var abc = this.CostcenterList.filter(function (x) { return x.CCID == _this._reportFilterService.BalanceSheetObj.BalanceSheet_CostCenter; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.BalanceSheetObj.BalanceSheet_COSTCENTERDISPLAYNAME = abc[0].COSTCENTERNAME;
            }
            else {
                this._reportFilterService.BalanceSheetObj.BalanceSheet_COSTCENTERDISPLAYNAME = '';
            }
        }
        else {
            this._reportFilterService.BalanceSheetObj.BalanceSheet_COSTCENTERDISPLAYNAME = '';
        }
        if (res == "ok") {
            this._reportFilterService.BalanceSheetObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.BalanceSheet_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Balance Sheet Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.BalanceSheet_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Balance Sheet Report' + '_' + this._reportFilterService.BalanceSheet_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.BalanceSheet_loadedTimes,
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: 'Balance Sheet Report',
                reportname: multipleReportFormateName,
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.BalanceSheet_loadedTimes,
                reportparam: {
                    DATE1: this._reportFilterService.BalanceSheetObj.BalanceSheet_DATE1,
                    DATE2: this._reportFilterService.BalanceSheetObj.BalanceSheet_DATE2,
                    BSDATE1: this._reportFilterService.BalanceSheetObj.BalanceSheet_BSDATE1,
                    BSDATE2: this._reportFilterService.BalanceSheetObj.BalanceSheet_BSDATE2,
                    DIV: this._reportFilterService.BalanceSheetObj.BalanceSheet_DIV ? this._reportFilterService.BalanceSheetObj.BalanceSheet_DIV : '%',
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    CID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    SHOWSUBLEDGER: this._reportFilterService.BalanceSheetObj.BalanceSheet_SHOWSUBLEDGER ? this._reportFilterService.BalanceSheetObj.BalanceSheet_SHOWSUBLEDGER : 0,
                    COMPANYID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    COMPANYTYPE: this._reportFilterService.BalanceSheetObj.BalanceSheet_COMPANYTYPE ? this._reportFilterService.BalanceSheetObj.BalanceSheet_COMPANYTYPE : 'NONDMS',
                    OSTOCK: this._reportFilterService.BalanceSheetObj.BalanceSheet_OSTOCK ? this._reportFilterService.BalanceSheetObj.BalanceSheet_OSTOCK : 0,
                    CSTOCK: this._reportFilterService.BalanceSheetObj.BalanceSheet_CSTOCK ? this._reportFilterService.BalanceSheetObj.BalanceSheet_CSTOCK : 0,
                    SUMMARY: 0,
                    LEV: 100,
                    VERTICALFORMAT: this._reportFilterService.BalanceSheetObj.BalanceSheet_VERTICALFORMAT ? this._reportFilterService.BalanceSheetObj.BalanceSheet_VERTICALFORMAT : 1,
                    DIVISIONNAME: this._reportFilterService.BalanceSheetObj.BalanceSheet_DIVISIONNAME ? this._reportFilterService.BalanceSheetObj.BalanceSheet_DIVISIONNAME : '',
                    SHOWDEBTORSCREDITORS: this._reportFilterService.BalanceSheetObj.BalanceSheet_SHOWDEBTORSCREDITORS ? this._reportFilterService.BalanceSheetObj.BalanceSheet_SHOWDEBTORSCREDITORS : 0,
                    COSTCENTER: this._reportFilterService.BalanceSheetObj.BalanceSheet_CostCenter ? this._reportFilterService.BalanceSheetObj.BalanceSheet_CostCenter : '%',
                    COSTCENTERDISPLAYNAME: this._reportFilterService.BalanceSheetObj.BalanceSheet_COSTCENTERDISPLAYNAME ? this._reportFilterService.BalanceSheetObj.BalanceSheet_COSTCENTERDISPLAYNAME : '',
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.BalanceSheet_loadedTimes = this._reportFilterService.BalanceSheet_loadedTimes + 1;
        }
    };
    BalanceSheetReport.prototype.calcStock = function () {
        var _this = this;
        var reportparam = {};
        reportparam.DATE1 = this._reportFilterService.BalanceSheetObj.BalanceSheet_DATE1;
        reportparam.DATE2 = this._reportFilterService.BalanceSheetObj.BalanceSheet_DATE2;
        reportparam.DIV = this._reportFilterService.BalanceSheetObj.BalanceSheet_DIV;
        reportparam.COMPANYTYPE = this._reportFilterService.BalanceSheetObj.BalanceSheet_COMPANYTYPE;
        reportparam.PHISCALID = this.masterService.PhiscalObj.PhiscalID;
        this._reportFilterService.BalanceSheetObj.BalanceSheet_OSTOCK = 0;
        this._reportFilterService.BalanceSheetObj.BalanceSheet_CSTOCK = 0;
        this._reportFilterService.stockCalculation(reportparam).subscribe(function (res) {
            _this._reportFilterService.BalanceSheetObj.BalanceSheet_OSTOCK = res.result;
            _this._reportFilterService.BalanceSheetObj.BalanceSheet_CSTOCK = res.result2;
        });
    };
    BalanceSheetReport.prototype.changeDivision = function () {
        this._reportFilterService.BalanceSheetObj.BalanceSheet_OSTOCK = 0;
        this._reportFilterService.BalanceSheetObj.BalanceSheet_CSTOCK = 0;
    };
    return BalanceSheetReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], BalanceSheetReport.prototype, "reportdataEmit", void 0);
BalanceSheetReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'balancesheet-report',
        template: __webpack_require__(1722),
        styles: [__webpack_require__(1163), __webpack_require__(120)],
    }),
    __param(7, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__["a" /* AuthService */],
        __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_5__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], __WEBPACK_IMPORTED_MODULE_5__angular_router__["ActivatedRoute"], Object])
], BalanceSheetReport);



/***/ }),

/***/ 1490:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__masters_components_PLedger_PLedger_component__ = __webpack_require__(1181);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__common_popupLists_report_filter_report_filter_service__ = __webpack_require__(555);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BillTrackingReport; });









var BillTrackingReport = (function () {
    function BillTrackingReport(masterService, alertService, _reportFilterService, _authService, arouter, _ActivatedRoute, reportService) {
        var _this = this;
        this.masterService = masterService;
        this.alertService = alertService;
        this._reportFilterService = _reportFilterService;
        this._authService = _authService;
        this.arouter = arouter;
        this._ActivatedRoute = _ActivatedRoute;
        this.reportService = reportService;
        this.division = [];
        this.CostcenterList = [];
        this.instanceWiseRepName = 'Debtors Bill Tracking Report';
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.gridPopupSettingsForPartyLedgerList = new __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.reportNameFormatWise = 'Debtors Bill Tracking Report';
        this.userProfile = this._authService.getUserProfile();
        this.division = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        this.masterService.getCostcenter().subscribe(function (res) {
            _this.CostcenterList = res;
        });
        // this.masterService.getAccDivList();
    }
    BillTrackingReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            var mode = params.mode;
            // //console.log("@@this.reportService.drillParam.reportname",this.reportService.drillParam.reportname)
            if (mode == "DRILL" && _this.reportService.drillParam.returnUrl && _this.reportService.drillParam.reportname.startsWith('Debtors Bill Tracking Report') && _this._reportFilterService.BillTrackingObj.assignPrevioiusDate != true) {
                _this._reportFilterService.BillTrackingObj.BillTracking_DATE1 = _this.reportService.drillParam.reportparam.DATE1;
                _this._reportFilterService.BillTrackingObj.BillTracking_DATE2 = _this.reportService.drillParam.reportparam.DATE2;
                _this._reportFilterService.BillTrackingObj.BillTracking_DIV = _this.reportService.drillParam.reportparam.DIV;
                _this._reportFilterService.BillTrackingObj.BillTracking_CostCenter = _this.reportService.drillParam.reportparam.COSTCENTER;
                _this._reportFilterService.BillTrackingObj.BillTracking_Detail = '1';
                _this._reportFilterService.BillTrackingObj.BillTracking_ACID = _this.reportService.drillParam.reportparam.ACID;
                _this._reportFilterService.BillTrackingObj.BillTracking_ACCNAME = _this.reportService.drillParam.reportparam.ACNAME;
            }
            else {
                if (_this._reportFilterService.BillTrackingObj.assignPrevioiusDate != true) {
                    _this.masterService.getAccDivList();
                    // this._reportFilterService.BillTrackingObj.BillTracking_DATE1 = this.masterService.PhiscalObj.BeginDate.split('T')[0];
                    _this._reportFilterService.BillTrackingObj.BillTracking_DATE1 = new Date().toJSON().split('T')[0];
                    if (_this.userProfile.CompanyInfo.ActualFY == _this.masterService.PhiscalObj.PhiscalID) {
                        _this._reportFilterService.BillTrackingObj.BillTracking_DATE2 = new Date().toJSON().split('T')[0];
                        _this.changeEndDate(_this._reportFilterService.BillTrackingObj.BillTracking_DATE2, "AD");
                    }
                    else {
                        _this._reportFilterService.BillTrackingObj.BillTracking_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                        _this.changeEndDate(_this._reportFilterService.BillTrackingObj.BillTracking_DATE2, "AD");
                    }
                    // this._reportFilterService.BillTrackingObj.BillTracking_DIV = this.masterService.userProfile.CompanyInfo.INITIAL;
                    _this.masterService.viewDivision.subscribe(function () {
                        if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                            _this._reportFilterService.BillTrackingObj.BillTracking_DIV = '%';
                        }
                        else {
                            if (_this.masterService.userSetting.userwisedivision == 1 && _this.division.length == 1) {
                                _this._reportFilterService.BillTrackingObj.BillTracking_DIV = _this.division[0].INITIAL;
                            }
                            else {
                                _this._reportFilterService.BillTrackingObj.BillTracking_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                            }
                        }
                    });
                    _this._reportFilterService.BillTrackingObj.BillTracking_CostCenter = '%';
                    _this._reportFilterService.BillTrackingObj.BillTracking_VoucherType = 'PV';
                    _this._reportFilterService.BillTrackingObj.BillTracking_Detail = '0';
                    _this.changeEntryDate(_this._reportFilterService.BillTrackingObj.BillTracking_DATE1, "AD");
                    _this.changeEndDate(_this._reportFilterService.BillTrackingObj.BillTracking_DATE2, "AD");
                }
                if (params.instancename) {
                    _this._reportFilterService.BillTrackingObj.BillTracking_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                    _this._reportFilterService.BillTrackingObj.BillTracking_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                    _this._reportFilterService.BillTrackingObj.BillTracking_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
                    _this._reportFilterService.BillTrackingObj.BillTracking_CostCenter = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.COSTCENTER;
                }
            }
        });
        this.changeEntryDate(this._reportFilterService.BillTrackingObj.BillTracking_DATE1, "AD");
        this.changeEndDate(this._reportFilterService.BillTrackingObj.BillTracking_DATE2, "AD");
    };
    BillTrackingReport.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.BillTrackingObj.BillTracking_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.BillTrackingObj.BillTracking_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
        }
    };
    BillTrackingReport.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.BillTrackingObj.BillTracking_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            var adDate = adbs.bs2ad(bsDate_2);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.BillTrackingObj.BillTracking_DATE2 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
        }
    };
    BillTrackingReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    BillTrackingReport.prototype.DialogClosedResult = function (res) {
        var _this = this;
        if (this._reportFilterService.BillTrackingObj.BillTracking_DIV && this._reportFilterService.BillTrackingObj.BillTracking_DIV == '%') {
            this._reportFilterService.BillTrackingObj.BillTracking_DIVISIONNAME = 'All';
        }
        else if (this._reportFilterService.BillTrackingObj.BillTracking_DIV && this._reportFilterService.BillTrackingObj.BillTracking_DIV != '%') {
            var abc = this.division.filter(function (x) { return x.INITIAL == _this._reportFilterService.BillTrackingObj.BillTracking_DIV; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.BillTrackingObj.BillTracking_DIVISIONNAME = abc[0].NAME;
            }
            else {
                this._reportFilterService.BillTrackingObj.BillTracking_DIVISIONNAME = '';
            }
        }
        else {
            this._reportFilterService.BillTrackingObj.BillTracking_DIVISIONNAME = '';
        }
        if (this._reportFilterService.BillTrackingObj.BillTracking_CostCenter && this._reportFilterService.BillTrackingObj.BillTracking_CostCenter == '%') {
            this._reportFilterService.BillTrackingObj.BillTracking_COSTCENTERDISPLAYNAME = 'All';
        }
        else if (this._reportFilterService.BillTrackingObj.BillTracking_CostCenter != '%') {
            var abc = this.CostcenterList.filter(function (x) { return x.CCID == _this._reportFilterService.BillTrackingObj.BillTracking_CostCenter; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.BillTrackingObj.BillTracking_COSTCENTERDISPLAYNAME = abc[0].COSTCENTERNAME;
            }
            else {
                this._reportFilterService.BillTrackingObj.BillTracking_COSTCENTERDISPLAYNAME = '';
            }
        }
        else {
            this._reportFilterService.BillTrackingObj.BillTracking_COSTCENTERDISPLAYNAME = '';
        }
        if (this._reportFilterService.BillTrackingObj.BillTracking_Detail == 0) {
            this.reportNameFormatWise = 'Debtors Bill Tracking Report';
        }
        else {
            this.reportNameFormatWise = 'Debtors Bill Tracking Report_1';
        }
        if (this._reportFilterService.BillTrackingObj.BillTracking_ACCNAME == "") {
            this._reportFilterService.BillTrackingObj.BillTracking_ACID = '%';
        }
        if (res == "ok") {
            this._reportFilterService.BillTrackingObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.BillTracking_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Debtors Bill Tracking Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.BillTracking_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Debtors Bill Tracking Report' + '_' + this._reportFilterService.BillTracking_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.BillTracking_loadedTimes,
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: 'Debtors Bill Tracking Report',
                reportname: this.reportNameFormatWise,
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.BillTracking_loadedTimes,
                reportparam: {
                    DATE1: this._reportFilterService.BillTrackingObj.BillTracking_DATE1,
                    DATE2: this._reportFilterService.BillTrackingObj.BillTracking_DATE2,
                    FROMDATE: this._reportFilterService.BillTrackingObj.BillTracking_DATE1,
                    TODATE: this._reportFilterService.BillTrackingObj.BillTracking_DATE2,
                    BSDATE1: this._reportFilterService.BillTrackingObj.BillTracking_BSDATE1,
                    BSDATE2: this._reportFilterService.BillTrackingObj.BillTracking_BSDATE2,
                    DIV: this._reportFilterService.BillTrackingObj.BillTracking_DIV ? this._reportFilterService.BillTrackingObj.BillTracking_DIV : '%',
                    COSTCENTER: this._reportFilterService.BillTrackingObj.BillTracking_CostCenter ? this._reportFilterService.BillTrackingObj.BillTracking_CostCenter : '%',
                    COMID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    COMPANYID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    VOUCHERTYPE: this._reportFilterService.BillTrackingObj.BillTracking_VoucherType ? this._reportFilterService.BillTrackingObj.BillTracking_VoucherType : 'PV',
                    ACID: this._reportFilterService.BillTrackingObj.BillTracking_ACID ? this._reportFilterService.BillTrackingObj.BillTracking_ACID : '%',
                    PARTY: this._reportFilterService.BillTrackingObj.BillTracking_ACID ? this._reportFilterService.BillTrackingObj.BillTracking_ACID : '%',
                    ACNAME: this._reportFilterService.BillTrackingObj.BillTracking_ACCNAME,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID ? this.masterService.PhiscalObj.PhiscalID : '%',
                    DETAIL: this._reportFilterService.BillTrackingObj.BillTracking_Detail ? this._reportFilterService.BillTrackingObj.BillTracking_Detail : 1,
                    DIVISIONNAME: this._reportFilterService.BillTrackingObj.BillTracking_DIVISIONNAME ? this._reportFilterService.BillTrackingObj.BillTracking_DIVISIONNAME : '',
                    COSTCENTERDISPLAYNAME: this._reportFilterService.BillTrackingObj.BillTracking_COSTCENTERDISPLAYNAME ? this._reportFilterService.BillTrackingObj.BillTracking_COSTCENTERDISPLAYNAME : '',
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.BillTracking_loadedTimes = this._reportFilterService.BillTracking_loadedTimes + 1;
        }
    };
    // Close Method
    BillTrackingReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("cancel");
    };
    BillTrackingReport.prototype.AccountEnterClicked = function () {
        this.gridPopupSettingsForPartyLedgerList = this.masterService.getGenericGridPopUpSettings('CustomerListForReport');
        this.genericGridPartyLedger.show();
    };
    BillTrackingReport.prototype.dblClickAccountSelect = function (account) {
        this._reportFilterService.BillTrackingObj.BillTracking_ACID = account.ACID;
        this._reportFilterService.BillTrackingObj.BillTracking_ACCNAME = account.ACNAME;
    };
    BillTrackingReport.prototype.keyPress = function (event) {
        //console.log("@@billtevent",event)
        var pattern = /[\b]/;
        var inputChar = String.fromCharCode(event.charCode);
        if (!pattern.test(inputChar)) {
            // invalid character, prevent input
            event.preventDefault();
        }
    };
    return BillTrackingReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("PLedgerChild"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_3__masters_components_PLedger_PLedger_component__["a" /* PLedgerComponent */])
], BillTrackingReport.prototype, "PLedgerChild", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], BillTrackingReport.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridPartyLedger"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], BillTrackingReport.prototype, "genericGridPartyLedger", void 0);
BillTrackingReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'billtracking-report-selector',
        template: __webpack_require__(1723),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_repositories__["a" /* MasterRepo */],
        __WEBPACK_IMPORTED_MODULE_4__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_5__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */],
        __WEBPACK_IMPORTED_MODULE_2__common_services_permission_authService_service__["a" /* AuthService */], __WEBPACK_IMPORTED_MODULE_7__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_7__angular_router__["ActivatedRoute"],
        __WEBPACK_IMPORTED_MODULE_8__common_popupLists_report_filter_report_filter_service__["a" /* ReportFilterService */]])
], BillTrackingReport);



/***/ }),

/***/ 1491:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__masters_components_PLedger_PLedger_component__ = __webpack_require__(1181);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__common_popupLists_report_filter_report_filter_service__ = __webpack_require__(555);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_moment__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_moment__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CashCollectionVoucherReport; });










var CashCollectionVoucherReport = (function () {
    function CashCollectionVoucherReport(masterService, alertService, _reportFilterService, _authService, arouter, _ActivatedRoute, reportService) {
        this.masterService = masterService;
        this.alertService = alertService;
        this._reportFilterService = _reportFilterService;
        this._authService = _authService;
        this.arouter = arouter;
        this._ActivatedRoute = _ActivatedRoute;
        this.reportService = reportService;
        this.acname = '';
        this.accode = '';
        this.account = [];
        this.division = [];
        this.CostcenterList = [];
        this.AreaList = [];
        this.instanceWiseRepName = 'Cash Collection Voucher Report';
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.gridPopupSettingsForPartyLedgerList = new __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridPopupSettingsForMultiplePartyLedgerList = new __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridPopupSettingsForMultipleGroupAccountList = new __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this._reportFilterService.PartyLedgerObj.IGNOREOPPOSITAC = true;
        // this._reportFilterService.PartyLedgerObj.PartyLedger_HIDENARATION=true;
        this._reportFilterService.showAllcontactsInCC = true;
        this._reportFilterService.PartyLedgerObj.Reportnameis = 'cashcollectionvoucher';
        this.reportNameFormatWise = 'Cash Collection Voucher Report';
        this.userProfile = this._authService.getUserProfile();
        this.checkValueForCombine();
        // this.masterService.getAccDivList();
    }
    CashCollectionVoucherReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            var mode = params.mode;
            // ////console.log("@@this.reportMasterService.drillParam.returnUrl",params.mode,this.reportService.drillParam.returnUrl);
            // ////console.log("@@partyled",this.reportService.drillParam)
            if (mode == "DRILL" && _this.reportService.drillParam.returnUrl && _this.reportService.drillParam.reportname.startsWith('Party Ledger Report')) {
                _this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_DATE1 = __WEBPACK_IMPORTED_MODULE_9_moment__(_this.reportService.drillParam.reportparam.DATE1).format('YYYY-MM-DD');
                _this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_DATE2 = __WEBPACK_IMPORTED_MODULE_9_moment__(_this.reportService.drillParam.reportparam.DATE2).format('YYYY-MM-DD');
                _this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_BSDATE1 = _this.reportService.drillParam.reportparam.BSDATE1;
                _this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_BSDATE2 = _this.reportService.drillParam.reportparam.BSDATE2;
            }
            else {
                if (_this._reportFilterService.CashCollectionVoucherObj.assignPrevioiusDate != true) {
                    _this.masterService.getAccDivList();
                    _this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                    //console.log("@@01BeginDate",this.masterService.PhiscalObj.BeginDate)
                    if (_this.userProfile.CompanyInfo.ActualFY == _this.masterService.PhiscalObj.PhiscalID) {
                        _this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_DATE2 = new Date().toJSON().split('T')[0];
                        _this.changeEndDate(_this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_DATE2, "AD");
                    }
                    else {
                        //console.log("@@02EndDate",this.masterService.PhiscalObj.EndDate)
                        _this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                        _this.changeEndDate(_this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_DATE2, "AD");
                    }
                    _this.changeEntryDate(_this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_DATE1, "AD");
                    _this.changeEndDate(_this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_DATE2, "AD");
                    _this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_VoucherStatus = '0';
                }
                if (params.instancename) {
                    // ////console.log("@@[Party Ledger Report0]",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                    _this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                    _this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                    _this.changeEntryDate(_this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_DATE1, "AD");
                    _this.changeEndDate(_this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_DATE2, "AD");
                    _this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_VoucherStatus = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.MODE;
                    _this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_PartyID = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.PARTY;
                }
            }
        });
    };
    CashCollectionVoucherReport.prototype.ngAfterViewInit = function () {
        var a = this.masterService.AccListDiv.forEach(function (x) { return x.isSelected == 1; });
        this.applyHostListener();
    };
    CashCollectionVoucherReport.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_DATE1 = this.masterService.toBSDate(value);
        }
    };
    CashCollectionVoucherReport.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_2);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_DATE2 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_DATE2 = this.masterService.toBSDate(value);
        }
    };
    CashCollectionVoucherReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    CashCollectionVoucherReport.prototype.DialogClosedResult = function (res) {
        if (res == "ok") {
            this._reportFilterService.CashCollectionVoucherObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
                // ////console.log("@@activeurlpath2",activeurlpath2)
            }
            if (this._reportFilterService.PartyLedger_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Cash Collection Voucher Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.CashCollectionVoucher_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Cash Collection Voucher Report' + '_' + this._reportFilterService.CashCollectionVoucher_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.CashCollectionVoucher_loadedTimes,
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: 'Cash Collection Voucher Report',
                reportname: this.reportNameFormatWise,
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.CashCollectionVoucher_loadedTimes,
                reportparam: {
                    DATE1: this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_DATE1,
                    DATE2: this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_DATE2,
                    FYID: this.masterService.PhiscalObj.PhiscalID,
                    MODE: this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_VoucherStatus,
                    PARTY: this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_PartyID ? this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_PartyID : '%'
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.PartyLedger_loadedTimes = this._reportFilterService.PartyLedger_loadedTimes + 1;
        }
    };
    // Close Method
    CashCollectionVoucherReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("cancel");
    };
    CashCollectionVoucherReport.prototype.checkValue = function () {
        if (this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType == 2) {
            this.showLedgerTable = true;
            this.acname = this._reportFilterService.PartyLedgerObj.PartyLedger_ACCNAME;
            this._reportFilterService.PartyLedgerObj.PartyLedger_ACCNAME = '';
            this.accode = this._reportFilterService.PartyLedgerObj.PartyLedger_ACCODE;
            this._reportFilterService.PartyLedgerObj.PartyLedger_ACID = '';
            this._reportFilterService.PartyLedgerObj.PartyLedger_SingleAccount = '';
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleCostcenter = [];
            this._reportFilterService.PartyLedgerObj.PartyLedger_AreaWise = [];
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleGroupAccounts = [];
        }
        else {
            this.showLedgerTable = false;
            this._reportFilterService.PartyLedgerObj.PartyLedger_ACCNAME = this.acname;
            this._reportFilterService.PartyLedgerObj.PartyLedger_ACID = this.accode;
            this._reportFilterService.PartyLedgerObj.PartyLedger_SingleAccount = this.accode;
        }
        if (this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType == 1) {
            this.showAreaTable = true;
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleCostcenter = [];
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleAccounts = [];
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleGroupAccounts = [];
        }
        else {
            this.showAreaTable = false;
        }
        if (this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType == 4) {
            this.showCCtable = true;
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleAccounts = [];
            this._reportFilterService.PartyLedgerObj.PartyLedger_AreaWise = 0;
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleGroupAccounts = [];
        }
        else {
            this.showCCtable = false;
        }
        if (this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType == 5) {
            this.showAccGrpTable = true;
            this._reportFilterService.PartyLedgerObj.PartyLedger_AreaWise = 0;
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleCostcenter = [];
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleAccounts = [];
        }
        else {
            this.showAccGrpTable = false;
        }
    };
    CashCollectionVoucherReport.prototype.checkValueForCombine = function () {
        if (this._reportFilterService.PartyLedgerObj.EnableCombineLedger == true) {
            this.showCombineLedgerList = true;
            this.acname = this._reportFilterService.PartyLedgerObj.PartyLedger_ACCNAME;
            this._reportFilterService.PartyLedgerObj.PartyLedger_ACCNAME = '';
            this.accode = this._reportFilterService.PartyLedgerObj.PartyLedger_ACCODE;
            this._reportFilterService.PartyLedgerObj.PartyLedger_ACID = '';
            this._reportFilterService.PartyLedgerObj.PartyLedger_SingleAccount = '';
            this.showMergeCombineLedger = true;
            if (this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType == 2) {
                this.showLedgerTable = true;
            }
            else if (this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType == 4) {
                this.showCCtable = true;
            }
            else if (this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType == 1) {
                this.showAreaTable = true;
            }
            else if (this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType == 5) {
                this.showAccGrpTable = true;
            }
        }
        else {
            this.showCombineLedgerList = false;
            this.showMergeCombineLedger = false;
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleCostcenter = [];
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleAccounts = [];
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleGroupAccounts = [];
            this._reportFilterService.PartyLedgerObj.PartyLedger_AreaWise = 0;
            this.showLedgerTable = false;
            this.showCCtable = false;
            this.showAreaTable = false;
            this.showAccGrpTable = false;
        }
    };
    CashCollectionVoucherReport.prototype.AccountEnterClicked = function () {
        this.gridPopupSettingsForPartyLedgerList = this.masterService.getGenericGridPopUpSettings('PartyLedgerListForReport');
        this.genericGridPartyLedger.show();
    };
    CashCollectionVoucherReport.prototype.dblClickAccountSelect = function (account) {
        this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_PartyID = account.ACID;
        this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_PartyName = account.ACNAME;
        ;
    };
    CashCollectionVoucherReport.prototype.onValueChange = function () {
        if (this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_PartyName == '' || this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_PartyName == undefined || this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_PartyName == null) {
            this._reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_PartyID = '%';
        }
        else {
            return;
        }
    };
    CashCollectionVoucherReport.prototype.addAccountToList = function () {
        var _this = this;
        var selectACList = this._reportFilterService.PartyLedgerObj.PartyLedger_multipleAccounts.filter(function (acList) { return acList.ACID == _this._reportFilterService.PartyLedgerObj.multipleACID; });
        if (this._reportFilterService.PartyLedgerObj.multipleACNAME === "" ||
            this._reportFilterService.PartyLedgerObj.multipleACNAME === null ||
            this._reportFilterService.PartyLedgerObj.multipleACNAME === undefined) {
            return;
        }
        if (selectACList.length === 0) {
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleAccounts.push({ ACID: this._reportFilterService.PartyLedgerObj.multipleACID, ACNAME: this._reportFilterService.PartyLedgerObj.multipleACNAME });
            this._reportFilterService.PartyLedgerObj.multipleACNAME = '';
            this._reportFilterService.PartyLedgerObj.multipleACCODE = '';
        }
    };
    CashCollectionVoucherReport.prototype.deleteAccount = function (index) {
        this._reportFilterService.PartyLedgerObj.PartyLedger_multipleAccounts.splice(index, 1);
        this._reportFilterService.selectedAccountParty = '';
    };
    CashCollectionVoucherReport.prototype.MultipleAccountEnterClicked = function () {
        this.gridPopupSettingsForMultiplePartyLedgerList = this.masterService.getGenericGridPopUpSettings('PartyLedgerListForReport');
        this.genericGridMultiplePartyLedger.show();
    };
    CashCollectionVoucherReport.prototype.dblClickMultipleAccountSelect = function (account) {
        this._reportFilterService.PartyLedgerObj.multipleACID = account.ACID;
        this._reportFilterService.PartyLedgerObj.multipleACNAME = account.ACNAME;
    };
    CashCollectionVoucherReport.prototype.addCostcenterToList = function () {
        var ccData = this._reportFilterService.PartyLedgerObj.CCENTER;
        this._reportFilterService.PartyLedgerObj.CCENTER = ccData && ccData.CCID ? ccData.CCID : '';
        var selectCCenterList = this._reportFilterService.PartyLedgerObj.PartyLedger_multipleCostcenter.filter(function (centerList) { return centerList.COSTCENTERNAME == ccData.COSTCENTERNAME; });
        if (ccData.COSTCENTERNAME === "" ||
            ccData.COSTCENTERNAME === null ||
            ccData.COSTCENTERNAME === undefined) {
            return;
        }
        if (selectCCenterList.length === 0) {
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleCostcenter.push({ CCID: ccData.CCID, COSTCENTERNAME: ccData.COSTCENTERNAME });
        }
    };
    CashCollectionVoucherReport.prototype.deleteCostcenter = function (index) {
        this._reportFilterService.PartyLedgerObj.PartyLedger_multipleCostcenter.splice(index, 1);
    };
    CashCollectionVoucherReport.prototype.GroupAccountclick = function () {
        this.gridPopupSettingsForMultipleGroupAccountList = this.masterService.getGenericGridPopUpSettings('PartyGroupList');
        this.genericGridMultipleGroupAccount.show();
    };
    CashCollectionVoucherReport.prototype.dblClickGroupAccountSelect = function (account) {
        this._reportFilterService.PartyLedgerObj.Multiple_GROUP_ACID = account.ACID;
        this._reportFilterService.PartyLedgerObj.Multiple_GROUP_ACNAME = account.ACNAME;
    };
    CashCollectionVoucherReport.prototype.addGroupAccountToList = function () {
        var _this = this;
        var selectACList = this._reportFilterService.PartyLedgerObj.PartyLedger_multipleGroupAccounts.filter(function (acList) { return acList.ACNAME == _this._reportFilterService.PartyLedgerObj.Multiple_GROUP_ACNAME; });
        if (this._reportFilterService.PartyLedgerObj.Multiple_GROUP_ACNAME === "" ||
            this._reportFilterService.PartyLedgerObj.Multiple_GROUP_ACNAME === null ||
            this._reportFilterService.PartyLedgerObj.Multiple_GROUP_ACNAME === undefined) {
            return;
        }
        if (selectACList.length === 0) {
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleGroupAccounts.push({ ACID: this._reportFilterService.PartyLedgerObj.Multiple_GROUP_ACID, ACNAME: this._reportFilterService.PartyLedgerObj.Multiple_GROUP_ACNAME });
            this._reportFilterService.PartyLedgerObj.Multiple_GROUP_ACNAME = '';
            this._reportFilterService.PartyLedgerObj.multiple_Group_ACCODE = '';
        }
    };
    CashCollectionVoucherReport.prototype.deleteGroupAccount = function (index) {
        this._reportFilterService.PartyLedgerObj.PartyLedger_multipleGroupAccounts.splice(index, 1);
        this._reportFilterService.selectedGroupAccountParty = '';
    };
    CashCollectionVoucherReport.prototype.preventInput = function ($event) {
        $event.preventDefault();
        return false;
    };
    CashCollectionVoucherReport.prototype.applyHostListener = function () {
        if (this.partyAccountSelection && this.partyAccountSelection.nativeElement) {
            this.partyAccountSelection.nativeElement.addEventListener('keydown', function (event) {
                if (event.key !== 'Backspace') {
                    event.preventDefault(); // Prevent typing any character except the backspace
                }
            });
        }
    };
    return CashCollectionVoucherReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("PLedgerChild"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_3__masters_components_PLedger_PLedger_component__["a" /* PLedgerComponent */])
], CashCollectionVoucherReport.prototype, "PLedgerChild", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], CashCollectionVoucherReport.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridPartyLedger"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], CashCollectionVoucherReport.prototype, "genericGridPartyLedger", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridMultiplePartyLedger"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], CashCollectionVoucherReport.prototype, "genericGridMultiplePartyLedger", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridMultipleGroupAccount"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], CashCollectionVoucherReport.prototype, "genericGridMultipleGroupAccount", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('partyAccountSelection'),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"])
], CashCollectionVoucherReport.prototype, "partyAccountSelection", void 0);
CashCollectionVoucherReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'cash-collection-voucher-report',
        template: __webpack_require__(1724),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_repositories__["a" /* MasterRepo */],
        __WEBPACK_IMPORTED_MODULE_4__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_5__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */],
        __WEBPACK_IMPORTED_MODULE_2__common_services_permission_authService_service__["a" /* AuthService */], __WEBPACK_IMPORTED_MODULE_7__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_7__angular_router__["ActivatedRoute"],
        __WEBPACK_IMPORTED_MODULE_8__common_popupLists_report_filter_report_filter_service__["a" /* ReportFilterService */]])
], CashCollectionVoucherReport);



/***/ }),

/***/ 1492:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CashBankBookReport; });








var CashBankBookReport = (function () {
    function CashBankBookReport(masterService, dialogref, data, _reportFilterService, _ActivatedRoute, alertService, _authService, arouter) {
        var _this = this;
        this.masterService = masterService;
        this.dialogref = dialogref;
        this.data = data;
        this._reportFilterService = _reportFilterService;
        this._ActivatedRoute = _ActivatedRoute;
        this.alertService = alertService;
        this._authService = _authService;
        this.arouter = arouter;
        this.division = [];
        this.account = [];
        this.account2 = [];
        this.instanceWiseRepName = 'Cash/Bank Book Report';
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.gridPopupSettingsForAccountList = new __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        // this._reportFilterService.CashAndBankBookObj.REPORTMODE = '0';
        this._reportFilterService.CashAndBankBookObj.Reportnameis = 'cashbankbookreport';
        this.userProfile = this._authService.getUserProfile();
        this.division = [];
        //let data: Array<IDivision> = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                //////console.log("div" + JSON.stringify(res));
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        this.masterService.getCashListForReport().subscribe(function (res) {
            _this.account = res.data;
            ////console.log("@@res", res)
            if (_this.account.length != 0) {
                _this._reportFilterService.result = true;
            }
            else {
                _this._reportFilterService.result = false;
            }
        });
        this.masterService.getBankBookListForReport().subscribe(function (res) {
            _this.account2 = res.data;
            if (_this.account2.length != 0) {
                _this._reportFilterService.result2 = true;
            }
            else {
                _this._reportFilterService.result2 = false;
            }
        });
        this.checkSummary();
        // this.masterService.getAccDivList();
    }
    CashBankBookReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            if (_this._reportFilterService.CashAndBankBookObj.assignPrevioiusDate != true) {
                _this.masterService.getAccDivList();
                _this._reportFilterService.CashAndBankBookObj.CashBankBook_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                if (_this.masterService.userProfile.CompanyInfo.ActualFY == _this.masterService.PhiscalObj.PhiscalID) {
                    _this._reportFilterService.CashAndBankBookObj.CashBankBook_DATE2 = new Date().toJSON().split('T')[0];
                    _this.changeEndDate(_this._reportFilterService.CashAndBankBookObj.CashBankBook_DATE2, "AD");
                }
                else {
                    _this._reportFilterService.CashAndBankBookObj.CashBankBook_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                    _this.changeEndDate(_this._reportFilterService.CashAndBankBookObj.CashBankBook_DATE2, "AD");
                }
                // this._reportFilterService.CashAndBankBookObj.CashBankBook_DATE2 = new Date().toJSON().split('T')[0];
                // this._reportFilterService.CashAndBankBookObj.CashBankBook_DIV = this.masterService.userProfile.CompanyInfo.INITIAL;
                _this.masterService.viewDivision.subscribe(function () {
                    if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                        _this._reportFilterService.CashAndBankBookObj.CashBankBook_DIV = '%';
                    }
                    else {
                        if (_this.masterService.userSetting.userwisedivision == 1 && _this.division.length == 1) {
                            _this._reportFilterService.CashAndBankBookObj.CashBankBook_DIV = _this.division[0].INITIAL;
                        }
                        else {
                            _this._reportFilterService.CashAndBankBookObj.CashBankBook_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                        }
                    }
                });
                _this._reportFilterService.CashAndBankBookObj.REPORTMODE = '0';
                _this._reportFilterService.CashAndBankBookObj.CashBankBook_DETAILREPORT = '0';
            }
            if (params.instancename) {
                // ////console.log("@@[cash bank Report0]",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                _this._reportFilterService.CashAndBankBookObj.CashBankBook_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                _this._reportFilterService.CashAndBankBookObj.CashBankBook_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                _this._reportFilterService.CashAndBankBookObj.CashBankBook_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
                _this._reportFilterService.CashAndBankBookObj.REPORTMODE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.REPORTMODE;
                _this._reportFilterService.CashAndBankBookObj.CashBankBook_DETAILREPORT = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DETAILREPORT;
                _this._reportFilterService.CashAndBankBookObj.SingleAccount = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.ACID;
                _this._reportFilterService.CashAndBankBookObj.ACCNAME = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.ACNAME;
                _this._reportFilterService.CashAndBankBookObj.CashBankBook_INCLUDEPOSTDATE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.INCLUDEPOSTEDTRANSACTION;
            }
        });
        this.changeEntryDate(this._reportFilterService.CashAndBankBookObj.CashBankBook_DATE1, "AD");
        this.changeEndDate(this._reportFilterService.CashAndBankBookObj.CashBankBook_DATE2, "AD");
    };
    CashBankBookReport.prototype.focusOutFromDate = function (value) {
        var _this = this;
        this.masterService.validateDate(value).subscribe(function (x) {
            if (x == "error") {
                _this.alertService.warning("Date should be within Fiscal year");
                _this._reportFilterService.CashAndBankBookObj.CashBankBook_DATE1 = new Date().toJSON().split('T')[0];
            }
        });
    };
    CashBankBookReport.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.CashAndBankBookObj.CashBankBook_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.CashAndBankBookObj.CashBankBook_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.CashAndBankBookObj.CashBankBook_DATE1 = this.masterService.toBSDate(value);
        }
    };
    CashBankBookReport.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.CashAndBankBookObj.CashBankBook_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_2);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.CashAndBankBookObj.CashBankBook_DATE2 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.CashAndBankBookObj.CashBankBook_DATE2 = this.masterService.toBSDate(value);
        }
    };
    CashBankBookReport.prototype.onload = function () {
        if (this._reportFilterService.result == true && (this._reportFilterService.CashAndBankBookObj.CashBankBook_DETAILREPORT == '1' && this._reportFilterService.CashAndBankBookObj.REPORTMODE == "1")) {
            if (this._reportFilterService.CashAndBankBookObj.SingleAccount === undefined || this._reportFilterService.CashAndBankBookObj.SingleAccount == '' || this._reportFilterService.CashAndBankBookObj.ACCNAME == '') {
                this.alertService.info("Please Select Account");
                return;
            }
            this.DialogClosedResult("ok");
        }
        else if (this._reportFilterService.result2 == true && (this._reportFilterService.CashAndBankBookObj.CashBankBook_DETAILREPORT == '1' && this._reportFilterService.CashAndBankBookObj.REPORTMODE == "2")) {
            if (this._reportFilterService.CashAndBankBookObj.SingleAccount === undefined || this._reportFilterService.CashAndBankBookObj.SingleAccount == '' || this._reportFilterService.CashAndBankBookObj.ACCNAME == '') {
                this.alertService.info("Please Select Account");
                return;
            }
            this.DialogClosedResult("ok");
        }
        else {
            this.DialogClosedResult("ok");
        }
    };
    CashBankBookReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    CashBankBookReport.prototype.DialogClosedResult = function (res) {
        var _this = this;
        this._reportFilterService.CashAndBankBookObj.CashBankBook_DIV = (this._reportFilterService.CashAndBankBookObj.CashBankBook_DIV == null || this._reportFilterService.CashAndBankBookObj.CashBankBook_DIV == "") ? "%" : this._reportFilterService.CashAndBankBookObj.CashBankBook_DIV;
        var multipleReportFormateName = '';
        if (this._reportFilterService.CashAndBankBookObj.CashBankBook_DETAILREPORT == "0") {
            multipleReportFormateName = 'Cash/Bank Book Report';
            this._reportFilterService.CashAndBankBookObj.CashBankBook_SUMMARYREPORTDISPLAYNAME = ' @Summary Report';
        }
        else if (this._reportFilterService.CashAndBankBookObj.CashBankBook_DETAILREPORT == "1" && this._reportFilterService.CashAndBankBookObj.REPORTMODE == "1") {
            multipleReportFormateName = 'Cash/Bank Book Report_1';
            this._reportFilterService.CashAndBankBookObj.CashBankBook_SUMMARYREPORTDISPLAYNAME = ' @Detail Report';
        }
        else if (this._reportFilterService.CashAndBankBookObj.CashBankBook_DETAILREPORT == "1" && this._reportFilterService.CashAndBankBookObj.REPORTMODE == "2") {
            multipleReportFormateName = 'Cash/Bank Book Report_2';
            this._reportFilterService.CashAndBankBookObj.CashBankBook_SUMMARYREPORTDISPLAYNAME = ' @Detail Report';
        }
        if (this._reportFilterService.CashAndBankBookObj.CashBankBook_DIV && this._reportFilterService.CashAndBankBookObj.CashBankBook_DIV == '%') {
            this._reportFilterService.CashAndBankBookObj.CashBankBook_DIVISIONNAME = 'All';
        }
        else if (this._reportFilterService.CashAndBankBookObj.CashBankBook_DIV && this._reportFilterService.CashAndBankBookObj.CashBankBook_DIV != '%') {
            var abc = this.division.filter(function (x) { return x.INITIAL == _this._reportFilterService.CashAndBankBookObj.CashBankBook_DIV; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.CashAndBankBookObj.CashBankBook_DIVISIONNAME = abc[0].NAME;
            }
            else {
                this._reportFilterService.CashAndBankBookObj.CashBankBook_DIVISIONNAME = '';
            }
        }
        else {
            this._reportFilterService.CashAndBankBookObj.CashBankBook_DIVISIONNAME = '';
        }
        if (this._reportFilterService.CashAndBankBookObj.REPORTMODE == "1") {
            this._reportFilterService.CashAndBankBookObj.CashBankBook_REPORTOPTIONDISPLAYNAME = ' @Cash Book Only';
        }
        else if (this._reportFilterService.CashAndBankBookObj.REPORTMODE == "2") {
            this._reportFilterService.CashAndBankBookObj.CashBankBook_REPORTOPTIONDISPLAYNAME = ' @Bank Book Only';
        }
        else if (this._reportFilterService.CashAndBankBookObj.REPORTMODE == "0") {
            this._reportFilterService.CashAndBankBookObj.CashBankBook_REPORTOPTIONDISPLAYNAME = '';
        }
        if (res == "ok") {
            this._reportFilterService.CashAndBankBookObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.CashBank_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Cash/Bank Book Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.CashBank_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Cash/Bank Book Report' + '_' + this._reportFilterService.CashBank_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.CashBank_loadedTimes,
                });
            }
        }
        if (this._reportFilterService.CashAndBankBookObj.ACCNAME = '') {
            this._reportFilterService.CashAndBankBookObj.SingleAccount = '%';
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: 'Cash/Bank Book Report',
                reportname: multipleReportFormateName,
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.CashBank_loadedTimes,
                reportparam: {
                    REPORTOPTIONDISPLAYNAME: this._reportFilterService.CashAndBankBookObj.CashBankBook_REPORTOPTIONDISPLAYNAME ? this._reportFilterService.CashAndBankBookObj.CashBankBook_REPORTOPTIONDISPLAYNAME : '',
                    DATE1: this._reportFilterService.CashAndBankBookObj.CashBankBook_DATE1,
                    DATE2: this._reportFilterService.CashAndBankBookObj.CashBankBook_DATE2,
                    BSDATE1: this._reportFilterService.CashAndBankBookObj.CashBankBook_BSDATE1,
                    BSDATE2: this._reportFilterService.CashAndBankBookObj.CashBankBook_BSDATE2,
                    DIV: this._reportFilterService.CashAndBankBookObj.CashBankBook_DIV,
                    COMPANYID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    REPORTMODE: this._reportFilterService.CashAndBankBookObj.REPORTMODE,
                    DETAILREPORT: this._reportFilterService.CashAndBankBookObj.CashBankBook_DETAILREPORT ? this._reportFilterService.CashAndBankBookObj.CashBankBook_DETAILREPORT : "0",
                    ACID: this._reportFilterService.CashAndBankBookObj.SingleAccount ? this._reportFilterService.CashAndBankBookObj.SingleAccount : '%',
                    ACNAME: this._reportFilterService.CashAndBankBookObj.ACCNAME,
                    DIVISIONNAME: this._reportFilterService.CashAndBankBookObj.CashBankBook_DIVISIONNAME ? this._reportFilterService.CashAndBankBookObj.CashBankBook_DIVISIONNAME : '',
                    SUMMARYREPORTDISPLAYNAME: this._reportFilterService.CashAndBankBookObj.CashBankBook_SUMMARYREPORTDISPLAYNAME ? this._reportFilterService.CashAndBankBookObj.CashBankBook_SUMMARYREPORTDISPLAYNAME : '',
                    INCLUDEPOSTEDTRANSACTION: this._reportFilterService.CashAndBankBookObj.CashBankBook_INCLUDEPOSTDATE ? this._reportFilterService.CashAndBankBookObj.CashBankBook_INCLUDEPOSTDATE : 0
                }
            }
        });
        this._reportFilterService.CashBank_loadedTimes = this._reportFilterService.CashBank_loadedTimes + 1;
    };
    CashBankBookReport.prototype.checkReportMode = function () {
        this._reportFilterService.CashAndBankBookObj.ACCNAME = "";
        this._reportFilterService.CashAndBankBookObj.ACCODE = "";
        this._reportFilterService.CashAndBankBookObj.ACID = "";
        this._reportFilterService.CashAndBankBookObj.SingleAccount = "";
    };
    CashBankBookReport.prototype.checkSummary = function () {
        if (this._reportFilterService.CashAndBankBookObj.CashBankBook_DETAILREPORT == "0") {
            this.acname = this._reportFilterService.CashAndBankBookObj.ACCNAME;
            this._reportFilterService.CashAndBankBookObj.ACCNAME = "";
            this.accode = this._reportFilterService.CashAndBankBookObj.ACCODE;
            this._reportFilterService.CashAndBankBookObj.ACCODE = "";
            this._reportFilterService.CashAndBankBookObj.ACID = "";
            this._reportFilterService.CashAndBankBookObj.SingleAccount = "";
        }
        else {
            if (this._reportFilterService.CashAndBankBookObj.REPORTMODE == "1") {
                this._reportFilterService.CashAndBankBookObj.ACCNAME = this.acname;
                this._reportFilterService.CashAndBankBookObj.ACCODE = this.accode;
                this._reportFilterService.CashAndBankBookObj.SingleAccount = this.accode;
            }
        }
        if (this._reportFilterService.CashAndBankBookObj.CashBankBook_DETAILREPORT == "1") {
            this._reportFilterService.CashAndBankBookObj.REPORTMODE = "1";
        }
    };
    CashBankBookReport.prototype.AccountEnterClicked = function () {
        if (this._reportFilterService.CashAndBankBookObj.REPORTMODE == '1') {
            this.gridPopupSettingsForAccountList = this.masterService.getGenericGridPopUpSettings('CashBookList');
        }
        else if (this._reportFilterService.CashAndBankBookObj.REPORTMODE == '2') {
            this.gridPopupSettingsForAccountList = this.masterService.getGenericGridPopUpSettings('BankBookList');
        }
        this.genericGridCashBankBook.show();
    };
    CashBankBookReport.prototype.dblClickAccountSelect = function (account) {
        this._reportFilterService.CashAndBankBookObj.ACID = account.ACID;
        this._reportFilterService.CashAndBankBookObj.ACCNAME = account.ACNAME;
        this._reportFilterService.CashAndBankBookObj.SingleAccount = account.ACID;
    };
    return CashBankBookReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], CashBankBookReport.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridCashBankBook"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], CashBankBookReport.prototype, "genericGridCashBankBook", void 0);
CashBankBookReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'cash-bank-book',
        template: __webpack_require__(1725),
        styles: [__webpack_require__(1163), __webpack_require__(120)]
    }),
    __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object, __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_6__angular_router__["ActivatedRoute"],
        __WEBPACK_IMPORTED_MODULE_4__common_services_alert_alert_service__["a" /* AlertService */], __WEBPACK_IMPORTED_MODULE_5__common_services_permission_authService_service__["a" /* AuthService */], __WEBPACK_IMPORTED_MODULE_6__angular_router__["Router"]])
], CashBankBookReport);



/***/ }),

/***/ 1493:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_material__ = __webpack_require__(15);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CashBookReport; });



var CashBookReport = (function () {
    function CashBookReport(masterService, dialogref, data) {
        var _this = this;
        this.masterService = masterService;
        this.dialogref = dialogref;
        this.data = data;
        this.ReportParameters = {};
        this.division = [];
        this.cashAccount = [];
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.dateString = '';
        this.date1 = '';
        this.daysPrior = '';
        this.dateId = '';
        this.finalDate = '';
        //--------Default value on load
        this.ReportParameters.DATE1 = new Date().toJSON().split('T')[0];
        this.changestartDate(this.ReportParameters.DATE1, 'AD');
        this.ReportParameters.DATE2 = new Date().toJSON().split('T')[0];
        this.changeEndDate(this.ReportParameters.DATE2, 'AD');
        this.ReportParameters.MergeVatAc = "0";
        this.ReportParameters.DIVISION = "%";
        this.ReportParameters.CASH_ACID = "%";
        //--------------------
        this.division = [];
        this.masterService.getAllDivisions()
            .subscribe(function (res) {
            //////console.log("div" + JSON.stringify(res));
            _this.division.push(res);
        }, function (error) {
            _this.masterService.resolveError(error, "divisions - getDivisions");
        });
        this.cashAccount = [];
        this.masterService.getCashList()
            .subscribe(function (res) {
            //////console.log("cash" + JSON.stringify(res));
            _this.cashAccount = res;
        });
    }
    CashBookReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    CashBookReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("error");
    };
    CashBookReport.prototype.DialogClosedResult = function (res) {
        this.ReportParameters.DIVISION = (this.ReportParameters.DIVISION == null || this.ReportParameters.DIVISION == "") ? "%" : this.ReportParameters.DIVISION;
        this.ReportParameters.CASH_ACID = (this.ReportParameters.CASH_ACID == null || this.ReportParameters.CASH_ACID == "") ? "%" : this.ReportParameters.CASH_ACID;
        //alert(this.ReportParameters.DIVISION + "~~~" + this.ReportParameters.CASH_ACID);
        this.reportdataEmit.emit({ status: res, data: { reportname: 'Cash Book Report', reportparam: this.ReportParameters } });
    };
    CashBookReport.prototype.changestartDate = function (value, format) {
        try {
            var adbs = __webpack_require__(19);
            if (format == "AD") {
                var adDate = (value.replace("-", "/")).replace("-", "/");
                var bsDate = adbs.ad2bs(adDate);
                this.ReportParameters.BSDATE1 = this.masterService.toBSDate(value);
            }
            else if (format == "BS") {
                var bsDate = (value.replace("-", "/")).replace("-", "/");
                var adDate = adbs.bs2ad(bsDate);
                this.ReportParameters.DATE1 = this.masterService.toADDate(value);
            }
        }
        catch (e) { }
    };
    CashBookReport.prototype.changeEndDate = function (value, format) {
        try {
            var adbs = __webpack_require__(19);
            if (format == "AD") {
                var adDate = (value.replace("-", "/")).replace("-", "/");
                var bsDate = adbs.ad2bs(adDate);
                this.ReportParameters.BSDATE2 = this.masterService.toBSDate(value);
            }
            else if (format == "BS") {
                var bsDate = (value.replace("-", "/")).replace("-", "/");
                var adDate = adbs.bs2ad(bsDate);
                this.ReportParameters.DATE2 = this.masterService.toADDate(value);
            }
        }
        catch (e) { }
    };
    CashBookReport.prototype.changeDateByRange = function (value) {
        if (value == "1") {
            //alert("week selected!!"); yy-mm-dd
            this.dateId = 7;
            this.dateString = "" + this.getCurrentDate() + "";
            this.date1 = new Date(this.dateString);
            this.daysPrior = parseInt(this.dateId);
            this.date1.setDate(this.date1.getDate() - this.daysPrior);
            this.finalDate = (this.date1.toISOString().slice(0, 11).replace('T', ' '));
            //alert(this.finalDate);
            this.ReportParameters.DATE1 = (this.finalDate).trim();
            this.changestartDate(this.ReportParameters.DATE1, 'AD');
        }
        else if (value == "2") {
            //     //alert("month selected!!");
            this.dateId = 30;
            this.dateString = "" + this.getCurrentDate() + "";
            this.date1 = new Date(this.dateString);
            this.daysPrior = parseInt(this.dateId);
            this.date1.setDate(this.date1.getDate() - this.daysPrior);
            this.finalDate = (this.date1.toISOString().slice(0, 11).replace('T', ' '));
            //alert(this.finalDate);
            this.ReportParameters.DATE1 = (this.finalDate).trim();
            this.changestartDate(this.ReportParameters.DATE1, 'AD');
        }
        else {
            // alert("year selected");
            this.dateId = 365;
            this.dateString = "" + this.getCurrentDate() + "";
            this.date1 = new Date(this.dateString);
            this.daysPrior = parseInt(this.dateId);
            this.date1.setDate(this.date1.getDate() - this.daysPrior);
            this.finalDate = (this.date1.toISOString().slice(0, 11).replace('T', ' '));
            //alert(this.finalDate);
            this.ReportParameters.DATE1 = (this.finalDate).trim();
            this.changestartDate(this.ReportParameters.DATE1, 'AD');
        }
    };
    CashBookReport.prototype.getCurrentDate = function () {
        this.today = new Date();
        this.dd = this.today.getDate();
        this.mm = this.today.getMonth() + 1; //January is 0!
        this.yyyy = this.today.getFullYear();
        if (this.dd < 10) {
            this.dd = '0' + this.dd;
        }
        if (this.mm < 10) {
            this.mm = '0' + this.mm;
        }
        this.today = this.mm + '/' + this.dd + '/' + this.yyyy;
        return this.today;
    };
    return CashBookReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], CashBookReport.prototype, "reportdataEmit", void 0);
CashBookReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'result-cashbookreport-dialog',
        template: __webpack_require__(1726),
        styles: [__webpack_require__(1163), __webpack_require__(120)]
    }),
    __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_2__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_2__angular_material__["c" /* MdDialogRef */], Object])
], CashBookReport);



/***/ }),

/***/ 1494:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ConsolidatedBalanceSheetReport; });







var ConsolidatedBalanceSheetReport = (function () {
    function ConsolidatedBalanceSheetReport(masterService, _authService, _reportFilterService, arouter, alertService, dialogref, _ActivatedRoute, data) {
        var _this = this;
        this.masterService = masterService;
        this._authService = _authService;
        this._reportFilterService = _reportFilterService;
        this.arouter = arouter;
        this.alertService = alertService;
        this.dialogref = dialogref;
        this._ActivatedRoute = _ActivatedRoute;
        this.data = data;
        this.division = [];
        this.instanceWiseRepName = 'Consolidated Balance Sheet Report';
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.userProfile = this._authService.getUserProfile();
        this.userSetting = _authService.getSetting();
        this.division = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        this.masterService.getAccDivList();
    }
    ConsolidatedBalanceSheetReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            if (_this._reportFilterService.ConsolidatedBalanceSheetObj.assignPrevioiusDate != true) {
                _this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                if (_this.userProfile.CompanyInfo.ActualFY == _this.masterService.PhiscalObj.PhiscalID) {
                    _this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_DATE2 = new Date().toJSON().split('T')[0];
                }
                else {
                    _this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                }
                _this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_SHOWTOTALINGROUP = 1;
                _this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_SHOWDEBTORSCREDITORS = 0;
                if (_this.userSetting.IS_NESTLE == 1) {
                    _this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_COMPANYTYPE = 'DMS';
                }
                else {
                    _this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_COMPANYTYPE = 'NONDMS';
                }
            }
            if (params.instancename) {
                // ////console.log("@@[plreport0]",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                _this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                _this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                _this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_SHOWTOTALINGROUP = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWTOTALINGROUP;
                _this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_SHOWDEBTORSCREDITORS = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWDEBTORSCREDITORS;
                if (_this.userSetting.IS_NESTLE == 1) {
                    _this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_COMPANYTYPE = 'DMS';
                }
                else {
                    _this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_COMPANYTYPE = 'NONDMS';
                }
            }
        });
        this.changeEntryDate(this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_DATE1, "AD");
        this.changeEndDate(this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_DATE2, "AD");
    };
    ConsolidatedBalanceSheetReport.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
        }
    };
    ConsolidatedBalanceSheetReport.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            var adDate = adbs.bs2ad(bsDate_2);
            this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_DATE2 = this.masterService.toADDate(value);
        }
    };
    ConsolidatedBalanceSheetReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    ConsolidatedBalanceSheetReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    ConsolidatedBalanceSheetReport.prototype.DialogClosedResult = function (res) {
        var multipleReportFormateName = 'Consolidated Balance Sheet Report';
        if (res == "ok") {
            this._reportFilterService.ConsolidatedBalanceSheetObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.Consolidated_BalanceSheet_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Consolidated Balance Sheet Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.Consolidated_BalanceSheet_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Consolidated Balance Sheet Report' + '_' + this._reportFilterService.Consolidated_BalanceSheet_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.Consolidated_BalanceSheet_loadedTimes,
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: 'Consolidated Balance Sheet Report',
                reportname: multipleReportFormateName,
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.Consolidated_BalanceSheet_loadedTimes,
                reportparam: {
                    DATE1: this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_DATE1,
                    DATE2: this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_DATE2,
                    BSDATE1: this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_BSDATE1,
                    BSDATE2: this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_BSDATE2,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    CID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    SHOWTOTALINGROUP: this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_SHOWTOTALINGROUP ? this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_SHOWTOTALINGROUP : 0,
                    COMPANYID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    COMPANYTYPE: this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_COMPANYTYPE ? this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_COMPANYTYPE : 'NONDMS',
                    SHOWDEBTORSCREDITORS: this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_SHOWDEBTORSCREDITORS ? this._reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_SHOWDEBTORSCREDITORS : 0,
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.Consolidated_BalanceSheet_loadedTimes = this._reportFilterService.Consolidated_BalanceSheet_loadedTimes + 1;
        }
    };
    return ConsolidatedBalanceSheetReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], ConsolidatedBalanceSheetReport.prototype, "reportdataEmit", void 0);
ConsolidatedBalanceSheetReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'consolidated-balance-sheet-report',
        template: __webpack_require__(1727),
        styles: [__webpack_require__(1163), __webpack_require__(120)],
    }),
    __param(7, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__["a" /* AuthService */],
        __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_5__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], __WEBPACK_IMPORTED_MODULE_5__angular_router__["ActivatedRoute"], Object])
], ConsolidatedBalanceSheetReport);



/***/ }),

/***/ 1495:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ConsolidatedProfitLossReport; });







var ConsolidatedProfitLossReport = (function () {
    function ConsolidatedProfitLossReport(masterService, _authService, _reportFilterService, arouter, alertService, dialogref, _ActivatedRoute, data) {
        var _this = this;
        this.masterService = masterService;
        this._authService = _authService;
        this._reportFilterService = _reportFilterService;
        this.arouter = arouter;
        this.alertService = alertService;
        this.dialogref = dialogref;
        this._ActivatedRoute = _ActivatedRoute;
        this.data = data;
        this.division = [];
        this.instanceWiseRepName = 'Consolidated Profit and Loss Report';
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.userProfile = this._authService.getUserProfile();
        this.userSetting = _authService.getSetting();
        this.division = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        this.masterService.getAccDivList();
    }
    ConsolidatedProfitLossReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            if (_this._reportFilterService.ConsolidatedProfitLossObj.assignPrevioiusDate != true) {
                _this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                if (_this.userProfile.CompanyInfo.ActualFY == _this.masterService.PhiscalObj.PhiscalID) {
                    _this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_DATE2 = new Date().toJSON().split('T')[0];
                }
                else {
                    _this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                }
                _this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_SHOWTOTALINGROUP = 1;
                _this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_COSTCENTERWISE = 0;
                if (_this.userSetting.IS_NESTLE == 1) {
                    _this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_COMPANYTYPE = 'DMS';
                }
                else {
                    _this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_COMPANYTYPE = 'NONDMS';
                }
            }
            if (params.instancename) {
                // ////console.log("@@[plreport0]",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                _this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                _this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                _this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_SHOWTOTALINGROUP = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWTOTALINGROUP;
                _this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_COSTCENTERWISE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.COSTCENTERWISE;
                if (_this.userSetting.IS_NESTLE == 1) {
                    _this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_COMPANYTYPE = 'DMS';
                }
                else {
                    _this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_COMPANYTYPE = 'NONDMS';
                }
            }
        });
        this.changeEntryDate(this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_DATE1, "AD");
        this.changeEndDate(this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_DATE2, "AD");
    };
    ConsolidatedProfitLossReport.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
        }
    };
    ConsolidatedProfitLossReport.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            var adDate = adbs.bs2ad(bsDate_2);
            this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_DATE2 = this.masterService.toADDate(value);
        }
    };
    ConsolidatedProfitLossReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    ConsolidatedProfitLossReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    ConsolidatedProfitLossReport.prototype.DialogClosedResult = function (res) {
        var multipleReportFormateName = 'Consolidated Profit and Loss Report';
        if (res == "ok") {
            this._reportFilterService.ConsolidatedProfitLossObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.Consolidated_ProfitLoss_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Consolidated Profit and Loss Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.Consolidated_ProfitLoss_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Consolidated Profit and Loss Report' + '_' + this._reportFilterService.Consolidated_ProfitLoss_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.Consolidated_ProfitLoss_loadedTimes,
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: 'Consolidated Profit and Loss Report',
                reportname: multipleReportFormateName,
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.Consolidated_ProfitLoss_loadedTimes,
                reportparam: {
                    DATE1: this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_DATE1,
                    DATE2: this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_DATE2,
                    BSDATE1: this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_BSDATE1,
                    BSDATE2: this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_BSDATE2,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    CID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    COSTCENTERWISE: this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_COSTCENTERWISE,
                    SHOWTOTALINGROUP: this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_SHOWTOTALINGROUP ? this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_SHOWTOTALINGROUP : 0,
                    COMPANYID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    COMPANYTYPE: this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_COMPANYTYPE ? this._reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_COMPANYTYPE : 'NONDMS',
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.Consolidated_ProfitLoss_loadedTimes = this._reportFilterService.Consolidated_ProfitLoss_loadedTimes + 1;
        }
    };
    return ConsolidatedProfitLossReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], ConsolidatedProfitLossReport.prototype, "reportdataEmit", void 0);
ConsolidatedProfitLossReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'consolidated-profit-loss-report',
        template: __webpack_require__(1728),
        styles: [__webpack_require__(1163), __webpack_require__(120)],
    }),
    __param(7, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__["a" /* AuthService */],
        __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_5__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], __WEBPACK_IMPORTED_MODULE_5__angular_router__["ActivatedRoute"], Object])
], ConsolidatedProfitLossReport);



/***/ }),

/***/ 1496:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ConsolidatedTrialBalanceReport; });







var ConsolidatedTrialBalanceReport = (function () {
    function ConsolidatedTrialBalanceReport(masterService, _authService, _reportFilterService, arouter, alertService, _ActivatedRoute, dialogref, data) {
        var _this = this;
        this.masterService = masterService;
        this._authService = _authService;
        this._reportFilterService = _reportFilterService;
        this.arouter = arouter;
        this.alertService = alertService;
        this._ActivatedRoute = _ActivatedRoute;
        this.dialogref = dialogref;
        this.data = data;
        // ReportParameters: any = <any>{};
        this.division = [];
        this.CostcenterList = [];
        this.instanceWiseRepName = 'Consolidated Trial Balance Report';
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.userProfile = this._authService.getUserProfile();
        this.userSetting = _authService.getSetting();
        this.division = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        this.masterService.getCostcenter().subscribe(function (res) {
            _this.CostcenterList = res;
        });
        this.masterService.getAccDivList();
    }
    ConsolidatedTrialBalanceReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            if (_this._reportFilterService.ConsolidatedTrialBalanceObj.assignPrevioiusDate != true) {
                _this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                _this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                // this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DIV = this.masterService.userProfile.CompanyInfo.INITIAL;
                _this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_CostCenter = '%';
                _this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_LEDGERWISE = '0';
                _this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWNETCLOSING = 1;
            }
            if (params.instancename) {
                //console.log("@@[trial bln Report0]",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                _this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                _this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                // this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DIV=this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
                _this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_CostCenter = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.COSTCENTER;
                _this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_LEDGERWISE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.LEDGERWISE;
                _this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWDEBTORSCREDITORSDETAILS = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWDEBTORSCREDITORSDETAILS;
                _this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWOPENINGTRIALONLY = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWOPENINGTRIALONLY;
                _this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWSTOCKVALUE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWSTOCKVALUE;
                _this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWSUBLEDGER = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWSUBLEDGER;
                // this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWZEROBL=this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWZEROBL;
                _this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWNETCLOSING = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWNETCLOSING;
            }
        });
        this.changeEntryDate(this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DATE1, "AD");
        this.changeEndDate(this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DATE2, "AD");
    };
    ConsolidatedTrialBalanceReport.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
        }
    };
    ConsolidatedTrialBalanceReport.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_2);
            this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DATE2 = this.masterService.toADDate(value);
        }
    };
    ConsolidatedTrialBalanceReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    ConsolidatedTrialBalanceReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    ConsolidatedTrialBalanceReport.prototype.DialogClosedResult = function (res) {
        var _this = this;
        if (this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWOPENINGTRIALONLY == true) {
            this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWOPENINGTRIALONLY = 1;
        }
        else {
            this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWOPENINGTRIALONLY = 0;
        }
        if (this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWSUBLEDGER == true) {
            this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWSUBLEDGER = 1;
        }
        else {
            this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWSUBLEDGER = 0;
        }
        if (this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWDEBTORSCREDITORSDETAILS == true) {
            this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWDEBTORSCREDITORSDETAILS = 1;
        }
        else {
            this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWDEBTORSCREDITORSDETAILS = 0;
        }
        if (this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWSTOCKVALUE == true) {
            this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWSTOCKVALUE = 1;
        }
        else {
            this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWSTOCKVALUE = 0;
        }
        if (this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWNETCLOSING == true) {
            this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWNETCLOSING = 1;
        }
        else {
            this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWNETCLOSING = 0;
        }
        var multipleReportFormateName = '';
        if (this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_LEDGERWISE == 0) {
            multipleReportFormateName = 'Consolidated Trial Balance Report';
        }
        else if (this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_LEDGERWISE == 1) {
            multipleReportFormateName = 'Consolidated Trial Balance Report_1';
        }
        else {
            multipleReportFormateName = 'Consolidated Trial Balance Report';
        }
        // if (this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DIV && this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DIV == '%') {
        //     this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DIVISIONNAME = 'All';
        //   }else if( this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DIV && this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DIV!= '%'){
        //     let abc = this.division.filter(x=>x.INITIAL == this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DIV);
        //       if(abc && abc.length>0 && abc[0]){
        //         this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DIVISIONNAME = abc[0].NAME;
        //       }else{
        //         this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DIVISIONNAME = '';
        //       }
        //   }else{
        //     this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DIVISIONNAME = '';
        //   }
        if (this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_CostCenter && this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_CostCenter == '%') {
            this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_COSTCENTERDISPLAYNAME = 'All';
        }
        else if (this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_CostCenter != '%') {
            var abc = this.CostcenterList.filter(function (x) { return x.CCID == _this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_CostCenter; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_COSTCENTERDISPLAYNAME = abc[0].COSTCENTERNAME;
            }
            else {
                this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_COSTCENTERDISPLAYNAME = '';
            }
        }
        else {
            this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_COSTCENTERDISPLAYNAME = '';
        }
        if (res == "ok") {
            this._reportFilterService.ConsolidatedTrialBalanceObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.consolidated_TrialBalance_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: ' Consolidated Trial Balance Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.consolidated_TrialBalance_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: ' Consolidated Trial Balance Report' + '_' + this._reportFilterService.consolidated_TrialBalance_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.consolidated_TrialBalance_loadedTimes,
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                reportname: multipleReportFormateName,
                REPORTDISPLAYNAME: 'Consolidated Trial Balance Report',
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.consolidated_TrialBalance_loadedTimes,
                reportparam: {
                    DATE1: this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DATE1,
                    DATE2: this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DATE2,
                    // DIV: this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DIV?this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DIV:'%',
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    CID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    COSTCENTER: this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_CostCenter ? this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_CostCenter : '%',
                    LEDGERWISE: this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_LEDGERWISE ? this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_LEDGERWISE : 0,
                    SHOWOPENINGTRIALONLY: this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWOPENINGTRIALONLY,
                    SHOWSUBLEDGER: this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWSUBLEDGER,
                    SHOWDEBTORSCREDITORSDETAILS: this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWDEBTORSCREDITORSDETAILS,
                    SHOWSTOCKVALUE: this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWSTOCKVALUE,
                    SHOWNETCLOSING: this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWNETCLOSING,
                    // SHOWZEROBL: this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWZEROBL,
                    COMPANYID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    // NODEACID:
                    // NODEACNAME:
                    // DIVISIONNAME : this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DIVISIONNAME ? this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DIVISIONNAME : '',
                    COSTCENTERDISPLAYNAME: this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_COSTCENTERDISPLAYNAME ? this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_COSTCENTERDISPLAYNAME : '',
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.consolidated_TrialBalance_loadedTimes = this._reportFilterService.consolidated_TrialBalance_loadedTimes + 1;
        }
    };
    ConsolidatedTrialBalanceReport.prototype.checkValue = function () {
        // ////console.log("@@_reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWOPENINGTRIALONLY", this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWOPENINGTRIALONLY)
        if (this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWOPENINGTRIALONLY == true) {
            this._reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWOPENINGTRIALONLY = 1;
        }
    };
    return ConsolidatedTrialBalanceReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], ConsolidatedTrialBalanceReport.prototype, "reportdataEmit", void 0);
ConsolidatedTrialBalanceReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'consolidated-trial-balance-report',
        template: __webpack_require__(1729),
        styles: [__webpack_require__(1163), __webpack_require__(120)],
    }),
    __param(7, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__["a" /* AuthService */],
        __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_5__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_5__angular_router__["ActivatedRoute"],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object])
], ConsolidatedTrialBalanceReport);



/***/ }),

/***/ 1497:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_popupLists_report_filter_report_filter_service__ = __webpack_require__(555);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CreditorsReport; });








var CreditorsReport = (function () {
    function CreditorsReport(masterService, dialogref, data, _reportFilterService, _authService, arouter, _ActivatedRoute, reportService, alertService) {
        var _this = this;
        this.masterService = masterService;
        this.dialogref = dialogref;
        this.data = data;
        this._reportFilterService = _reportFilterService;
        this._authService = _authService;
        this.arouter = arouter;
        this._ActivatedRoute = _ActivatedRoute;
        this.reportService = reportService;
        this.alertService = alertService;
        // ReportParameters:any=<any>{};
        this.division = [];
        this.CostcenterList = [];
        this.instanceWiseRepName = 'Creditors Report';
        this.AreaList = [];
        this.PartyGroupList = [];
        this.PartyCategoryList = [];
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.userProfile = this._authService.getUserProfile();
        this.division = [];
        //let data: Array<IDivision> = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                //////console.log("div" + JSON.stringify(res));
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        this.masterService.getCostcenter().subscribe(function (res) {
            _this.CostcenterList = res;
        });
        this.masterService.getAreaList().subscribe(function (res) {
            _this.AreaList = res.result;
        });
        this.masterService.getPartyGroupList().subscribe(function (res) {
            _this.PartyGroupList = res.result;
        });
        this.masterService.getPartyCategoryList().subscribe(function (res) {
            _this.PartyCategoryList = res.result;
        });
        // this.masterService.getAccDivList();
    }
    CreditorsReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            var mode = params.mode;
            if (mode == "DRILL" && _this.reportService.drillParam.returnUrl && _this.reportService.drillParam.reportname == 'Creditors Report' && _this._reportFilterService.CreditorsReportObj.assignPrevioiusDate != true) {
                _this._reportFilterService.CreditorsReportObj.Creditors_DATE1 = _this.reportService.drillParam.reportparam.DATE1;
                _this._reportFilterService.CreditorsReportObj.Creditors_DATE2 = _this.reportService.drillParam.reportparam.DATE2;
                _this._reportFilterService.CreditorsReportObj.Creditors_DIV = _this.reportService.drillParam.reportparam.DIV;
                _this._reportFilterService.CreditorsReportObj.Creditors_CostCenter = _this.reportService.drillParam.reportparam.COSTCENTER;
            }
            else {
                if (_this._reportFilterService.CreditorsReportObj.assignPrevioiusDate != true) {
                    _this.masterService.getAccDivList();
                    _this._reportFilterService.CreditorsReportObj.Creditors_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                    if (_this.userProfile.CompanyInfo.ActualFY == _this.masterService.PhiscalObj.PhiscalID) {
                        _this._reportFilterService.CreditorsReportObj.Creditors_DATE2 = new Date().toJSON().split('T')[0];
                        _this.changeEndDate(_this._reportFilterService.CreditorsReportObj.Creditors_DATE2, "AD");
                    }
                    else {
                        _this._reportFilterService.CreditorsReportObj.Creditors_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                        _this.changeEndDate(_this._reportFilterService.CreditorsReportObj.Creditors_DATE2, "AD");
                    }
                    // this._reportFilterService.CreditorsReportObj.Creditors_DATE2 = new Date().toJSON().split('T')[0];
                    // this._reportFilterService.CreditorsReportObj.Creditors_DIV=this.masterService.userProfile.CompanyInfo.INITIAL;
                    _this.masterService.viewDivision.subscribe(function () {
                        if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                            _this._reportFilterService.CreditorsReportObj.Creditors_DIV = '%';
                        }
                        else {
                            if (_this.masterService.userSetting.userwisedivision == 1 && _this.division.length == 1) {
                                _this._reportFilterService.CreditorsReportObj.Creditors_DIV = _this.division[0].INITIAL;
                            }
                            else {
                                _this._reportFilterService.CreditorsReportObj.Creditors_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                            }
                        }
                    });
                    _this._reportFilterService.CreditorsReportObj.Creditors_CostCenter = '%';
                    _this._reportFilterService.CreditorsReportObj.REPORTMODEC = '0';
                    _this._reportFilterService.CreditorsReportObj.CreditorsReport_AreaWise = 0;
                    _this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyGroup = '%';
                    _this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyCategory = '%';
                }
                if (params.instancename) {
                    // ////console.log("@@[Creditors Report0]",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                    _this._reportFilterService.CreditorsReportObj.Creditors_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                    _this._reportFilterService.CreditorsReportObj.Creditors_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                    _this._reportFilterService.CreditorsReportObj.Creditors_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
                    _this._reportFilterService.CreditorsReportObj.Creditors_CostCenter = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.COSTCENTER;
                    _this._reportFilterService.CreditorsReportObj.GROUPBY = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.GROUPBY;
                    _this._reportFilterService.CreditorsReportObj.Creditors_OPNINGBLONLY = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.OPNINGBLONLY;
                    _this._reportFilterService.CreditorsReportObj.REPORTMODE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.REPORTMODE;
                    _this._reportFilterService.CreditorsReportObj.SHOWDPARTYDETAIL = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWDPARTYDETAIL;
                    _this._reportFilterService.CreditorsReportObj.CreditorsReport_INCLUDEPOSTDATE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.IncPostDatedTransaction;
                    _this._reportFilterService.CreditorsReportObj.Creditors_INCLUDEPOSTEDTRANSACTION = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.Creditors_INCLUDEPOSTEDTRANSACTION;
                }
            }
        });
        this.changeEntryDate(this._reportFilterService.CreditorsReportObj.Creditors_DATE1, "AD");
        this.changeEndDate(this._reportFilterService.CreditorsReportObj.Creditors_DATE2, "AD");
    };
    CreditorsReport.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.CreditorsReportObj.Creditors_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.CreditorsReportObj.Creditors_DATE2 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.CreditorsReportObj.Creditors_DATE1 = this.masterService.toBSDate(value);
        }
    };
    CreditorsReport.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.CreditorsReportObj.Creditors_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_2);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.CreditorsReportObj.Creditors_DATE2 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.CreditorsReportObj.Creditors_DATE2 = this.masterService.toBSDate(value);
        }
    };
    CreditorsReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    CreditorsReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    CreditorsReport.prototype.DialogClosedResult = function (res) {
        var _this = this;
        this._reportFilterService.CreditorsReportObj.Creditors_DIV = (this._reportFilterService.CreditorsReportObj.Creditors_DIV == null || this._reportFilterService.CreditorsReportObj.Creditors_DIV == "") ? "%" : this._reportFilterService.CreditorsReportObj.Creditors_DIV;
        var mulitpleReportFormateName = '';
        if (this._reportFilterService.CreditorsReportObj.SHOWDPARTYDETAIL == 1) {
            mulitpleReportFormateName = 'Creditors Report_1';
        }
        else {
            mulitpleReportFormateName = 'Creditors Report';
        }
        if (this._reportFilterService.CreditorsReportObj.Creditors_DIV && this._reportFilterService.CreditorsReportObj.Creditors_DIV == '%') {
            this._reportFilterService.CreditorsReportObj.Creditors_DIVISIONNAME = 'All';
        }
        else if (this._reportFilterService.CreditorsReportObj.Creditors_DIV && this._reportFilterService.CreditorsReportObj.Creditors_DIV != '%') {
            var abc = this.division.filter(function (x) { return x.INITIAL == _this._reportFilterService.CreditorsReportObj.Creditors_DIV; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.CreditorsReportObj.Creditors_DIVISIONNAME = abc[0].NAME;
            }
            else {
                this._reportFilterService.CreditorsReportObj.Creditors_DIVISIONNAME = '';
            }
        }
        else {
            this._reportFilterService.CreditorsReportObj.Creditors_DIVISIONNAME = '';
        }
        if (this._reportFilterService.CreditorsReportObj.Creditors_CostCenter && this._reportFilterService.CreditorsReportObj.Creditors_CostCenter == '%') {
            this._reportFilterService.CreditorsReportObj.Creditors_COSTCENTERDISPLAYNAME = 'All';
        }
        else if (this._reportFilterService.CreditorsReportObj.Creditors_CostCenter != '%') {
            var abc = this.CostcenterList.filter(function (x) { return x.CCID == _this._reportFilterService.CreditorsReportObj.Creditors_CostCenter; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.CreditorsReportObj.Creditors_COSTCENTERDISPLAYNAME = abc[0].COSTCENTERNAME;
            }
            else {
                this._reportFilterService.CreditorsReportObj.Creditors_COSTCENTERDISPLAYNAME = '';
            }
        }
        else {
            this._reportFilterService.CreditorsReportObj.Creditors_COSTCENTERDISPLAYNAME = '';
        }
        if (this._reportFilterService.CreditorsReportObj.CreditorsReport_AreaWise && this._reportFilterService.CreditorsReportObj.CreditorsReport_AreaWise == 0) {
            this._reportFilterService.CreditorsReportObj.CreditorsReport_AreaWiseDisplayName = '';
        }
        else if (this._reportFilterService.CreditorsReportObj.CreditorsReport_AreaWise != 0) {
            var abc = this.AreaList.filter(function (x) { return x.AREA_ID == _this._reportFilterService.CreditorsReportObj.CreditorsReport_AreaWise; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.CreditorsReportObj.CreditorsReport_AreaWiseDisplayName = abc[0].AREA_NAME;
            }
            else {
                this._reportFilterService.CreditorsReportObj.CreditorsReport_AreaWiseDisplayName = '';
            }
        }
        else {
            this._reportFilterService.CreditorsReportObj.CreditorsReport_AreaWiseDisplayName = '';
        }
        if (this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyGroup && this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyGroup == 0) {
            this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyGroupDisplayName = '';
        }
        else if (this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyGroup != 0) {
            var abc = this.PartyGroupList.filter(function (x) { return x.ACID == _this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyGroup; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyGroupDisplayName = abc[0].ACNAME;
            }
            else {
                this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyGroupDisplayName = '';
            }
        }
        else {
            this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyGroupDisplayName = '';
        }
        if (this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyCategory && this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyCategory == 0) {
            this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyCategoryDisplayName = '';
        }
        else if (this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyCategory != 0) {
            var abc = this.PartyCategoryList.filter(function (x) { return x.CATEGORY_ID == _this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyCategory; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyCategoryDisplayName = abc[0].CATEGORYNAME;
            }
            else {
                this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyCategoryDisplayName = '';
            }
        }
        else {
            this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyCategoryDisplayName = '';
        }
        if (res == "ok") {
            this._reportFilterService.CreditorsReportObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.Creditors_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Creditors Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.Creditors_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Creditors Report' + '_' + this._reportFilterService.Creditors_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.Creditors_loadedTimes,
                });
            }
        }
        this.reportdataEmit.emit({ status: res, data: { reportname: mulitpleReportFormateName,
                REPORTDISPLAYNAME: 'Creditors Report',
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.Creditors_loadedTimes,
                reportparam: {
                    DATE1: this._reportFilterService.CreditorsReportObj.Creditors_DATE1,
                    DATE2: this._reportFilterService.CreditorsReportObj.Creditors_DATE2,
                    BSDATE1: this._reportFilterService.AccoutLedgerObj.AccLedger_BSDATE1,
                    BSDATE2: this._reportFilterService.AccoutLedgerObj.AccLedger_BSDATE2,
                    DIVISION: this._reportFilterService.CreditorsReportObj.Creditors_DIV,
                    COMID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    CostCenter: this._reportFilterService.CreditorsReportObj.Creditors_CostCenter,
                    SHOWDPARTYDETAIL: this._reportFilterService.CreditorsReportObj.SHOWDPARTYDETAIL,
                    OPNINGBLONLY: this._reportFilterService.CreditorsReportObj.Creditors_OPNINGBLONLY,
                    REPORTMODE: this._reportFilterService.CreditorsReportObj.REPORTMODEC,
                    GROUPBY: this._reportFilterService.CreditorsReportObj.GROUPBY ? this._reportFilterService.CreditorsReportObj.GROUPBY : 0,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    COSTCENTER: this._reportFilterService.CreditorsReportObj.Creditors_CostCenter,
                    DIV: this._reportFilterService.CreditorsReportObj.Creditors_DIV,
                    DIVISIONNAME: this._reportFilterService.CreditorsReportObj.Creditors_DIVISIONNAME ? this._reportFilterService.CreditorsReportObj.Creditors_DIVISIONNAME : '',
                    COSTCENTERDISPLAYNAME: this._reportFilterService.CreditorsReportObj.Creditors_COSTCENTERDISPLAYNAME ? this._reportFilterService.CreditorsReportObj.Creditors_COSTCENTERDISPLAYNAME : '',
                    AREA: this._reportFilterService.CreditorsReportObj.CreditorsReport_AreaWise ? this._reportFilterService.CreditorsReportObj.CreditorsReport_AreaWise : 0,
                    PARTYGROUP: this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyGroup ? this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyGroup : '%',
                    SHOWBRANCHBL: this._reportFilterService.CreditorsReportObj.Creditors_SHOWBRANCHBL,
                    PARTYCATEGORY: this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyCategory ? this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyCategory : '%',
                    AREAWISEDISPLAYNAME: this._reportFilterService.CreditorsReportObj.CreditorsReport_AreaWiseDisplayName ? this._reportFilterService.CreditorsReportObj.CreditorsReport_AreaWiseDisplayName : '',
                    PARTYGROUPDISPLAYNAME: this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyGroupDisplayName ? this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyGroupDisplayName : '',
                    PARTYCATEGORYDISPLAYNAME: this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyCategoryDisplayName ? this._reportFilterService.CreditorsReportObj.CreditorsReport_PartyCategoryDisplayName : '',
                    // IncPostDatedTransaction :this._reportFilterService.CreditorsReportObj.CreditorsReport_INCLUDEPOSTDATE ? this._reportFilterService.CreditorsReportObj.CreditorsReport_INCLUDEPOSTDATE:0,
                    INCLUDEPOSTEDTRANSACTION: this._reportFilterService.CreditorsReportObj.Creditors_INCLUDEPOSTEDTRANSACTION ? this._reportFilterService.CreditorsReportObj.Creditors_INCLUDEPOSTEDTRANSACTION : 0,
                } } });
        if (res == "ok") {
            this._reportFilterService.Creditors_loadedTimes = this._reportFilterService.Creditors_loadedTimes + 1;
        }
    };
    CreditorsReport.prototype.checkValueForOpeningCreditors = function () {
        if (this._reportFilterService.CreditorsReportObj.Creditors_OPNINGBLONLY == true) {
            this._reportFilterService.CreditorsReportObj.Creditors_OPNINGBLONLY = 1;
            this.date1 = this._reportFilterService.CreditorsReportObj.Creditors_DATE1;
            this.date2 = this._reportFilterService.CreditorsReportObj.Creditors_DATE2;
            this._reportFilterService.CreditorsReportObj.Creditors_DATE1 = this.masterService.PhiscalObj.BeginDate.split('T')[0];
            this._reportFilterService.CreditorsReportObj.Creditors_DATE2 = this.masterService.PhiscalObj.EndDate.split('T')[0];
            this.changeEntryDate(this._reportFilterService.CreditorsReportObj.Creditors_DATE1, "AD");
            this.changeEndDate(this._reportFilterService.CreditorsReportObj.Creditors_DATE2, "AD");
        }
        else {
            this._reportFilterService.CreditorsReportObj.Creditors_OPNINGBLONLY = 0;
            this._reportFilterService.CreditorsReportObj.Creditors_DATE1 = this.date1 ? this.date1 : this._reportFilterService.CreditorsReportObj.Creditors_DATE1;
            this._reportFilterService.CreditorsReportObj.Creditors_DATE2 = this.date2 ? this.date2 : this._reportFilterService.CreditorsReportObj.Creditors_DATE2;
            this.changeEntryDate(this._reportFilterService.CreditorsReportObj.Creditors_DATE1, "AD");
            this.changeEndDate(this._reportFilterService.CreditorsReportObj.Creditors_DATE2, "AD");
        }
    };
    return CreditorsReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], CreditorsReport.prototype, "reportdataEmit", void 0);
CreditorsReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'result-creditorsreport-dialog',
        template: __webpack_require__(1730),
        styles: [__webpack_require__(1163), __webpack_require__(120)]
    }),
    __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object, __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_4__common_services_permission_authService_service__["a" /* AuthService */], __WEBPACK_IMPORTED_MODULE_5__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_5__angular_router__["ActivatedRoute"],
        __WEBPACK_IMPORTED_MODULE_6__common_popupLists_report_filter_report_filter_service__["a" /* ReportFilterService */], __WEBPACK_IMPORTED_MODULE_7__common_services_alert_alert_service__["a" /* AlertService */]])
], CreditorsReport);



/***/ }),

/***/ 1498:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__masters_components_PLedger_PLedger_component__ = __webpack_require__(1181);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__common_popupLists_report_filter_report_filter_service__ = __webpack_require__(555);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CrediotrsBillTrackingReport; });









var CrediotrsBillTrackingReport = (function () {
    function CrediotrsBillTrackingReport(masterService, alertService, _reportFilterService, _authService, arouter, _ActivatedRoute, reportService) {
        var _this = this;
        this.masterService = masterService;
        this.alertService = alertService;
        this._reportFilterService = _reportFilterService;
        this._authService = _authService;
        this.arouter = arouter;
        this._ActivatedRoute = _ActivatedRoute;
        this.reportService = reportService;
        this.division = [];
        this.CostcenterList = [];
        this.instanceWiseRepName = 'Creditors Bill Tracking Report';
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.gridPopupSettingsForPartyLedgerList = new __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.reportNameFormatWise = 'Creditors Bill Tracking Report';
        this.userProfile = this._authService.getUserProfile();
        this.division = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        this.masterService.getCostcenter().subscribe(function (res) {
            _this.CostcenterList = res;
        });
        // this.masterService.getAccDivList();
    }
    CrediotrsBillTrackingReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            var mode = params.mode;
            if (mode == "DRILL" && _this.reportService.drillParam.returnUrl && _this.reportService.drillParam.reportname.startsWith('Creditors Bill Tracking Report') && _this._reportFilterService.CreditorsBillTrackingObj.assignPrevioiusDate != true) {
                _this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DATE1 = _this.reportService.drillParam.reportparam.DATE1;
                _this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DATE2 = _this.reportService.drillParam.reportparam.DATE2;
                _this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DIV = _this.reportService.drillParam.reportparam.DIV;
                _this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_CostCenter = _this.reportService.drillParam.reportparam.COSTCENTER;
                _this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_Detail = '1';
                _this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_ACID = _this.reportService.drillParam.reportparam.ACID;
                _this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_ACCNAME = _this.reportService.drillParam.reportparam.ACNAME;
            }
            else {
                if (_this._reportFilterService.CreditorsBillTrackingObj.assignPrevioiusDate != true) {
                    _this.masterService.getAccDivList();
                    // this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DATE1 = this.masterService.PhiscalObj.BeginDate.split('T')[0];
                    _this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DATE1 = new Date().toJSON().split('T')[0];
                    if (_this.userProfile.CompanyInfo.ActualFY == _this.masterService.PhiscalObj.PhiscalID) {
                        _this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DATE2 = new Date().toJSON().split('T')[0];
                        _this.changeEndDate(_this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DATE2, "AD");
                    }
                    else {
                        _this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                        _this.changeEndDate(_this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DATE2, "AD");
                    }
                    // this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DIV = this.masterService.userProfile.CompanyInfo.INITIAL;
                    _this.masterService.viewDivision.subscribe(function () {
                        if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                            _this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DIV = '%';
                        }
                        else {
                            if (_this.masterService.userSetting.userwisedivision == 1 && _this.division.length == 1) {
                                _this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DIV = _this.division[0].INITIAL;
                            }
                            else {
                                _this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                            }
                        }
                    });
                    _this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_CostCenter = '%';
                    _this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_VoucherType = 'PV';
                    _this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_Detail = '0';
                    _this.changeEntryDate(_this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DATE1, "AD");
                    _this.changeEndDate(_this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DATE2, "AD");
                }
                if (params.instancename) {
                    _this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                    _this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                    _this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
                    _this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_CostCenter = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.COSTCENTER;
                }
            }
        });
        this.changeEntryDate(this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DATE1, "AD");
        this.changeEndDate(this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DATE2, "AD");
    };
    CrediotrsBillTrackingReport.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
        }
    };
    CrediotrsBillTrackingReport.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            var adDate = adbs.bs2ad(bsDate_2);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DATE2 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
        }
    };
    CrediotrsBillTrackingReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    CrediotrsBillTrackingReport.prototype.DialogClosedResult = function (res) {
        var _this = this;
        if (this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DIV && this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DIV == '%') {
            this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DIVISIONNAME = 'All';
        }
        else if (this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DIV && this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DIV != '%') {
            var abc = this.division.filter(function (x) { return x.INITIAL == _this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DIV; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DIVISIONNAME = abc[0].NAME;
            }
            else {
                this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DIVISIONNAME = '';
            }
        }
        else {
            this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DIVISIONNAME = '';
        }
        if (this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_CostCenter && this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_CostCenter == '%') {
            this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_COSTCENTERDISPLAYNAME = 'All';
        }
        else if (this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_CostCenter != '%') {
            var abc = this.CostcenterList.filter(function (x) { return x.CCID == _this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_CostCenter; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_COSTCENTERDISPLAYNAME = abc[0].COSTCENTERNAME;
            }
            else {
                this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_COSTCENTERDISPLAYNAME = '';
            }
        }
        else {
            this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_COSTCENTERDISPLAYNAME = '';
        }
        if (this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_Detail == 0) {
            this.reportNameFormatWise = 'Creditors Bill Tracking Report';
        }
        else {
            this.reportNameFormatWise = 'Creditors Bill Tracking Report_1';
        }
        if (this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_ACCNAME == "") {
            this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_ACID = '%';
        }
        if (res == "ok") {
            this._reportFilterService.CreditorsBillTrackingObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.CreditorsBillTracking_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Creditors Bill Tracking Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.CreditorsBillTracking_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Creditors Bill Tracking Report' + '_' + this._reportFilterService.CreditorsBillTracking_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.CreditorsBillTracking_loadedTimes,
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: 'Creditors Bill Tracking Report',
                reportname: this.reportNameFormatWise,
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.CreditorsBillTracking_loadedTimes,
                reportparam: {
                    DATE1: this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DATE1,
                    DATE2: this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DATE2,
                    FROMDATE: this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DATE1,
                    TODATE: this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DATE2,
                    BSDATE1: this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_BSDATE1,
                    BSDATE2: this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_BSDATE2,
                    DIV: this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DIV ? this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DIV : '%',
                    COSTCENTER: this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_CostCenter ? this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_CostCenter : '%',
                    COMID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    COMPANYID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    VOUCHERTYPE: this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_VoucherType ? this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_VoucherType : 'PV',
                    ACID: this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_ACID ? this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_ACID : '%',
                    PARTY: this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_ACID ? this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_ACID : '%',
                    ACNAME: this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_ACCNAME,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID ? this.masterService.PhiscalObj.PhiscalID : '%',
                    DETAIL: this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_Detail ? this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_Detail : 1,
                    DIVISIONNAME: this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DIVISIONNAME ? this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DIVISIONNAME : '',
                    COSTCENTERDISPLAYNAME: this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_COSTCENTERDISPLAYNAME ? this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_COSTCENTERDISPLAYNAME : '',
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.CreditorsBillTracking_loadedTimes = this._reportFilterService.CreditorsBillTracking_loadedTimes + 1;
        }
    };
    // Close Method
    CrediotrsBillTrackingReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("cancel");
    };
    CrediotrsBillTrackingReport.prototype.AccountEnterClicked = function () {
        this.gridPopupSettingsForPartyLedgerList = this.masterService.getGenericGridPopUpSettings('SupplierListForReport');
        this.genericGridPartyLedger.show();
    };
    CrediotrsBillTrackingReport.prototype.dblClickAccountSelect = function (account) {
        this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_ACID = account.ACID;
        this._reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_ACCNAME = account.ACNAME;
    };
    CrediotrsBillTrackingReport.prototype.keyPress = function (event) {
        //console.log("@@ecent",event)
        var pattern = /[\b]/;
        var inputChar = String.fromCharCode(event.charCode);
        if (!pattern.test(inputChar)) {
            // invalid character, prevent input
            event.preventDefault();
        }
    };
    return CrediotrsBillTrackingReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("PLedgerChild"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_3__masters_components_PLedger_PLedger_component__["a" /* PLedgerComponent */])
], CrediotrsBillTrackingReport.prototype, "PLedgerChild", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], CrediotrsBillTrackingReport.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridPartyLedger"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], CrediotrsBillTrackingReport.prototype, "genericGridPartyLedger", void 0);
CrediotrsBillTrackingReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'creditorsbilltracking-report-selector',
        template: __webpack_require__(1731),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_repositories__["a" /* MasterRepo */],
        __WEBPACK_IMPORTED_MODULE_4__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_5__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */],
        __WEBPACK_IMPORTED_MODULE_2__common_services_permission_authService_service__["a" /* AuthService */], __WEBPACK_IMPORTED_MODULE_7__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_7__angular_router__["ActivatedRoute"],
        __WEBPACK_IMPORTED_MODULE_8__common_popupLists_report_filter_report_filter_service__["a" /* ReportFilterService */]])
], CrediotrsBillTrackingReport);



/***/ }),

/***/ 1499:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_popupLists_report_filter_report_filter_service__ = __webpack_require__(555);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CurrentStockWarehousWiseReportAccount; });








var CurrentStockWarehousWiseReportAccount = (function () {
    function CurrentStockWarehousWiseReportAccount(masterService, _authService, _reportFilterService, arouter, _ActivatedRoute, reportService, alertService, dialogref, data) {
        var _this = this;
        this.masterService = masterService;
        this._authService = _authService;
        this._reportFilterService = _reportFilterService;
        this.arouter = arouter;
        this._ActivatedRoute = _ActivatedRoute;
        this.reportService = reportService;
        this.alertService = alertService;
        this.dialogref = dialogref;
        this.data = data;
        this.instanceWiseRepName = 'Stock Report - Warehouse Wise';
        this.warehouseList = [];
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.userProfile = this._authService.getUserProfile();
        this.masterService.getunsalableWarehouseList().subscribe(function (res) {
            _this.warehouseList.push(res);
        });
    }
    CurrentStockWarehousWiseReportAccount.prototype.ngOnInit = function () {
        if (this._reportFilterService.CurrentStockWarehousewiseAccObj.assignPrevioiusDate != true) {
            this._reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_DATE1 = this.masterService.userProfile.CompanyInfo.FBDATE.split('T')[0];
            this._reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_DATE2 = new Date().toJSON().split('T')[0];
            this._reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_DIV = this.masterService.userProfile.CompanyInfo.INITIAL;
            this._reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_COMPANY = '%';
            this._reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_WAREHOUSETYPE = '%';
            this._reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_WAREHOUSE = '%';
        }
        this.changeEntryDate(this._reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_DATE1, "AD");
        this.changeEndDate(this._reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_DATE2, "AD");
    };
    CurrentStockWarehousWiseReportAccount.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
        }
    };
    CurrentStockWarehousWiseReportAccount.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_2);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_DATE2 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
        }
    };
    CurrentStockWarehousWiseReportAccount.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    CurrentStockWarehousWiseReportAccount.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    CurrentStockWarehousWiseReportAccount.prototype.DialogClosedResult = function (res) {
        if (res == "ok") {
            this._reportFilterService.CurrentStockWarehousewiseAccObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.CurrentStockWarehouseWiseAccount_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Stock Report - Warehouse Wise',
                    activeurlpath: this.arouter.url,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.CurrentStockWarehouseWiseAccount_loadedTimes,
                    activerurlpath2: activeurlpath2,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Stock Report - Warehouse Wise' + '_' + this._reportFilterService.CurrentStockWarehouseWiseAccount_loadedTimes,
                    activeurlpath: this.arouter.url,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.CurrentStockWarehouseWiseAccount_loadedTimes,
                    activerurlpath2: activeurlpath2,
                });
            }
        }
        var multiplereportname = 'Current Stock Warehousewise ReportAccount';
        var ShowBatch = this._reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_SHOWBATCHWISE;
        if (ShowBatch == 0) {
            multiplereportname = 'Current Stock Warehousewise ReportAccount';
        }
        else if (ShowBatch == 1) {
            multiplereportname = 'Current Stock Warehousewise ReportAccount_1';
        }
        //console.log("@@multiplereportname", multiplereportname)
        this.reportdataEmit.emit({
            status: res, data: {
                reportname: multiplereportname, reportparam: {
                    DATE1: this._reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_DATE1,
                    DATE2: this._reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_DATE2,
                    // date1: this._reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_DATE1,
                    // date2: this._reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_DATE2,
                    // PhiscalID: this.userProfile.CompanyInfo.PHISCALID,
                    PHISCALID: this.userProfile.CompanyInfo.PHISCALID,
                    // DIVISION: this.userProfile.CompanyInfo.INIITAL ? this.userProfile.CompanyInfo.INIITAL : '%',
                    DIV: this.userProfile.CompanyInfo.INITIAL ? this.userProfile.CompanyInfo.INITIAL : '%',
                    COMPANYID: this.userProfile.CompanyInfo.COMPANYID,
                    // Warehouse: this._reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_WAREHOUSE ? this._reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_WAREHOUSE : '%',
                    // Company: this._reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_COMPANY ? this._reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_COMPANY : '%',
                    // WarehouseType: this._reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_WAREHOUSETYPE ? this._reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_WAREHOUSETYPE : '%',
                    WAREHOUSE: '%',
                    MCODE: '%',
                    MGROUP: '%',
                    PTYPE: '100',
                    MCAT: '%',
                    SUPCODE: '%',
                    DIVISIONWISEREPORT: 0,
                    SHOWBATCHWISESTOCK: this._reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_SHOWBATCHWISE ? this._reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_SHOWBATCHWISE : 0,
                    REPORTYPE: 0
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.CurrentStockWarehouseWiseAccount_loadedTimes = this._reportFilterService.CurrentStockWarehouseWiseAccount_loadedTimes + 1;
        }
    };
    return CurrentStockWarehousWiseReportAccount;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], CurrentStockWarehousWiseReportAccount.prototype, "reportdataEmit", void 0);
CurrentStockWarehousWiseReportAccount = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'currentstock-warehousewise-account',
        template: __webpack_require__(1732),
        styles: [__webpack_require__(1163), __webpack_require__(120)],
    }),
    __param(8, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__["a" /* AuthService */],
        __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_5__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_5__angular_router__["ActivatedRoute"],
        __WEBPACK_IMPORTED_MODULE_6__common_popupLists_report_filter_report_filter_service__["a" /* ReportFilterService */], __WEBPACK_IMPORTED_MODULE_7__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object])
], CurrentStockWarehousWiseReportAccount);



/***/ }),

/***/ 1500:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_router__ = __webpack_require__(6);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DateFilters; });




var DateFilters = (function () {
    function DateFilters(_authService, _reportFilterService, arouter) {
        this._authService = _authService;
        this._reportFilterService = _reportFilterService;
        this.arouter = arouter;
        this.PhiscalObj = {};
        this.userProfile = this._authService.getUserProfile();
        this.PhiscalObj = this._authService.PhiscalObj();
        // this.activeurlPath = arouter.snapshot.url[0].path;
        ////console.log("snapshot",arouter.snapshot);
    }
    DateFilters.prototype.ngOnInit = function () {
        // this.ReportParameters.DATE1 = new Date().toJSON().split('T')[0];
        this._reportFilterService.ReportFilterObject.DATE1 = this.PhiscalObj.BeginDate.split('T')[0];
        this._reportFilterService.ReportFilterObject.DATE2 = new Date().toJSON().split('T')[0];
        this.changeEntryDate(this._reportFilterService.ReportFilterObject.DATE1, "AD");
        this.changeEndDate(this._reportFilterService.ReportFilterObject.DATE2, "AD");
    };
    DateFilters.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.ReportFilterObject.BSDATE1 = bsDate.en.year + '-' + bsDate.en.month + '-' + (bsDate.en.day == '1' || bsDate.en.day == '2' || bsDate.en.day == '3' || bsDate.en.day == '4' || bsDate.en.day == '5' || bsDate.en.day == '6' || bsDate.en.day == '7' || bsDate.en.day == '8' || bsDate.en.day == '9' ? '0' + bsDate.en.day : bsDate.en.day);
            // this.startDateResponse.emit(value);
        }
        else if (format == "BS") {
            var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate);
            this._reportFilterService.ReportFilterObject.DATE1 = this.masterService.toBSDate(value);
        }
    };
    DateFilters.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.ReportFilterObject.BSDATE2 = bsDate.en.year + '-' + bsDate.en.month + '-' + (bsDate.en.day == '1' || bsDate.en.day == '2' || bsDate.en.day == '3' || bsDate.en.day == '4' || bsDate.en.day == '5' || bsDate.en.day == '6' || bsDate.en.day == '7' || bsDate.en.day == '8' || bsDate.en.day == '9' ? '0' + bsDate.en.day : bsDate.en.day);
            // this.endDateResponse.emit(value);
        }
        else if (format == "BS") {
            var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate);
            this._reportFilterService.ReportFilterObject.DATE2 = this.masterService.toBSDate(value);
        }
    };
    return DateFilters;
}());
DateFilters = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: "date-filters",
        template: __webpack_require__(1733),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
        providers: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_authService_service__["a" /* AuthService */]]
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_authService_service__["a" /* AuthService */],
        __WEBPACK_IMPORTED_MODULE_2__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */],
        __WEBPACK_IMPORTED_MODULE_3__angular_router__["ActivatedRoute"]])
], DateFilters);



/***/ }),

/***/ 1501:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__common_popupLists_report_filter_report_filter_service__ = __webpack_require__(555);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_moment__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_moment__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DayBookReport; });









var DayBookReport = (function () {
    function DayBookReport(masterService, _authService, alertService, _reportFilterService, arouter, _ActivatedRoute, dialogref, reportService, data) {
        var _this = this;
        this.masterService = masterService;
        this._authService = _authService;
        this.alertService = alertService;
        this._reportFilterService = _reportFilterService;
        this.arouter = arouter;
        this._ActivatedRoute = _ActivatedRoute;
        this.dialogref = dialogref;
        this.reportService = reportService;
        this.data = data;
        this.ReportParameters = {};
        this.voucherTypeList = [];
        this.userList = [];
        this.division = [];
        this.instanceWiseRepName = 'Day Book Report';
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.getVoucherType();
        this.getuserList();
        this._reportFilterService.DayBookObj.Reportnameis = 'daybookreport';
        this.division = [];
        //let data: Array<IDivision> = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                //////console.log("div" + JSON.stringify(res));
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        // this.masterService.getAccDivList();
    }
    DayBookReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            var mode = params.mode;
            if (mode == "DRILL" && _this.reportService.drillParam.returnUrl && _this.reportService.drillParam.reportname == 'Day Book Report_1') {
                // //console.log("@@daybook",this.reportService.drillParam)
                _this._reportFilterService.DayBookObj.DayBook_DATE1 = __WEBPACK_IMPORTED_MODULE_8_moment__(_this.reportService.drillParam.reportparam.DATE1).format('YYYY-MM-DD');
                _this._reportFilterService.DayBookObj.DayBook_DATE2 = __WEBPACK_IMPORTED_MODULE_8_moment__(_this.reportService.drillParam.reportparam.DATE2).format('YYYY-MM-DD');
                _this._reportFilterService.DayBookObj.DayBook_BSDATE1 = _this.reportService.drillParam.reportparam.BSDATE1;
                _this._reportFilterService.DayBookObj.DayBook_BSDATE2 = _this.reportService.drillParam.reportparam.BSDATE2;
                _this._reportFilterService.DayBookObj.DayBook_DIV = _this.reportService.drillParam.reportparam.DIV;
                _this._reportFilterService.DayBookObj.DayBook_DETAILREPORT = _this.reportService.drillParam.reportparam.DETAILREPORT;
                _this._reportFilterService.DayBookObj.DayBook_SUMMARYTYPE = _this.reportService.drillParam.reportparam.SUMMARYTYPE;
                _this._reportFilterService.DayBookObj.USER = _this.reportService.drillParam.reportparam.USR;
                _this._reportFilterService.DayBookObj.DayBook_VTYPE = _this.reportService.drillParam.reportparam.VTYPE;
            }
            else {
                if (_this._reportFilterService.DayBookObj.assignPrevioiusDate != true) {
                    _this.masterService.getAccDivList();
                    _this._reportFilterService.DayBookObj.DayBook_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                    if (_this.masterService.userProfile.CompanyInfo.ActualFY == _this.masterService.PhiscalObj.PhiscalID) {
                        _this._reportFilterService.DayBookObj.DayBook_DATE2 = new Date().toJSON().split('T')[0];
                        _this.changeEndDate(_this._reportFilterService.DayBookObj.DayBook_DATE2, "AD");
                    }
                    else {
                        _this._reportFilterService.DayBookObj.DayBook_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                        _this.changeEndDate(_this._reportFilterService.DayBookObj.DayBook_DATE2, "AD");
                    }
                    // this._reportFilterService.DayBookObj.DayBook_DATE2 = new Date().toJSON().split('T')[0];
                    // this._reportFilterService.DayBookObj.DayBook_DIV=this.masterService.userProfile.CompanyInfo.INITIAL;
                    _this.masterService.viewDivision.subscribe(function () {
                        if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                            _this._reportFilterService.DayBookObj.DayBook_DIV = '%';
                        }
                        else {
                            if (_this.masterService.userSetting.userwisedivision == 1 && _this.division.length == 1) {
                                _this._reportFilterService.DayBookObj.DayBook_DIV = _this.division[0].INITIAL;
                            }
                            else {
                                _this._reportFilterService.DayBookObj.DayBook_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                            }
                        }
                    });
                    _this._reportFilterService.DayBookObj.DayBook_DETAILREPORT = '0';
                    _this._reportFilterService.DayBookObj.DayBook_SUMMARYTYPE = '0';
                    _this._reportFilterService.DayBookObj.DayBook_VTYPE = "%";
                    _this._reportFilterService.DayBookObj.SHOWCASEOPENINGCLOSINGBL = 0;
                    _this._reportFilterService.DayBookObj.Daybook_MultipleVoucher = [];
                }
                if (params.instancename) {
                    // ////console.log("@@[day book Report0]",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                    _this._reportFilterService.DayBookObj.DayBook_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                    _this._reportFilterService.DayBookObj.DayBook_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                    _this._reportFilterService.DayBookObj.DayBook_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
                    _this._reportFilterService.DayBookObj.DayBook_DETAILREPORT = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DETAILREPORT;
                    _this._reportFilterService.DayBookObj.DayBook_SUMMARYTYPE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SUMMARYTYPE;
                    _this._reportFilterService.DayBookObj.USER = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.USR;
                    _this._reportFilterService.DayBookObj.DayBook_VTYPE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.VTYPE;
                    _this._reportFilterService.DayBookObj.Daybook_FROM_VNO = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.FROM_VNO;
                    _this._reportFilterService.DayBookObj.Daybook_TO_VNO = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.TO_VNO;
                }
                _this.changeEntryDate(_this._reportFilterService.DayBookObj.DayBook_DATE1, "AD");
                _this.changeEndDate(_this._reportFilterService.DayBookObj.DayBook_DATE2, "AD");
            }
        });
        if (this._reportFilterService.DayBookObj.Daybook_MultipleVoucher.length > 0) {
            this.showVoucherTable = true;
        }
    };
    DayBookReport.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.DayBookObj.DayBook_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.DayBookObj.DayBook_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.DayBookObj.DayBook_DATE1 = this.masterService.toBSDate(value);
        }
    };
    DayBookReport.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.DayBookObj.DayBook_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_2);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.DayBookObj.DayBook_DATE2 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.DayBookObj.DayBook_DATE2 = this.masterService.toBSDate(value);
        }
    };
    DayBookReport.prototype.onload = function () {
        if (Number(this._reportFilterService.DayBookObj.Daybook_FROM_VNO) > Number(this._reportFilterService.DayBookObj.Daybook_TO_VNO)) {
            this.alertService.info("Starting Voucher No is Greater Than Ending Voucher No!");
            return;
        }
        else {
            this.DialogClosedResult("ok");
        }
    };
    DayBookReport.prototype.getVoucherType = function () {
        var _this = this;
        this.masterService.getAllVoucherType().subscribe(function (res) {
            // console.log("@@@RES",res);
            _this.voucherTypeList.push(res);
        });
    };
    DayBookReport.prototype.getuserList = function () {
        var _this = this;
        this.masterService.getUserList().subscribe(function (res) {
            _this.userList = res;
            //console.log(this.userList,"userlist")
        });
    };
    DayBookReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    DayBookReport.prototype.DialogClosedResult = function (res) {
        var _this = this;
        var multipleVouchers = [];
        // let SelectedGroupACC = '';
        this._reportFilterService.SelectedVouchers = '';
        if (this._reportFilterService.DayBookObj.Daybook_MultipleVoucher === undefined || this._reportFilterService.DayBookObj.Daybook_MultipleVoucher === null || (this._reportFilterService.DayBookObj.Daybook_MultipleVoucher && this._reportFilterService.DayBookObj.Daybook_MultipleVoucher.length == 0)) {
            this._reportFilterService.SelectedVouchers = this._reportFilterService.DayBookObj.DayBook_VTYPE;
        }
        else {
            if (this._reportFilterService.DayBookObj.Daybook_MultipleVoucher.length != 0) {
                this._reportFilterService.DayBookObj.Daybook_MultipleVoucher.forEach(function (vcList) {
                    multipleVouchers.push(vcList.VOUCHER_ID);
                });
                this._reportFilterService.SelectedVouchers += multipleVouchers + ",";
                // var nameArr = this._reportFilterService.SelectedVouchers.split(',');
                // var myArr = nameArr;
                // let item = myArr.filter((el, i, a) => i === a.indexOf(el))
                // ////console.log("@@item",item)
                // this._reportFilterService.SelectedVouchers= item.toString();
            }
            else {
                this._reportFilterService.SelectedVouchers = '%';
            }
        }
        this._reportFilterService.DayBookObj.DayBook_DIV = (this._reportFilterService.DayBookObj.DayBook_DIV == null || this._reportFilterService.DayBookObj.DayBook_DIV == "") ? "%" : this._reportFilterService.DayBookObj.DayBook_DIV;
        var multipleReportFormateName = '';
        if (this._reportFilterService.DayBookObj.DayBook_DETAILREPORT == "0" && this._reportFilterService.DayBookObj.DayBook_SUMMARYTYPE == "0") {
            multipleReportFormateName = 'Day Book Report';
        }
        else if (this._reportFilterService.DayBookObj.DayBook_DETAILREPORT == "0" && this._reportFilterService.DayBookObj.DayBook_SUMMARYTYPE == "1") {
            multipleReportFormateName = 'Day Book Report_2';
        }
        else {
            multipleReportFormateName = 'Day Book Report_1';
        }
        if (this._reportFilterService.DayBookObj.Daybook_FROM_VNO == null ||
            this._reportFilterService.DayBookObj.Daybook_FROM_VNO === undefined) {
            this._reportFilterService.DayBookObj.Daybook_FROM_VNO = 0;
        }
        if (this._reportFilterService.DayBookObj.Daybook_TO_VNO == null ||
            this._reportFilterService.DayBookObj.Daybook_TO_VNO === undefined) {
            this._reportFilterService.DayBookObj.Daybook_TO_VNO = 0;
        }
        if (this._reportFilterService.DayBookObj.DayBook_DIV && this._reportFilterService.DayBookObj.DayBook_DIV == '%') {
            this._reportFilterService.DayBookObj.DayBook_DIVISIONNAME = 'All';
        }
        else if (this._reportFilterService.DayBookObj.DayBook_DIV && this._reportFilterService.DayBookObj.DayBook_DIV != '%') {
            var abc = this.division.filter(function (x) { return x.INITIAL == _this._reportFilterService.DayBookObj.DayBook_DIV; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.DayBookObj.DayBook_DIVISIONNAME = abc[0].NAME;
            }
            else {
                this._reportFilterService.DayBookObj.DayBook_DIVISIONNAME = '';
            }
        }
        else {
            this._reportFilterService.DayBookObj.DayBook_DIVISIONNAME = '';
        }
        if (this._reportFilterService.DayBookObj.DayBook_VTYPE && this._reportFilterService.DayBookObj.DayBook_VTYPE == '%') {
            this._reportFilterService.DayBookObj.DayBook_VTYPEDISPLAYNAME = 'All';
        }
        else if (this._reportFilterService.DayBookObj.DayBook_VTYPE && this._reportFilterService.DayBookObj.DayBook_VTYPE != '%') {
            if (this._reportFilterService.DayBookObj.Daybook_MultipleVoucher.length == 0) {
                var abc = this.voucherTypeList.filter(function (x) { return x.VOUCHER_ID == _this._reportFilterService.DayBookObj.DayBook_VTYPE; });
                if (abc && abc.length > 0 && abc[0]) {
                    this._reportFilterService.DayBookObj.DayBook_VTYPEDISPLAYNAME = abc[0].VOUCHER_NAME;
                }
                else {
                    this._reportFilterService.DayBookObj.DayBook_VTYPEDISPLAYNAME = '';
                }
            }
            else {
                this._reportFilterService.DayBookObj.DayBook_VTYPEDISPLAYNAME = '';
            }
        }
        else {
            this._reportFilterService.DayBookObj.DayBook_VTYPEDISPLAYNAME = '';
        }
        if (res == "ok") {
            this._reportFilterService.DayBookObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.DayBook_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Day Book Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.DayBook_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Day Book Report' + '_' + this._reportFilterService.DayBook_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.DayBook_loadedTimes,
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: 'Day Book Report',
                reportname: multipleReportFormateName,
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.DayBook_loadedTimes,
                reportparam: {
                    VTYPEDISPLAYNAME: this._reportFilterService.DayBookObj.DayBook_VTYPEDISPLAYNAME ? this._reportFilterService.DayBookObj.DayBook_VTYPEDISPLAYNAME : '',
                    DATE1: this._reportFilterService.DayBookObj.DayBook_DATE1,
                    DATE2: this._reportFilterService.DayBookObj.DayBook_DATE2,
                    BSDATE1: this._reportFilterService.DayBookObj.DayBook_BSDATE1,
                    BSDATE2: this._reportFilterService.DayBookObj.DayBook_BSDATE2,
                    DIV: this._reportFilterService.DayBookObj.DayBook_DIV,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    COMID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    VTYPE: this._reportFilterService.SelectedVouchers ? this._reportFilterService.SelectedVouchers : '%',
                    DETAILREPORT: this._reportFilterService.DayBookObj.DayBook_DETAILREPORT,
                    SUMMARYTYPE: this._reportFilterService.DayBookObj.DayBook_DETAILREPORT == '0' ? this._reportFilterService.DayBookObj.DayBook_SUMMARYTYPE : '0',
                    USR: this._reportFilterService.DayBookObj.USER ? this._reportFilterService.DayBookObj.USER : '%',
                    DIVISIONNAME: this._reportFilterService.DayBookObj.DayBook_DIVISIONNAME ? this._reportFilterService.DayBookObj.DayBook_DIVISIONNAME : '',
                    USERDISPLAYNAME: this._reportFilterService.DayBookObj.USER ? this._reportFilterService.DayBookObj.USER : '',
                    SHOWCASEOPENINGCLOSINGBL: this._reportFilterService.DayBookObj.SHOWCASEOPENINGCLOSINGBL ? this._reportFilterService.DayBookObj.SHOWCASEOPENINGCLOSINGBL : 0,
                    VCHR1: this._reportFilterService.DayBookObj.Daybook_FROM_VNO ? this._reportFilterService.DayBookObj.Daybook_FROM_VNO : 0,
                    VCHR2: this._reportFilterService.DayBookObj.Daybook_TO_VNO ? this._reportFilterService.DayBookObj.Daybook_TO_VNO : 0,
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.DayBook_loadedTimes = this._reportFilterService.DayBook_loadedTimes + 1;
        }
    };
    DayBookReport.prototype.OnVoucherSelect = function () {
        var _this = this;
        this.showVoucherTable = true;
        if (this._reportFilterService.DayBookObj.DayBook_VTYPE == 'All' || this._reportFilterService.DayBookObj.DayBook_VTYPE == '%') {
            this.showVoucherTable = false;
            this._reportFilterService.DayBookObj.Daybook_MultipleVoucher = [];
        }
        var vouchername = this.voucherTypeList.filter(function (x) { return x.VOUCHER_ID == _this._reportFilterService.DayBookObj.DayBook_VTYPE; });
        // console.log("@@vouchername",vouchername)
        if (vouchername.length > 0) {
            this._reportFilterService.DayBookObj.DayBook_VTYPENAME = vouchername[0].VOUCHER_NAME;
        }
    };
    DayBookReport.prototype.addVoucherList = function () {
        var _this = this;
        var selectACList = this._reportFilterService.DayBookObj.Daybook_MultipleVoucher.filter(function (vcList) { return vcList.VOUCHER_ID == _this._reportFilterService.DayBookObj.DayBook_VTYPE; });
        if (this._reportFilterService.DayBookObj.DayBook_VTYPE === "" ||
            this._reportFilterService.DayBookObj.DayBook_VTYPE === null ||
            this._reportFilterService.DayBookObj.DayBook_VTYPE === undefined) {
            return;
        }
        if (selectACList.length === 0) {
            this._reportFilterService.DayBookObj.Daybook_MultipleVoucher.push({ VOUCHER_ID: this._reportFilterService.DayBookObj.DayBook_VTYPE, VOUCHER_NAME: this._reportFilterService.DayBookObj.DayBook_VTYPENAME });
        }
    };
    DayBookReport.prototype.deleteVoucher = function (index) {
        this._reportFilterService.DayBookObj.Daybook_MultipleVoucher.splice(index, 1);
        this._reportFilterService.SelectedVouchers = '';
    };
    return DayBookReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], DayBookReport.prototype, "reportdataEmit", void 0);
DayBookReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'day-book-report',
        template: __webpack_require__(1734),
        styles: [__webpack_require__(1163), __webpack_require__(120)],
    }),
    __param(8, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__["a" /* AuthService */], __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_5__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_5__angular_router__["ActivatedRoute"],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], __WEBPACK_IMPORTED_MODULE_7__common_popupLists_report_filter_report_filter_service__["a" /* ReportFilterService */], Object])
], DayBookReport);



/***/ }),

/***/ 1502:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_repositories__ = __webpack_require__(13);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DebitNoteRegisterReportComponent; });


var DebitNoteRegisterReportComponent = (function () {
    function DebitNoteRegisterReportComponent(masterService) {
        var _this = this;
        this.masterService = masterService;
        this.DebitNoteRegisterReport = {};
        this.divisionList = [];
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.DebitNoteRegisterReport.DATE1 = new Date().toJSON().split('T')[0];
        this.changeEntryDate(this.DebitNoteRegisterReport.DATE1, "AD");
        this.DebitNoteRegisterReport.DATE = new Date().toJSON().split('T')[0];
        this.changeEndDate(this.DebitNoteRegisterReport.DATE, "AD");
        this.masterService.getAllDivisions().subscribe(function (res) {
            _this.divisionList.push(res);
        });
    }
    DebitNoteRegisterReportComponent.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    DebitNoteRegisterReportComponent.prototype.DialogClosedResult = function (res) {
        this.reportdataEmit.emit({
            status: res, data: {
                reportname: 'Debit Note Register Report', reportparam: {
                    DATE1: this.DebitNoteRegisterReport.DATE1,
                    DATE2: this.DebitNoteRegisterReport.DATE,
                    DIV: this.DebitNoteRegisterReport.DIV,
                    COMPANYID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID
                }
            }
        });
    };
    DebitNoteRegisterReportComponent.prototype.divisionChanged = function () {
        this.DebitNoteRegisterReport.DIV = this.division.nativeElement.value;
    };
    DebitNoteRegisterReportComponent.prototype.hide = function () {
        this.DialogClosedResult("Error");
    };
    DebitNoteRegisterReportComponent.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this.DebitNoteRegisterReport.BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate);
            this.DebitNoteRegisterReport.DATE1 = this.masterService.toADDate(value);
        }
    };
    DebitNoteRegisterReportComponent.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this.DebitNoteRegisterReport.BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate);
            this.DebitNoteRegisterReport.DATE = this.masterService.toADDate(value);
        }
    };
    DebitNoteRegisterReportComponent.prototype.cancel = function () {
        this.DialogClosedResult("cancel");
    };
    DebitNoteRegisterReportComponent.prototype.preventInput = function ($event) {
        $event.preventDefault();
        return false;
    };
    return DebitNoteRegisterReportComponent;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('division'),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"])
], DebitNoteRegisterReportComponent.prototype, "division", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], DebitNoteRegisterReportComponent.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], DebitNoteRegisterReportComponent.prototype, "reportType", void 0);
DebitNoteRegisterReportComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'debitnote-register-report',
        template: __webpack_require__(1735),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_repositories__["a" /* MasterRepo */]])
], DebitNoteRegisterReportComponent);



/***/ }),

/***/ 1503:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_popupLists_report_filter_report_filter_service__ = __webpack_require__(555);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DebtorsReport; });









var DebtorsReport = (function () {
    function DebtorsReport(masterService, _authService, _reportFilterService, arouter, _ActivatedRoute, reportService, alertService, dialogref, data) {
        var _this = this;
        this.masterService = masterService;
        this._authService = _authService;
        this._reportFilterService = _reportFilterService;
        this.arouter = arouter;
        this._ActivatedRoute = _ActivatedRoute;
        this.reportService = reportService;
        this.alertService = alertService;
        this.dialogref = dialogref;
        this.data = data;
        // ReportParameters: any = <any>{};
        this.division = [];
        this.CostcenterList = [];
        this.instanceWiseRepName = 'Debtors Report';
        this.AreaList = [];
        this.PartyGroupList = [];
        this.PartyCategoryList = [];
        this.gridSalesmanListPopupSettings = new __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.userProfile = this._authService.getUserProfile();
        this.division = [];
        //let data: Array<IDivision> = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                //////console.log("div" + JSON.stringify(res));
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        this.masterService.getCostcenter().subscribe(function (res) {
            _this.CostcenterList = res;
        });
        this.masterService.getAreaList().subscribe(function (res) {
            _this.AreaList = res.result;
        });
        this.masterService.getPartyGroupList().subscribe(function (res) {
            _this.PartyGroupList = res.result;
        });
        this.masterService.getPartyCategoryList().subscribe(function (res) {
            _this.PartyCategoryList = res.result;
        });
        // this.masterService.getAccDivList();
    }
    DebtorsReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            var mode = params.mode;
            if (mode == "DRILL" && _this.reportService.drillParam.returnUrl && _this.reportService.drillParam.reportname == 'Debtors Report' && _this._reportFilterService.DebtorsReportObj.assignPrevioiusDate != true) {
                _this._reportFilterService.DebtorsReportObj.Debtors_DATE1 = _this.reportService.drillParam.reportparam.DATE1;
                _this._reportFilterService.DebtorsReportObj.Debtors_DATE2 = _this.reportService.drillParam.reportparam.DATE2;
                _this._reportFilterService.DebtorsReportObj.Debtors_DIV = _this.reportService.drillParam.reportparam.DIV;
                _this._reportFilterService.DebtorsReportObj.Debtors_CostCenter = _this.reportService.drillParam.reportparam.COSTCENTER;
            }
            else {
                if (_this._reportFilterService.DebtorsReportObj.assignPrevioiusDate != true) {
                    _this.masterService.getAccDivList();
                    _this._reportFilterService.DebtorsReportObj.Debtors_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                    if (_this.userProfile.CompanyInfo.ActualFY == _this.masterService.PhiscalObj.PhiscalID) {
                        _this._reportFilterService.DebtorsReportObj.Debtors_DATE2 = new Date().toJSON().split('T')[0];
                        _this.changeEndDate(_this._reportFilterService.DebtorsReportObj.Debtors_DATE2, "AD");
                    }
                    else {
                        _this._reportFilterService.DebtorsReportObj.Debtors_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                        _this.changeEndDate(_this._reportFilterService.DebtorsReportObj.Debtors_DATE2, "AD");
                    }
                    // this._reportFilterService.DebtorsReportObj.Debtors_DATE2 = new Date().toJSON().split('T')[0];
                    _this._reportFilterService.DebtorsReportObj.REPORTMODE = '0';
                    // this._reportFilterService.DebtorsReportObj.Debtors_DIV=this.masterService.userProfile.CompanyInfo.INITIAL;
                    _this.masterService.viewDivision.subscribe(function () {
                        if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                            _this._reportFilterService.DebtorsReportObj.Debtors_DIV = '%';
                        }
                        else {
                            if (_this.masterService.userSetting.userwisedivision == 1 && _this.division.length == 1) {
                                _this._reportFilterService.DebtorsReportObj.Debtors_DIV = _this.division[0].INITIAL;
                            }
                            else {
                                _this._reportFilterService.DebtorsReportObj.Debtors_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                            }
                        }
                    });
                    _this._reportFilterService.DebtorsReportObj.Debtors_CostCenter = '%';
                    _this._reportFilterService.DebtorsReportObj.DebtorsReport_AreaWise = 0;
                    _this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyGroup = '%';
                    _this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyCategory = '%';
                }
                if (params.instancename) {
                    // ////console.log("@@[Debtors Report0]",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                    _this._reportFilterService.DebtorsReportObj.Debtors_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                    _this._reportFilterService.DebtorsReportObj.Debtors_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                    _this._reportFilterService.DebtorsReportObj.Debtors_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
                    _this._reportFilterService.DebtorsReportObj.Debtors_CostCenter = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.COSTCENTER;
                    _this._reportFilterService.DebtorsReportObj.GROUPBY = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.GROUPBY;
                    _this._reportFilterService.DebtorsReportObj.Debtors_OPNINGBLONLY = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.OPNINGBLONLY;
                    _this._reportFilterService.DebtorsReportObj.REPORTMODE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.REPORTMODE;
                    _this._reportFilterService.DebtorsReportObj.SHOWDPARTYDETAIL = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWDPARTYDETAIL;
                    _this._reportFilterService.DebtorsReportObj.Debtors_INCLUDEPOSTEDTRANSACTION = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.Debtors_INCLUDEPOSTEDTRANSACTION;
                    _this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyCategory = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.PARTYCATEGORY;
                    _this._reportFilterService.DebtorsReportObj.Debtors_SHOWBRANCHBL = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWBRANCHBL;
                    _this._reportFilterService.DebtorsReportObj.DebtorsReport_INCLUDEPOSTDATE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.IncPostDatedTransaction;
                }
            }
        });
        this.changeEntryDate(this._reportFilterService.DebtorsReportObj.Debtors_DATE1, "AD");
        this.changeEndDate(this._reportFilterService.DebtorsReportObj.Debtors_DATE2, "AD");
    };
    DebtorsReport.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.DebtorsReportObj.Debtors_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.DebtorsReportObj.Debtors_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
        }
    };
    DebtorsReport.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.DebtorsReportObj.Debtors_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_2);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.DebtorsReportObj.Debtors_DATE2 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
        }
    };
    DebtorsReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    DebtorsReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    DebtorsReport.prototype.DialogClosedResult = function (res) {
        var _this = this;
        this._reportFilterService.DebtorsReportObj.Debtors_DIV = (this._reportFilterService.DebtorsReportObj.Debtors_DIV == null || this._reportFilterService.DebtorsReportObj.Debtors_DIV == "") ? "%" : this._reportFilterService.DebtorsReportObj.Debtors_DIV;
        var multipleReportFormateName = '';
        if (this._reportFilterService.DebtorsReportObj.SHOWDPARTYDETAIL == 1) {
            multipleReportFormateName = 'Debtors Report_1';
        }
        else {
            multipleReportFormateName = 'Debtors Report';
        }
        if (this._reportFilterService.DebtorsReportObj.Debtors_DIV && this._reportFilterService.DebtorsReportObj.Debtors_DIV == '%') {
            this._reportFilterService.DebtorsReportObj.Debtors_DIVISIONNAME = 'All';
        }
        else if (this._reportFilterService.DebtorsReportObj.Debtors_DIV && this._reportFilterService.DebtorsReportObj.Debtors_DIV != '%') {
            var abc = this.division.filter(function (x) { return x.INITIAL == _this._reportFilterService.DebtorsReportObj.Debtors_DIV; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.DebtorsReportObj.Debtors_DIVISIONNAME = abc[0].NAME;
            }
            else {
                this._reportFilterService.DebtorsReportObj.Debtors_DIVISIONNAME = '';
            }
        }
        else {
            this._reportFilterService.DebtorsReportObj.Debtors_DIVISIONNAME = '';
        }
        if (this._reportFilterService.DebtorsReportObj.Debtors_CostCenter && this._reportFilterService.DebtorsReportObj.Debtors_CostCenter == '%') {
            this._reportFilterService.DebtorsReportObj.Debtors_COSTCENTERDISPLAYNAME = '';
        }
        else if (this._reportFilterService.DebtorsReportObj.Debtors_CostCenter != '%') {
            var abc = this.CostcenterList.filter(function (x) { return x.CCID == _this._reportFilterService.DebtorsReportObj.Debtors_CostCenter; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.DebtorsReportObj.Debtors_COSTCENTERDISPLAYNAME = abc[0].COSTCENTERNAME;
            }
            else {
                this._reportFilterService.DebtorsReportObj.Debtors_COSTCENTERDISPLAYNAME = '';
            }
        }
        else {
            this._reportFilterService.DebtorsReportObj.Debtors_COSTCENTERDISPLAYNAME = '';
        }
        if (this._reportFilterService.DebtorsReportObj.DebtorsReport_AreaWise && this._reportFilterService.DebtorsReportObj.DebtorsReport_AreaWise == 0) {
            this._reportFilterService.DebtorsReportObj.DebtorsReport_AreaWiseDisplayName = '';
        }
        else if (this._reportFilterService.DebtorsReportObj.DebtorsReport_AreaWise != 0) {
            var abc = this.AreaList.filter(function (x) { return x.AREA_ID == _this._reportFilterService.DebtorsReportObj.DebtorsReport_AreaWise; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.DebtorsReportObj.DebtorsReport_AreaWiseDisplayName = abc[0].AREA_NAME;
            }
            else {
                this._reportFilterService.DebtorsReportObj.DebtorsReport_AreaWiseDisplayName = '';
            }
        }
        else {
            this._reportFilterService.DebtorsReportObj.DebtorsReport_AreaWiseDisplayName = '';
        }
        if (this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyGroup && this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyGroup == 0) {
            this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyGroupDisplayName = '';
        }
        else if (this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyGroup != 0) {
            var abc = this.PartyGroupList.filter(function (x) { return x.ACID == _this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyGroup; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyGroupDisplayName = abc[0].ACNAME;
            }
            else {
                this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyGroupDisplayName = '';
            }
        }
        else {
            this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyGroupDisplayName = '';
        }
        if (this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyCategory && this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyCategory == 0) {
            this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyCategoryDisplayName = '';
        }
        else if (this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyCategory != 0) {
            var abc = this.PartyCategoryList.filter(function (x) { return x.CATEGORY_ID == _this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyCategory; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyCategoryDisplayName = abc[0].CATEGORYNAME;
            }
            else {
                this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyCategoryDisplayName = '';
            }
        }
        else {
            this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyCategoryDisplayName = '';
        }
        if (res == "ok") {
            this._reportFilterService.DebtorsReportObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.loadedTimesD == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Debtors Report',
                    activeurlpath: this.arouter.url,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.loadedTimesD,
                    activerurlpath2: activeurlpath2,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Debtors Report' + '_' + this._reportFilterService.loadedTimesD,
                    activeurlpath: this.arouter.url,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.loadedTimesD,
                    activerurlpath2: activeurlpath2,
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: 'Debtors Report',
                reportname: multipleReportFormateName, instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.loadedTimesD, reportparam: {
                    DATE1: this._reportFilterService.DebtorsReportObj.Debtors_DATE1,
                    DATE2: this._reportFilterService.DebtorsReportObj.Debtors_DATE2,
                    BSDATE1: this._reportFilterService.DebtorsReportObj.Debtors_BSDATE1,
                    BSDATE2: this._reportFilterService.DebtorsReportObj.Debtors_BSDATE2,
                    DIV: this._reportFilterService.DebtorsReportObj.Debtors_DIV,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    COMID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    CostCenter: this._reportFilterService.DebtorsReportObj.Debtors_CostCenter,
                    SHOWDPARTYDETAIL: this._reportFilterService.DebtorsReportObj.SHOWDPARTYDETAIL,
                    OPNINGBLONLY: this._reportFilterService.DebtorsReportObj.Debtors_OPNINGBLONLY,
                    REPORTMODE: this._reportFilterService.DebtorsReportObj.REPORTMODE,
                    GROUPBY: this._reportFilterService.DebtorsReportObj.GROUPBY ? this._reportFilterService.DebtorsReportObj.GROUPBY : 0,
                    COSTCENTER: this._reportFilterService.DebtorsReportObj.Debtors_CostCenter,
                    DIVISIONNAME: this._reportFilterService.DebtorsReportObj.Debtors_DIVISIONNAME ? this._reportFilterService.DebtorsReportObj.Debtors_DIVISIONNAME : '',
                    COSTCENTERDISPLAYNAME: this._reportFilterService.DebtorsReportObj.Debtors_COSTCENTERDISPLAYNAME ? this._reportFilterService.DebtorsReportObj.Debtors_COSTCENTERDISPLAYNAME : '',
                    AREA: this._reportFilterService.DebtorsReportObj.DebtorsReport_AreaWise ? this._reportFilterService.DebtorsReportObj.DebtorsReport_AreaWise : 0,
                    PARTYGROUP: this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyGroup ? this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyGroup : '%',
                    SHOWBRANCHBL: this._reportFilterService.DebtorsReportObj.Debtors_SHOWBRANCHBL,
                    PARTYCATEGORY: this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyCategory ? this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyCategory : '%',
                    AREAWISEDISPLAYNAME: this._reportFilterService.DebtorsReportObj.DebtorsReport_AreaWiseDisplayName ? this._reportFilterService.DebtorsReportObj.DebtorsReport_AreaWiseDisplayName : '',
                    PARTYGROUPDISPLAYNAME: this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyGroupDisplayName ? this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyGroupDisplayName : '',
                    PARTYCATEGORYDISPLAYNAME: this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyCategoryDisplayName ? this._reportFilterService.DebtorsReportObj.DebtorsReport_PartyCategoryDisplayName : '',
                    //IncPostDatedTransaction :this._reportFilterService.DebtorsReportObj.DebtorsReport_INCLUDEPOSTDATE ? this._reportFilterService.DebtorsReportObj.DebtorsReport_INCLUDEPOSTDATE:0,
                    INCLUDEPOSTEDTRANSACTION: this._reportFilterService.DebtorsReportObj.Debtors_INCLUDEPOSTEDTRANSACTION ? this._reportFilterService.DebtorsReportObj.Debtors_INCLUDEPOSTEDTRANSACTION : 0,
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.loadedTimesD = this._reportFilterService.loadedTimesD + 1;
        }
    };
    DebtorsReport.prototype.checkValueForOpeningDebtors = function () {
        if (this._reportFilterService.DebtorsReportObj.Debtors_OPNINGBLONLY == true) {
            this._reportFilterService.DebtorsReportObj.Debtors_OPNINGBLONLY = 1;
            this.date1 = this._reportFilterService.DebtorsReportObj.Debtors_DATE1;
            this.date2 = this._reportFilterService.DebtorsReportObj.Debtors_DATE2;
            this._reportFilterService.DebtorsReportObj.Debtors_DATE1 = this.masterService.PhiscalObj.BeginDate.split('T')[0];
            this._reportFilterService.DebtorsReportObj.Debtors_DATE2 = this.masterService.PhiscalObj.EndDate.split('T')[0];
            this.changeEntryDate(this._reportFilterService.DebtorsReportObj.Debtors_DATE1, "AD");
            this.changeEndDate(this._reportFilterService.DebtorsReportObj.Debtors_DATE2, "AD");
        }
        else {
            this._reportFilterService.DebtorsReportObj.Debtors_OPNINGBLONLY = 0;
            this._reportFilterService.DebtorsReportObj.Debtors_DATE1 = this.date1 ? this.date1 : this._reportFilterService.DebtorsReportObj.Debtors_DATE1;
            this._reportFilterService.DebtorsReportObj.Debtors_DATE2 = this.date2 ? this.date2 : this._reportFilterService.DebtorsReportObj.Debtors_DATE2;
            this.changeEntryDate(this._reportFilterService.DebtorsReportObj.Debtors_DATE1, "AD");
            this.changeEndDate(this._reportFilterService.DebtorsReportObj.Debtors_DATE2, "AD");
        }
    };
    DebtorsReport.prototype.showSalesmanList = function () {
        this.gridSalesmanListPopupSettings = {
            title: "Salesman",
            apiEndpoints: "/getAllSalesmanList",
            defaultFilterIndex: 0,
            columns: [
                {
                    key: "NAME",
                    title: "Salesman",
                    hidden: false,
                    noSearch: false
                }
            ]
        };
        this.genericeSalesManList.show();
    };
    DebtorsReport.prototype.onSalesManSelect = function (event) {
        //console.log("@@EVENT",event);
        this._reportFilterService.DebtorsReportObj.Debtors_salesman = event.NAME;
        this._reportFilterService.DebtorsReportObj.Debtors_salesman_ID = event.SALESMANID;
    };
    return DebtorsReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericeSalesManList"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], DebtorsReport.prototype, "genericeSalesManList", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], DebtorsReport.prototype, "reportdataEmit", void 0);
DebtorsReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'result-debtorsreport-dialog',
        template: __webpack_require__(1736),
        styles: [__webpack_require__(1163), __webpack_require__(120)],
    }),
    __param(8, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__["a" /* AuthService */],
        __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_5__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_5__angular_router__["ActivatedRoute"],
        __WEBPACK_IMPORTED_MODULE_6__common_popupLists_report_filter_report_filter_service__["a" /* ReportFilterService */], __WEBPACK_IMPORTED_MODULE_7__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object])
], DebtorsReport);



/***/ }),

/***/ 1504:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_repositories__ = __webpack_require__(13);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DueVoucherReport; });




var DueVoucherReport = (function () {
    function DueVoucherReport(masterService, dialogref, data) {
        var _this = this;
        this.masterService = masterService;
        this.dialogref = dialogref;
        this.data = data;
        this.ReportParameters = {};
        this.cusSupList = [];
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        //Autocomplete begins
        this.dropListItem = function (keyword) {
            return new __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__["Observable"](function (observer) {
                _this.masterService.getCusSup().map(function (data) {
                    return data.filter(function (ac) { return ac.ACNAME.toUpperCase().indexOf(keyword.toUpperCase()) > -1; });
                }).subscribe(function (res) { observer.next(res); });
            }).share();
        };
        this.ACCNAME = '';
        this.ACCODE = '';
        this.ACID = '';
        this.PTYPE = '';
        //-------Default value on page load
        this.ReportParameters.DATE1 = new Date().toJSON().split('T')[0];
        this.changestartDate(this.ReportParameters.DATE1, 'AD');
        this.ReportParameters.ROPTION = "1";
        // this.masterService.getCusSup().subscribe(res => {
        //     //console.log(res);
        //     //console.log(JSON.stringify(res));
        // });
    }
    DueVoucherReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    DueVoucherReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    DueVoucherReport.prototype.DialogClosedResult = function (res) {
        this.ReportParameters.PARTY = (this.ACID == null || this.ACID == "") ? "%" : this.ACID;
        //alert("party--"+this.ReportParameters.PARTY + "ptype--" + this.PTYPE);
        if (this.PTYPE == "V") {
            this.ReportParameters.FLG = "1";
        }
        else {
            this.ReportParameters.FLG = "2";
        }
        this.reportdataEmit.emit({ status: res, data: { reportname: 'Due Voucher Report', reportparam: this.ReportParameters } });
    };
    DueVoucherReport.prototype.changestartDate = function (value, format) {
        try {
            var adbs = __webpack_require__(19);
            if (format == "AD") {
                var adDate = (value.replace("-", "/")).replace("-", "/");
                var bsDate = adbs.ad2bs(adDate);
                this.ReportParameters.BSDATE1 = this.masterService.toBSDate(value);
            }
            else if (format == "BS") {
                var bsDate = (value.replace("-", "/")).replace("-", "/");
                var adDate = adbs.bs2ad(bsDate);
                this.ReportParameters.DATE1 = this.masterService.toADDate(value);
            }
        }
        catch (e) { }
    };
    DueVoucherReport.prototype.accodeChanged = function (value) {
        var item = this.masterService.accountList.find(function (x) { return x.ACCODE == value; });
        //console.log({valueType: value,found : item ,items : this.masterService.accountList});
        this.ACCNAME = '';
        if (item) {
            value = item.ACNAME;
            //console.log(value + "****");
            this.ACCNAME = value;
        }
    };
    DueVoucherReport.prototype.itemChanged = function (value) {
        //console.log({itemChangedValue: value});
        if (typeof (value) === "object") {
            this.ACCNAME = value.ACNAME;
            this.ACCODE = value.ACCODE;
            this.ACID = value.ACID;
            this.PTYPE = value.PType;
        }
    };
    return DueVoucherReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], DueVoucherReport.prototype, "reportdataEmit", void 0);
DueVoucherReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'result-duevoucherreport-dialog',
        template: __webpack_require__(1737),
        styles: [__webpack_require__(1163), __webpack_require__(120)]
    }),
    __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_3__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object])
], DueVoucherReport);



/***/ }),

/***/ 1505:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_moment__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_moment__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_Transaction_Components_transaction_service__ = __webpack_require__(7);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return GstPurchaseSummary; });




var GstPurchaseSummary = (function () {
    function GstPurchaseSummary(masterService, _trnMainService) {
        this.masterService = masterService;
        this._trnMainService = _trnMainService;
        this.isActive = false;
        this.accountpayableObj = {
            reportname: "",
            reportparam: {
                DATE1: "",
                DATE2: ""
            }
        };
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.alwaysShowCalendars = true;
        this.ranges = {
            'Today': [__WEBPACK_IMPORTED_MODULE_2_moment__(), __WEBPACK_IMPORTED_MODULE_2_moment__()],
            'Yesterday': [__WEBPACK_IMPORTED_MODULE_2_moment__().subtract(1, 'days'), __WEBPACK_IMPORTED_MODULE_2_moment__().subtract(1, 'days')],
            'Last 7 Days': [__WEBPACK_IMPORTED_MODULE_2_moment__().subtract(6, 'days'), __WEBPACK_IMPORTED_MODULE_2_moment__()],
            'Last 30 Days': [__WEBPACK_IMPORTED_MODULE_2_moment__().subtract(29, 'days'), __WEBPACK_IMPORTED_MODULE_2_moment__()],
            'This Month': [__WEBPACK_IMPORTED_MODULE_2_moment__().startOf('month'), __WEBPACK_IMPORTED_MODULE_2_moment__().endOf('month')],
            'Last Month': [__WEBPACK_IMPORTED_MODULE_2_moment__().subtract(1, 'month').startOf('month'), __WEBPACK_IMPORTED_MODULE_2_moment__().subtract(1, 'month').endOf('month')],
            'Financial Year': [__WEBPACK_IMPORTED_MODULE_2_moment__().set('date', 1).set('month', 3), __WEBPACK_IMPORTED_MODULE_2_moment__().endOf('month').set('month', 2).add(1, 'year')],
        };
        this.locale = {
            format: 'DD/MM/YYYY',
            direction: 'ltr',
            weekLabel: 'W',
            separator: ' - ',
            cancelLabel: 'Cancel',
            applyLabel: 'Okay',
            clearLabel: 'Clear',
            customRangeLabel: 'Custom Range',
            daysOfWeek: __WEBPACK_IMPORTED_MODULE_2_moment__["weekdaysMin"](),
            monthNames: __WEBPACK_IMPORTED_MODULE_2_moment__["monthsShort"](),
            firstDay: 0 // first day is monday
        };
    }
    GstPurchaseSummary.prototype.onload = function () {
        this.accountpayableObj.reportname = 'GST PURCHASE SUMMARY';
        this.reportdataEmit.emit({ status: "ok", data: this.accountpayableObj });
    };
    GstPurchaseSummary.prototype.closeReportBox = function () {
        this.reportdataEmit.emit({ status: "Error!", data: this.accountpayableObj });
    };
    GstPurchaseSummary.prototype.dateChanged = function (date) {
        this.accountpayableObj.reportparam.DATE1 = __WEBPACK_IMPORTED_MODULE_2_moment__(this.selectedDate.startDate).format('MM-DD-YYYY');
        this.accountpayableObj.reportparam.DATE2 = __WEBPACK_IMPORTED_MODULE_2_moment__(this.selectedDate.endDate).format('MM-DD-YYYY');
    };
    GstPurchaseSummary.prototype.preventInput = function ($event) {
        $event.preventDefault();
        return false;
    };
    return GstPurchaseSummary;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], GstPurchaseSummary.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], GstPurchaseSummary.prototype, "reportType", void 0);
GstPurchaseSummary = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'gst-purchase-summary',
        template: __webpack_require__(1738),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
        providers: [__WEBPACK_IMPORTED_MODULE_3__common_Transaction_Components_transaction_service__["a" /* TransactionService */]]
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_3__common_Transaction_Components_transaction_service__["a" /* TransactionService */]])
], GstPurchaseSummary);



/***/ }),

/***/ 1506:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_moment__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_moment__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_Transaction_Components_transaction_service__ = __webpack_require__(7);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return GstSalesSummary; });




var GstSalesSummary = (function () {
    function GstSalesSummary(masterService, _trnMainService) {
        this.masterService = masterService;
        this._trnMainService = _trnMainService;
        this.isActive = false;
        this.accountpayableObj = {
            reportname: "",
            reportparam: {
                DATE1: "",
                DATE2: ""
            }
        };
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.alwaysShowCalendars = true;
        this.ranges = {
            'Today': [__WEBPACK_IMPORTED_MODULE_2_moment__(), __WEBPACK_IMPORTED_MODULE_2_moment__()],
            'Yesterday': [__WEBPACK_IMPORTED_MODULE_2_moment__().subtract(1, 'days'), __WEBPACK_IMPORTED_MODULE_2_moment__().subtract(1, 'days')],
            'Last 7 Days': [__WEBPACK_IMPORTED_MODULE_2_moment__().subtract(6, 'days'), __WEBPACK_IMPORTED_MODULE_2_moment__()],
            'Last 30 Days': [__WEBPACK_IMPORTED_MODULE_2_moment__().subtract(29, 'days'), __WEBPACK_IMPORTED_MODULE_2_moment__()],
            'This Month': [__WEBPACK_IMPORTED_MODULE_2_moment__().startOf('month'), __WEBPACK_IMPORTED_MODULE_2_moment__().endOf('month')],
            'Last Month': [__WEBPACK_IMPORTED_MODULE_2_moment__().subtract(1, 'month').startOf('month'), __WEBPACK_IMPORTED_MODULE_2_moment__().subtract(1, 'month').endOf('month')],
            'Financial Year': [__WEBPACK_IMPORTED_MODULE_2_moment__().set('date', 1).set('month', 3), __WEBPACK_IMPORTED_MODULE_2_moment__().endOf('month').set('month', 2).add(1, 'year')],
        };
        this.locale = {
            format: 'DD/MM/YYYY',
            direction: 'ltr',
            weekLabel: 'W',
            separator: ' - ',
            cancelLabel: 'Cancel',
            applyLabel: 'Okay',
            clearLabel: 'Clear',
            customRangeLabel: 'Custom Range',
            daysOfWeek: __WEBPACK_IMPORTED_MODULE_2_moment__["weekdaysMin"](),
            monthNames: __WEBPACK_IMPORTED_MODULE_2_moment__["monthsShort"](),
            firstDay: 0 // first day is monday
        };
    }
    GstSalesSummary.prototype.onload = function () {
        this.accountpayableObj.reportname = 'GST SALES SUMMARY';
        this.reportdataEmit.emit({ status: "ok", data: this.accountpayableObj });
    };
    GstSalesSummary.prototype.closeReportBox = function () {
        this.reportdataEmit.emit({ status: "Error!", data: this.accountpayableObj });
    };
    GstSalesSummary.prototype.dateChanged = function (date) {
        this.accountpayableObj.reportparam.DATE1 = __WEBPACK_IMPORTED_MODULE_2_moment__(this.selectedDate.startDate).format('MM-DD-YYYY');
        this.accountpayableObj.reportparam.DATE2 = __WEBPACK_IMPORTED_MODULE_2_moment__(this.selectedDate.endDate).format('MM-DD-YYYY');
    };
    GstSalesSummary.prototype.preventInput = function ($event) {
        $event.preventDefault();
        return false;
    };
    return GstSalesSummary;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], GstSalesSummary.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], GstSalesSummary.prototype, "reportType", void 0);
GstSalesSummary = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'gst-sales-summary',
        template: __webpack_require__(1739),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
        providers: [__WEBPACK_IMPORTED_MODULE_3__common_Transaction_Components_transaction_service__["a" /* TransactionService */]]
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_3__common_Transaction_Components_transaction_service__["a" /* TransactionService */]])
], GstSalesSummary);



/***/ }),

/***/ 1507:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return IncomeTaxDepreciationReport; });






var IncomeTaxDepreciationReport = (function () {
    function IncomeTaxDepreciationReport(masterService, arouter, _authService, _ActivatedRoute, _reportFilterService, alertService) {
        var _this = this;
        this.masterService = masterService;
        this.arouter = arouter;
        this._authService = _authService;
        this._ActivatedRoute = _ActivatedRoute;
        this._reportFilterService = _reportFilterService;
        this.alertService = alertService;
        this.ReportParameters = {};
        this.instanceWiseRepName = 'DEPRECIATION REPORT AS PER INCOME TAX';
        this.REPORTOPTION = [
            { Mode: '1', ReportOptionName: 'Pool Wise' },
            { Mode: '2', ReportOptionName: 'Block Wise' }
        ];
        this.poolName = [];
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this._reportFilterService.IncomeTaxObj.Reportnameis = "DEPRECIATION REPORT AS PER INCOME TAX";
        this._reportFilterService.IncomeTaxObj.IncomeTax_REPORTOPTION = '1';
        this.poolName = [];
        this.masterService.getPoolName().subscribe(function (res) {
            _this.poolName = res;
        });
    }
    IncomeTaxDepreciationReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            _this._reportFilterService.IncomeTaxObj.IncomeTax_REPORTTYPE = '1';
            if (params.instancename) {
                _this._reportFilterService.IncomeTaxObj.IncomeTax_REPORTOPTION = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.MODE;
                _this._reportFilterService.IncomeTaxObj.IncomeTax_POOLNAME = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.POOL;
                _this._reportFilterService.IncomeTaxObj.IncomeTax_REPORTTYPE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SUMMARY;
            }
        });
    };
    IncomeTaxDepreciationReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    IncomeTaxDepreciationReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    IncomeTaxDepreciationReport.prototype.DialogClosedResult = function (res) {
        var multipleReportFormateName = '';
        if (this._reportFilterService.IncomeTaxObj.IncomeTax_REPORTOPTION == '1') {
            multipleReportFormateName = 'DEPRECIATION REPORT AS PER INCOME TAX_1';
        }
        else if (this._reportFilterService.IncomeTaxObj.IncomeTax_REPORTOPTION == '2') {
            multipleReportFormateName = 'DEPRECIATION REPORT AS PER INCOME TAX_2';
        }
        else {
            multipleReportFormateName = 'DEPRECIATION REPORT AS PER INCOME TAX';
        }
        if (this._reportFilterService.IncomeTaxObj.IncomeTax_TAXWISE == 1) {
            multipleReportFormateName = 'DEPRECIATION REPORT AS PER INCOME TAX_2';
        }
        else {
            if (this._reportFilterService.IncomeTaxObj.IncomeTax_REPORTTYPE == "0") {
                multipleReportFormateName = 'DEPRECIATION REPORT AS PER INCOME TAX';
            }
            else if (this._reportFilterService.IncomeTaxObj.IncomeTax_REPORTTYPE == "1") {
                multipleReportFormateName = 'DEPRECIATION REPORT AS PER INCOME TAX_1';
            }
        }
        if (res == "ok") {
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.IncomeTax_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'DEPRECIATION REPORT AS PER INCOME TAX',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.IncomeTax_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'DEPRECIATION REPORT AS PER INCOME TAX' + '_' + this._reportFilterService.IncomeTax_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.IncomeTax_loadedTimes,
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: 'DEPRECIATION REPORT (AS PER INCOME TAX)',
                reportname: multipleReportFormateName,
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.IncomeTax_loadedTimes,
                reportparam: {
                    MODE: this._reportFilterService.IncomeTaxObj.IncomeTax_REPORTOPTION,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    POOL: this._reportFilterService.IncomeTaxObj.IncomeTax_POOLNAME ? this._reportFilterService.IncomeTaxObj.IncomeTax_POOLNAME : '%',
                    SUMMARY: this._reportFilterService.IncomeTaxObj.IncomeTax_REPORTTYPE,
                    TAXWISE: this._reportFilterService.IncomeTaxObj.IncomeTax_TAXWISE ? this._reportFilterService.IncomeTaxObj.IncomeTax_TAXWISE : 0
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.IncomeTax_loadedTimes = this._reportFilterService.IncomeTax_loadedTimes + 1;
        }
    };
    IncomeTaxDepreciationReport.prototype.checkValue = function () {
        if (this._reportFilterService.IncomeTaxObj.IncomeTax_TAXWISE == true) {
            this._reportFilterService.IncomeTaxObj.IncomeTax_TAXWISE = 1;
        }
    };
    return IncomeTaxDepreciationReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], IncomeTaxDepreciationReport.prototype, "reportdataEmit", void 0);
IncomeTaxDepreciationReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'incometax-depreciation-report',
        template: __webpack_require__(1740),
        styles: [__webpack_require__(1163), __webpack_require__(120)],
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_1__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_4__common_services_permission_authService_service__["a" /* AuthService */], __WEBPACK_IMPORTED_MODULE_1__angular_router__["ActivatedRoute"], __WEBPACK_IMPORTED_MODULE_5__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_3__common_services_alert_alert_service__["a" /* AlertService */]])
], IncomeTaxDepreciationReport);



/***/ }),

/***/ 1508:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return JournalBook; });



var JournalBook = (function () {
    function JournalBook(masterService, dialogref, data) {
        var _this = this;
        this.masterService = masterService;
        this.dialogref = dialogref;
        this.data = data;
        this.ReportParameters = {};
        this.division = [];
        this.aclist = [];
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        //-----Default value on page load
        this.ReportParameters.DATE1 = new Date().toJSON().split('T')[0];
        this.changestartDate(this.ReportParameters.DATE1, 'AD');
        this.ReportParameters.DATE2 = new Date().toJSON().split('T')[0];
        this.changeEndDate(this.ReportParameters.DATE2, 'AD');
        this.ReportParameters.OPT_REPMODE = "0";
        this.ReportParameters.VNO1 = "0";
        this.ReportParameters.VNO2 = "0";
        this.ReportParameters.DIVISION = "%";
        //---------------
        this.division = [];
        this.masterService.getAllDivisions()
            .subscribe(function (res) {
            //////console.log("div" + JSON.stringify(res));
            _this.division.push(res);
        }, function (error) {
            _this.masterService.resolveError(error, "divisions - getDivisions");
        });
        this.aclist = [];
        this.masterService.getAcList()
            .subscribe(function (res) {
            _this.aclist.push(res);
        });
    }
    JournalBook.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    JournalBook.prototype.closeReportBox = function () {
        this.DialogClosedResult("error");
    };
    JournalBook.prototype.DialogClosedResult = function (res) {
        this.ReportParameters.DIVISION = (this.ReportParameters.DIVISION == null || this.ReportParameters.DIVISION == "") ? "%" : this.ReportParameters.DIVISION;
        this.ReportParameters.SERIES = "%";
        this.ReportParameters.CCENTER = "%";
        this.reportdataEmit.emit({ status: res, data: { reportname: 'Journal Book', reportparam: this.ReportParameters } });
    };
    JournalBook.prototype.changestartDate = function (value, format) {
        try {
            var adbs = __webpack_require__(19);
            if (format == "AD") {
                var adDate = (value.replace("-", "/")).replace("-", "/");
                var bsDate = adbs.ad2bs(adDate);
                this.ReportParameters.BSDATE1 = this.masterService.toBSDate(value);
            }
            else if (format == "BS") {
                var bsDate = (value.replace("-", "/")).replace("-", "/");
                var adDate = adbs.bs2ad(bsDate);
                this.ReportParameters.DATE1 = this.masterService.toADDate(value);
            }
        }
        catch (e) { }
    };
    JournalBook.prototype.changeEndDate = function (value, format) {
        try {
            var adbs = __webpack_require__(19);
            if (format == "AD") {
                var adDate = (value.replace("-", "/")).replace("-", "/");
                var bsDate = adbs.ad2bs(adDate);
                this.ReportParameters.BSDATE2 = this.masterService.toBSDate(value);
            }
            else if (format == "BS") {
                var bsDate = (value.replace("-", "/")).replace("-", "/");
                var adDate = adbs.bs2ad(bsDate);
                this.ReportParameters.DATE2 = this.masterService.toADDate(value);
            }
        }
        catch (e) { }
    };
    return JournalBook;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], JournalBook.prototype, "reportdataEmit", void 0);
JournalBook = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'result-journalbook-dialog',
        //     template:`
        //         <div class="modal-dialog modal-md">
        //         <div class="modal-content">
        //         <div class="modal-footer">
        //         <input type="text" style="height:25px;width:100%"   [(ngModel)]="ReportParameters.input1"/>
        //         <input type="text" style="height:25px;width:100%"  [(ngModel)]="ReportParameters.input2"/>
        //         <input type="text" style="height:25px;width:100%"   [(ngModel)]="ReportParameters.input3"/>
        //         <input type="text" style="height:25px;width:100%"   [(ngModel)]="ReportParameters.input1"/>
        //         <input type="text" style="height:25px;width:100%"  [(ngModel)]="ReportParameters.input2"/>
        //         <input type="text" style="height:25px;width:100%"   [(ngModel)]="ReportParameters.input3"/>
        //         <button class="btn btn-info confirm-btn" type="button"  (click)=onload()>RUN</button>
        //         </div>
        //         </div>
        //         </div>
        // `
        template: __webpack_require__(1741),
        styles: [__webpack_require__(1163), __webpack_require__(120)]
    }),
    __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object])
], JournalBook);



/***/ }),

/***/ 1509:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_services_permission__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LocalPurchaseCostAllocationReport; });








var LocalPurchaseCostAllocationReport = (function () {
    function LocalPurchaseCostAllocationReport(masterService, alertService, _authService, arouter, dialogref, data, _reportFilterService, _ActivatedRoute) {
        this.masterService = masterService;
        this.alertService = alertService;
        this._authService = _authService;
        this.arouter = arouter;
        this.dialogref = dialogref;
        this.data = data;
        this._reportFilterService = _reportFilterService;
        this._ActivatedRoute = _ActivatedRoute;
        this.instanceWiseRepName = 'Local Purchase Cost Allocation Report';
        this.loadInitially = true;
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.gridPopupSettingsForAccountList = new __WEBPACK_IMPORTED_MODULE_3__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridPopupSettingsForLocalPurchasePIVoucher = new __WEBPACK_IMPORTED_MODULE_3__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridCPVoucherPopupSettings = new __WEBPACK_IMPORTED_MODULE_3__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
    }
    LocalPurchaseCostAllocationReport.prototype.ngOnInit = function () {
        if (this._reportFilterService.LocalPurchaseCostAllocationObj.assignPrevioiusDate != true) {
            this._reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_REPORTMODE = '0';
        }
    };
    LocalPurchaseCostAllocationReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    LocalPurchaseCostAllocationReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    LocalPurchaseCostAllocationReport.prototype.DialogClosedResult = function (res) {
        if (this._reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_ACCNAME == "" ||
            this._reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_ACCNAME == null ||
            this._reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_ACCNAME == undefined) {
            this._reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_ACID = '%';
        }
        if (res == "ok") {
            this._reportFilterService.LocalPurchaseCostAllocationObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.LocalPurchaseCostAlloc_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Local Purchase Cost Allocation Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.LocalPurchaseCostAlloc_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Local Purchase Cost Allocation Report' + '_' + this._reportFilterService.LocalPurchaseCostAlloc_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.LocalPurchaseCostAlloc_loadedTimes,
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: 'Local Purchase Cost Allocation Report',
                reportname: 'Local Purchase Cost Allocation Report',
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.LocalPurchaseCostAlloc_loadedTimes,
                reportparam: {
                    REPORTOPTIONDISPLAYNAME: this._reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_REPORTOPTIONDISPLAYNAME ? this._reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_REPORTOPTIONDISPLAYNAME : '',
                    COMPANYID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    REPORTMODE: this._reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_REPORTMODE ? parseInt(this._reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_REPORTMODE) : 0,
                    ACID: this._reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_ACID ? this._reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_ACID : '%',
                    ACNAME: this._reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_ACCNAME ? this._reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_ACCNAME : '',
                    PIVNO: this._reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_PI_VOUCHERNO ? this._reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_PI_VOUCHERNO : '%',
                    REFVNO: this._reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_CAPITALPURCHASE_VCHRNO ? this._reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_CAPITALPURCHASE_VCHRNO : '%',
                }
            }
        });
        this._reportFilterService.LocalPurchaseCostAlloc_loadedTimes = this._reportFilterService.LocalPurchaseCostAlloc_loadedTimes + 1;
    };
    LocalPurchaseCostAllocationReport.prototype.AccountEnterClicked = function () {
        this.gridPopupSettingsForAccountList = {
            title: "Account List",
            apiEndpoints: '/getACIDForLocalPIReport',
            defaultFilterIndex: 0,
            columns: [
                {
                    key: "ACNAME",
                    title: "Account Name",
                    hidden: false,
                    noSearch: false,
                }
            ],
        };
        this.genericGridLocalPurchaseCostAccount.show();
    };
    LocalPurchaseCostAllocationReport.prototype.dblClickAccountSelect = function (account) {
        this._reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_ACID = account.ACID;
        this._reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_ACCNAME = account.ACNAME;
    };
    LocalPurchaseCostAllocationReport.prototype.PiVoucherEnterClicked = function () {
        this.gridPopupSettingsForLocalPurchasePIVoucher = {
            title: "Vouchers",
            apiEndpoints: '/getPIVoucherNoForLocalPIReport',
            defaultFilterIndex: 0,
            columns: [
                {
                    key: "PI_VOUCHERNO",
                    title: "PI Voucher No",
                    hidden: false,
                    noSearch: false,
                }
            ],
        };
        this.genericGridLocalPurchasePIVoucher.show();
    };
    LocalPurchaseCostAllocationReport.prototype.dblClickPurchasePIVoucherSelect = function (value) {
        this._reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_PI_VOUCHERNO = value.PI_VOUCHERNO;
    };
    LocalPurchaseCostAllocationReport.prototype.CPVoucherPopup = function () {
        this.gridCPVoucherPopupSettings = {
            title: "Ref Vouchers",
            apiEndpoints: '/getRefVoucherNoForLocalPIReport',
            defaultFilterIndex: 0,
            columns: [
                {
                    key: "CAPITALPURCHASE_VCHRNO",
                    title: "Ref Voucher No",
                    hidden: false,
                    noSearch: false,
                }, {
                    key: "TOTALAMOUNT",
                    title: "Total Amount",
                    hidden: false,
                    noSearch: false,
                }
            ],
        };
        this.genericGridCPVoucher.show();
    };
    LocalPurchaseCostAllocationReport.prototype.DblClickCPVoucherSelect = function (value) {
        this._reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_CAPITALPURCHASE_VCHRNO = value.CAPITALPURCHASE_VCHRNO;
    };
    return LocalPurchaseCostAllocationReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], LocalPurchaseCostAllocationReport.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridLocalPurchaseCostAccount"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_3__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], LocalPurchaseCostAllocationReport.prototype, "genericGridLocalPurchaseCostAccount", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridLocalPurchasePIVoucher"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_3__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], LocalPurchaseCostAllocationReport.prototype, "genericGridLocalPurchasePIVoucher", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridCPVoucher"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_3__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], LocalPurchaseCostAllocationReport.prototype, "genericGridCPVoucher", void 0);
LocalPurchaseCostAllocationReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'localpurchasecost-allocation-report',
        template: __webpack_require__(1742),
        styles: [__webpack_require__(1163), __webpack_require__(120)]
    }),
    __param(5, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_4__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_5__common_services_alert_alert_service__["a" /* AlertService */], __WEBPACK_IMPORTED_MODULE_6__common_services_permission__["a" /* AuthService */], __WEBPACK_IMPORTED_MODULE_2__angular_router__["Router"],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object, __WEBPACK_IMPORTED_MODULE_7__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_2__angular_router__["ActivatedRoute"]])
], LocalPurchaseCostAllocationReport);



/***/ }),

/***/ 1510:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MonthlySalesPaymentReport; });








var MonthlySalesPaymentReport = (function () {
    function MonthlySalesPaymentReport(masterService, dialogref, data, _reportFilterService, _ActivatedRoute, alertService, _authService, arouter) {
        var _this = this;
        this.masterService = masterService;
        this.dialogref = dialogref;
        this.data = data;
        this._reportFilterService = _reportFilterService;
        this._ActivatedRoute = _ActivatedRoute;
        this.alertService = alertService;
        this._authService = _authService;
        this.arouter = arouter;
        this.division = [];
        this.account = [];
        this.account2 = [];
        this.instanceWiseRepName = 'MonthlySalesPaymentReport';
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.gridPopupSettingsForAccountList = new __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this._reportFilterService.MonthlySalesPaymentObj.Reportnameis = 'MonthlySalesPaymentReport';
        this.userProfile = this._authService.getUserProfile();
        this.division = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                //////console.log("div" + JSON.stringify(res));
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        // this.masterService.getAccDivList();
    }
    MonthlySalesPaymentReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            if (_this._reportFilterService.MonthlySalesPaymentObj.assignPrevioiusDate != true) {
                _this.masterService.getAccDivList();
                _this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                if (_this.masterService.userProfile.CompanyInfo.ActualFY == _this.masterService.PhiscalObj.PhiscalID) {
                    _this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DATE2 = new Date().toJSON().split('T')[0];
                    _this.changeEndDate(_this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DATE2, "AD");
                }
                else {
                    _this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                    _this.changeEndDate(_this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DATE2, "AD");
                }
                // this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DATE2 = new Date().toJSON().split('T')[0];
                // this._reportFilterService.MonthlySalesPaymentObj.  MonthlySalesPayment_DIV = this.masterService.userProfile.CompanyInfo.INITIAL;
            }
            if (params.instancename) {
                // ////console.log("@@[Monthly Sales Payment0]",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                _this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                _this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                _this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
                _this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_ACID = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.ACID;
                _this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_ACCNAME = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.ACNAME;
            }
        });
        this.changeEntryDate(this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DATE1, "AD");
        this.changeEndDate(this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DATE2, "AD");
    };
    MonthlySalesPaymentReport.prototype.focusOutFromDate = function (value) {
        var _this = this;
        this.masterService.validateDate(value).subscribe(function (x) {
            if (x == "error") {
                _this.alertService.warning("Date should be within Fiscal year");
                _this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DATE1 = new Date().toJSON().split('T')[0];
            }
        });
    };
    MonthlySalesPaymentReport.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DATE1 = this.masterService.toBSDate(value);
        }
    };
    MonthlySalesPaymentReport.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_2);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DATE2 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DATE2 = this.masterService.toBSDate(value);
        }
    };
    MonthlySalesPaymentReport.prototype.onload = function () {
        // if (this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_ACCNAME == null || this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_ACCNAME == '' || this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_ACCNAME == undefined) {
        //     this.alertService.info("Please Select Account");
        //     return;
        // }
        this.DialogClosedResult("ok");
    };
    MonthlySalesPaymentReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    MonthlySalesPaymentReport.prototype.DialogClosedResult = function (res) {
        var _this = this;
        this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DIV = (this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DIV == null || this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DIV == "") ? "%" : this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DIV;
        if (this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DIV && this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DIV == '%') {
            this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DIVISIONAME = 'All';
        }
        else if (this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DIV && this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DIV != '%') {
            var abc = this.division.filter(function (x) { return x.INITIAL == _this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DIV; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DIVISIONAME = abc[0].NAME;
            }
            else {
                this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DIVISIONAME = '';
            }
        }
        else {
            this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DIVISIONAME = '';
        }
        if (res == "ok") {
            this._reportFilterService.MonthlySalesPaymentObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.Monthlysales_Payment_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'MonthlySalesPaymentReport',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.Monthlysales_Payment_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'MonthlySalesPaymentReport' + '_' + this._reportFilterService.Monthlysales_Payment_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.Monthlysales_Payment_loadedTimes,
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: 'Monthly Sales Payment Report',
                reportname: 'Monthly Sales Payment Report',
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.Monthlysales_Payment_loadedTimes,
                reportparam: {
                    REPORTOPTIONDISPLAYNAME: this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_REPORTOPTIONDISPLAYNAME ? this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_REPORTOPTIONDISPLAYNAME : '',
                    DATE1: this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DATE1,
                    DATE2: this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DATE2,
                    BSDATE1: this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_BSDATE1,
                    BSDATE2: this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_BSDATE2,
                    DIV: this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DIV,
                    COMPANYID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    ACID: this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_ACID ? this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_ACID : '%',
                    ACNAME: this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_ACCNAME,
                    DIVISIONNAME: this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DIVISIONAME ? this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DIVISIONAME : '',
                }
            }
        });
        this._reportFilterService.Monthlysales_Payment_loadedTimes = this._reportFilterService.Monthlysales_Payment_loadedTimes + 1;
    };
    MonthlySalesPaymentReport.prototype.AccountEnterClicked = function () {
        this.gridPopupSettingsForAccountList = this.masterService.getGenericGridPopUpSettings('AllAcountList');
        this.genericGridMonthlysalesPayment.show();
    };
    MonthlySalesPaymentReport.prototype.dblClickAccountSelect = function (account) {
        this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_ACID = account.ACID;
        this._reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_ACCNAME = account.ACNAME;
    };
    return MonthlySalesPaymentReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], MonthlySalesPaymentReport.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridMonthlysalesPayment"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], MonthlySalesPaymentReport.prototype, "genericGridMonthlysalesPayment", void 0);
MonthlySalesPaymentReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'monthly-sales-payment',
        template: __webpack_require__(1744),
        styles: [__webpack_require__(1163), __webpack_require__(120)]
    }),
    __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object, __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_6__angular_router__["ActivatedRoute"],
        __WEBPACK_IMPORTED_MODULE_4__common_services_alert_alert_service__["a" /* AlertService */], __WEBPACK_IMPORTED_MODULE_5__common_services_permission_authService_service__["a" /* AuthService */], __WEBPACK_IMPORTED_MODULE_6__angular_router__["Router"]])
], MonthlySalesPaymentReport);



/***/ }),

/***/ 1511:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_repositories__ = __webpack_require__(13);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return OneLakhAboveSALESreportComponent; });


var OneLakhAboveSALESreportComponent = (function () {
    function OneLakhAboveSALESreportComponent(masterService) {
        var _this = this;
        this.masterService = masterService;
        this.OneLakhAboveSalesReport = {};
        this.divisionList = [];
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.OneLakhAboveSalesReport.DATE1 = new Date().toJSON().split('T')[0];
        this.changeEntryDate(this.OneLakhAboveSalesReport.DATE1, "AD");
        this.OneLakhAboveSalesReport.DATE = new Date().toJSON().split('T')[0];
        this.changeEndDate(this.OneLakhAboveSalesReport.DATE, "AD");
        this.masterService.getAllDivisions().subscribe(function (res) {
            _this.divisionList.push(res);
        });
    }
    OneLakhAboveSALESreportComponent.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    OneLakhAboveSALESreportComponent.prototype.DialogClosedResult = function (res) {
        if (this.OneLakhAboveSalesReport.isR1 == true) {
            this.OneLakhAboveSalesReport.R1 = '1';
        }
        else {
            this.OneLakhAboveSalesReport.R1 = '';
        }
        if (this.OneLakhAboveSalesReport.isR2 == true) {
            this.OneLakhAboveSalesReport.R2 = '1';
        }
        else {
            this.OneLakhAboveSalesReport.R2 = '';
        }
        if (this.OneLakhAboveSalesReport.isR3 == true) {
            this.OneLakhAboveSalesReport.R3 = '1';
        }
        else {
            this.OneLakhAboveSalesReport.R3 = '';
        }
        this.reportdataEmit.emit({
            status: res, data: {
                reportname: 'One Lakh Above Sales Report', reportparam: {
                    DATE1: this.OneLakhAboveSalesReport.DATE1,
                    DATE2: this.OneLakhAboveSalesReport.DATE,
                    DIV: this.OneLakhAboveSalesReport.DIV,
                    COMPANYID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    R1: this.OneLakhAboveSalesReport.R1,
                    R2: this.OneLakhAboveSalesReport.R2,
                    R3: this.OneLakhAboveSalesReport.R3,
                    DETAIL: '0',
                    PARTY: '%',
                    VATNO: '%',
                    isR1: false,
                    isR2: false,
                    isR3: false
                }
            }
        });
    };
    OneLakhAboveSALESreportComponent.prototype.divisionChanged = function () {
        this.OneLakhAboveSalesReport.DIV = this.division.nativeElement.value;
    };
    OneLakhAboveSALESreportComponent.prototype.hide = function () {
        this.DialogClosedResult("Error");
    };
    OneLakhAboveSALESreportComponent.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this.OneLakhAboveSalesReport.BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate);
            this.OneLakhAboveSalesReport.DATE1 = this.masterService.toADDate(value);
        }
    };
    OneLakhAboveSALESreportComponent.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this.OneLakhAboveSalesReport.BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate);
            this.OneLakhAboveSalesReport.DATE = this.masterService.toADDate(value);
        }
    };
    OneLakhAboveSALESreportComponent.prototype.cancel = function () {
        this.DialogClosedResult("cancel");
    };
    OneLakhAboveSALESreportComponent.prototype.preventInput = function ($event) {
        $event.preventDefault();
        return false;
    };
    return OneLakhAboveSALESreportComponent;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('division'),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"])
], OneLakhAboveSALESreportComponent.prototype, "division", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], OneLakhAboveSALESreportComponent.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], OneLakhAboveSALESreportComponent.prototype, "reportType", void 0);
OneLakhAboveSALESreportComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'one-lakh-above-SALES-report',
        template: __webpack_require__(1745),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_repositories__["a" /* MasterRepo */]])
], OneLakhAboveSALESreportComponent);



/***/ }),

/***/ 1512:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__masters_components_PLedger_PLedger_component__ = __webpack_require__(1181);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__common_popupLists_report_filter_report_filter_service__ = __webpack_require__(555);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_moment__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_moment__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PartyLedgerReport; });










var PartyLedgerReport = (function () {
    function PartyLedgerReport(masterService, alertService, _reportFilterService, _authService, arouter, _ActivatedRoute, reportService) {
        var _this = this;
        this.masterService = masterService;
        this.alertService = alertService;
        this._reportFilterService = _reportFilterService;
        this._authService = _authService;
        this.arouter = arouter;
        this._ActivatedRoute = _ActivatedRoute;
        this.reportService = reportService;
        this.acname = '';
        this.accode = '';
        this.account = [];
        this.division = [];
        this.CostcenterList = [];
        this.AreaList = [];
        this.instanceWiseRepName = 'Party Ledger Report';
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.gridPopupSettingsForPartyLedgerList = new __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridPopupSettingsForMultiplePartyLedgerList = new __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridPopupSettingsForMultipleGroupAccountList = new __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this._reportFilterService.PartyLedgerObj.IGNOREOPPOSITAC = true;
        // this._reportFilterService.PartyLedgerObj.PartyLedger_HIDENARATION=true;
        this._reportFilterService.showAllcontactsInCC = true;
        this._reportFilterService.PartyLedgerObj.Reportnameis = 'partyledger';
        this.reportNameFormatWise = 'Party Ledger Report';
        this.userProfile = this._authService.getUserProfile();
        this.masterService.getAccountListACIDLikePA().subscribe(function (res) {
            _this.account = res.data;
            if (_this.account.length != 0) {
                _this.PartyLedger_result = true;
            }
            else {
                _this.PartyLedger_result = false;
            }
        });
        this.division = [];
        this.division = [];
        //let data: Array<IDivision> = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                //////console.log("div" + JSON.stringify(res));
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        this.masterService.getCostcenter().subscribe(function (res) {
            _this.CostcenterList = res;
        });
        this.masterService.getAreaList().subscribe(function (res) {
            _this.AreaList = res.result;
        });
        this.showMultipleCC = true;
        this.checkValueForCombine();
        // this.masterService.getAccDivList();
    }
    PartyLedgerReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            var mode = params.mode;
            // ////console.log("@@this.reportMasterService.drillParam.returnUrl",params.mode,this.reportService.drillParam.returnUrl);
            // ////console.log("@@partyled",this.reportService.drillParam)
            if (mode == "DRILL" && _this.reportService.drillParam.returnUrl && _this.reportService.drillParam.reportname.startsWith('Party Ledger Report')) {
                _this._reportFilterService.PartyLedgerObj.PartyLedger_DATE1 = __WEBPACK_IMPORTED_MODULE_9_moment__(_this.reportService.drillParam.reportparam.DATE1).format('YYYY-MM-DD');
                _this._reportFilterService.PartyLedgerObj.PartyLedger_DATE2 = __WEBPACK_IMPORTED_MODULE_9_moment__(_this.reportService.drillParam.reportparam.DATE2).format('YYYY-MM-DD');
                _this._reportFilterService.PartyLedgerObj.PartyLedger_BSDATE1 = _this.reportService.drillParam.reportparam.BSDATE1;
                _this._reportFilterService.PartyLedgerObj.PartyLedger_BSDATE2 = _this.reportService.drillParam.reportparam.BSDATE2;
                _this._reportFilterService.PartyLedgerObj.PartyLedger_DIV = _this.reportService.drillParam.reportparam.DIV;
                _this._reportFilterService.PartyLedgerObj.PartyLedger_CostCenter = _this.reportService.drillParam.reportparam.COSTCENTER;
                _this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType = 2;
                _this._reportFilterService.PartyLedgerObj.PartyLedger_ACCNAME = _this.reportService.drillParam.reportparam.CUSTOMERNAME;
                _this._reportFilterService.PartyLedgerObj.PartyLedger_ACID = _this.reportService.drillParam.reportparam.ACID;
                _this._reportFilterService.PartyLedgerObj.PartyLedger_SingleAccount = _this.reportService.drillParam.reportparam.ACID;
                _this.showLedgerTable = true;
                _this._reportFilterService.PartyLedgerObj.EnableCombineLedger = false;
                _this._reportFilterService.PartyLedgerObj.PartyLedger_AreaWise = [];
                _this._reportFilterService.PartyLedgerObj.PartyLedger_AreaWise = 0;
                _this._reportFilterService.PartyLedgerObj.PartyLedger_multipleAccounts = [];
                _this._reportFilterService.PartyLedgerObj.PartyLedger_multipleCostcenter = [];
                _this._reportFilterService.PartyLedgerObj.PartyLedger_multipleGroupAccounts = [];
                // this.changeEntryDate(this._reportFilterService.PartyLedgerObj.PartyLedger_DATE1, "AD");
                // this.changeEndDate(this._reportFilterService.PartyLedgerObj.PartyLedger_DATE2, "AD");
                if (_this.reportService.drillParam.reportname == 'Party Ledger Report_2') {
                    _this._reportFilterService.PartyLedgerObj.PartyLedger_SUMMARYREPORT = '1';
                }
                else {
                    _this._reportFilterService.PartyLedgerObj.PartyLedger_SUMMARYREPORT = '0';
                }
                if (_this.masterService.userSetting.DISPLAY == 1) {
                    _this._reportFilterService.PartyLedgerObj.IGNOREOPPOSITAC = true;
                }
                else {
                    _this._reportFilterService.PartyLedgerObj.IGNOREOPPOSITAC = false;
                }
            }
            else {
                if (_this._reportFilterService.PartyLedgerObj.assignPrevioiusDate != true) {
                    _this.masterService.getAccDivList();
                    _this._reportFilterService.PartyLedgerObj.PartyLedger_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                    //console.log("@@01BeginDate",this.masterService.PhiscalObj.BeginDate)
                    if (_this.userProfile.CompanyInfo.ActualFY == _this.masterService.PhiscalObj.PhiscalID) {
                        _this._reportFilterService.PartyLedgerObj.PartyLedger_DATE2 = new Date().toJSON().split('T')[0];
                        _this.changeEndDate(_this._reportFilterService.PartyLedgerObj.PartyLedger_DATE2, "AD");
                    }
                    else {
                        //console.log("@@02EndDate",this.masterService.PhiscalObj.EndDate)
                        _this._reportFilterService.PartyLedgerObj.PartyLedger_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                        _this.changeEndDate(_this._reportFilterService.PartyLedgerObj.PartyLedger_DATE2, "AD");
                    }
                    // this._reportFilterService.PartyLedgerObj.PartyLedger_DATE2 = new Date().toJSON().split('T')[0];
                    _this.masterService.viewDivision.subscribe(function () {
                        if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                            _this._reportFilterService.PartyLedgerObj.PartyLedger_DIV = '%';
                        }
                        else {
                            if (_this.masterService.userSetting.userwisedivision == 1 && _this.division.length == 1) {
                                _this._reportFilterService.PartyLedgerObj.PartyLedger_DIV = _this.division[0].INITIAL;
                            }
                            else {
                                _this._reportFilterService.PartyLedgerObj.PartyLedger_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                            }
                        }
                    });
                    _this._reportFilterService.PartyLedgerObj.PartyLedger_CostCenter = '%';
                    _this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType = 2;
                    // this._reportFilterService.PartyLedgerObj.IGNOREOPPOSITAC =1;
                    if (_this.masterService.userSetting.DISPLAY == 1) {
                        _this._reportFilterService.PartyLedgerObj.PartyLedger_SUMMARYREPORT = '0';
                        _this._reportFilterService.PartyLedgerObj.IGNOREOPPOSITAC = true;
                    }
                    else {
                        _this._reportFilterService.PartyLedgerObj.PartyLedger_SUMMARYREPORT = '0';
                    }
                    _this.checkValue();
                    _this._reportFilterService.PartyLedgerObj.PartyLedger_AreaWise = 0;
                    if (_this._reportFilterService.PartyLedgerObj.EnableCombineLedger == true) {
                        _this.checkValue();
                    }
                    else {
                        _this.checkValueForCombine();
                    }
                    _this._reportFilterService.PartyLedgerObj.PartyLedger_multipleAccounts = [];
                    _this._reportFilterService.PartyLedgerObj.PartyLedger_multipleCostcenter = [];
                    _this._reportFilterService.PartyLedgerObj.PartyLedger_multipleGroupAccounts = [];
                    _this.changeEntryDate(_this._reportFilterService.PartyLedgerObj.PartyLedger_DATE1, "AD");
                    _this.changeEndDate(_this._reportFilterService.PartyLedgerObj.PartyLedger_DATE2, "AD");
                    _this._reportFilterService.PartyLedgerObj.PartyLedger_HIDECOSTCENTER = 0;
                }
                if (params.instancename) {
                    // ////console.log("@@[Party Ledger Report0]",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                    _this._reportFilterService.PartyLedgerObj.PartyLedger_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                    _this._reportFilterService.PartyLedgerObj.PartyLedger_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                    _this.changeEntryDate(_this._reportFilterService.PartyLedgerObj.PartyLedger_DATE1, "AD");
                    _this.changeEndDate(_this._reportFilterService.PartyLedgerObj.PartyLedger_DATE2, "AD");
                    _this._reportFilterService.PartyLedgerObj.PartyLedger_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
                    _this._reportFilterService.PartyLedgerObj.CCENTER = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.COSTCENTER;
                    _this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.REPORTTYPE;
                    _this._reportFilterService.PartyLedgerObj.PartyLedger_ACCNAME = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.ACNAME;
                    _this._reportFilterService.PartyLedgerObj.PartyLedger_ACID = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.ACID;
                    _this._reportFilterService.PartyLedgerObj.PartyLedger_SingleAccount = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.ACID;
                    _this._reportFilterService.PartyLedgerObj.PartyLedger_AreaWise = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.AREA;
                    _this._reportFilterService.PartyLedgerObj.IGNOREOPPOSITAC = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.IGNOREOPPOSITAC;
                    _this._reportFilterService.PartyLedgerObj.MERGEREPORT = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.MERGEREPORT;
                    _this._reportFilterService.PartyLedgerObj.SHOWNARATION = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWNARATION;
                    _this._reportFilterService.PartyLedgerObj.SHOWNDATE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWNDATE;
                    _this._reportFilterService.PartyLedgerObj.PartyLedger_SUMMARYREPORT = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SUMMARYLEDGER;
                    _this._reportFilterService.PartyLedgerObj.PartyLedger_HIDENARATION = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.HIDENARATION;
                    _this._reportFilterService.PartyLedgerObj.PartyLedger_HIDEVOUCHERTYPE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.HIDEVOUCHERTYPE;
                    _this._reportFilterService.PartyLedgerObj.PartyLedger_SHOWITEMDETAIL = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWITEMDETAIL;
                    _this._reportFilterService.PartyLedgerObj.PartyLedger_INCLUDEPOSTDATE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.INCLUDEPOSTEDTRANSACTION;
                    _this._reportFilterService.PartyLedgerObj.PartyLedger_HIDECOSTCENTER = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.HIDECOSTCENTER;
                }
            }
        });
    };
    PartyLedgerReport.prototype.ngAfterViewInit = function () {
        var a = this.masterService.AccListDiv.forEach(function (x) { return x.isSelected == 1; });
        this.applyHostListener();
    };
    PartyLedgerReport.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.PartyLedgerObj.PartyLedger_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.PartyLedgerObj.PartyLedger_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.PartyLedgerObj.PartyLedger_DATE1 = this.masterService.toBSDate(value);
        }
    };
    PartyLedgerReport.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.PartyLedgerObj.PartyLedger_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_2);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.PartyLedgerObj.PartyLedger_DATE2 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.PartyLedgerObj.PartyLedger_DATE2 = this.masterService.toBSDate(value);
        }
    };
    PartyLedgerReport.prototype.onload = function () {
        if (this._reportFilterService.PartyLedgerObj.EnableCombineLedger == true && this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType == 2 && (this._reportFilterService.PartyLedgerObj.PartyLedger_multipleAccounts === undefined || this._reportFilterService.PartyLedgerObj.PartyLedger_multipleAccounts.length == 0)) {
            this.alertService.info("Please Select Account");
            return;
        }
        else if (this._reportFilterService.PartyLedgerObj.EnableCombineLedger == true && this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType == 1 && this._reportFilterService.PartyLedgerObj.PartyLedger_AreaWise === undefined) {
            this.alertService.info("Please Select Area");
            return;
        }
        else if ((this._reportFilterService.PartyLedgerObj.EnableCombineLedger == true && this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType == 4 && (this._reportFilterService.PartyLedgerObj.PartyLedger_showAllContacts == false || this._reportFilterService.PartyLedgerObj.PartyLedger_showAllContacts === undefined)) && (this._reportFilterService.PartyLedgerObj.PartyLedger_multipleCostcenter === undefined || this._reportFilterService.PartyLedgerObj.PartyLedger_multipleCostcenter.length == 0)) {
            this.alertService.info("Please Select Costcenter");
            return;
        }
        else if ((this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType == 1 || this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType == 4 || this._reportFilterService.PartyLedgerObj.PartyLedger_showAllContacts) && (this._reportFilterService.PartyLedgerObj.PartyLedger_SingleAccount === undefined || this._reportFilterService.PartyLedgerObj.PartyLedger_SingleAccount == '' || this._reportFilterService.PartyLedgerObj.PartyLedger_ACCNAME == '')) {
            this.alertService.info("Please Select Account");
            return;
        }
        else if (this.PartyLedger_result == true && (this._reportFilterService.PartyLedgerObj.EnableCombineLedger === undefined || this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType == 0)) {
            if (this._reportFilterService.PartyLedgerObj.PartyLedger_SingleAccount === undefined || this._reportFilterService.PartyLedgerObj.PartyLedger_SingleAccount == '' || this._reportFilterService.PartyLedgerObj.PartyLedger_ACCNAME == '') {
                this.alertService.info("Please Select Account");
                return;
            }
            this.DialogClosedResult("ok");
        }
        else {
            this.DialogClosedResult("ok");
        }
    };
    PartyLedgerReport.prototype.DialogClosedResult = function (res) {
        var _this = this;
        var multipleSelectedCC = [];
        var SelectedCC = '';
        if (this._reportFilterService.PartyLedgerObj.PartyLedger_multipleCostcenter === undefined) {
            SelectedCC = this._reportFilterService.PartyLedgerObj.CCENTER;
        }
        else {
            if (this._reportFilterService.PartyLedgerObj.PartyLedger_multipleCostcenter.length != 0) {
                this._reportFilterService.PartyLedgerObj.PartyLedger_multipleCostcenter.forEach(function (COSTCENTER) {
                    multipleSelectedCC.push(COSTCENTER.CCID);
                    SelectedCC += multipleSelectedCC + ",";
                });
            }
            else {
                SelectedCC = this._reportFilterService.PartyLedgerObj.CCENTER;
            }
        }
        var multipleSelectedAccount = [];
        if (this._reportFilterService.PartyLedgerObj.PartyLedger_multipleAccounts === undefined) {
            this._reportFilterService.selectedAccountParty = this._reportFilterService.PartyLedgerObj.PartyLedger_SingleAccount;
        }
        else {
            if (this._reportFilterService.PartyLedgerObj.PartyLedger_multipleAccounts.length != 0) {
                this._reportFilterService.PartyLedgerObj.PartyLedger_multipleAccounts.forEach(function (acList) {
                    _this._reportFilterService.selectedAccountParty = '';
                    multipleSelectedAccount.push(acList.ACID);
                    _this._reportFilterService.selectedAccountParty += multipleSelectedAccount + ",";
                });
                var nameArr = this._reportFilterService.selectedAccountParty.split(',');
                var myArr = nameArr;
                var item = myArr.filter(function (el, i, a) { return i === a.indexOf(el); });
                // ////console.log("@@item",item)
                this._reportFilterService.selectedAccountParty = item.toString();
                // ////console.log("@@this._reportFilterService.selectedAccountParty",this._reportFilterService.selectedAccountParty)
            }
            else {
                this._reportFilterService.selectedAccountParty = this._reportFilterService.PartyLedgerObj.PartyLedger_SingleAccount;
            }
        }
        var multipleSelectedGroupACC = [];
        // let SelectedGroupACC = '';
        if (this._reportFilterService.PartyLedgerObj.PartyLedger_multipleGroupAccounts === undefined) {
            this._reportFilterService.selectedGroupAccountParty = '%';
        }
        else {
            if (this._reportFilterService.PartyLedgerObj.PartyLedger_multipleGroupAccounts.length != 0) {
                this._reportFilterService.PartyLedgerObj.PartyLedger_multipleGroupAccounts.forEach(function (acList) {
                    _this._reportFilterService.selectedGroupAccountParty = '';
                    multipleSelectedGroupACC.push(acList.ACID);
                    _this._reportFilterService.selectedGroupAccountParty += multipleSelectedGroupACC + ",";
                });
                var nameArr = this._reportFilterService.selectedGroupAccountParty.split(',');
                var myArr = nameArr;
                var item = myArr.filter(function (el, i, a) { return i === a.indexOf(el); });
                // ////console.log("@@item",item)
                this._reportFilterService.selectedGroupAccountParty = item.toString();
            }
            else {
                this._reportFilterService.selectedGroupAccountParty = '%';
            }
        }
        if (this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType != 4) {
            SelectedCC = this._reportFilterService.PartyLedgerObj.PartyLedger_CostCenter;
        }
        if (this._reportFilterService.PartyLedgerObj.IGNOREOPPOSITAC == true) {
            this._reportFilterService.PartyLedgerObj.IGNOREOPPOSITAC = 1;
            this.reportNameFormatWise = 'Party Ledger Report_1';
        }
        else {
            this._reportFilterService.PartyLedgerObj.IGNOREOPPOSITAC = 0;
            this.reportNameFormatWise = 'Party Ledger Report';
        }
        if (this._reportFilterService.PartyLedgerObj.PartyLedger_SUMMARYREPORT == 1) {
            this.reportNameFormatWise = 'Party Ledger Report_2';
        }
        if (this._reportFilterService.PartyLedgerObj.SHOWNDATE == true) {
            this._reportFilterService.PartyLedgerObj.SHOWNDATE = 1;
        }
        else {
            this._reportFilterService.PartyLedgerObj.SHOWNDATE = 0;
        }
        if (this._reportFilterService.PartyLedgerObj.MERGEREPORT == true) {
            this._reportFilterService.PartyLedgerObj.MERGEREPORT = 1;
        }
        else {
            this._reportFilterService.PartyLedgerObj.MERGEREPORT = 0;
        }
        if (this._reportFilterService.PartyLedgerObj.PartyLedger_showAllContacts == true) {
            this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType = 3;
            SelectedCC = '%';
        }
        if (this._reportFilterService.PartyLedgerObj.EnableCombineLedger != true) {
            this._reportFilterService.selectedAccountParty = this._reportFilterService.PartyLedgerObj.PartyLedger_SingleAccount;
            this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType = 0;
        }
        if (this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType != 2) {
            this._reportFilterService.selectedAccountParty = this._reportFilterService.PartyLedgerObj.PartyLedger_SingleAccount;
        }
        if (this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType != 1) {
            this._reportFilterService.PartyLedgerObj.PartyLedger_AreaWise = 0;
        }
        if (this._reportFilterService.PartyLedgerObj.PartyLedger_DIV && this._reportFilterService.PartyLedgerObj.PartyLedger_DIV == '%') {
            this._reportFilterService.PartyLedgerObj.PartyLedger_DIVISIONNAME = 'All';
        }
        else if (this._reportFilterService.PartyLedgerObj.PartyLedger_DIV && this._reportFilterService.PartyLedgerObj.PartyLedger_DIV != '%') {
            var abc = this.division.filter(function (x) { return x.INITIAL == _this._reportFilterService.PartyLedgerObj.PartyLedger_DIV; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.PartyLedgerObj.PartyLedger_DIVISIONNAME = abc[0].NAME;
            }
            else {
                this._reportFilterService.PartyLedgerObj.PartyLedger_DIVISIONNAME = '';
            }
        }
        else {
            this._reportFilterService.PartyLedgerObj.PartyLedger_DIVISIONNAME = '';
        }
        if (this._reportFilterService.PartyLedgerObj.EnableCombineLedger != true) {
            this.REPORTDISPLAYNAME = 'Party Ledger';
            this._reportFilterService.PartyLedgerObj.PartyLedger_LABELDISPLAYNAME = 'Ledger';
            this._reportFilterService.PartyLedgerObj.PartyLedger_LEDGERDISPLAYNAME = this._reportFilterService.PartyLedgerObj.PartyLedger_ACCNAME;
            if (this._reportFilterService.PartyLedgerObj.PartyLedger_CostCenter && this._reportFilterService.PartyLedgerObj.PartyLedger_CostCenter == '%') {
                this._reportFilterService.PartyLedgerObj.PartyLedger_COSTCENTERDISPLAYNAME = 'All';
            }
            else if (this._reportFilterService.PartyLedgerObj.PartyLedger_CostCenter != '%') {
                var abc = this.CostcenterList.filter(function (x) { return x.CCID == _this._reportFilterService.PartyLedgerObj.PartyLedger_CostCenter; });
                if (abc && abc.length > 0 && abc[0]) {
                    this._reportFilterService.PartyLedgerObj.PartyLedger_COSTCENTERDISPLAYNAME = abc[0].COSTCENTERNAME;
                }
                else {
                    this._reportFilterService.PartyLedgerObj.PartyLedger_COSTCENTERDISPLAYNAME = '';
                }
            }
            else {
                this._reportFilterService.PartyLedgerObj.PartyLedger_COSTCENTERDISPLAYNAME = '';
            }
        }
        if (this._reportFilterService.PartyLedgerObj.EnableCombineLedger == true) {
            this.REPORTDISPLAYNAME = 'Party Ledger';
            this._reportFilterService.PartyLedgerObj.PartyLedger_LABELDISPLAYNAME = 'Ledger';
            this._reportFilterService.PartyLedgerObj.PartyLedger_LEDGERDISPLAYNAME = 'Combine Ledger Selection';
        }
        if (res == "ok") {
            this._reportFilterService.PartyLedgerObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
                // ////console.log("@@activeurlpath2",activeurlpath2)
            }
            if (this._reportFilterService.PartyLedger_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Party Ledger Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.PartyLedger_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Party Ledger Report' + '_' + this._reportFilterService.PartyLedger_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.PartyLedger_loadedTimes,
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: 'Party Ledger',
                reportname: this.reportNameFormatWise,
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.PartyLedger_loadedTimes,
                reportparam: {
                    LABELDISPLAYNAME: this._reportFilterService.PartyLedgerObj.PartyLedger_LABELDISPLAYNAME ? this._reportFilterService.PartyLedgerObj.PartyLedger_LABELDISPLAYNAME : '',
                    LEDGERDISPLAYNAME: this._reportFilterService.PartyLedgerObj.PartyLedger_LEDGERDISPLAYNAME ? this._reportFilterService.PartyLedgerObj.PartyLedger_LEDGERDISPLAYNAME : '',
                    DATE1: this._reportFilterService.PartyLedgerObj.PartyLedger_DATE1,
                    DATE2: this._reportFilterService.PartyLedgerObj.PartyLedger_DATE2,
                    BSDATE1: this._reportFilterService.PartyLedgerObj.PartyLedger_BSDATE1,
                    BSDATE2: this._reportFilterService.PartyLedgerObj.PartyLedger_BSDATE2,
                    DIV: this._reportFilterService.PartyLedgerObj.PartyLedger_DIV ? this._reportFilterService.PartyLedgerObj.PartyLedger_DIV : '%',
                    COSTCENTER: SelectedCC ? SelectedCC : '%',
                    AREA: this._reportFilterService.PartyLedgerObj.PartyLedger_AreaWise ? this._reportFilterService.PartyLedgerObj.PartyLedger_AreaWise : 0,
                    COMID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    REPORTTYPE: this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType ? this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType : 0,
                    IGNOREOPPOSITAC: this._reportFilterService.PartyLedgerObj.IGNOREOPPOSITAC,
                    // SHOWNDATE: this._reportFilterService.PartyLedgerObj.SHOWNDATE,
                    ACID: this._reportFilterService.selectedAccountParty ? this._reportFilterService.selectedAccountParty : '%',
                    MERGEREPORT: this._reportFilterService.PartyLedgerObj.MERGEREPORT,
                    ACNAME: this._reportFilterService.PartyLedgerObj.PartyLedger_ACCNAME,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    ADDRESS: this._reportFilterService.PartyLedgerObj.PartyLedger_ADDRESS ? this._reportFilterService.PartyLedgerObj.PartyLedger_ADDRESS : '',
                    VATNO: this._reportFilterService.PartyLedgerObj.PartyLedger_VATNO ? this._reportFilterService.PartyLedgerObj.PartyLedger_VATNO : '',
                    PHONE: this._reportFilterService.PartyLedgerObj.PartyLedger_PHONE ? this._reportFilterService.PartyLedgerObj.PartyLedger_PHONE : '',
                    EMAIL: this._reportFilterService.PartyLedgerObj.PartyLedger_EMAIL ? this._reportFilterService.PartyLedgerObj.PartyLedger_EMAIL : '',
                    // REPORTDISPLAYNAME : this.REPORTDISPLAYNAME ? this.REPORTDISPLAYNAME : this.reportNameFormatWise,
                    DIVISIONNAME: this._reportFilterService.PartyLedgerObj.PartyLedger_DIVISIONNAME ? this._reportFilterService.PartyLedgerObj.PartyLedger_DIVISIONNAME : '',
                    COSTCENTERDISPLAYNAME: this._reportFilterService.PartyLedgerObj.PartyLedger_COSTCENTERDISPLAYNAME ? this._reportFilterService.PartyLedgerObj.PartyLedger_COSTCENTERDISPLAYNAME : '',
                    SUMMARYLEDGER: this._reportFilterService.PartyLedgerObj.PartyLedger_SUMMARYREPORT ? this._reportFilterService.PartyLedgerObj.PartyLedger_SUMMARYREPORT : 0,
                    HIDENARATION: this._reportFilterService.PartyLedgerObj.PartyLedger_HIDENARATION ? this._reportFilterService.PartyLedgerObj.PartyLedger_HIDENARATION : 0,
                    HIDEVOUCHERTYPE: this._reportFilterService.PartyLedgerObj.PartyLedger_HIDEVOUCHERTYPE ? this._reportFilterService.PartyLedgerObj.PartyLedger_HIDEVOUCHERTYPE : 0,
                    SHOWITEMDETAIL: this._reportFilterService.PartyLedgerObj.PartyLedger_SHOWITEMDETAIL ? this._reportFilterService.PartyLedgerObj.PartyLedger_SHOWITEMDETAIL : 0,
                    INCLUDEPOSTEDTRANSACTION: this._reportFilterService.PartyLedgerObj.PartyLedger_INCLUDEPOSTDATE ? this._reportFilterService.PartyLedgerObj.PartyLedger_INCLUDEPOSTDATE : 0,
                    HIDECOSTCENTER: this._reportFilterService.PartyLedgerObj.PartyLedger_HIDECOSTCENTER ? this._reportFilterService.PartyLedgerObj.PartyLedger_HIDECOSTCENTER : 0,
                    GROUP_ACID: this._reportFilterService.selectedGroupAccountParty ? this._reportFilterService.selectedGroupAccountParty : '%',
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.PartyLedger_loadedTimes = this._reportFilterService.PartyLedger_loadedTimes + 1;
        }
    };
    // Close Method
    PartyLedgerReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("cancel");
    };
    PartyLedgerReport.prototype.checkValue = function () {
        if (this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType == 2) {
            this.showLedgerTable = true;
            this.acname = this._reportFilterService.PartyLedgerObj.PartyLedger_ACCNAME;
            this._reportFilterService.PartyLedgerObj.PartyLedger_ACCNAME = '';
            this.accode = this._reportFilterService.PartyLedgerObj.PartyLedger_ACCODE;
            this._reportFilterService.PartyLedgerObj.PartyLedger_ACID = '';
            this._reportFilterService.PartyLedgerObj.PartyLedger_SingleAccount = '';
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleCostcenter = [];
            this._reportFilterService.PartyLedgerObj.PartyLedger_AreaWise = [];
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleGroupAccounts = [];
        }
        else {
            this.showLedgerTable = false;
            this._reportFilterService.PartyLedgerObj.PartyLedger_ACCNAME = this.acname;
            this._reportFilterService.PartyLedgerObj.PartyLedger_ACID = this.accode;
            this._reportFilterService.PartyLedgerObj.PartyLedger_SingleAccount = this.accode;
        }
        if (this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType == 1) {
            this.showAreaTable = true;
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleCostcenter = [];
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleAccounts = [];
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleGroupAccounts = [];
        }
        else {
            this.showAreaTable = false;
        }
        if (this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType == 4) {
            this.showCCtable = true;
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleAccounts = [];
            this._reportFilterService.PartyLedgerObj.PartyLedger_AreaWise = 0;
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleGroupAccounts = [];
        }
        else {
            this.showCCtable = false;
        }
        if (this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType == 5) {
            this.showAccGrpTable = true;
            this._reportFilterService.PartyLedgerObj.PartyLedger_AreaWise = 0;
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleCostcenter = [];
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleAccounts = [];
        }
        else {
            this.showAccGrpTable = false;
        }
    };
    PartyLedgerReport.prototype.checkValueForCombine = function () {
        if (this._reportFilterService.PartyLedgerObj.EnableCombineLedger == true) {
            this.showCombineLedgerList = true;
            this.acname = this._reportFilterService.PartyLedgerObj.PartyLedger_ACCNAME;
            this._reportFilterService.PartyLedgerObj.PartyLedger_ACCNAME = '';
            this.accode = this._reportFilterService.PartyLedgerObj.PartyLedger_ACCODE;
            this._reportFilterService.PartyLedgerObj.PartyLedger_ACID = '';
            this._reportFilterService.PartyLedgerObj.PartyLedger_SingleAccount = '';
            this.showMergeCombineLedger = true;
            if (this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType == 2) {
                this.showLedgerTable = true;
            }
            else if (this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType == 4) {
                this.showCCtable = true;
            }
            else if (this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType == 1) {
                this.showAreaTable = true;
            }
            else if (this._reportFilterService.PartyLedgerObj.PartyLedger_ReportType == 5) {
                this.showAccGrpTable = true;
            }
        }
        else {
            this.showCombineLedgerList = false;
            this.showMergeCombineLedger = false;
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleCostcenter = [];
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleAccounts = [];
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleGroupAccounts = [];
            this._reportFilterService.PartyLedgerObj.PartyLedger_AreaWise = 0;
            this.showLedgerTable = false;
            this.showCCtable = false;
            this.showAreaTable = false;
            this.showAccGrpTable = false;
        }
    };
    PartyLedgerReport.prototype.AccountEnterClicked = function () {
        this.gridPopupSettingsForPartyLedgerList = this.masterService.getGenericGridPopUpSettings('PartyLedgerListForReport');
        this.genericGridPartyLedger.show();
    };
    PartyLedgerReport.prototype.dblClickAccountSelect = function (account) {
        this._reportFilterService.PartyLedgerObj.PartyLedger_ACID = account.ACID;
        this._reportFilterService.PartyLedgerObj.PartyLedger_ACCNAME = account.ACNAME;
        this._reportFilterService.PartyLedgerObj.PartyLedger_SingleAccount = account.ACID;
        this._reportFilterService.PartyLedgerObj.PartyLedger_ADDRESS = account.ADDRESS;
        this._reportFilterService.PartyLedgerObj.PartyLedger_VATNO = account.VATNO ? account.VATNO : account.GSTNO;
        this._reportFilterService.PartyLedgerObj.PartyLedger_PHONE = account.PHONE;
        this._reportFilterService.PartyLedgerObj.PartyLedger_EMAIL = account.EMAIL;
    };
    PartyLedgerReport.prototype.addAccountToList = function () {
        var _this = this;
        var selectACList = this._reportFilterService.PartyLedgerObj.PartyLedger_multipleAccounts.filter(function (acList) { return acList.ACID == _this._reportFilterService.PartyLedgerObj.multipleACID; });
        if (this._reportFilterService.PartyLedgerObj.multipleACNAME === "" ||
            this._reportFilterService.PartyLedgerObj.multipleACNAME === null ||
            this._reportFilterService.PartyLedgerObj.multipleACNAME === undefined) {
            return;
        }
        if (selectACList.length === 0) {
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleAccounts.push({ ACID: this._reportFilterService.PartyLedgerObj.multipleACID, ACNAME: this._reportFilterService.PartyLedgerObj.multipleACNAME });
            this._reportFilterService.PartyLedgerObj.multipleACNAME = '';
            this._reportFilterService.PartyLedgerObj.multipleACCODE = '';
        }
    };
    PartyLedgerReport.prototype.deleteAccount = function (index) {
        this._reportFilterService.PartyLedgerObj.PartyLedger_multipleAccounts.splice(index, 1);
        this._reportFilterService.selectedAccountParty = '';
    };
    PartyLedgerReport.prototype.MultipleAccountEnterClicked = function () {
        this.gridPopupSettingsForMultiplePartyLedgerList = this.masterService.getGenericGridPopUpSettings('PartyLedgerListForReport');
        this.genericGridMultiplePartyLedger.show();
    };
    PartyLedgerReport.prototype.dblClickMultipleAccountSelect = function (account) {
        this._reportFilterService.PartyLedgerObj.multipleACID = account.ACID;
        this._reportFilterService.PartyLedgerObj.multipleACNAME = account.ACNAME;
    };
    PartyLedgerReport.prototype.checkCostCenterValue = function () {
        if (this._reportFilterService.PartyLedgerObj.PartyLedger_showAllContacts == true) {
            this.showMultipleCC = false;
        }
        else {
            this.showMultipleCC = true;
        }
    };
    PartyLedgerReport.prototype.addCostcenterToList = function () {
        var ccData = this._reportFilterService.PartyLedgerObj.CCENTER;
        this._reportFilterService.PartyLedgerObj.CCENTER = ccData && ccData.CCID ? ccData.CCID : '';
        var selectCCenterList = this._reportFilterService.PartyLedgerObj.PartyLedger_multipleCostcenter.filter(function (centerList) { return centerList.COSTCENTERNAME == ccData.COSTCENTERNAME; });
        if (ccData.COSTCENTERNAME === "" ||
            ccData.COSTCENTERNAME === null ||
            ccData.COSTCENTERNAME === undefined) {
            return;
        }
        if (selectCCenterList.length === 0) {
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleCostcenter.push({ CCID: ccData.CCID, COSTCENTERNAME: ccData.COSTCENTERNAME });
        }
    };
    PartyLedgerReport.prototype.deleteCostcenter = function (index) {
        this._reportFilterService.PartyLedgerObj.PartyLedger_multipleCostcenter.splice(index, 1);
    };
    PartyLedgerReport.prototype.GroupAccountclick = function () {
        this.gridPopupSettingsForMultipleGroupAccountList = this.masterService.getGenericGridPopUpSettings('PartyGroupList');
        this.genericGridMultipleGroupAccount.show();
    };
    PartyLedgerReport.prototype.dblClickGroupAccountSelect = function (account) {
        this._reportFilterService.PartyLedgerObj.Multiple_GROUP_ACID = account.ACID;
        this._reportFilterService.PartyLedgerObj.Multiple_GROUP_ACNAME = account.ACNAME;
    };
    PartyLedgerReport.prototype.addGroupAccountToList = function () {
        var _this = this;
        var selectACList = this._reportFilterService.PartyLedgerObj.PartyLedger_multipleGroupAccounts.filter(function (acList) { return acList.ACNAME == _this._reportFilterService.PartyLedgerObj.Multiple_GROUP_ACNAME; });
        if (this._reportFilterService.PartyLedgerObj.Multiple_GROUP_ACNAME === "" ||
            this._reportFilterService.PartyLedgerObj.Multiple_GROUP_ACNAME === null ||
            this._reportFilterService.PartyLedgerObj.Multiple_GROUP_ACNAME === undefined) {
            return;
        }
        if (selectACList.length === 0) {
            this._reportFilterService.PartyLedgerObj.PartyLedger_multipleGroupAccounts.push({ ACID: this._reportFilterService.PartyLedgerObj.Multiple_GROUP_ACID, ACNAME: this._reportFilterService.PartyLedgerObj.Multiple_GROUP_ACNAME });
            this._reportFilterService.PartyLedgerObj.Multiple_GROUP_ACNAME = '';
            this._reportFilterService.PartyLedgerObj.multiple_Group_ACCODE = '';
        }
    };
    PartyLedgerReport.prototype.deleteGroupAccount = function (index) {
        this._reportFilterService.PartyLedgerObj.PartyLedger_multipleGroupAccounts.splice(index, 1);
        this._reportFilterService.selectedGroupAccountParty = '';
    };
    PartyLedgerReport.prototype.preventInput = function ($event) {
        $event.preventDefault();
        return false;
    };
    PartyLedgerReport.prototype.applyHostListener = function () {
        if (this.partyAccountSelection && this.partyAccountSelection.nativeElement) {
            this.partyAccountSelection.nativeElement.addEventListener('keydown', function (event) {
                if (event.key !== 'Backspace') {
                    event.preventDefault(); // Prevent typing any character except the backspace
                }
            });
        }
    };
    return PartyLedgerReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("PLedgerChild"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_3__masters_components_PLedger_PLedger_component__["a" /* PLedgerComponent */])
], PartyLedgerReport.prototype, "PLedgerChild", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], PartyLedgerReport.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridPartyLedger"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], PartyLedgerReport.prototype, "genericGridPartyLedger", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridMultiplePartyLedger"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], PartyLedgerReport.prototype, "genericGridMultiplePartyLedger", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridMultipleGroupAccount"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], PartyLedgerReport.prototype, "genericGridMultipleGroupAccount", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('partyAccountSelection'),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"])
], PartyLedgerReport.prototype, "partyAccountSelection", void 0);
PartyLedgerReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'party-ledger-report',
        template: __webpack_require__(1746),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_repositories__["a" /* MasterRepo */],
        __WEBPACK_IMPORTED_MODULE_4__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_5__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */],
        __WEBPACK_IMPORTED_MODULE_2__common_services_permission_authService_service__["a" /* AuthService */], __WEBPACK_IMPORTED_MODULE_7__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_7__angular_router__["ActivatedRoute"],
        __WEBPACK_IMPORTED_MODULE_8__common_popupLists_report_filter_report_filter_service__["a" /* ReportFilterService */]])
], PartyLedgerReport);



/***/ }),

/***/ 1513:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_repositories__ = __webpack_require__(13);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PartyLedger; });




var PartyLedger = (function () {
    function PartyLedger(masterService, dialogref, data) {
        var _this = this;
        this.masterService = masterService;
        this.dialogref = dialogref;
        this.data = data;
        this.ReportParameters = {};
        this.division = [];
        this.accountDetails = [];
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.dateString = '';
        this.date1 = '';
        this.daysPrior = '';
        this.dateId = '';
        this.finalDate = '';
        this.subscriptions = [];
        this.listFilterHolder = [];
        this.dropListItem = function (keyword) {
            return new __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__["Observable"](function (observer) {
                _this.masterService.getAccount("from partyreport").map(function (res) {
                    return res.filter(function (x) { return x.ACID.substring(0, 2).toUpperCase() == 'PA'; });
                }).map(function (data) {
                    return data.filter(function (ac) { return ac.ACNAME.toUpperCase().indexOf(keyword.toUpperCase()) > -1; });
                }).subscribe(function (res) { observer.next(res); });
            }).share();
        };
        this.ACCNAME = '';
        this.ACCODE = '';
        this.ACID = '';
        //------Default values on load
        this.ReportParameters.DATE1 = new Date().toJSON().split('T')[0];
        this.changestartDate(this.ReportParameters.DATE1, 'AD');
        this.ReportParameters.DATE2 = new Date().toJSON().split('T')[0];
        this.changeEndDate(this.ReportParameters.DATE2, 'AD');
        this.ReportParameters.CostCenter = " ";
        this.ReportParameters.showNdate = "0";
        this.ReportParameters.InSingleLedger = "0";
        this.ReportParameters.IsAccountLedger = "0";
        this.ReportParameters.REPORTBYCOSTCENTER = "0";
        this.ReportParameters.HASMULTILEDGER = "0";
        this.ReportParameters.SHOWPRODUCTDETAIL = "0";
        this.ReportParameters.CheckSummaryReport = "1";
        this.ReportParameters.SELECTEDACIDLIST = " ";
        this.ReportParameters.DIVISION = "%";
        this.ReportParameters.OPT_SHOWSUMMARY_REPORT = "1";
        //-----------------------
        this.division = [];
        //let data: Array<IDivision> = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                //////console.log("div" + JSON.stringify(res));
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        /* let dataa: Array<TAcList> = [];
         this.accountDetails = [];
         this.masterService.getAcList()
           .subscribe(res => {
               
              this.accountDetails.push(res);
         
               res = JSON.stringify(res);
               ////console.log("acaayo"+res);
           });*/
        this.masterService.getAccDivList();
    }
    PartyLedger.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    PartyLedger.prototype.closeReportBox = function () {
        this.dialogref.close();
    };
    PartyLedger.prototype.DialogClosedResult = function (res) {
        ////console.log("CheckValuee%",this.ReportParameters)
        this.ReportParameters.DIVISION = (this.ReportParameters.DIVISION == null || this.ReportParameters.DIVISION == "") ? "%" : this.ReportParameters.DIVISION;
        if (res == "ok") {
            if (this.ACID == "" || this.ACID == null) {
                alert("Please choose Account!!!");
            }
            else {
                this.ReportParameters.PLEDGER_ACID = this.ACID;
                // ////console.log("Party££££££%%",this.ReportParameters)
                this.reportdataEmit.emit({ status: res, data: { reportname: 'Party Ledger', reportparam: this.ReportParameters } });
            }
        }
        else {
            this.reportdataEmit.emit({ status: res, data: { reportname: 'Party Ledger', reportparam: this.ReportParameters } });
        }
    };
    PartyLedger.prototype.changestartDate = function (value, format) {
        try {
            var adbs = __webpack_require__(19);
            if (format == "AD") {
                var adDate = (value.replace("-", "/")).replace("-", "/");
                var bsDate = adbs.ad2bs(adDate);
                this.ReportParameters.BSDATE1 = this.masterService.toBSDate(value);
            }
            else if (format == "BS") {
                var bsDate = (value.replace("-", "/")).replace("-", "/");
                var adDate = adbs.bs2ad(bsDate);
                this.ReportParameters.DATE1 = this.masterService.toADDate(value);
            }
        }
        catch (e) { }
    };
    PartyLedger.prototype.changeEndDate = function (value, format) {
        try {
            var adbs = __webpack_require__(19);
            if (format == "AD") {
                var adDate = (value.replace("-", "/")).replace("-", "/");
                var bsDate = adbs.ad2bs(adDate);
                this.ReportParameters.BSDATE2 = this.masterService.toBSDate(value);
            }
            else if (format == "BS") {
                var bsDate = (value.replace("-", "/")).replace("-", "/");
                var adDate = adbs.bs2ad(bsDate);
                this.ReportParameters.DATE2 = this.masterService.toADDate(value);
            }
        }
        catch (e) { }
    };
    PartyLedger.prototype.changeDateByRange = function (value) {
        if (value == "1") {
            //alert("week selected!!"); yy-mm-dd
            this.dateId = 7;
            this.dateString = "" + this.getCurrentDate() + "";
            this.date1 = new Date(this.dateString);
            this.daysPrior = parseInt(this.dateId);
            this.date1.setDate(this.date1.getDate() - this.daysPrior);
            this.finalDate = (this.date1.toISOString().slice(0, 11).replace('T', ' '));
            //alert(this.finalDate);
            this.ReportParameters.DATE1 = (this.finalDate).trim();
            this.changestartDate(this.ReportParameters.DATE1, 'AD');
        }
        else if (value == "2") {
            //     //alert("month selected!!");
            this.dateId = 30;
            this.dateString = "" + this.getCurrentDate() + "";
            this.date1 = new Date(this.dateString);
            this.daysPrior = parseInt(this.dateId);
            this.date1.setDate(this.date1.getDate() - this.daysPrior);
            this.finalDate = (this.date1.toISOString().slice(0, 11).replace('T', ' '));
            //alert(this.finalDate);
            this.ReportParameters.DATE1 = (this.finalDate).trim();
            this.changestartDate(this.ReportParameters.DATE1, 'AD');
        }
        else {
            // alert("year selected");
            this.dateId = 365;
            this.dateString = "" + this.getCurrentDate() + "";
            this.date1 = new Date(this.dateString);
            this.daysPrior = parseInt(this.dateId);
            this.date1.setDate(this.date1.getDate() - this.daysPrior);
            this.finalDate = (this.date1.toISOString().slice(0, 11).replace('T', ' '));
            //alert(this.finalDate);
            this.ReportParameters.DATE1 = (this.finalDate).trim();
            this.changestartDate(this.ReportParameters.DATE1, 'AD');
        }
    };
    PartyLedger.prototype.getCurrentDate = function () {
        this.today = new Date();
        this.dd = this.today.getDate();
        this.mm = this.today.getMonth() + 1; //January is 0!
        this.yyyy = this.today.getFullYear();
        if (this.dd < 10) {
            this.dd = '0' + this.dd;
        }
        if (this.mm < 10) {
            this.mm = '0' + this.mm;
        }
        this.today = this.mm + '/' + this.dd + '/' + this.yyyy;
        return this.today;
    };
    PartyLedger.prototype.accodeChanged = function (value) {
        var item = this.masterService.accountList.find(function (x) { return x.ACCODE == value; });
        //console.log({valueType: value,found : item ,items : this.masterService.accountList});
        this.ACCNAME = '';
        if (item) {
            value = item.ACNAME;
            this.ACCNAME = value;
        }
    };
    PartyLedger.prototype.itemChanged = function (value) {
        //console.log({itemChangedValue: value});
        if (typeof (value) === "object") {
            this.ACCNAME = value.ACNAME;
            this.ACCODE = value.ACCODE;
            this.ACID = value.ACID;
        }
    };
    return PartyLedger;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], PartyLedger.prototype, "reportdataEmit", void 0);
PartyLedger = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'result-partyledger-dialog',
        template: __webpack_require__(1747),
        styles: [__webpack_require__(1163), __webpack_require__(120)]
    }),
    __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_3__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object])
], PartyLedger);



/***/ }),

/***/ 1514:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_popupLists_report_filter_report_filter_service__ = __webpack_require__(555);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__common_Transaction_Components_transaction_service__ = __webpack_require__(7);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PostDatedChequeVoucherReport; });










var PostDatedChequeVoucherReport = (function () {
    function PostDatedChequeVoucherReport(masterService, _authService, _reportFilterService, arouter, _ActivatedRoute, reportService, alertService, _transactionService, dialogref, data) {
        var _this = this;
        this.masterService = masterService;
        this._authService = _authService;
        this._reportFilterService = _reportFilterService;
        this.arouter = arouter;
        this._ActivatedRoute = _ActivatedRoute;
        this.reportService = reportService;
        this.alertService = alertService;
        this._transactionService = _transactionService;
        this.dialogref = dialogref;
        this.data = data;
        this.division = [];
        this.CostcenterList = [];
        this.instanceWiseRepName = 'Post Dated Cheque Voucher Report';
        this.gridPopupSettingsForPartyLedgerList = new __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridACListPartyPopupSettings = new __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.userProfile = this._authService.getUserProfile();
        this.division = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        this.masterService.getCostcenter().subscribe(function (res) {
            _this.CostcenterList = res;
        });
    }
    PostDatedChequeVoucherReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            var mode = params.mode;
            if (mode == "DRILL" && _this.reportService.drillParam.returnUrl && _this.reportService.drillParam.reportname == 'Post Dated Cheque Voucher Report' && _this._reportFilterService.PostDatedChequeObj.assignPrevioiusDate != true) {
                _this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DATE1 = _this.reportService.drillParam.reportparam.DATE1;
                _this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DATE2 = _this.reportService.drillParam.reportparam.DATE2;
                _this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DIV = _this.reportService.drillParam.reportparam.DIV;
                _this._reportFilterService.PostDatedChequeObj.PostDatedCheque_CostCenter = _this.reportService.drillParam.reportparam.COSTCENTER;
            }
            else {
                if (_this._reportFilterService.PostDatedChequeObj.assignPrevioiusDate != true) {
                    _this.masterService.getAccDivList();
                    // this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DATE1 = this.masterService.PhiscalObj.BeginDate.split('T')[0];
                    // if (this.userProfile.CompanyInfo.ActualFY == this.masterService.PhiscalObj.PhiscalID) {
                    //   this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DATE2 = new Date().toJSON().split('T')[0];
                    //   this.changeEndDate(this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DATE2, "AD");
                    // }
                    // else {
                    //   this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DATE2 = this.masterService.PhiscalObj.EndDate.split('T')[0];
                    //   this.changeEndDate(this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DATE2, "AD");
                    // }
                    _this.masterService.viewDivision.subscribe(function () {
                        if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                            _this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DIV = '%';
                        }
                        else {
                            if (_this.masterService.userSetting.userwisedivision == 1 && _this.division.length == 1) {
                                _this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DIV = _this.division[0].INITIAL;
                            }
                            else {
                                _this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                            }
                        }
                    });
                    _this._reportFilterService.PostDatedChequeObj.PostDatedCheque_CostCenter = '%';
                    _this._reportFilterService.PostDatedChequeObj.PostDatedCheque_TRANTYPE = 'Party Receipt';
                    _this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DETAILSREPORT = '0';
                    _this._reportFilterService.PostDatedChequeObj.PostDatedCheque_TRANSACTIONMODE = '0';
                    _this._reportFilterService.PostDatedChequeObj.PostDatedCheque_CHEQUEDATEWISEREPORT = '0';
                    _this.ChangeDate();
                }
                if (params.instancename) {
                    // ////console.log("@@[Report0]",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                    _this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                    _this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                    _this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
                    _this._reportFilterService.PostDatedChequeObj.PostDatedCheque_CostCenter = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.COSTCENTER;
                }
            }
        });
        this.changeEntryDate(this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DATE1, "AD");
        this.changeEndDate(this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DATE2, "AD");
    };
    PostDatedChequeVoucherReport.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.PostDatedChequeObj.PostDatedCheque_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            if (this._reportFilterService.PostDatedChequeObj.PostDatedCheque_CHEQUEDATEWISEREPORT == 0) {
                var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
                if (Validatedata == true) {
                    var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                    var adDate1 = adbs.bs2ad(bsDate1);
                    this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DATE1 = this.masterService.toADDate(value);
                }
                else {
                    this.alertService.error("Cannot Change the date");
                    return;
                }
            }
            else {
                this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DATE1 = this.masterService.toADDate(value);
            }
        }
    };
    PostDatedChequeVoucherReport.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.PostDatedChequeObj.PostDatedCheque_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_2);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            // if (Validatedata == true) {
            var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            var adDate1 = adbs.bs2ad(bsDate1);
            this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DATE2 = this.masterService.toADDate(value);
            // } else {
            //   this.alertService.error("Cannot Change the date");
            //   return;
            // }
        }
    };
    PostDatedChequeVoucherReport.prototype.changeEntryCDate = function (value, format) { };
    PostDatedChequeVoucherReport.prototype.changeEndCDate = function (value, format) { };
    PostDatedChequeVoucherReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    PostDatedChequeVoucherReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    PostDatedChequeVoucherReport.prototype.DialogClosedResult = function (res) {
        var _this = this;
        this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DIV = (this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DIV == null || this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DIV == "") ? "%" : this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DIV;
        var multipleReportFormateName = '';
        if (this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DETAILSREPORT == 1) {
            multipleReportFormateName = 'Post Dated Cheque Voucher Report_1';
        }
        else {
            multipleReportFormateName = 'Post Dated Cheque Voucher Report';
        }
        if (this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DIV && this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DIV == '%') {
            this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DIVISIONNAME = 'All';
        }
        else if (this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DIV && this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DIV != '%') {
            var abc = this.division.filter(function (x) { return x.INITIAL == _this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DIV; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DIVISIONNAME = abc[0].NAME;
            }
            else {
                this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DIVISIONNAME = '';
            }
        }
        else {
            this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DIVISIONNAME = '';
        }
        if (this._reportFilterService.PostDatedChequeObj.PostDatedCheque_CostCenter && this._reportFilterService.PostDatedChequeObj.PostDatedCheque_CostCenter == '%') {
            this._reportFilterService.PostDatedChequeObj.PostDatedCheque_COSTCENTERDISPLAYNAME = '';
        }
        else if (this._reportFilterService.PostDatedChequeObj.PostDatedCheque_CostCenter != '%') {
            var abc = this.CostcenterList.filter(function (x) { return x.CCID == _this._reportFilterService.PostDatedChequeObj.PostDatedCheque_CostCenter; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.PostDatedChequeObj.PostDatedCheque_COSTCENTERDISPLAYNAME = abc[0].COSTCENTERNAME;
            }
            else {
                this._reportFilterService.PostDatedChequeObj.PostDatedCheque_COSTCENTERDISPLAYNAME = '';
            }
        }
        else {
            this._reportFilterService.PostDatedChequeObj.PostDatedCheque_COSTCENTERDISPLAYNAME = '';
        }
        if (this._reportFilterService.PostDatedChequeObj.PostDatedCheque_PARTYNAME == "") {
            this._reportFilterService.PostDatedChequeObj.PostDatedCheque_PARTYID = '%';
        }
        if (this._reportFilterService.PostDatedChequeObj.PostDatedCheque_BANKNAME == "") {
            this._reportFilterService.PostDatedChequeObj.PostDatedCheque_BANKID = '%';
        }
        if (res == "ok") {
            this._reportFilterService.PostDatedChequeObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.loadedTimesD == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Post Dated Cheque Report',
                    activeurlpath: this.arouter.url,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.loadedTimesD,
                    activerurlpath2: activeurlpath2,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Post Dated Cheque Report' + '_' + this._reportFilterService.loadedTimesD,
                    activeurlpath: this.arouter.url,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.loadedTimesD,
                    activerurlpath2: activeurlpath2,
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: 'Post Dated Cheque Voucher Report',
                reportname: multipleReportFormateName, instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.loadedTimesD, reportparam: {
                    DATE1: this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DATE1,
                    DATE2: this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DATE2,
                    BSDATE1: this._reportFilterService.PostDatedChequeObj.PostDatedCheque_BSDATE1,
                    BSDATE2: this._reportFilterService.PostDatedChequeObj.PostDatedCheque_BSDATE2,
                    DIV: this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DIV,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    COMID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    CCENTER: this._reportFilterService.PostDatedChequeObj.PostDatedCheque_CostCenter ? this._reportFilterService.PostDatedChequeObj.PostDatedCheque_CostCenter : '%',
                    TRANTYPE: this._reportFilterService.PostDatedChequeObj.PostDatedCheque_TRANTYPE,
                    DETAILSREPORT: this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DETAILSREPORT,
                    TRANSACTIONMODE: this._reportFilterService.PostDatedChequeObj.PostDatedCheque_TRANSACTIONMODE,
                    CHEQUEDATEWISEREPORT: this._reportFilterService.PostDatedChequeObj.PostDatedCheque_CHEQUEDATEWISEREPORT,
                    COSTCENTER: this._reportFilterService.PostDatedChequeObj.PostDatedCheque_CostCenter,
                    DIVISIONNAME: this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DIVISIONNAME ? this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DIVISIONNAME : '',
                    COSTCENTERDISPLAYNAME: this._reportFilterService.PostDatedChequeObj.PostDatedCheque_COSTCENTERDISPLAYNAME ? this._reportFilterService.PostDatedChequeObj.PostDatedCheque_COSTCENTERDISPLAYNAME : '',
                    BANK_ACID: this._reportFilterService.PostDatedChequeObj.PostDatedCheque_BANKID ? this._reportFilterService.PostDatedChequeObj.PostDatedCheque_BANKID : '%',
                    ACID: this._reportFilterService.PostDatedChequeObj.PostDatedCheque_PARTYID ? this._reportFilterService.PostDatedChequeObj.PostDatedCheque_PARTYID : '%',
                    PARTYDISPLAYNAME: this._reportFilterService.PostDatedChequeObj.PostDatedCheque_PARTYNAME ? this._reportFilterService.PostDatedChequeObj.PostDatedCheque_PARTYNAME : '',
                    BANKDISPLAYNAME: this._reportFilterService.PostDatedChequeObj.PostDatedCheque_BANKNAME ? this._reportFilterService.PostDatedChequeObj.PostDatedCheque_BANKNAME : '',
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.loadedTimesD = this._reportFilterService.loadedTimesD + 1;
        }
    };
    PostDatedChequeVoucherReport.prototype.ChangeDate = function () {
        if (this._reportFilterService.PostDatedChequeObj.PostDatedCheque_CHEQUEDATEWISEREPORT == 0) {
            this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DATE1 = this.masterService.PhiscalObj.BeginDate.split('T')[0];
            if (this.userProfile.CompanyInfo.ActualFY == this.masterService.PhiscalObj.PhiscalID) {
                this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DATE2 = new Date().toJSON().split('T')[0];
            }
            else {
                this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DATE2 = this.masterService.PhiscalObj.EndDate.split('T')[0];
            }
        }
        else if (this._reportFilterService.PostDatedChequeObj.PostDatedCheque_CHEQUEDATEWISEREPORT == 1) {
            this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DATE1 = new Date().toJSON().split('T')[0];
            ;
            this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DATE2 = new Date().toJSON().split('T')[0];
            ;
        }
        this.changeEntryDate(this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DATE1, "AD");
        this.changeEndDate(this._reportFilterService.PostDatedChequeObj.PostDatedCheque_DATE2, "AD");
    };
    PostDatedChequeVoucherReport.prototype.PartyEnterCommand = function () {
        this.gridPopupSettingsForPartyLedgerList = this.masterService.getGenericGridPopUpSettings('PartyLedgerList');
        this.genericGridPartyLedger.show();
    };
    PostDatedChequeVoucherReport.prototype.onPartySelect = function (event) {
        this._reportFilterService.PostDatedChequeObj.PostDatedCheque_PARTYID = event.ACID;
        this._reportFilterService.PostDatedChequeObj.PostDatedCheque_PARTYNAME = event.ACNAME;
    };
    PostDatedChequeVoucherReport.prototype.BankEntercommand = function () {
        var TRNMODE = "" + this._transactionService.TrnMainObj.TRNMODE;
        TRNMODE = "Bank Deposit Voucher";
        this.gridACListPartyPopupSettings = {
            title: "Accounts",
            apiEndpoints: "/getAccountPagedListByMapId/Default/" + TRNMODE + "/",
            defaultFilterIndex: 1,
            columns: [
                {
                    key: "ACCODE",
                    title: "AC CODE",
                    hidden: false,
                    noSearch: false
                },
                {
                    key: "ACNAME",
                    title: "A/C NAME",
                    hidden: false,
                    noSearch: false
                }
            ]
        };
        this.genericGridACListParty.show();
    };
    PostDatedChequeVoucherReport.prototype.onBankNameSelect = function (event) {
        this._reportFilterService.PostDatedChequeObj.PostDatedCheque_BANKID = event.ACID;
        this._reportFilterService.PostDatedChequeObj.PostDatedCheque_BANKNAME = event.ACNAME;
    };
    PostDatedChequeVoucherReport.prototype.max1 = function () {
        var max;
        if (this._reportFilterService.PostDatedChequeObj.PostDatedCheque_CHEQUEDATEWISEREPORT == 0) {
            max = this.masterService.date1;
        }
        else {
            max = "";
        }
        return max;
    };
    return PostDatedChequeVoucherReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridPartyLedger"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], PostDatedChequeVoucherReport.prototype, "genericGridPartyLedger", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridACListParty"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], PostDatedChequeVoucherReport.prototype, "genericGridACListParty", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], PostDatedChequeVoucherReport.prototype, "reportdataEmit", void 0);
PostDatedChequeVoucherReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'postdated-report-selector',
        template: __webpack_require__(1748),
        styles: [__webpack_require__(1163), __webpack_require__(120)],
    }),
    __param(9, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__["a" /* AuthService */],
        __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_5__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_5__angular_router__["ActivatedRoute"],
        __WEBPACK_IMPORTED_MODULE_6__common_popupLists_report_filter_report_filter_service__["a" /* ReportFilterService */], __WEBPACK_IMPORTED_MODULE_7__common_services_alert_alert_service__["a" /* AlertService */], __WEBPACK_IMPORTED_MODULE_9__common_Transaction_Components_transaction_service__["a" /* TransactionService */],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object])
], PostDatedChequeVoucherReport);



/***/ }),

/***/ 1515:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ProfitLossReport; });







var ProfitLossReport = (function () {
    function ProfitLossReport(masterService, _authService, _reportFilterService, arouter, alertService, dialogref, _ActivatedRoute, data) {
        var _this = this;
        this.masterService = masterService;
        this._authService = _authService;
        this._reportFilterService = _reportFilterService;
        this.arouter = arouter;
        this.alertService = alertService;
        this.dialogref = dialogref;
        this._ActivatedRoute = _ActivatedRoute;
        this.data = data;
        this.division = [];
        this.instanceWiseRepName = 'Profit Loss Report';
        this.CostcenterList = [];
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.userProfile = this._authService.getUserProfile();
        this.userSetting = _authService.getSetting();
        this.division = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        this.masterService.getCostcenter().subscribe(function (res) {
            _this.CostcenterList = res;
        });
        // this.masterService.getAccDivList();
    }
    ProfitLossReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            if (_this._reportFilterService.ProfitLossObj.assignPrevioiusDate != true) {
                _this.masterService.getAccDivList();
                _this._reportFilterService.ProfitLossObj.ProfitLoss_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                if (_this.userProfile.CompanyInfo.ActualFY == _this.masterService.PhiscalObj.PhiscalID) {
                    _this._reportFilterService.ProfitLossObj.ProfitLoss_DATE2 = new Date().toJSON().split('T')[0];
                }
                else {
                    _this._reportFilterService.ProfitLossObj.ProfitLoss_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                }
                _this.masterService.viewDivision.subscribe(function () {
                    if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                        _this._reportFilterService.ProfitLossObj.ProfitLoss_DIV = '%';
                    }
                    else {
                        if (_this.masterService.userSetting.userwisedivision == 1 && _this.division.length == 1) {
                            _this._reportFilterService.ProfitLossObj.ProfitLoss_DIV = _this.division[0].INITIAL;
                        }
                        else {
                            _this._reportFilterService.ProfitLossObj.ProfitLoss_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                        }
                    }
                });
                _this._reportFilterService.ProfitLossObj.ProfitLoss_VERTICALFORMAT = '1';
                // this._reportFilterService.ProfitLossObj.ProfitLoss_OSTOCK = 0;
                // this._reportFilterService.ProfitLossObj.ProfitLoss_CSTOCK = 0;
                _this._reportFilterService.ProfitLossObj.ProfitLoss_SHOWSUBLEDGER = 0;
                _this._reportFilterService.ProfitLossObj.ProfitLoss_CostCenter = '%';
                if (_this.userSetting.IS_NESTLE == 1) {
                    _this._reportFilterService.ProfitLossObj.ProfitLoss_COMPANYTYPE = 'DMS';
                }
                else {
                    _this._reportFilterService.ProfitLossObj.ProfitLoss_COMPANYTYPE = 'NONDMS';
                }
            }
            if (params.instancename) {
                // ////console.log("@@[plreport0]",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                _this._reportFilterService.ProfitLossObj.ProfitLoss_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                _this._reportFilterService.ProfitLossObj.ProfitLoss_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                _this._reportFilterService.ProfitLossObj.ProfitLoss_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
                _this._reportFilterService.ProfitLossObj.ProfitLoss_SHOWSUBLEDGER = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWSUBLEDGER;
                _this._reportFilterService.ProfitLossObj.ProfitLoss_VERTICALFORMAT = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.VERTICALFORMAT;
                _this._reportFilterService.ProfitLossObj.ProfitLoss_OSTOCK = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.OSTOCK;
                _this._reportFilterService.ProfitLossObj.ProfitLoss_CSTOCK = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.CSTOCK;
                if (_this.userSetting.IS_NESTLE == 1) {
                    _this._reportFilterService.ProfitLossObj.ProfitLoss_COMPANYTYPE = 'DMS';
                }
                else {
                    _this._reportFilterService.ProfitLossObj.ProfitLoss_COMPANYTYPE = 'NONDMS';
                }
                _this._reportFilterService.ProfitLossObj.ProfitLoss_CostCenter = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.COSTCENTER;
            }
        });
        // this.calcStock();
        this.changeEntryDate(this._reportFilterService.ProfitLossObj.ProfitLoss_DATE1, "AD");
        this.changeEndDate(this._reportFilterService.ProfitLossObj.ProfitLoss_DATE2, "AD");
    };
    ProfitLossReport.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.ProfitLossObj.ProfitLoss_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.ProfitLossObj.ProfitLoss_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
        }
    };
    ProfitLossReport.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.ProfitLossObj.ProfitLoss_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            var adDate = adbs.bs2ad(bsDate_2);
            this._reportFilterService.ProfitLossObj.ProfitLoss_DATE2 = this.masterService.toADDate(value);
        }
    };
    ProfitLossReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    ProfitLossReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    ProfitLossReport.prototype.DialogClosedResult = function (res) {
        //console.log("ProfitLoss_OSTOCK",this._reportFilterService.ProfitLossObj.ProfitLoss_OSTOCK,this._reportFilterService.ProfitLossObj.ProfitLoss_CSTOCK)
        // if (this._reportFilterService.ProfitLossObj.ProfitLoss_OSTOCK === '' || this._reportFilterService.ProfitLossObj.ProfitLoss_OSTOCK === null ||
        //     this._reportFilterService.ProfitLossObj.ProfitLoss_OSTOCK === undefined || this._reportFilterService.ProfitLossObj.ProfitLoss_CSTOCK === '' || this._reportFilterService.ProfitLossObj.ProfitLoss_CSTOCK === null ||
        //     this._reportFilterService.ProfitLossObj.ProfitLoss_CSTOCK === undefined) {
        //     this.alertService.info("Please Calculate Stock!!");
        //     return;
        // }
        var _this = this;
        var multipleReportFormateName = 'Profit Loss Report';
        if (this._reportFilterService.ProfitLossObj.ProfitLoss_VERTICALFORMAT == 1) {
            multipleReportFormateName = 'Profit Loss Report';
        }
        else if (this._reportFilterService.ProfitLossObj.ProfitLoss_VERTICALFORMAT == 0) {
            multipleReportFormateName = 'PLACCOUNT';
        }
        if (this._reportFilterService.ProfitLossObj.ProfitLoss_DIV && this._reportFilterService.ProfitLossObj.ProfitLoss_DIV == '%') {
            this._reportFilterService.ProfitLossObj.ProfitLoss_DIVISIONNAME = 'All';
        }
        else if (this._reportFilterService.ProfitLossObj.ProfitLoss_DIV && this._reportFilterService.ProfitLossObj.ProfitLoss_DIV != '%') {
            var abc = this.division.filter(function (x) { return x.INITIAL == _this._reportFilterService.ProfitLossObj.ProfitLoss_DIV; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.ProfitLossObj.ProfitLoss_DIVISIONNAME = abc[0].NAME;
            }
            else {
                this._reportFilterService.ProfitLossObj.ProfitLoss_DIVISIONNAME = '';
            }
        }
        else {
            this._reportFilterService.ProfitLossObj.ProfitLoss_DIVISIONNAME = '';
        }
        if (this._reportFilterService.ProfitLossObj.ProfitLoss_CostCenter && this._reportFilterService.ProfitLossObj.ProfitLoss_CostCenter == '%') {
            this._reportFilterService.ProfitLossObj.ProfitLoss_COSTCENTERDISPLAYNAME = 'All';
        }
        else if (this._reportFilterService.ProfitLossObj.ProfitLoss_CostCenter != '%') {
            var abc = this.CostcenterList.filter(function (x) { return x.CCID == _this._reportFilterService.ProfitLossObj.ProfitLoss_CostCenter; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.ProfitLossObj.ProfitLoss_COSTCENTERDISPLAYNAME = abc[0].COSTCENTERNAME;
            }
            else {
                this._reportFilterService.ProfitLossObj.ProfitLoss_COSTCENTERDISPLAYNAME = '';
            }
        }
        else {
            this._reportFilterService.ProfitLossObj.ProfitLoss_COSTCENTERDISPLAYNAME = '';
        }
        if (res == "ok") {
            this._reportFilterService.ProfitLossObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.ProfitLoss_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Profit Loss Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.ProfitLoss_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Profit Loss Report' + '_' + this._reportFilterService.ProfitLoss_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.ProfitLoss_loadedTimes,
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: 'Profit Loss Report',
                reportname: multipleReportFormateName,
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.ProfitLoss_loadedTimes,
                reportparam: {
                    DATE1: this._reportFilterService.ProfitLossObj.ProfitLoss_DATE1,
                    DATE2: this._reportFilterService.ProfitLossObj.ProfitLoss_DATE2,
                    BSDATE1: this._reportFilterService.ProfitLossObj.ProfitLoss_BSDATE1,
                    BSDATE2: this._reportFilterService.ProfitLossObj.ProfitLoss_BSDATE2,
                    DIV: this._reportFilterService.ProfitLossObj.ProfitLoss_DIV ? this._reportFilterService.ProfitLossObj.ProfitLoss_DIV : '%',
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    CID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    SHOWSUBLEDGER: this._reportFilterService.ProfitLossObj.ProfitLoss_SHOWSUBLEDGER ? this._reportFilterService.ProfitLossObj.ProfitLoss_SHOWSUBLEDGER : 0,
                    COMPANYID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    COMPANYTYPE: this._reportFilterService.ProfitLossObj.ProfitLoss_COMPANYTYPE ? this._reportFilterService.ProfitLossObj.ProfitLoss_COMPANYTYPE : 'NONDMS',
                    OSTOCK: this._reportFilterService.ProfitLossObj.ProfitLoss_OSTOCK ? this._reportFilterService.ProfitLossObj.ProfitLoss_OSTOCK : 0,
                    CSTOCK: this._reportFilterService.ProfitLossObj.ProfitLoss_CSTOCK ? this._reportFilterService.ProfitLossObj.ProfitLoss_CSTOCK : 0,
                    SUMMARY: 0,
                    LEV: 100,
                    VERTICALFORMAT: this._reportFilterService.ProfitLossObj.ProfitLoss_VERTICALFORMAT ? this._reportFilterService.ProfitLossObj.ProfitLoss_VERTICALFORMAT : 1,
                    DIVISIONNAME: this._reportFilterService.ProfitLossObj.ProfitLoss_DIVISIONNAME ? this._reportFilterService.ProfitLossObj.ProfitLoss_DIVISIONNAME : '',
                    COSTCENTER: this._reportFilterService.ProfitLossObj.ProfitLoss_CostCenter ? this._reportFilterService.ProfitLossObj.ProfitLoss_CostCenter : '%',
                    COSTCENTERDISPLAYNAME: this._reportFilterService.ProfitLossObj.ProfitLoss_COSTCENTERDISPLAYNAME ? this._reportFilterService.ProfitLossObj.ProfitLoss_COSTCENTERDISPLAYNAME : '',
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.ProfitLoss_loadedTimes = this._reportFilterService.ProfitLoss_loadedTimes + 1;
        }
    };
    ProfitLossReport.prototype.calcStock = function () {
        var _this = this;
        var reportparam = {};
        reportparam.DATE1 = this._reportFilterService.ProfitLossObj.ProfitLoss_DATE1;
        reportparam.DATE2 = this._reportFilterService.ProfitLossObj.ProfitLoss_DATE2;
        reportparam.DIV = this._reportFilterService.ProfitLossObj.ProfitLoss_DIV;
        reportparam.COMPANYTYPE = this._reportFilterService.ProfitLossObj.ProfitLoss_COMPANYTYPE;
        reportparam.PHISCALID = this.masterService.PhiscalObj.PhiscalID;
        this._reportFilterService.ProfitLossObj.ProfitLoss_OSTOCK = 0;
        this._reportFilterService.ProfitLossObj.ProfitLoss_CSTOCK = 0;
        this._reportFilterService.stockCalculation(reportparam).subscribe(function (res) {
            _this._reportFilterService.ProfitLossObj.ProfitLoss_OSTOCK = res.result;
            _this._reportFilterService.ProfitLossObj.ProfitLoss_CSTOCK = res.result2;
        });
    };
    ProfitLossReport.prototype.changeDivision = function () {
        this._reportFilterService.ProfitLossObj.ProfitLoss_OSTOCK = 0;
        this._reportFilterService.ProfitLossObj.ProfitLoss_CSTOCK = 0;
    };
    return ProfitLossReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], ProfitLossReport.prototype, "reportdataEmit", void 0);
ProfitLossReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'profitloss-report',
        template: __webpack_require__(1749),
        styles: [__webpack_require__(1163), __webpack_require__(120)],
    }),
    __param(7, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__["a" /* AuthService */],
        __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_5__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], __WEBPACK_IMPORTED_MODULE_5__angular_router__["ActivatedRoute"], Object])
], ProfitLossReport);



/***/ }),

/***/ 1516:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PurchaseBookReport; });



var PurchaseBookReport = (function () {
    function PurchaseBookReport(masterService, dialogref, data) {
        var _this = this;
        this.masterService = masterService;
        this.dialogref = dialogref;
        this.data = data;
        this.ReportParameters = {};
        this.division = [];
        this.supplierList = [];
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.dateString = '';
        this.date1 = '';
        this.daysPrior = '';
        this.dateId = '';
        this.finalDate = '';
        //------Default values on load
        this.ReportParameters.DATE1 = new Date().toJSON().split('T')[0];
        this.changestartDate(this.ReportParameters.DATE1, 'AD');
        this.ReportParameters.DATE2 = new Date().toJSON().split('T')[0];
        this.changeEndDate(this.ReportParameters.DATE2, 'AD');
        this.ReportParameters.OPT_REPORT_TYPE = "1";
        this.ReportParameters.OPT_SHOWDETAL_REPORT = "0";
        this.ReportParameters.CHK_INCLUDE_RETURN = "0";
        this.ReportParameters.VCHR = "A";
        this.ReportParameters.OPT_INAD = "0";
        this.ReportParameters.FX_VOUCHER_TYPE = "SI";
        this.ReportParameters.DIVISION = "%";
        this.ReportParameters.SUPPLIER_ACID = "%";
        //----------------
        this.division = [];
        //let data: Array<IDivision> = [];
        this.masterService.getAllDivisions()
            .subscribe(function (res) {
            //////console.log("div" + res);
            _this.division.push(res);
        }, function (error) {
            _this.masterService.resolveError(error, "divisions - getDivisions");
        });
        //let dataa: Array<TAcList> = [];
        this.supplierList = [];
        this.masterService.getSupplierList()
            .subscribe(function (res) {
            _this.supplierList.push(res);
            //res = JSON.stringify(res);
            //////console.log("aayo"+res);                
        });
    }
    PurchaseBookReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    PurchaseBookReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    PurchaseBookReport.prototype.DialogClosedResult = function (res) {
        this.ReportParameters.DIVISION = (this.ReportParameters.DIVISION == null || this.ReportParameters.DIVISION == "") ? "%" : this.ReportParameters.DIVISION;
        this.ReportParameters.SUPPLIER_ACID = (this.ReportParameters.SUPPLIER_ACID == null || this.ReportParameters.SUPPLIER_ACID == "") ? "%" : this.ReportParameters.SUPPLIER_ACID;
        //alert("supaC-"+this.ReportParameters.SUPPLIER_ACID+"~~~DIV" + this.ReportParameters.DIVISION + "```DT" + this.ReportParameters.DATE1+ "~~~DT" + this.ReportParameters.DATE2+ "~~~CHK" + this.ReportParameters.CHK_INCLUDE_RETURN+ "~~~TYPE" + this.ReportParameters.OPT_REPORT_TYPE+ "~~~SHOW" + this.ReportParameters.OPT_SHOWDETAL_REPORT);
        this.reportdataEmit.emit({ status: res, data: { reportname: 'Purchase Book Report', reportparam: this.ReportParameters } });
    };
    PurchaseBookReport.prototype.changestartDate = function (value, format) {
        try {
            var adbs = __webpack_require__(19);
            if (format == "AD") {
                var adDate = (value.replace("-", "/")).replace("-", "/");
                var bsDate = adbs.ad2bs(adDate);
                this.ReportParameters.BSDATE1 = this.masterService.toBSDate(value);
            }
            else if (format == "BS") {
                var bsDate = (value.replace("-", "/")).replace("-", "/");
                var adDate = adbs.bs2ad(bsDate);
                this.ReportParameters.DATE1 = this.masterService.toADDate(value);
            }
        }
        catch (e) { }
    };
    PurchaseBookReport.prototype.changeEndDate = function (value, format) {
        try {
            var adbs = __webpack_require__(19);
            if (format == "AD") {
                var adDate = (value.replace("-", "/")).replace("-", "/");
                var bsDate = adbs.ad2bs(adDate);
                this.ReportParameters.BSDATE2 = this.masterService.toBSDate(value);
            }
            else if (format == "BS") {
                var bsDate = (value.replace("-", "/")).replace("-", "/");
                var adDate = adbs.bs2ad(bsDate);
                this.ReportParameters.DATE2 = this.masterService.toADDate(value);
            }
        }
        catch (e) { }
    };
    PurchaseBookReport.prototype.changeDateByRange = function (value) {
        if (value == "1") {
            //alert("week selected!!"); yy-mm-dd
            this.dateId = 7;
            this.dateString = "" + this.getCurrentDate() + "";
            this.date1 = new Date(this.dateString);
            this.daysPrior = parseInt(this.dateId);
            this.date1.setDate(this.date1.getDate() - this.daysPrior);
            this.finalDate = (this.date1.toISOString().slice(0, 11).replace('T', ' '));
            //alert(this.finalDate);
            this.ReportParameters.DATE1 = (this.finalDate).trim();
            this.changestartDate(this.ReportParameters.DATE1, 'AD');
        }
        else if (value == "2") {
            //     //alert("month selected!!");
            this.dateId = 30;
            this.dateString = "" + this.getCurrentDate() + "";
            this.date1 = new Date(this.dateString);
            this.daysPrior = parseInt(this.dateId);
            this.date1.setDate(this.date1.getDate() - this.daysPrior);
            this.finalDate = (this.date1.toISOString().slice(0, 11).replace('T', ' '));
            //alert(this.finalDate);
            this.ReportParameters.DATE1 = (this.finalDate).trim();
            this.changestartDate(this.ReportParameters.DATE1, 'AD');
        }
        else {
            // alert("year selected");
            this.dateId = 365;
            this.dateString = "" + this.getCurrentDate() + "";
            this.date1 = new Date(this.dateString);
            this.daysPrior = parseInt(this.dateId);
            this.date1.setDate(this.date1.getDate() - this.daysPrior);
            this.finalDate = (this.date1.toISOString().slice(0, 11).replace('T', ' '));
            //alert(this.finalDate);
            this.ReportParameters.DATE1 = (this.finalDate).trim();
            this.changestartDate(this.ReportParameters.DATE1, 'AD');
        }
    };
    PurchaseBookReport.prototype.getCurrentDate = function () {
        this.today = new Date();
        this.dd = this.today.getDate();
        this.mm = this.today.getMonth() + 1; //January is 0!
        this.yyyy = this.today.getFullYear();
        if (this.dd < 10) {
            this.dd = '0' + this.dd;
        }
        if (this.mm < 10) {
            this.mm = '0' + this.mm;
        }
        this.today = this.mm + '/' + this.dd + '/' + this.yyyy;
        return this.today;
    };
    return PurchaseBookReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], PurchaseBookReport.prototype, "reportdataEmit", void 0);
PurchaseBookReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'result-purchasebookreport-dialog',
        //     template:`
        //         <div class="modal-dialog modal-md">
        //         <div class="modal-content">
        //         <div class="modal-footer">
        //         <input type="text" style="height:25px;width:100%"   [(ngModel)]="ReportParameters.input1"/>
        //         <input type="text" style="height:25px;width:100%"  [(ngModel)]="ReportParameters.input2"/>
        //         <input type="text" style="height:25px;width:100%"   [(ngModel)]="ReportParameters.input3"/>
        //         <input type="text" style="height:25px;width:100%"   [(ngModel)]="ReportParameters.input1"/>
        //         <input type="text" style="height:25px;width:100%"  [(ngModel)]="ReportParameters.input2"/>
        //         <input type="text" style="height:25px;width:100%"   [(ngModel)]="ReportParameters.input3"/>
        //         <button class="btn btn-info confirm-btn" type="button"  (click)=onload()>RUN</button>
        //         </div>
        //         </div>
        //         </div>
        // `
        template: __webpack_require__(1750),
        styles: [__webpack_require__(1163), __webpack_require__(120)]
    }),
    __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object])
], PurchaseBookReport);



/***/ }),

/***/ 1517:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_repositories__ = __webpack_require__(13);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SalesBookReport; });




var SalesBookReport = (function () {
    function SalesBookReport(masterService, dialogref, data) {
        var _this = this;
        this.masterService = masterService;
        this.dialogref = dialogref;
        this.data = data;
        this.ReportParameters = {};
        this.division = [];
        this.customeraclist = [];
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        //Autocomplete begins
        this.dropListItem = function (keyword) {
            return new __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__["Observable"](function (observer) {
                _this.masterService.getCustomers().map(function (data) {
                    return data.filter(function (ac) { return ac.ACNAME.toUpperCase().indexOf(keyword.toUpperCase()) > -1; });
                }).subscribe(function (res) { observer.next(res); });
            }).share();
        };
        this.ACCNAME = '';
        this.ACCODE = '';
        this.ACID = '';
        this.dateString = '';
        this.date1 = '';
        this.daysPrior = '';
        this.dateId = '';
        this.finalDate = '';
        //----------Default values on load
        this.ReportParameters.DATE1 = new Date().toJSON().split('T')[0];
        this.changestartDate(this.ReportParameters.DATE1, 'AD');
        this.ReportParameters.DATE2 = new Date().toJSON().split('T')[0];
        this.changeEndDate(this.ReportParameters.DATE2, 'AD');
        this.ReportParameters.OPT_REPORT_TYPE = "1";
        this.ReportParameters.OPT_SHOWDETAL_REPORT = "0";
        this.ReportParameters.OPT_COUNTERSALES = "0";
        this.ReportParameters.OPT_INAD = "0";
        this.ReportParameters.DISRATE = "0";
        this.ReportParameters.CHK_SALESMANWISESUMMARY = "0";
        this.ReportParameters.OPT_DISCOUNTEDSALES = "0";
        this.ReportParameters.CHK_INCLUDE_RETURN = "0";
        this.ReportParameters.DIVISION = "%";
        //-------------------------------
        this.division = [];
        this.masterService.getAllDivisions()
            .subscribe(function (res) {
            _this.division.push(res);
        }, function (error) {
            _this.masterService.resolveError(error, "divisions - getDivisions");
        });
        // this.customeraclist = [];
        // this.masterService.getCustomers()
        // .subscribe(res => {
        //     ////console.log("customer" + JSON.stringify(res));
        //     //this.customeraclist.push(res);
        // },error => {
        //     this.masterService.resolveError(error, "customer - customerlist");        
        // });
    }
    SalesBookReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    SalesBookReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!!");
    };
    SalesBookReport.prototype.DialogClosedResult = function (res) {
        this.ReportParameters.DIVISION = (this.ReportParameters.DIVISION == null || this.ReportParameters.DIVISION == "") ? "%" : this.ReportParameters.DIVISION;
        this.ReportParameters.ACID = (this.ACID == null || this.ACID == "") ? "%" : this.ACID;
        this.ReportParameters.SALESMAN = "%";
        this.ReportParameters.VCHR = "A";
        this.ReportParameters.FX_VOUCHER_TYPE = "SI";
        //alert("chksalesmanwise"+this.ReportParameters.CHK_SALESMANWISESUMMARY+"--salesman"+this.ReportParameters.SALESMAN+"--acid"+this.ReportParameters.ACID+ "--div" +this.ReportParameters.DIVISION+ "--disrate" + this.ReportParameters.DISRATE + "--rep type" + this.ReportParameters.OPT_REPORT_TYPE + "--show detail--" + this.ReportParameters.OPT_SHOWDETAL_REPORT + "--countersales--" + this.ReportParameters.OPT_COUNTERSALES+ "-inad--" + this.ReportParameters.OPT_INAD +"~"+ this.ReportParameters.DATE1 +"~"+ this.ReportParameters.DATE2 );
        this.reportdataEmit.emit({ status: res, data: { reportname: 'Sales Book Report', reportparam: this.ReportParameters } });
    };
    SalesBookReport.prototype.accodeChanged = function (value) {
        var item = this.masterService.accountList.find(function (x) { return x.ACCODE == value; });
        //console.log({valueType: value,found : item ,items : this.masterService.accountList});
        this.ACCNAME = '';
        if (item) {
            value = item.ACNAME;
            //console.log(value + "****");
            this.ACCNAME = value;
        }
    };
    SalesBookReport.prototype.itemChanged = function (value) {
        //console.log({itemChangedValue: value});
        if (typeof (value) === "object") {
            this.ACCNAME = value.ACNAME;
            this.ACCODE = value.ACCODE;
            this.ACID = value.ACID;
        }
    };
    //end autocomplete
    SalesBookReport.prototype.changestartDate = function (value, format) {
        try {
            var adbs = __webpack_require__(19);
            if (format == "AD") {
                var adDate = (value.replace("-", "/")).replace("-", "/");
                var bsDate = adbs.ad2bs(adDate);
                this.ReportParameters.BSDATE1 = this.masterService.toBSDate(value);
            }
            else if (format == "BS") {
                var bsDate = (value.replace("-", "/")).replace("-", "/");
                var adDate = adbs.bs2ad(bsDate);
                this.ReportParameters.DATE1 = this.masterService.toADDate(value);
            }
        }
        catch (e) { }
    };
    SalesBookReport.prototype.changeEndDate = function (value, format) {
        try {
            var adbs = __webpack_require__(19);
            if (format == "AD") {
                var adDate = (value.replace("-", "/")).replace("-", "/");
                var bsDate = adbs.ad2bs(adDate);
                this.ReportParameters.BSDATE2 = this.masterService.toBSDate(value);
            }
            else if (format == "BS") {
                var bsDate = (value.replace("-", "/")).replace("-", "/");
                var adDate = adbs.bs2ad(bsDate);
                this.ReportParameters.DATE2 = this.masterService.toADDate(value);
            }
        }
        catch (e) { }
    };
    SalesBookReport.prototype.changeDateByRange = function (value) {
        if (value == "1") {
            //alert("week selected!!"); yy-mm-dd
            this.dateId = 7;
            this.dateString = "" + this.getCurrentDate() + "";
            this.date1 = new Date(this.dateString);
            this.daysPrior = parseInt(this.dateId);
            this.date1.setDate(this.date1.getDate() - this.daysPrior);
            this.finalDate = (this.date1.toISOString().slice(0, 11).replace('T', ' '));
            //alert(this.finalDate);
            this.ReportParameters.DATE1 = (this.finalDate).trim();
            this.changestartDate(this.ReportParameters.DATE1, 'AD');
        }
        else if (value == "2") {
            //     //alert("month selected!!");
            this.dateId = 30;
            this.dateString = "" + this.getCurrentDate() + "";
            this.date1 = new Date(this.dateString);
            this.daysPrior = parseInt(this.dateId);
            this.date1.setDate(this.date1.getDate() - this.daysPrior);
            this.finalDate = (this.date1.toISOString().slice(0, 11).replace('T', ' '));
            //alert(this.finalDate);
            this.ReportParameters.DATE1 = (this.finalDate).trim();
            this.changestartDate(this.ReportParameters.DATE1, 'AD');
        }
        else {
            // alert("year selected");
            this.dateId = 365;
            this.dateString = "" + this.getCurrentDate() + "";
            this.date1 = new Date(this.dateString);
            this.daysPrior = parseInt(this.dateId);
            this.date1.setDate(this.date1.getDate() - this.daysPrior);
            this.finalDate = (this.date1.toISOString().slice(0, 11).replace('T', ' '));
            //alert(this.finalDate);
            this.ReportParameters.DATE1 = (this.finalDate).trim();
            this.changestartDate(this.ReportParameters.DATE1, 'AD');
        }
    };
    SalesBookReport.prototype.getCurrentDate = function () {
        this.today = new Date();
        this.dd = this.today.getDate();
        this.mm = this.today.getMonth() + 1; //January is 0!
        this.yyyy = this.today.getFullYear();
        if (this.dd < 10) {
            this.dd = '0' + this.dd;
        }
        if (this.mm < 10) {
            this.mm = '0' + this.mm;
        }
        this.today = this.mm + '/' + this.dd + '/' + this.yyyy;
        return this.today;
    };
    return SalesBookReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], SalesBookReport.prototype, "reportdataEmit", void 0);
SalesBookReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'result-salesbookreport-dialog',
        //     template:`
        //         <div class="modal-dialog modal-md">
        //         <div class="modal-content">
        //         <div class="modal-footer">
        //         <input type="text" style="height:25px;width:100%"   [(ngModel)]="ReportParameters.input1"/>
        //         <input type="text" style="height:25px;width:100%"  [(ngModel)]="ReportParameters.input2"/>
        //         <input type="text" style="height:25px;width:100%"   [(ngModel)]="ReportParameters.input3"/>
        //         <input type="text" style="height:25px;width:100%"   [(ngModel)]="ReportParameters.input1"/>
        //         <input type="text" style="height:25px;width:100%"  [(ngModel)]="ReportParameters.input2"/>
        //         <input type="text" style="height:25px;width:100%"   [(ngModel)]="ReportParameters.input3"/>
        //         <button class="btn btn-info confirm-btn" type="button"  (click)=onload()>RUN</button>
        //         </div>
        //         </div>
        //         </div>
        // `
        template: __webpack_require__(1751),
        styles: [__webpack_require__(1163), __webpack_require__(120)],
    }),
    __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_3__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object])
], SalesBookReport);



/***/ }),

/***/ 1518:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SalesReturnReportDetail; });







var SalesReturnReportDetail = (function () {
    function SalesReturnReportDetail(masterService, dialogref, data, _ActivatedRoute, alertService, _reportFilterService, arouter) {
        var _this = this;
        this.masterService = masterService;
        this.dialogref = dialogref;
        this.data = data;
        this._ActivatedRoute = _ActivatedRoute;
        this.alertService = alertService;
        this._reportFilterService = _reportFilterService;
        this.arouter = arouter;
        this.ReportParameters = {};
        this.division = [];
        this.CostcenterList = [];
        this.instanceWiseRepName = 'Sales Return Report Detail';
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.gridPopupSettingsForProduct = new __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridPopupSettingsForBrand = new __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridPopupSettingsForRetailer = new __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        //----------Default values on load
        this.ReportParameters.COMID = this.masterService.userProfile.CompanyInfo.COMPANYID;
        this.division = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        // this.masterService.getAccDivList();
    }
    SalesReturnReportDetail.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            if (_this._reportFilterService.SalesReturnReportDetailObj.assignPrevioiusDate != true) {
                _this.masterService.getAccDivList();
                _this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                _this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                _this.changestartDate(_this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_DATE1, "AD");
                _this.changeEndDate(_this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_DATE2, "AD");
                _this.masterService.viewDivision.subscribe(function () {
                    if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                        _this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_DIV = '%';
                    }
                    else {
                        _this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                    }
                });
            }
            if (params.instancename) {
                // ////console.log("@@SalesReturnReportDetailObj",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                _this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                _this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                _this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
            }
        });
        this.changestartDate(this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_DATE1, "AD");
        this.changeEndDate(this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_DATE2, "AD");
    };
    SalesReturnReportDetail.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    SalesReturnReportDetail.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    SalesReturnReportDetail.prototype.DialogClosedResult = function (res) {
        this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_DIV = (this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_DIV == null || this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_DIV == "") ? "%" : this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_DIV;
        if (this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_RetailerName == '') {
            this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_RetailerID = '%';
        }
        if (this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_ProductName == '') {
            this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_ProductID = '%';
        }
        if (this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_BrandName == '') {
            this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_BrandID = '%';
        }
        this.multipleReportFormateName = 'Sales Return Report Detail_Account';
        if (res == "ok") {
            this._reportFilterService.SalesReturnReportDetailObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.SalesReturnReportDetail_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Sales Return Report Detail',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.SalesReturnReportDetail_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Sales Return Report Detail' + '_' + this._reportFilterService.SalesReturnReportDetail_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.SalesReturnReportDetail_loadedTimes,
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                reportname: this.multipleReportFormateName,
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.SalesReturnReportDetail_loadedTimes,
                reportparam: {
                    DIVISION: this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_DIV,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    COMID: this.ReportParameters.COMID,
                    DATE1: this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_DATE1,
                    DATE2: this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_DATE2,
                    PRODUCTID: this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_ProductID ? this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_ProductID : '%',
                    BRAND: this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_BrandID ? this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_BrandID : '%',
                    RETAILER: this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_RetailerID ? this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_RetailerID : '%'
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.SalesReturnReportDetail_loadedTimes = this._reportFilterService.SalesReturnReportDetail_loadedTimes + 1;
        }
    };
    SalesReturnReportDetail.prototype.changestartDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
        }
    };
    SalesReturnReportDetail.prototype.changeEndDate = function (value, format) {
        try {
            var adbs = __webpack_require__(19);
            if (format == "AD") {
                var adDate = (value.replace("-", "/")).replace("-", "/");
                var bsDate = adbs.ad2bs(adDate);
                this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_BSDATE2 = this.masterService.toBSDate(value);
            }
            else if (format == "BS") {
                var datearr = value.split('/');
                var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                // var bsDate = (value.replace("-", "/")).replace("-", "/");
                var adDate = adbs.bs2ad(bsDate_2);
                var Engdate = this.masterService.toADDate(value);
                var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
                if (Validatedata == true) {
                    var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                    var adDate1 = adbs.bs2ad(bsDate1);
                    this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_DATE2 = this.masterService.toADDate(value);
                }
                else {
                    this.alertService.error("Cannot Change the date");
                    return;
                }
            }
        }
        catch (e) { }
    };
    SalesReturnReportDetail.prototype.ProductEnterClicked = function () {
        this.gridPopupSettingsForProduct = this.masterService.getGenericGridPopUpSettings('ProductList');
        this.genericGridProduct.show();
    };
    SalesReturnReportDetail.prototype.dblClickProductSelect = function (product) {
        this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_ProductID = product.MCODE;
        this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_ProductName = product.DESCA;
    };
    SalesReturnReportDetail.prototype.BrandEnterClicked = function () {
        this.BrandList();
        this.genericGridBrand.show();
    };
    SalesReturnReportDetail.prototype.BrandList = function () {
        this.gridPopupSettingsForBrand = this.masterService.getGenericGridPopUpSettings('BrandList');
    };
    SalesReturnReportDetail.prototype.dblClickBrandSelect = function (product) {
        this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_BrandID = product.BRANDCODE;
        this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_BrandName = product.BRANDCODE;
    };
    SalesReturnReportDetail.prototype.RetailerEnterClicked = function () {
        this.RetailerList();
        this.genericGridRetailer.show();
    };
    SalesReturnReportDetail.prototype.RetailerList = function () {
        this.gridPopupSettingsForRetailer = this.masterService.getGenericGridPopUpSettings('RetailerList');
    };
    SalesReturnReportDetail.prototype.dblClickRetailerSelect = function (retailer) {
        this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_RetailerName = retailer.ACNAME;
        this._reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_RetailerID = retailer.customerID;
    };
    return SalesReturnReportDetail;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], SalesReturnReportDetail.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridProduct"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], SalesReturnReportDetail.prototype, "genericGridProduct", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridBrand"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], SalesReturnReportDetail.prototype, "genericGridBrand", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridRetailer"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], SalesReturnReportDetail.prototype, "genericGridRetailer", void 0);
SalesReturnReportDetail = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'sales-return-reportdetail',
        template: __webpack_require__(1752),
        styles: [__webpack_require__(1163), __webpack_require__(120)]
    }),
    __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object, __WEBPACK_IMPORTED_MODULE_4__angular_router__["ActivatedRoute"], __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_4__angular_router__["Router"]])
], SalesReturnReportDetail);



/***/ }),

/***/ 1519:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SalesReturnSummaryReport; });






var SalesReturnSummaryReport = (function () {
    function SalesReturnSummaryReport(masterService, dialogref, data, _ActivatedRoute, alertService, _reportFilterService, arouter) {
        var _this = this;
        this.masterService = masterService;
        this.dialogref = dialogref;
        this.data = data;
        this._ActivatedRoute = _ActivatedRoute;
        this.alertService = alertService;
        this._reportFilterService = _reportFilterService;
        this.arouter = arouter;
        this.ReportParameters = {};
        this.division = [];
        this.CostcenterList = [];
        this.instanceWiseRepName = 'Sales Return Summary Report';
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        //----------Default values on load
        this.ReportParameters.COMID = this.masterService.userProfile.CompanyInfo.COMPANYID;
        this.division = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        // this.masterService.getAccDivList();
    }
    SalesReturnSummaryReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            if (_this._reportFilterService.SalesReturnSummaryObj.assignPrevioiusDate != true) {
                _this.masterService.getAccDivList();
                _this._reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                _this._reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                _this.changestartDate(_this._reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_DATE1, "AD");
                _this.changeEndDate(_this._reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_DATE2, "AD");
                _this.masterService.viewDivision.subscribe(function () {
                    if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                        _this._reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_DIV = '%';
                    }
                    else {
                        _this._reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                    }
                });
            }
            if (params.instancename) {
                // ////console.log("@@SalesReturnSummaryObj",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                _this._reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                _this._reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                _this._reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
            }
        });
        this.changestartDate(this._reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_DATE1, "AD");
        this.changeEndDate(this._reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_DATE2, "AD");
    };
    SalesReturnSummaryReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    SalesReturnSummaryReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    SalesReturnSummaryReport.prototype.DialogClosedResult = function (res) {
        this._reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_DIV = (this._reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_DIV == null || this._reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_DIV == "") ? "%" : this._reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_DIV;
        this.multipleReportFormateName = 'Sales Return Summary Report_Account';
        if (res == "ok") {
            this._reportFilterService.SalesReturnSummaryObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.SalesReturnSummary_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Sales Return Summary Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.SalesReturnSummary_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Sales Return Summary Report' + '_' + this._reportFilterService.SalesReturnSummary_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.SalesReturnSummary_loadedTimes,
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                reportname: this.multipleReportFormateName,
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.SalesReturnSummary_loadedTimes,
                reportparam: {
                    DIVISION: this._reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_DIV,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    COMID: this.ReportParameters.COMID,
                    DATE1: this._reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_DATE1,
                    DATE2: this._reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_DATE2,
                    SDATE: this._reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_DATE1,
                    EDATE: this._reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_DATE2,
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.SalesReturnSummary_loadedTimes = this._reportFilterService.SalesReturnSummary_loadedTimes + 1;
        }
    };
    SalesReturnSummaryReport.prototype.changestartDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
        }
    };
    SalesReturnSummaryReport.prototype.changeEndDate = function (value, format) {
        try {
            var adbs = __webpack_require__(19);
            if (format == "AD") {
                var adDate = (value.replace("-", "/")).replace("-", "/");
                var bsDate = adbs.ad2bs(adDate);
                this._reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_BSDATE2 = this.masterService.toBSDate(value);
            }
            else if (format == "BS") {
                var datearr = value.split('/');
                var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                // var bsDate = (value.replace("-", "/")).replace("-", "/");
                var adDate = adbs.bs2ad(bsDate_2);
                var Engdate = this.masterService.toADDate(value);
                var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
                if (Validatedata == true) {
                    var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                    var adDate1 = adbs.bs2ad(bsDate1);
                    this._reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_DATE2 = this.masterService.toADDate(value);
                }
                else {
                    this.alertService.error("Cannot Change the date");
                    return;
                }
            }
        }
        catch (e) { }
    };
    return SalesReturnSummaryReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], SalesReturnSummaryReport.prototype, "reportdataEmit", void 0);
SalesReturnSummaryReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'salesreturn-summary-report',
        template: __webpack_require__(1753),
        styles: [__webpack_require__(1163), __webpack_require__(120)]
    }),
    __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object, __WEBPACK_IMPORTED_MODULE_4__angular_router__["ActivatedRoute"], __WEBPACK_IMPORTED_MODULE_5__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_4__angular_router__["Router"]])
], SalesReturnSummaryReport);



/***/ }),

/***/ 1520:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SalesReturnSummaryRetailerReport; });







var SalesReturnSummaryRetailerReport = (function () {
    function SalesReturnSummaryRetailerReport(masterService, dialogref, data, _ActivatedRoute, alertService, _reportFilterService, arouter) {
        var _this = this;
        this.masterService = masterService;
        this.dialogref = dialogref;
        this.data = data;
        this._ActivatedRoute = _ActivatedRoute;
        this.alertService = alertService;
        this._reportFilterService = _reportFilterService;
        this.arouter = arouter;
        this.ReportParameters = {};
        this.division = [];
        this.CostcenterList = [];
        this.instanceWiseRepName = 'Sales Return Summary Retailer Report';
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.gridPopupSettingsForSalesman = new __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridPopupSettingsForRetailerListBySalesman = new __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        //----------Default values on load
        this.ReportParameters.COMID = this.masterService.userProfile.CompanyInfo.COMPANYID;
        this.division = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        // this.masterService.getAccDivList();
    }
    SalesReturnSummaryRetailerReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            if (_this._reportFilterService.SalesReturnSummaryRetailerObj.assignPrevioiusDate != true) {
                _this.masterService.getAccDivList();
                _this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                _this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                _this.changestartDate(_this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DATE1, "AD");
                _this.changeEndDate(_this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DATE2, "AD");
                _this.masterService.viewDivision.subscribe(function () {
                    if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                        _this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DIV = '%';
                    }
                    else {
                        _this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                    }
                });
            }
            if (params.instancename) {
                // ////console.log("@@SalesReturnSummaryRetailerObj",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                _this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                _this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                _this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
            }
        });
        this.changestartDate(this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DATE1, "AD");
        this.changeEndDate(this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DATE2, "AD");
    };
    SalesReturnSummaryRetailerReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    SalesReturnSummaryRetailerReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    SalesReturnSummaryRetailerReport.prototype.DialogClosedResult = function (res) {
        var multipleSelectedSalesman = [];
        var SelectedSalesman = '';
        if (this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_MultipleSalesman != null && this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_MultipleSalesman.length != 0) {
            this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_MultipleSalesman.forEach(function (Salesman) {
                multipleSelectedSalesman.push(Salesman.SalesmanID);
                SelectedSalesman += multipleSelectedSalesman + ",";
            });
        }
        else {
            SelectedSalesman = this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_SalesmanID;
        }
        var multipleSelectedRetailer = [];
        var SelectedRetailer = '';
        if (this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_MultipleRetailer != null && this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_MultipleRetailer.length != 0) {
            this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_MultipleRetailer.forEach(function (Retailer) {
                multipleSelectedRetailer.push(Retailer.ACID);
                SelectedRetailer += multipleSelectedRetailer + ",";
            });
        }
        else {
            SelectedRetailer = this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_RetailerID;
        }
        this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DIV = (this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DIV == null || this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DIV == "") ? "%" : this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DIV;
        if (this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_RetailerName == '') {
            this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_RetailerID = '%';
        }
        if (this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_Salesman == '') {
            this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_SalesmanID = '%';
        }
        this.multipleReportFormateName = 'Sales Return Summary Retailer Report_Account';
        if (res == "ok") {
            this._reportFilterService.SalesReturnSummaryRetailerObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.SalesReturnSummaryRetailer_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Sales Return Summary Retailer Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.SalesReturnSummaryRetailer_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Sales Return Summary Retailer Report' + '_' + this._reportFilterService.SalesReturnSummaryRetailer_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.SalesReturnSummaryRetailer_loadedTimes,
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                reportname: this.multipleReportFormateName,
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.SalesReturnSummaryRetailer_loadedTimes,
                reportparam: {
                    DIVISION: this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DIV,
                    DIV: this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DIV,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    COMID: this.ReportParameters.COMID,
                    DATE1: this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DATE1,
                    DATE2: this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DATE2,
                    SDATE: this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DATE1,
                    EDATE: this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DATE2,
                    SALESMANID: SelectedSalesman ? SelectedSalesman : '%',
                    RETAILER: SelectedRetailer ? SelectedRetailer : '%',
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.SalesReturnSummaryRetailer_loadedTimes = this._reportFilterService.SalesReturnSummaryRetailer_loadedTimes + 1;
        }
    };
    SalesReturnSummaryRetailerReport.prototype.changestartDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
        }
    };
    SalesReturnSummaryRetailerReport.prototype.changeEndDate = function (value, format) {
        try {
            var adbs = __webpack_require__(19);
            if (format == "AD") {
                var adDate = (value.replace("-", "/")).replace("-", "/");
                var bsDate = adbs.ad2bs(adDate);
                this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_BSDATE2 = this.masterService.toBSDate(value);
            }
            else if (format == "BS") {
                var datearr = value.split('/');
                var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                // var bsDate = (value.replace("-", "/")).replace("-", "/");
                var adDate = adbs.bs2ad(bsDate_2);
                var Engdate = this.masterService.toADDate(value);
                var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
                if (Validatedata == true) {
                    var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                    var adDate1 = adbs.bs2ad(bsDate1);
                    this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DATE2 = this.masterService.toADDate(value);
                }
                else {
                    this.alertService.error("Cannot Change the date");
                    return;
                }
            }
        }
        catch (e) { }
    };
    SalesReturnSummaryRetailerReport.prototype.SalesmanEnterClicked = function () {
        this.gridPopupSettingsForSalesman = this.masterService.getGenericGridPopUpSettings('SalesManList');
        this.genericGridSalesman.show();
    };
    SalesReturnSummaryRetailerReport.prototype.dblClickSalesmanSelect = function (salesman) {
        this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_SalesmanID = salesman.SALESMANID;
        this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_Salesman = salesman.NAME;
    };
    SalesReturnSummaryRetailerReport.prototype.RetailerEnterClicked = function () {
        this.RetailerList();
        this.genericGridRetailer.show();
    };
    SalesReturnSummaryRetailerReport.prototype.RetailerList = function () {
        this.gridPopupSettingsForRetailerListBySalesman = this.masterService.getGridSettingForRetailerBySalesman(this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_SalesmanID);
    };
    SalesReturnSummaryRetailerReport.prototype.dblClickRetailerPopup = function (retailer) {
        this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_RetailerName = retailer.ACNAME,
            this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_RetailerID = retailer.customerID;
    };
    SalesReturnSummaryRetailerReport.prototype.checkValue = function () {
        if (this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_EnableSalesman == true) {
            this._reportFilterService.showMultipleSalesman = true;
        }
        else {
            this._reportFilterService.showMultipleSalesman = false;
        }
        if (this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_EnableRetailer == true) {
            this._reportFilterService.showMultipleRetailer = true;
        }
        else {
            this._reportFilterService.showMultipleRetailer = false;
        }
    };
    SalesReturnSummaryRetailerReport.prototype.addSalesmanToList = function () {
        var _this = this;
        if (this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_MultipleSalesman == null) {
            this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_MultipleSalesman = [];
        }
        var selectSalesmanList = this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_MultipleSalesman.filter(function (x) { return x.SalesmanID == _this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_SalesmanID; });
        if (this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_Salesman == "" || this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_Salesman == null || this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_Salesman === null || this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_Salesman === 'undefined') {
            return;
        }
        if (selectSalesmanList.length == 0) {
            this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_MultipleSalesman.push({ SalesmanID: this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_SalesmanID, SalesmanName: this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_Salesman });
        }
    };
    SalesReturnSummaryRetailerReport.prototype.deleteSalesman = function (index) {
        this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_MultipleSalesman.splice(index, 1);
    };
    SalesReturnSummaryRetailerReport.prototype.hideSalesmanTable = function () {
        this._reportFilterService.showMultipleSalesman = false;
        // this.SalesReturnSummaryRetailerReport.multiSalesman = false;
    };
    SalesReturnSummaryRetailerReport.prototype.addRetailerToList = function () {
        var _this = this;
        if (this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_MultipleRetailer == null) {
            this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_MultipleRetailer = [];
        }
        var selectRetailerList = this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_MultipleRetailer.filter(function (x) { return x.ACID == _this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_RetailerID; });
        if (this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_RetailerName == "" || this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_RetailerName == null || this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_RetailerName === null || this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_RetailerName === 'undefined') {
            return;
        }
        if (selectRetailerList.length == 0) {
            this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_MultipleRetailer.push({ ACID: this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_RetailerID, RETAILER: this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_RetailerName });
        }
    };
    SalesReturnSummaryRetailerReport.prototype.deleteRetailer = function (index) {
        this._reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_MultipleRetailer.splice(index, 1);
    };
    SalesReturnSummaryRetailerReport.prototype.hideRetailerTable = function () {
        this._reportFilterService.showMultipleRetailer = false;
        // this.SalesReturnSummaryRetailerReport.multiRetailer = false;
    };
    return SalesReturnSummaryRetailerReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], SalesReturnSummaryRetailerReport.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridSalesman"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], SalesReturnSummaryRetailerReport.prototype, "genericGridSalesman", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridRetailer"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], SalesReturnSummaryRetailerReport.prototype, "genericGridRetailer", void 0);
SalesReturnSummaryRetailerReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'salesreturnsummary-retailerreport',
        template: __webpack_require__(1754),
        styles: [__webpack_require__(1163), __webpack_require__(120)]
    }),
    __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object, __WEBPACK_IMPORTED_MODULE_4__angular_router__["ActivatedRoute"], __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_4__angular_router__["Router"]])
], SalesReturnSummaryRetailerReport);



/***/ }),

/***/ 1521:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_popupLists_report_filter_report_filter_service__ = __webpack_require__(555);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return StockAbcAnalysisReportAccount; });









var StockAbcAnalysisReportAccount = (function () {
    function StockAbcAnalysisReportAccount(masterService, _authService, _reportFilterService, arouter, _ActivatedRoute, reportService, alertService, dialogref, data) {
        this.masterService = masterService;
        this._authService = _authService;
        this._reportFilterService = _reportFilterService;
        this.arouter = arouter;
        this._ActivatedRoute = _ActivatedRoute;
        this.reportService = reportService;
        this.alertService = alertService;
        this.dialogref = dialogref;
        this.data = data;
        this.instanceWiseRepName = 'Stock Abc Analysis Report';
        this.gridPopupSettingsForProduct = new __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridPopupSettingsForBrand = new __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridPopupSettingsForSupplier = new __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridPopupSettingsForWarehouse = new __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.userProfile = this._authService.getUserProfile();
    }
    StockAbcAnalysisReportAccount.prototype.ngOnInit = function () {
        if (this._reportFilterService.StockAbcAnalysisAccountObj.assignPrevioiusDate != true) {
            this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_DATE1 = this.masterService.userProfile.CompanyInfo.FBDATE.split('T')[0];
            this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_DATE2 = new Date().toJSON().split('T')[0];
            this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_DIV = this.masterService.userProfile.CompanyInfo.INITIAL;
            this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_REPORTTYPE = '0';
            this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_ShowItemInGroupWiseReport = 0;
        }
        this.changeEntryDate(this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_DATE1, "AD");
        this.changeEndDate(this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_DATE2, "AD");
    };
    StockAbcAnalysisReportAccount.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
        }
    };
    StockAbcAnalysisReportAccount.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_2);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_DATE2 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
        }
    };
    StockAbcAnalysisReportAccount.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    StockAbcAnalysisReportAccount.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    StockAbcAnalysisReportAccount.prototype.DialogClosedResult = function (res) {
        if (res == "ok") {
            this._reportFilterService.StockAbcAnalysisAccountObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.StockAbcAnalysisAccount_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Sales Abc Analysis Report',
                    activeurlpath: this.arouter.url,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.StockAbcAnalysisAccount_loadedTimes,
                    activerurlpath2: activeurlpath2,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Sales Abc Analysis Report' + '_' + this._reportFilterService.StockAbcAnalysisAccount_loadedTimes,
                    activeurlpath: this.arouter.url,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.StockAbcAnalysisAccount_loadedTimes,
                    activerurlpath2: activeurlpath2,
                });
            }
        }
        var multiplereportname = 'Sales Abc Analysis ReportAccount';
        var REPORTTYPE = this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_REPORTTYPE;
        var ITEMNAME = this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_ITEM;
        var SUPPLIERNAME = this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_SUPPLIER;
        if (REPORTTYPE == 0) {
            this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_ShowItemInGroupWiseReport = 0;
        }
        if (ITEMNAME == "") {
            this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_MCODE = '%';
        }
        if (SUPPLIERNAME == "") {
            this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_SUPPLIERCODE = '%';
        }
        var ShowItemInGroupWiseReport = this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_ShowItemInGroupWiseReport;
        if (REPORTTYPE == 0) {
            multiplereportname = 'Stock Abc Analysis ReportAccount';
        }
        else if (REPORTTYPE == 1 && ShowItemInGroupWiseReport == 0) {
            multiplereportname = 'Stock Abc Analysis ReportAccount_1';
        }
        else if (REPORTTYPE == 1 && ShowItemInGroupWiseReport == 1) {
            multiplereportname = 'Stock Abc Analysis ReportAccount_2';
        }
        else if (REPORTTYPE == 2 && ShowItemInGroupWiseReport == 0) {
            multiplereportname = 'Stock Abc Analysis ReportAccount_3';
        }
        else if (REPORTTYPE == 2 && ShowItemInGroupWiseReport == 1) {
            multiplereportname = 'Stock Abc Analysis ReportAccount_4';
        }
        //console.log("@@multiplereportname", multiplereportname)
        this.reportdataEmit.emit({
            status: res, data: {
                reportname: multiplereportname, reportparam: {
                    DATE1: this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_DATE1,
                    DATE2: this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_DATE2,
                    DIV: this.userProfile.CompanyInfo.INITIAL,
                    COMID: this.userProfile.CompanyInfo.COMPANYID,
                    COMPANYID: this.userProfile.CompanyInfo.COMPANYID,
                    PHISCALID: this.userProfile.CompanyInfo.PhiscalID,
                    MGROUP: '%',
                    MCAT: '%',
                    PTYPE: 100,
                    ACID: this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_SUPPLIERCODE ? this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_SUPPLIERCODE : '%',
                    REPORTYTYPE: this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_REPORTTYPE ? this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_REPORTTYPE : '0',
                    SUPCODE: this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_SUPPLIERCODE ? this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_SUPPLIERCODE : '%',
                    MCODE: this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_MCODE ? this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_MCODE : '%',
                    REPORTTYPE: this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_REPORTTYPE ? this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_REPORTTYPE : 0,
                    ShowItemInGroupWiseReport: this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_ShowItemInGroupWiseReport ? this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_ShowItemInGroupWiseReport : 0,
                    ITEMNAME: this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_ITEM ? this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_ITEM : "",
                    SUPPLIERNAME: this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_SUPPLIER ? this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_SUPPLIER : ""
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.StockAbcAnalysisAccount_loadedTimes = this._reportFilterService.StockAbcAnalysisAccount_loadedTimes + 1;
        }
    };
    StockAbcAnalysisReportAccount.prototype.ProductEnterClicked = function () {
        this.gridPopupSettingsForProduct = this.masterService.getGenericGridPopUpSettings('ProductList');
        this.genericGridProduct.show();
    };
    StockAbcAnalysisReportAccount.prototype.dblClickProductSelect = function (product) {
        this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_MCODE = product.MCODE;
        this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_ITEM = product.DESCA;
    };
    // BrandEnterClicked() {
    //     this.gridPopupSettingsForBrand = this.masterService.getGenericGridPopUpSettings('BrandList');
    //     this.genericGridBrand.show();
    // }
    // dblClickBrandSelect(brand) {
    //     this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_BRANDID = brand.BRANDCODE;
    //     this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_BRANDNAME = brand.BRANDNAME;
    // }
    StockAbcAnalysisReportAccount.prototype.SupplierEnterClicked = function () {
        this.gridPopupSettingsForSupplier = this.masterService.getGenericGridPopUpSettings('SupplierList');
        this.genericGridSupplier.show();
    };
    StockAbcAnalysisReportAccount.prototype.dblClickSupplierSelect = function (supplier) {
        this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_SUPPLIERCODE = supplier.ACID;
        this._reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_SUPPLIER = supplier.ACNAME;
    };
    return StockAbcAnalysisReportAccount;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridProduct"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], StockAbcAnalysisReportAccount.prototype, "genericGridProduct", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridBrand"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], StockAbcAnalysisReportAccount.prototype, "genericGridBrand", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridSupplier"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], StockAbcAnalysisReportAccount.prototype, "genericGridSupplier", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridWarehouse"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], StockAbcAnalysisReportAccount.prototype, "genericGridWarehouse", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], StockAbcAnalysisReportAccount.prototype, "reportdataEmit", void 0);
StockAbcAnalysisReportAccount = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'stockabc-analysis-account',
        template: __webpack_require__(1755),
        styles: [__webpack_require__(1163), __webpack_require__(120)],
    }),
    __param(8, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__["a" /* AuthService */],
        __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_5__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_5__angular_router__["ActivatedRoute"],
        __WEBPACK_IMPORTED_MODULE_6__common_popupLists_report_filter_report_filter_service__["a" /* ReportFilterService */], __WEBPACK_IMPORTED_MODULE_7__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object])
], StockAbcAnalysisReportAccount);



/***/ }),

/***/ 1522:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_popupLists_report_filter_report_filter_service__ = __webpack_require__(555);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return StockLedgerReportAccount; });









var StockLedgerReportAccount = (function () {
    function StockLedgerReportAccount(masterService, _authService, _reportFilterService, arouter, _ActivatedRoute, reportService, alertService, dialogref, data) {
        this.masterService = masterService;
        this._authService = _authService;
        this._reportFilterService = _reportFilterService;
        this.arouter = arouter;
        this._ActivatedRoute = _ActivatedRoute;
        this.reportService = reportService;
        this.alertService = alertService;
        this.dialogref = dialogref;
        this.data = data;
        this.instanceWiseRepName = 'Stock Ledger Report';
        this.gridPopupSettingsForProduct = new __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridPopupSettingsForWarehouse = new __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.userProfile = this._authService.getUserProfile();
    }
    StockLedgerReportAccount.prototype.ngOnInit = function () {
        if (this._reportFilterService.StockLedgerAccountObj.assignPrevioiusDate != true) {
            this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_DATE1 = this.userProfile.CompanyInfo.FBDATE.split('T')[0];
            this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_DATE2 = new Date().toJSON().split('T')[0];
            this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_DIV = this.userProfile.CompanyInfo.INITIAL;
            this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_ITEMGROUPWISE = '0';
            this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_SHOWDETAIL = 0;
            this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_SHOWBATCHWISE = 0;
            this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_ITEMGROUP = '0';
        }
        this.changeEntryDate(this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_DATE1, "AD");
        this.changeEndDate(this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_DATE2, "AD");
    };
    StockLedgerReportAccount.prototype.onload = function () {
        if (this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_ITEM == "" ||
            this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_ITEM == null ||
            this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_ITEM == undefined ||
            this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_MCODE == "" ||
            this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_MCODE == undefined ||
            this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_MCODE == null ||
            this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_MCODE == '%') {
            this.alertService.info("Plese Select Item !");
            return;
        }
        this.DialogClosedResult("ok");
    };
    StockLedgerReportAccount.prototype.DialogClosedResult = function (res) {
        if (res == "ok") {
            this._reportFilterService.StockLedgerAccountObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.StockLedgerReportAcc_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Stock Ledger Report',
                    activeurlpath: this.arouter.url,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.StockLedgerReportAcc_loadedTimes,
                    activerurlpath2: activeurlpath2,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Stock Ledger Report' + '_' + this._reportFilterService.StockLedgerReportAcc_loadedTimes,
                    activeurlpath: this.arouter.url,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.StockLedgerReportAcc_loadedTimes,
                    activerurlpath2: activeurlpath2,
                });
            }
        }
        var multiplereportname = 'Stock Ledger ReportAccount';
        // let REPORTTYPE = this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_REPORTTYPE;
        // let ShowItemInGroupWiseReport = this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_ShowItemInGroupWiseReport;
        var ITEMNAME = this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_ITEM;
        var SHOWDETAIL = this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_SHOWDETAIL;
        var SHOWBATCH = this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_SHOWBATCHWISE;
        if (SHOWDETAIL == 0 && SHOWBATCH == 0) {
            multiplereportname = 'Stock Ledger ReportAccount';
        }
        else if (SHOWDETAIL == 0 && SHOWBATCH == 1) {
            multiplereportname = 'Stock Ledger ReportAccount_1';
        }
        else if (SHOWDETAIL == 1 && SHOWBATCH == 0) {
            multiplereportname = 'Stock Ledger ReportAccount_2';
        }
        else if (SHOWDETAIL == 1 && SHOWBATCH == 1) {
            multiplereportname = 'Stock Ledger ReportAccount_3';
        }
        if (ITEMNAME == "") {
            this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_MCODE = '%';
        }
        //console.log("@@multiplereportname", multiplereportname)
        this.reportdataEmit.emit({
            status: res, data: {
                reportname: multiplereportname, reportparam: {
                    DATE1: this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_DATE1,
                    DATE2: this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_DATE2,
                    DIV: this.userProfile.CompanyInfo.INITIAL,
                    COMID: this.userProfile.CompanyInfo.COMPANYID,
                    COMPANYID: this.userProfile.CompanyInfo.COMPANYID,
                    PHISCALID: this.userProfile.CompanyInfo.PhiscalID,
                    MCODE: this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_MCODE ? this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_MCODE : '%',
                    WAREHOUSE: this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_WAREHOUSE ? this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_WAREHOUSE : '%',
                    SHOWDETAIL: this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_SHOWDETAIL ? this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_SHOWDETAIL : 0,
                    SHOWBATCH: this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_SHOWBATCHWISE ? this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_SHOWBATCHWISE : 0,
                    ITEMNAME: this._reportFilterService.StockLedgerAccountObj.StockValuationAccount_ITEM ? this._reportFilterService.StockLedgerAccountObj.StockValuationAccount_ITEM : ""
                    // ITEMGROUPWISE:this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_ITEMGROUPWISE ? this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_ITEMGROUPWISE : 0,
                    // ITEMGROUP:this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_ITEMGROUP ? this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_ITEMGROUP : '%',
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.StockLedgerReportAcc_loadedTimes = this._reportFilterService.StockLedgerReportAcc_loadedTimes + 1;
        }
    };
    StockLedgerReportAccount.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
        }
    };
    StockLedgerReportAccount.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_2);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_DATE2 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
        }
    };
    StockLedgerReportAccount.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    StockLedgerReportAccount.prototype.WarehouseEnterClicked = function () {
        this.gridPopupSettingsForWarehouse = this.masterService.getGenericGridPopUpSettings('WarehouseList');
        this.genericGridWarehouse.show();
    };
    StockLedgerReportAccount.prototype.dblClickWarehouseSelect = function (warehouse) {
        this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_WAREHOUSE = warehouse.NAME;
    };
    StockLedgerReportAccount.prototype.ProductEnterClicked = function () {
        this.gridPopupSettingsForProduct = this.masterService.getGenericGridPopUpSettings('ProductList');
        this.genericGridProduct.show();
    };
    StockLedgerReportAccount.prototype.dblClickProductSelect = function (product) {
        this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_MCODE = product.MCODE;
        this._reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_ITEM = product.DESCA;
    };
    return StockLedgerReportAccount;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridProduct"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], StockLedgerReportAccount.prototype, "genericGridProduct", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridWarehouse"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], StockLedgerReportAccount.prototype, "genericGridWarehouse", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], StockLedgerReportAccount.prototype, "reportdataEmit", void 0);
StockLedgerReportAccount = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'stock-ledger-report-account',
        template: __webpack_require__(1756),
        styles: [__webpack_require__(1163), __webpack_require__(120)]
    }),
    __param(8, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__["a" /* AuthService */],
        __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_5__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_5__angular_router__["ActivatedRoute"],
        __WEBPACK_IMPORTED_MODULE_6__common_popupLists_report_filter_report_filter_service__["a" /* ReportFilterService */], __WEBPACK_IMPORTED_MODULE_7__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object])
], StockLedgerReportAccount);



/***/ }),

/***/ 1523:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_popupLists_report_filter_report_filter_service__ = __webpack_require__(555);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return StockSummaryReportAccount; });









var StockSummaryReportAccount = (function () {
    function StockSummaryReportAccount(masterService, _authService, _reportFilterService, arouter, _ActivatedRoute, reportService, alertService, dialogref, data) {
        this.masterService = masterService;
        this._authService = _authService;
        this._reportFilterService = _reportFilterService;
        this.arouter = arouter;
        this._ActivatedRoute = _ActivatedRoute;
        this.reportService = reportService;
        this.alertService = alertService;
        this.dialogref = dialogref;
        this.data = data;
        this.instanceWiseRepName = 'Stock Summary Report';
        this.gridPopupSettingsForProduct = new __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridPopupSettingsForBrand = new __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridPopupSettingsForSupplier = new __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridPopupSettingsForWarehouse = new __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.userProfile = this._authService.getUserProfile();
    }
    StockSummaryReportAccount.prototype.ngOnInit = function () {
        if (this._reportFilterService.StockSummaryAccountObj.assignPrevioiusDate != true) {
            this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_DATE1 = this.userProfile.CompanyInfo.FBDATE.split('T')[0];
            this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_DATE2 = new Date().toJSON().split('T')[0];
            this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_DIV = this.userProfile.CompanyInfo.INITIAL;
            this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_REPORTTYPE = '0';
            this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_ShowItemInGroupWiseReport = 0;
            this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_DETAILFORMAT = '0';
            this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_ReportMode = '0';
            this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWDETAIL = 0;
            this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWBATCHWISE = 0;
            this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWALTUNIT = 0;
        }
        this.changeEndDate(this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_DATE2, "AD");
        this.changeEntryDate(this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_DATE1, "AD");
    };
    StockSummaryReportAccount.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
        }
    };
    StockSummaryReportAccount.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_BSDATE2 = this.masterService.toADDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_2);
            var Engdate = this.masterService.toBSDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_DATE2 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
        }
    };
    StockSummaryReportAccount.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    StockSummaryReportAccount.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    StockSummaryReportAccount.prototype.DialogClosedResult = function (res) {
        if (res == "ok") {
            this._reportFilterService.StockSummaryAccountObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.StockSummaryAccount_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Stock Summary Report',
                    activeurlpath: this.arouter.url,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.StockSummaryAccount_loadedTimes,
                    activerurlpath2: activeurlpath2,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Stock Summary Report' + '_' + this._reportFilterService.StockSummaryAccount_loadedTimes,
                    activeurlpath: this.arouter.url,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.StockSummaryAccount_loadedTimes,
                    activerurlpath2: activeurlpath2,
                });
            }
        }
        var multiplereportname = 'Stock Summary ReportAccount';
        var REPORTTYPE = this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_REPORTTYPE;
        var ITEMNAME = this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_ITEM;
        var DETAILFORMAT = this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_DETAILFORMAT;
        var SUPPLIERNAME = this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SUPPLIER;
        var ShowDetail = this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWDETAIL;
        var SHOWBATCHWISESTOCK = this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWBATCHWISE;
        if (REPORTTYPE == 0) {
            this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_ShowItemInGroupWiseReport = 0;
        }
        if (ITEMNAME == "") {
            this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_MCODE = '%';
        }
        if (SUPPLIERNAME == "") {
            this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SUPPLIERCODE = '%';
        }
        var ShowItemInGroupWiseReport = this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_ShowItemInGroupWiseReport;
        if (DETAILFORMAT == 0 && REPORTTYPE == 0 && ShowDetail == 0 && SHOWBATCHWISESTOCK == 0) {
            multiplereportname = 'Stock Summary ReportAccount';
        }
        else if (DETAILFORMAT == 0 && REPORTTYPE == 1 && ShowItemInGroupWiseReport == 0 && ShowDetail == 0 && SHOWBATCHWISESTOCK == 0) {
            multiplereportname = 'Stock Summary ReportAccount_1';
        }
        else if (DETAILFORMAT == 0 && REPORTTYPE == 1 && ShowItemInGroupWiseReport == 1 && ShowDetail == 0 && SHOWBATCHWISESTOCK == 0) {
            multiplereportname = 'Stock Summary ReportAccount_2';
        }
        else if (DETAILFORMAT == 0 && REPORTTYPE == 2 && ShowItemInGroupWiseReport == 0 && ShowDetail == 0 && SHOWBATCHWISESTOCK == 0) {
            multiplereportname = 'Stock Summary ReportAccount_3';
        }
        else if (DETAILFORMAT == 0 && REPORTTYPE == 2 && ShowItemInGroupWiseReport == 1 && ShowDetail == 0 && SHOWBATCHWISESTOCK == 0) {
            multiplereportname = 'Stock Summary ReportAccount_4';
        }
        else if (DETAILFORMAT == 0 && REPORTTYPE == 0 && ShowDetail == 0 && SHOWBATCHWISESTOCK == 1) {
            multiplereportname = 'Stock Summary ReportAccount_Batch';
        }
        else if (DETAILFORMAT == 0 && REPORTTYPE == 1 && ShowItemInGroupWiseReport == 0 && ShowDetail == 0 && SHOWBATCHWISESTOCK == 1) {
            multiplereportname = 'Stock Summary ReportAccount_1_Batch';
        }
        else if (DETAILFORMAT == 0 && REPORTTYPE == 1 && ShowItemInGroupWiseReport == 1 && ShowDetail == 0 && SHOWBATCHWISESTOCK == 1) {
            multiplereportname = 'Stock Summary ReportAccount_2_Batch';
        }
        else if (DETAILFORMAT == 0 && REPORTTYPE == 2 && ShowItemInGroupWiseReport == 0 && ShowDetail == 0 && SHOWBATCHWISESTOCK == 1) {
            multiplereportname = 'Stock Summary ReportAccount_3_Batch';
        }
        else if (DETAILFORMAT == 0 && REPORTTYPE == 2 && ShowItemInGroupWiseReport == 1 && ShowDetail == 0 && SHOWBATCHWISESTOCK == 1) {
            multiplereportname = 'Stock Summary ReportAccount_4_Batch';
        }
        else if (DETAILFORMAT == 0 && REPORTTYPE == 0 && ShowDetail == 1) {
            multiplereportname = 'Stock Summary ReportAccount_A';
        }
        else if (DETAILFORMAT == 0 && REPORTTYPE == 1 && ShowItemInGroupWiseReport == 0 && ShowDetail == 1) {
            multiplereportname = 'Stock Summary ReportAccount_1A';
        }
        else if (DETAILFORMAT == 0 && REPORTTYPE == 1 && ShowItemInGroupWiseReport == 1 && ShowDetail == 1) {
            multiplereportname = 'Stock Summary ReportAccount_2A';
        }
        else if (DETAILFORMAT == 0 && REPORTTYPE == 2 && ShowItemInGroupWiseReport == 0 && ShowDetail == 1) {
            multiplereportname = 'Stock Summary ReportAccount_3A';
        }
        else if (DETAILFORMAT == 0 && REPORTTYPE == 2 && ShowItemInGroupWiseReport == 1 && ShowDetail == 1) {
            multiplereportname = 'Stock Summary ReportAccount_4A';
        }
        if (DETAILFORMAT == 1 && REPORTTYPE == 0 && ShowDetail == 0 && SHOWBATCHWISESTOCK == 0) {
            multiplereportname = 'Stock Summary Report DetailAccount';
        }
        else if (DETAILFORMAT == 1 && REPORTTYPE == 1 && ShowItemInGroupWiseReport == 0 && ShowDetail == 0 && SHOWBATCHWISESTOCK == 0) {
            multiplereportname = 'Stock Summary Report DetailAccount_1';
        }
        else if (DETAILFORMAT == 1 && REPORTTYPE == 1 && ShowItemInGroupWiseReport == 1 && ShowDetail == 0 && SHOWBATCHWISESTOCK == 0) {
            multiplereportname = 'Stock Summary Report DetailAccount_2';
        }
        else if (DETAILFORMAT == 1 && REPORTTYPE == 2 && ShowItemInGroupWiseReport == 0 && ShowDetail == 0 && SHOWBATCHWISESTOCK == 0) {
            multiplereportname = 'Stock Summary Report DetailAccount_3';
        }
        else if (DETAILFORMAT == 1 && REPORTTYPE == 2 && ShowItemInGroupWiseReport == 1 && ShowDetail == 0 && SHOWBATCHWISESTOCK == 0) {
            multiplereportname = 'Stock Summary Report DetailAccount_4';
        }
        else if (DETAILFORMAT == 1 && REPORTTYPE == 0 && ShowDetail == 0 && SHOWBATCHWISESTOCK == 1) {
            multiplereportname = 'Stock Summary Report DetailAccount_Batch';
        }
        else if (DETAILFORMAT == 1 && REPORTTYPE == 1 && ShowItemInGroupWiseReport == 0 && ShowDetail == 0 && SHOWBATCHWISESTOCK == 1) {
            multiplereportname = 'Stock Summary Report DetailAccount_1_Batch';
        }
        else if (DETAILFORMAT == 1 && REPORTTYPE == 1 && ShowItemInGroupWiseReport == 1 && ShowDetail == 0 && SHOWBATCHWISESTOCK == 1) {
            multiplereportname = 'Stock Summary Report DetailAccount_2_Batch';
        }
        else if (DETAILFORMAT == 1 && REPORTTYPE == 2 && ShowItemInGroupWiseReport == 0 && ShowDetail == 0 && SHOWBATCHWISESTOCK == 1) {
            multiplereportname = 'Stock Summary Report DetailAccount_3_Batch';
        }
        else if (DETAILFORMAT == 1 && REPORTTYPE == 2 && ShowItemInGroupWiseReport == 1 && ShowDetail == 0 && SHOWBATCHWISESTOCK == 1) {
            multiplereportname = 'Stock Summary Report DetailAccount_4_Batch';
        }
        else if (DETAILFORMAT == 1 && REPORTTYPE == 0 && ShowDetail == 1) {
            multiplereportname = 'Stock Summary Report DetailAccount_A';
        }
        else if (DETAILFORMAT == 1 && REPORTTYPE == 1 && ShowItemInGroupWiseReport == 0 && ShowDetail == 1) {
            multiplereportname = 'Stock Summary Report DetailAccount_1A';
        }
        else if (DETAILFORMAT == 1 && REPORTTYPE == 1 && ShowItemInGroupWiseReport == 1 && ShowDetail == 1) {
            multiplereportname = 'Stock Summary Report DetailAccount_2A';
        }
        else if (DETAILFORMAT == 1 && REPORTTYPE == 2 && ShowItemInGroupWiseReport == 0 && ShowDetail == 1) {
            multiplereportname = 'Stock Summary Report DetailAccount_3A';
        }
        else if (DETAILFORMAT == 1 && REPORTTYPE == 2 && ShowItemInGroupWiseReport == 1 && ShowDetail == 1) {
            multiplereportname = 'Stock Summary Report DetailAccount_4A';
        }
        //console.log("@@multiplereportname", multiplereportname)
        this.reportdataEmit.emit({
            status: res, data: {
                reportname: multiplereportname, reportparam: {
                    DATE1: this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_DATE1,
                    DATE2: this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_DATE2,
                    DIV: this.userProfile.CompanyInfo.INITIAL,
                    COMID: this.userProfile.CompanyInfo.COMPANYID,
                    COMPANYID: this.userProfile.CompanyInfo.COMPANYID,
                    PHISCALID: this.userProfile.CompanyInfo.PhiscalID,
                    MGROUP: '%',
                    MCAT: this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_BRANDID ? this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_BRANDID : '%',
                    PTYPE: 100,
                    ACID: this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SUPPLIERCODE ? this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SUPPLIERCODE : '%',
                    REPORTYTYPE: this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_REPORTTYPE ? this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_REPORTTYPE : '0',
                    SUPCODE: this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SUPPLIERCODE ? this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SUPPLIERCODE : '%',
                    MCODE: this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_MCODE ? this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_MCODE : '%',
                    REPORTTYPE: this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_REPORTTYPE ? this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_REPORTTYPE : 0,
                    ShowItemInGroupWiseReport: this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_ShowItemInGroupWiseReport ? this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_ShowItemInGroupWiseReport : 0,
                    ITEMNAME: this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_ITEM ? this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_ITEM : "",
                    SUPPLIERNAME: this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SUPPLIER ? this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SUPPLIER : "",
                    VCHR: '%',
                    DETAILFORMAT: this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_DETAILFORMAT ? this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_DETAILFORMAT : 0,
                    ReportMode: this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_ReportMode ? this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_ReportMode : 0,
                    WAREHOUSE: this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_WAREHOUSE ? this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_WAREHOUSE : '%',
                    ShowDetail: this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWDETAIL ? this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWDETAIL : 0,
                    SHOWBATCHWISESTOCK: this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWBATCHWISE ? this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWBATCHWISE : 0,
                    ShowAltUnitStockReport: this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWALTUNIT ? this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWALTUNIT : 0,
                    SHOWGROUPING: this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWGROUPING ? this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWGROUPING : 0,
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.StockSummaryAccount_loadedTimes = this._reportFilterService.StockSummaryAccount_loadedTimes + 1;
        }
    };
    StockSummaryReportAccount.prototype.ProductEnterClicked = function () {
        this.gridPopupSettingsForProduct = this.masterService.getGenericGridPopUpSettings('ProductList');
        this.genericGridProduct.show();
    };
    StockSummaryReportAccount.prototype.dblClickProductSelect = function (product) {
        this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_MCODE = product.MCODE;
        this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_ITEM = product.DESCA;
    };
    StockSummaryReportAccount.prototype.BrandEnterClicked = function () {
        this.BrandList();
        this.genericGridBrand.show();
    };
    StockSummaryReportAccount.prototype.BrandList = function () {
        this.gridPopupSettingsForBrand = this.masterService.getGenericGridPopUpSettings('BrandList');
    };
    StockSummaryReportAccount.prototype.dblClickBrandSelect = function (brand) {
        this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_BRANDID = brand.BRANDCODE;
        this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_BRANDNAME = brand.BRANDNAME;
    };
    StockSummaryReportAccount.prototype.SupplierEnterClicked = function () {
        this.gridPopupSettingsForSupplier = this.masterService.getGenericGridPopUpSettings('SupplierList');
        this.genericGridSupplier.show();
    };
    StockSummaryReportAccount.prototype.dblClickSupplierSelect = function (supplier) {
        this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SUPPLIERCODE = supplier.ACID;
        this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SUPPLIER = supplier.ACNAME;
    };
    StockSummaryReportAccount.prototype.WarehouseEnterClicked = function () {
        this.gridPopupSettingsForWarehouse = this.masterService.getGenericGridPopUpSettings('WarehouseList');
        this.genericGridWarehouse.show();
    };
    StockSummaryReportAccount.prototype.dblClickWarehouseSelect = function (warehouse) {
        this._reportFilterService.StockSummaryAccountObj.StockSummaryAccount_WAREHOUSE = warehouse.NAME;
    };
    return StockSummaryReportAccount;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridProduct"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], StockSummaryReportAccount.prototype, "genericGridProduct", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridBrand"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], StockSummaryReportAccount.prototype, "genericGridBrand", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridSupplier"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], StockSummaryReportAccount.prototype, "genericGridSupplier", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridWarehouse"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_8__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], StockSummaryReportAccount.prototype, "genericGridWarehouse", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], StockSummaryReportAccount.prototype, "reportdataEmit", void 0);
StockSummaryReportAccount = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'stocksummary-reportaccount',
        template: __webpack_require__(1757),
        styles: [__webpack_require__(1163), __webpack_require__(120)],
    }),
    __param(8, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__["a" /* AuthService */],
        __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_5__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_5__angular_router__["ActivatedRoute"],
        __WEBPACK_IMPORTED_MODULE_6__common_popupLists_report_filter_report_filter_service__["a" /* ReportFilterService */], __WEBPACK_IMPORTED_MODULE_7__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object])
], StockSummaryReportAccount);



/***/ }),

/***/ 1524:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__common_services_permission__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__common_popupLists_report_filter_report_filter_service__ = __webpack_require__(555);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return StockValuationReport; });









var StockValuationReport = (function () {
    function StockValuationReport(masterService, _authService, _reportFilterService, arouter, _ActivatedRoute, reportService, alertService, dialogref, data) {
        this.masterService = masterService;
        this._authService = _authService;
        this._reportFilterService = _reportFilterService;
        this.arouter = arouter;
        this._ActivatedRoute = _ActivatedRoute;
        this.reportService = reportService;
        this.alertService = alertService;
        this.dialogref = dialogref;
        this.data = data;
        this.instanceWiseRepName = 'Stock Valuation Report';
        this.gridPopupSettingsForProduct = new __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridPopupSettingsForWarehouse = new __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.userProfile = this._authService.getUserProfile();
    }
    StockValuationReport.prototype.ngOnInit = function () {
        if (this._reportFilterService.StockValuationAccountObj.assignPrevioiusDate != true) {
            this._reportFilterService.StockValuationAccountObj.StockValuationAccount_DATE1 = this.userProfile.CompanyInfo.FBDATE.split('T')[0];
            this._reportFilterService.StockValuationAccountObj.StockValuationAccount_DATE2 = new Date().toJSON().split('T')[0];
            this._reportFilterService.StockValuationAccountObj.StockValuationAccount_DIV = this.userProfile.CompanyInfo.INITIAL;
            this._reportFilterService.StockValuationAccountObj.StockValuationAccount_SHOWDETAIL = '0';
        }
        this.changeEntryDate(this._reportFilterService.StockValuationAccountObj.StockValuationAccount_DATE1, "AD");
    };
    StockValuationReport.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.StockValuationAccountObj.StockValuationAccount_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.StockValuationAccountObj.StockValuationAccount_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
        }
    };
    StockValuationReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    StockValuationReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    StockValuationReport.prototype.DialogClosedResult = function (res) {
        if (res == "ok") {
            this._reportFilterService.StockValuationAccountObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.StockValuationAccount_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Stock Valuation Report',
                    activeurlpath: this.arouter.url,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.StockValuationAccount_loadedTimes,
                    activerurlpath2: activeurlpath2,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Stock Valuation Report' + '_' + this._reportFilterService.StockValuationAccount_loadedTimes,
                    activeurlpath: this.arouter.url,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.StockValuationAccount_loadedTimes,
                    activerurlpath2: activeurlpath2,
                });
            }
        }
        var multiplereportname = 'Stock Valuation ReportAccount';
        var ITEMNAME = this._reportFilterService.StockValuationAccountObj.StockValuationAccount_ITEM;
        var ShowDetail = this._reportFilterService.StockValuationAccountObj.StockValuationAccount_SHOWDETAIL;
        // let BARCODE = this._reportFilterService.StockValuationAccountObj.StockValuationAccount_BARCODE;
        if (ITEMNAME == "") {
            this._reportFilterService.StockValuationAccountObj.StockValuationAccount_MCODE = '%';
        }
        if (ShowDetail == 0) {
            multiplereportname = 'Stock Valuation ReportAccount';
        }
        else if (ShowDetail == 1) {
            multiplereportname = 'Stock Valuation ReportAccount_1';
        }
        //console.log("@@multiplereportname", multiplereportname)
        this.reportdataEmit.emit({
            status: res, data: {
                reportname: multiplereportname, reportparam: {
                    DATE: this._reportFilterService.StockValuationAccountObj.StockValuationAccount_DATE1,
                    DIV: this.userProfile.CompanyInfo.INITIAL,
                    COMID: this.userProfile.CompanyInfo.COMPANYID,
                    COMPANYID: this.userProfile.CompanyInfo.COMPANYID,
                    PHISCALID: this.userProfile.CompanyInfo.PhiscalID,
                    MGROUP: '%',
                    MCAT: '%',
                    PTYPE: 100,
                    MCODE: this._reportFilterService.StockValuationAccountObj.StockValuationAccount_MCODE ? this._reportFilterService.StockValuationAccountObj.StockValuationAccount_MCODE : '%',
                    ITEMNAME: this._reportFilterService.StockValuationAccountObj.StockValuationAccount_ITEM ? this._reportFilterService.StockValuationAccountObj.StockValuationAccount_ITEM : "",
                    SHOWDETAIL: this._reportFilterService.StockValuationAccountObj.StockValuationAccount_SHOWDETAIL ? this._reportFilterService.StockValuationAccountObj.StockValuationAccount_SHOWDETAIL : 0
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.StockValuationAccount_loadedTimes = this._reportFilterService.StockValuationAccount_loadedTimes + 1;
        }
    };
    StockValuationReport.prototype.ProductEnterClicked = function () {
        this.gridPopupSettingsForProduct = this.masterService.getGenericGridPopUpSettings('ProductList');
        this.genericGridProduct.show();
    };
    StockValuationReport.prototype.dblClickProductSelect = function (product) {
        this._reportFilterService.StockValuationAccountObj.StockValuationAccount_MCODE = product.MCODE;
        this._reportFilterService.StockValuationAccountObj.StockValuationAccount_ITEM = product.DESCA;
        // this._reportFilterService.StockValuationAccountObj.StockValuationAccount_MENUCODE = product.MENUCODE;
    };
    return StockValuationReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridProduct"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], StockValuationReport.prototype, "genericGridProduct", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridWarehouse"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], StockValuationReport.prototype, "genericGridWarehouse", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], StockValuationReport.prototype, "reportdataEmit", void 0);
StockValuationReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'stock-valuation-report',
        template: __webpack_require__(1758),
        styles: [__webpack_require__(1163), __webpack_require__(120)]
    }),
    __param(8, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_7__common_services_permission__["a" /* AuthService */],
        __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_4__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_4__angular_router__["ActivatedRoute"],
        __WEBPACK_IMPORTED_MODULE_8__common_popupLists_report_filter_report_filter_service__["a" /* ReportFilterService */], __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object])
], StockValuationReport);



/***/ }),

/***/ 1525:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__angular_router__ = __webpack_require__(6);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SubLedgerAcbaseReport; });









var SubLedgerAcbaseReport = (function () {
    function SubLedgerAcbaseReport(masterService, _authService, _reportFilterService, alertService, arouter, _ActivatedRoute, dialogref, data) {
        var _this = this;
        this.masterService = masterService;
        this._authService = _authService;
        this._reportFilterService = _reportFilterService;
        this.alertService = alertService;
        this.arouter = arouter;
        this._ActivatedRoute = _ActivatedRoute;
        this.dialogref = dialogref;
        this.data = data;
        this.ReportParameters = {};
        this.division = [];
        this.CostcenterList = [];
        this.account = [];
        this.instanceWiseRepName = 'Sub Ledger Report ACBASE';
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.gridPopupSettingsForSubLedgerList = new __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridPopupSettingsForSubLedgerListOnly = new __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.dropListItem = function (keyword) {
            return new __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__["Observable"](function (observer) {
                _this.masterService.getSubLedgerForReport().map(function (data) {
                    _this.result = data.result;
                    return _this.result.filter(function (ac) { return ac.ACNAME.toUpperCase().indexOf(keyword.toUpperCase()) > -1; });
                }).subscribe(function (res) { observer.next(res); });
            }).share();
        };
        this.userProfile = this._authService.getUserProfile();
        this.userSetting = this._authService.getSetting();
        // ////console.log("@@userSetting.ENABLESUBLEDGER",this.userSetting.ENABLESUBLEDGER)
        // this.masterService.getSubLedgerForReport().subscribe(res => {
        //     this.account = res.data;
        //     if (this.account.length != 0) {
        //         this.SubLedgerAcbase_result = true;
        //     } else {
        //         this.SubLedgerAcbase_result = false;
        //     }
        // })
        this.division = [];
        this.division = [];
        //let data: Array<IDivision> = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                //////console.log("div" + JSON.stringify(res));
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        this.masterService.getCostcenter().subscribe(function (res) {
            _this.CostcenterList = res;
        });
        // this.masterService.getAccDivList();
    }
    SubLedgerAcbaseReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            if (_this._reportFilterService.SubLedgerAcbaseObj.assignPrevioiusDate != true) {
                _this.masterService.getAccDivList();
                _this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                _this.changeEntryDate(_this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DATE1, "AD");
                if (_this.userProfile.CompanyInfo.ActualFY == _this.masterService.PhiscalObj.PhiscalID) {
                    _this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DATE2 = new Date().toJSON().split('T')[0];
                    _this.changeEndDate(_this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DATE2, "AD");
                }
                else {
                    _this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                    _this.changeEndDate(_this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DATE2, "AD");
                }
                _this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                _this.masterService.viewDivision.subscribe(function () {
                    if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                        _this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DIV = '%';
                    }
                    else {
                        _this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                    }
                });
                _this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_CostCenter = '%';
                _this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_REPORTTYPE = '0';
            }
            if (params.instancename) {
                // ////console.log("@@[Sub Ledger Report acbase0]",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                _this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                _this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                _this.changeEntryDate(_this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DATE1, "AD");
                _this.changeEndDate(_this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DATE2, "AD");
                _this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
                _this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_CostCenter = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.CCENTER;
                _this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_REPORTTYPE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.REPORTTYPE;
                _this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_SL_ACID = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SL_ACID;
                _this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_ACID = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.ACID;
                _this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_ACCNAME = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.ACCNAME;
                _this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_SL_ACNAME = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SL_ACNAME;
                _this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_LEDGERSEGREGATION = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.LEDGERSEGREGATION;
                _this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_SHOWNDATE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWNDATE;
                _this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_SHOWSUMMARYINTREE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWSUMMARYINTREE;
            }
        });
        this.checkValue();
    };
    SubLedgerAcbaseReport.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DATE1 = this.masterService.toBSDate(value);
        }
    };
    SubLedgerAcbaseReport.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_2);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DATE2 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DATE2 = this.masterService.toBSDate(value);
        }
    };
    SubLedgerAcbaseReport.prototype.onload = function () {
        if (this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_ACCNAME == '' || this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_ACCNAME === undefined || this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_ACCNAME === null) {
            this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_ACID = '';
        }
        if (this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_SL_ACNAME == '' || this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_SL_ACNAME === undefined || this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_SL_ACNAME === null) {
            this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_SL_ACID = '';
        }
        if ((this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_ACID === undefined ||
            this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_ACID == '' || this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_ACCNAME == '')) {
            this.alertService.info("Please Select Account");
            return;
        }
        else {
            this.DialogClosedResult("ok");
        }
    };
    SubLedgerAcbaseReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    SubLedgerAcbaseReport.prototype.DialogClosedResult = function (res) {
        var _this = this;
        this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DIV = (this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DIV == null || this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DIV == "") ? "%" : this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DIV;
        var multipleReportFormateName = '';
        // ////console.log("@@this.userSetting.ENABLESUBLEDGER",this.userSetting.ENABLESUBLEDGER)
        // if (this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_REPORTTYPE == "0") {
        multipleReportFormateName = 'Sub Ledger Report ACBASE';
        // } else {
        //     multipleReportFormateName = 'Sub Ledger Report ACBASE_1'
        // }
        if (this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_SHOWSUMMARYINTREE == true && this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_REPORTTYPE == "0") {
            this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_SHOWSUMMARYINTREE = 1;
        }
        else {
            this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_SHOWSUMMARYINTREE = 0;
        }
        // if (this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_LEDGERSEGREGATION == true && this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_REPORTTYPE == "1") {
        //     this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_LEDGERSEGREGATION = 1;
        // } else {
        //     this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_LEDGERSEGREGATION = 0;
        // }
        if (this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_SHOWNDATE == true) {
            this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_SHOWNDATE = 1;
        }
        else {
            this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_SHOWNDATE = 0;
        }
        if (this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DIV && this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DIV == '%') {
            this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DIVISIONNAME = 'All';
        }
        else if (this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DIV && this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DIV != '%') {
            var abc = this.division.filter(function (x) { return x.INITIAL == _this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DIV; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DIVISIONNAME = abc[0].NAME;
            }
            else {
                this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DIVISIONNAME = '';
            }
        }
        else {
            this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DIVISIONNAME = '';
        }
        if (this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_CostCenter && this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_CostCenter == '%') {
            this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_COSTCENTERDISPLAYNAME = 'All';
        }
        else if (this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_CostCenter != '%') {
            var abc = this.CostcenterList.filter(function (x) { return x.CCID == _this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_CostCenter; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_COSTCENTERDISPLAYNAME = abc[0].COSTCENTERNAME;
            }
            else {
                this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_COSTCENTERDISPLAYNAME = '';
            }
        }
        else {
            this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_COSTCENTERDISPLAYNAME = '';
        }
        if (res == "ok") {
            this._reportFilterService.SubLedgerAcbaseObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.SubLedgerAcbase_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Sub Ledger - Summary Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.SubLedgerAcbase_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Sub Ledger - Summary Report' + '_' + this._reportFilterService.SubLedgerAcbase_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.SubLedgerAcbase_loadedTimes,
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: 'Sub Ledger - Summary Report',
                reportname: multipleReportFormateName,
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.SubLedgerAcbase_loadedTimes,
                reportparam: {
                    MAINLEDGERDISPLAYNAME: this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_ACCNAME ? this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_ACCNAME : '',
                    DATE1: this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DATE1,
                    DATE2: this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DATE2,
                    BSDATE1: this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_BSDATE1,
                    BSDATE2: this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_BSDATE2,
                    DIV: this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DIV ? this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DIV : '%',
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    COMID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    SHOWSUMMARYINTREE: this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_SHOWSUMMARYINTREE,
                    REPORTTYPE: 0,
                    LEDGERSEGREGATION: 0,
                    ACID: this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_ACID ? this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_ACID : '%',
                    CCENTER: this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_CostCenter ? this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_CostCenter : '%',
                    ACCNAME: this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_ACCNAME,
                    SL_ACID: '%',
                    SHOWNDATE: this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_SHOWNDATE ? this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_SHOWNDATE : 0,
                    SL_ACNAME: this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_SL_ACNAME,
                    DIVISIONNAME: this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DIVISIONNAME ? this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DIVISIONNAME : '',
                    COSTCENTERDISPLAYNAME: this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_COSTCENTERDISPLAYNAME ? this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_COSTCENTERDISPLAYNAME : '',
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.SubLedgerAcbase_loadedTimes = this._reportFilterService.SubLedgerAcbase_loadedTimes + 1;
        }
    };
    SubLedgerAcbaseReport.prototype.accodeChanged = function (value) {
        var item;
        item = this.masterService.accountList.find(function (x) { return x.ACCODE == value; });
        this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_ACCNAME = '';
        if (item) {
            value = item.ACNAME;
            //console.log(value + "****");
            this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_ACCNAME = value;
        }
    };
    SubLedgerAcbaseReport.prototype.onEnterAcnameChange = function (value) {
        this.accodeChanged(value);
    };
    SubLedgerAcbaseReport.prototype.itemChanged = function (value) {
        //console.log({ itemChangedValue: value });
        if (typeof (value) === "object") {
            this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_ACCNAME = value.ACNAME;
            this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_ACCODE = value.ACCODE;
            this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_ACID = value.ACID;
        }
    };
    SubLedgerAcbaseReport.prototype.checkValue = function () {
        if (this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_REPORTTYPE == "0") {
            this.showSummaryTree = true;
        }
        else {
            this.showSummaryTree = false;
        }
        if (this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_REPORTTYPE == "1") {
            this.showLedgerSegregation = true;
        }
        else {
            this.showLedgerSegregation = false;
        }
    };
    SubLedgerAcbaseReport.prototype.AccountEnterClicked = function () {
        if (this.userSetting.ENABLESUBLEDGER == 2) {
            this.gridPopupSettingsForSubLedgerList = this.masterService.getGenericGridPopUpSettings('MainLedgerListAtSettingTwo');
            this.genericGridSubLedger.show();
        }
        else {
            this.gridPopupSettingsForSubLedgerList = this.masterService.getGenericGridPopUpSettings('MainLedgerListAtSettingOne');
            this.genericGridSubLedger.show();
        }
    };
    SubLedgerAcbaseReport.prototype.dblClickAccountSelect = function (account) {
        this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_ACID = account.ACID;
        this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_ACCNAME = account.ACNAME;
    };
    SubLedgerAcbaseReport.prototype.SubLedgerEnterClicked = function () {
        if (this.userSetting.ENABLESUBLEDGER == 2) {
            this.gridPopupSettingsForSubLedgerListOnly = this.masterService.getGenericGridPopUpSettings('SubLedgerListAtSettingTwo');
            this.genericGridSubLedgerOnly.show();
        }
        else {
            this.gridPopupSettingsForSubLedgerListOnly = this.masterService.getGenericGridPopUpSettings('SubLedgerListAtSettingOne');
            this.genericGridSubLedgerOnly.show();
        }
    };
    SubLedgerAcbaseReport.prototype.dblClickSubLedgerSelect = function (account) {
        this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_SL_ACID = account.ACID;
        this._reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_SL_ACNAME = account.ACNAME;
    };
    return SubLedgerAcbaseReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], SubLedgerAcbaseReport.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridSubLedger"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], SubLedgerAcbaseReport.prototype, "genericGridSubLedger", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridSubLedgerOnly"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], SubLedgerAcbaseReport.prototype, "genericGridSubLedgerOnly", void 0);
SubLedgerAcbaseReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'sub-ledger-acbase-report',
        template: __webpack_require__(1759),
        styles: [__webpack_require__(1163), __webpack_require__(120)],
    }),
    __param(7, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_3__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_4__common_services_permission_authService_service__["a" /* AuthService */],
        __WEBPACK_IMPORTED_MODULE_5__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_8__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_8__angular_router__["ActivatedRoute"],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object])
], SubLedgerAcbaseReport);



/***/ }),

/***/ 1526:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__common_popupLists_report_filter_report_filter_service__ = __webpack_require__(555);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SubLedgerReport; });










var SubLedgerReport = (function () {
    function SubLedgerReport(masterService, _authService, _reportFilterService, alertService, arouter, _ActivatedRoute, reportService, dialogref, data) {
        var _this = this;
        this.masterService = masterService;
        this._authService = _authService;
        this._reportFilterService = _reportFilterService;
        this.alertService = alertService;
        this.arouter = arouter;
        this._ActivatedRoute = _ActivatedRoute;
        this.reportService = reportService;
        this.dialogref = dialogref;
        this.data = data;
        this.ReportParameters = {};
        this.division = [];
        this.CostcenterList = [];
        this.account = [];
        this.instanceWiseRepName = 'Sub Ledger Report';
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.gridPopupSettingsForSubLedgerList = new __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridPopupSettingsForSubLedgerListOnly = new __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.dropListItem = function (keyword) {
            return new __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__["Observable"](function (observer) {
                _this.masterService.getSubLedgerForReport().map(function (data) {
                    _this.result = data.result;
                    return _this.result.filter(function (ac) { return ac.ACNAME.toUpperCase().indexOf(keyword.toUpperCase()) > -1; });
                }).subscribe(function (res) { observer.next(res); });
            }).share();
        };
        this.userProfile = this._authService.getUserProfile();
        this.userSetting = this._authService.getSetting();
        // ////console.log("@@userSetting.ENABLESUBLEDGER",this.userSetting.ENABLESUBLEDGER)
        // this.masterService.getSubLedgerForReport().subscribe(res => {
        //     this.account = res.data;
        //     if (this.account.length != 0) {
        //         this.SubLedger_result = true;
        //     } else {
        //         this.SubLedger_result = false;
        //     }
        // })
        this.division = [];
        //let data: Array<IDivision> = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                //////console.log("div" + JSON.stringify(res));
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        this.masterService.getCostcenter().subscribe(function (res) {
            _this.CostcenterList = res;
        });
        // this.masterService.getAccDivList();
    }
    SubLedgerReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            var mode = params.mode;
            // ////console.log("@@this.reportMasterService.drillParam.returnUrl",params.mode,this.reportService.drillParam.returnUrl);
            // ////console.log("@@this.reportMasterService.drillParam",this.reportService.drillParam)
            if (mode == "DRILL" && _this.reportService.drillParam.returnUrl && _this.reportService.drillParam.reportname == 'Sub Ledger Report' && _this._reportFilterService.SubLedgerObj.assignPrevioiusDate != true) {
                _this._reportFilterService.SubLedgerObj.SubLedger_DATE1 = _this.reportService.drillParam.reportparam.DATE1;
                _this._reportFilterService.SubLedgerObj.SubLedger_DATE2 = _this.reportService.drillParam.reportparam.DATE2;
                _this._reportFilterService.SubLedgerObj.SubLedger_DIV = _this.reportService.drillParam.reportparam.DIV;
                _this._reportFilterService.SubLedgerObj.SubLedger_CostCenter = _this.reportService.drillParam.reportparam.COSTCENTER;
                _this._reportFilterService.SubLedgerObj.SubLedger_REPORTTYPE = '1';
                _this._reportFilterService.SubLedgerObj.SubLedger_SL_ACID = _this.reportService.drillParam.reportparam.SL_ACID;
                _this._reportFilterService.SubLedgerObj.SubLedger_ACID = _this.reportService.drillParam.reportparam.ACID;
                _this._reportFilterService.SubLedgerObj.SubLedger_ACCNAME = _this.reportService.drillParam.reportparam.ACCNAME;
                _this._reportFilterService.SubLedgerObj.SubLedger_SL_ACNAME = _this.reportService.drillParam.reportparam.SL_ACNAME;
                _this.changeEntryDate(_this._reportFilterService.SubLedgerObj.SubLedger_DATE1, "AD");
                _this.changeEndDate(_this._reportFilterService.SubLedgerObj.SubLedger_DATE2, "AD");
                _this.checkValue();
            }
            else {
                if (_this._reportFilterService.SubLedgerObj.assignPrevioiusDate != true) {
                    _this.masterService.getAccDivList();
                    _this._reportFilterService.SubLedgerObj.SubLedger_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                    _this.changeEntryDate(_this._reportFilterService.SubLedgerObj.SubLedger_DATE1, "AD");
                    if (_this.userProfile.CompanyInfo.ActualFY == _this.masterService.PhiscalObj.PhiscalID) {
                        _this._reportFilterService.SubLedgerObj.SubLedger_DATE2 = new Date().toJSON().split('T')[0];
                        _this.changeEndDate(_this._reportFilterService.SubLedgerObj.SubLedger_DATE2, "AD");
                    }
                    else {
                        _this._reportFilterService.SubLedgerObj.SubLedger_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                        _this.changeEndDate(_this._reportFilterService.SubLedgerObj.SubLedger_DATE2, "AD");
                    }
                    _this.masterService.viewDivision.subscribe(function () {
                        if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                            _this._reportFilterService.SubLedgerObj.SubLedger_DIV = '%';
                        }
                        else {
                            if (_this.masterService.userSetting.userwisedivision == 1 && _this.division.length == 1) {
                                _this._reportFilterService.SubLedgerObj.SubLedger_DIV = _this.division[0].INITIAL;
                            }
                            else {
                                _this._reportFilterService.SubLedgerObj.SubLedger_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                            }
                        }
                    });
                    _this._reportFilterService.SubLedgerObj.SubLedger_CostCenter = '%';
                    _this._reportFilterService.SubLedgerObj.SubLedger_REPORTTYPE = '0';
                    _this.checkValue();
                    _this._reportFilterService.SubLedgerObj.SubLedger_HIDECOSTCENTER = 0;
                }
                if (params.instancename) {
                    // ////console.log("@@[Sub Ledger Report0]",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                    _this._reportFilterService.SubLedgerObj.SubLedger_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                    _this._reportFilterService.SubLedgerObj.SubLedger_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                    _this.changeEntryDate(_this._reportFilterService.SubLedgerObj.SubLedger_DATE1, "AD");
                    _this.changeEndDate(_this._reportFilterService.SubLedgerObj.SubLedger_DATE2, "AD");
                    _this._reportFilterService.SubLedgerObj.SubLedger_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
                    _this._reportFilterService.SubLedgerObj.SubLedger_CostCenter = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.COSTCENTER;
                    _this._reportFilterService.SubLedgerObj.SubLedger_REPORTTYPE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.REPORTTYPE;
                    _this._reportFilterService.SubLedgerObj.SubLedger_SL_ACID = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SL_ACID;
                    _this._reportFilterService.SubLedgerObj.SubLedger_ACID = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.ACID;
                    _this._reportFilterService.SubLedgerObj.SubLedger_ACCNAME = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.ACCNAME;
                    _this._reportFilterService.SubLedgerObj.SubLedger_SL_ACNAME = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SL_ACNAME;
                    _this._reportFilterService.SubLedgerObj.SubLedger_LEDGERSEGREGATION = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.LEDGERSEGREGATION;
                    _this._reportFilterService.SubLedgerObj.SubLedger_SHOWNDATE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWNDATE;
                    _this._reportFilterService.SubLedgerObj.SubLedger_SHOWSUMMARYINTREE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWSUMMARYINTREE;
                }
            }
        });
    };
    SubLedgerReport.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.SubLedgerObj.SubLedger_BSDATE1 = this.masterService.toBSDate(value);
            //console.log("FROM BSDATE1",this._reportFilterService.SubLedgerObj.SubLedger_BSDATE1);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toBSDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.SubLedgerObj.SubLedger_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            //   this._reportFilterService.SubLedgerObj.SubLedger_DATE1 = this.masterService.toBSDate(value);
        }
    };
    SubLedgerReport.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.SubLedgerObj.SubLedger_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_2);
            this._reportFilterService.SubLedgerObj.SubLedger_DATE2 = this.masterService.toADDate(value);
        }
    };
    SubLedgerReport.prototype.onload = function () {
        if (this._reportFilterService.SubLedgerObj.SubLedger_ACCNAME == '' || this._reportFilterService.SubLedgerObj.SubLedger_ACCNAME === undefined || this._reportFilterService.SubLedgerObj.SubLedger_ACCNAME === null) {
            this._reportFilterService.SubLedgerObj.SubLedger_ACID = '';
        }
        if (this._reportFilterService.SubLedgerObj.SubLedger_SL_ACNAME == '' || this._reportFilterService.SubLedgerObj.SubLedger_SL_ACNAME === undefined || this._reportFilterService.SubLedgerObj.SubLedger_SL_ACNAME === null) {
            this._reportFilterService.SubLedgerObj.SubLedger_SL_ACID = '';
        }
        // ////console.log("@@acid",this._reportFilterService.SubLedgerObj.SubLedger_ACID,this._reportFilterService.SubLedgerObj.SubLedger_ACCNAME)
        // ////console.log("@@slacid",this._reportFilterService.SubLedgerObj.SubLedger_SL_ACID,this._reportFilterService.SubLedgerObj.SubLedger_SL_ACNAME)
        if (this._reportFilterService.SubLedgerObj.SubLedger_SL_ACID === undefined || this._reportFilterService.SubLedgerObj.SubLedger_SL_ACID == '') {
            if ((this._reportFilterService.SubLedgerObj.SubLedger_ACID === undefined ||
                this._reportFilterService.SubLedgerObj.SubLedger_ACID == '' || this._reportFilterService.SubLedgerObj.SubLedger_ACCNAME == '')) {
                this.alertService.info("Please Select Account");
                return;
            }
        }
        else if (this._reportFilterService.SubLedgerObj.SubLedger_ACID === undefined || this._reportFilterService.SubLedgerObj.SubLedger_ACID == '') {
            if ((this._reportFilterService.SubLedgerObj.SubLedger_SL_ACID === undefined ||
                this._reportFilterService.SubLedgerObj.SubLedger_SL_ACID == '' || this._reportFilterService.SubLedgerObj.SubLedger_SL_ACNAME == '')) {
                this.alertService.info("Please Select Account");
                return;
            }
        }
        this.DialogClosedResult("ok");
    };
    SubLedgerReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    SubLedgerReport.prototype.DialogClosedResult = function (res) {
        var _this = this;
        this._reportFilterService.SubLedgerObj.SubLedger_DIV = (this._reportFilterService.SubLedgerObj.SubLedger_DIV == null || this._reportFilterService.SubLedgerObj.SubLedger_DIV == "") ? "%" : this._reportFilterService.SubLedgerObj.SubLedger_DIV;
        var multipleReportFormateName = '';
        // ////console.log("@@this.userSetting.ENABLESUBLEDGER",this.userSetting.ENABLESUBLEDGER)
        // if (this._reportFilterService.SubLedgerObj.SubLedger_REPORTTYPE == "0") {
        multipleReportFormateName = 'Sub Ledger Report';
        // } else {
        //     multipleReportFormateName = 'Sub Ledger Report_1'
        // }
        if (this._reportFilterService.SubLedgerObj.SubLedger_SHOWSUMMARYINTREE == true && this._reportFilterService.SubLedgerObj.SubLedger_REPORTTYPE == "0") {
            this._reportFilterService.SubLedgerObj.SubLedger_SHOWSUMMARYINTREE = 1;
        }
        else {
            this._reportFilterService.SubLedgerObj.SubLedger_SHOWSUMMARYINTREE = 0;
        }
        // if (this._reportFilterService.SubLedgerObj.SubLedger_LEDGERSEGREGATION == true && this._reportFilterService.SubLedgerObj.SubLedger_REPORTTYPE == "1") {
        //     this._reportFilterService.SubLedgerObj.SubLedger_LEDGERSEGREGATION = 1;
        // } else {
        //     this._reportFilterService.SubLedgerObj.SubLedger_LEDGERSEGREGATION = 0;
        // }
        if (this._reportFilterService.SubLedgerObj.SubLedger_SHOWNDATE == true) {
            this._reportFilterService.SubLedgerObj.SubLedger_SHOWNDATE = 1;
        }
        else {
            this._reportFilterService.SubLedgerObj.SubLedger_SHOWNDATE = 0;
        }
        if (this._reportFilterService.SubLedgerObj.SubLedger_DIV && this._reportFilterService.SubLedgerObj.SubLedger_DIV == '%') {
            this._reportFilterService.SubLedgerObj.SubLedger_DIVISIONNAME = 'All';
        }
        else if (this._reportFilterService.SubLedgerObj.SubLedger_DIV && this._reportFilterService.SubLedgerObj.SubLedger_DIV != '%') {
            var abc = this.division.filter(function (x) { return x.INITIAL == _this._reportFilterService.SubLedgerObj.SubLedger_DIV; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.SubLedgerObj.SubLedger_DIVISIONNAME = abc[0].NAME;
            }
            else {
                this._reportFilterService.SubLedgerObj.SubLedger_DIVISIONNAME = '';
            }
        }
        else {
            this._reportFilterService.SubLedgerObj.SubLedger_DIVISIONNAME = '';
        }
        if (this._reportFilterService.SubLedgerObj.SubLedger_CostCenter && this._reportFilterService.SubLedgerObj.SubLedger_CostCenter == '%') {
            this._reportFilterService.SubLedgerObj.SubLedger_COSTCENTERDISPLAYNAME = 'All';
        }
        else if (this._reportFilterService.SubLedgerObj.SubLedger_CostCenter != '%') {
            var abc = this.CostcenterList.filter(function (x) { return x.CCID == _this._reportFilterService.SubLedgerObj.SubLedger_CostCenter; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.SubLedgerObj.SubLedger_COSTCENTERDISPLAYNAME = abc[0].COSTCENTERNAME;
            }
            else {
                this._reportFilterService.SubLedgerObj.SubLedger_COSTCENTERDISPLAYNAME = '';
            }
        }
        else {
            this._reportFilterService.SubLedgerObj.SubLedger_COSTCENTERDISPLAYNAME = '';
        }
        if (res == "ok") {
            this._reportFilterService.SubLedgerObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.SubLedger_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Sub Ledger - Ledger Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.SubLedger_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Sub Ledger - Ledger Report' + '_' + this._reportFilterService.SubLedger_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.SubLedger_loadedTimes,
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: 'Sub Ledger - Ledger Report',
                reportname: multipleReportFormateName,
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.SubLedger_loadedTimes,
                reportparam: {
                    MAINLEDGERDISPLAYNAME: this._reportFilterService.SubLedgerObj.SubLedger_ACCNAME ? this._reportFilterService.SubLedgerObj.SubLedger_ACCNAME : '',
                    SUBLEDGERDISPLAYNAME: this._reportFilterService.SubLedgerObj.SubLedger_SL_ACNAME ? this._reportFilterService.SubLedgerObj.SubLedger_SL_ACNAME : '',
                    DATE1: this._reportFilterService.SubLedgerObj.SubLedger_DATE1,
                    DATE2: this._reportFilterService.SubLedgerObj.SubLedger_DATE2,
                    BSDATE1: this._reportFilterService.SubLedgerObj.SubLedger_BSDATE1,
                    BSDATE2: this._reportFilterService.SubLedgerObj.SubLedger_BSDATE2,
                    DIV: this._reportFilterService.SubLedgerObj.SubLedger_DIV ? this._reportFilterService.SubLedgerObj.SubLedger_DIV : '%',
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    COMID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    SHOWSUMMARYINTREE: this._reportFilterService.SubLedgerObj.SubLedger_SHOWSUMMARYINTREE,
                    REPORTTYPE: 1,
                    LEDGERSEGREGATION: 0,
                    ACID: this._reportFilterService.SubLedgerObj.SubLedger_ACID ? this._reportFilterService.SubLedgerObj.SubLedger_ACID : '%',
                    CCENTER: this._reportFilterService.SubLedgerObj.SubLedger_CostCenter ? this._reportFilterService.SubLedgerObj.SubLedger_CostCenter : '%',
                    ACCNAME: this._reportFilterService.SubLedgerObj.SubLedger_ACCNAME,
                    SL_ACID: this._reportFilterService.SubLedgerObj.SubLedger_SL_ACID ? this._reportFilterService.SubLedgerObj.SubLedger_SL_ACID : '%',
                    SHOWNDATE: this._reportFilterService.SubLedgerObj.SubLedger_SHOWNDATE ? this._reportFilterService.SubLedgerObj.SubLedger_SHOWNDATE : 0,
                    SL_ACNAME: this._reportFilterService.SubLedgerObj.SubLedger_SL_ACNAME ? this._reportFilterService.SubLedgerObj.SubLedger_SL_ACNAME : '%',
                    DIVISIONNAME: this._reportFilterService.SubLedgerObj.SubLedger_DIVISIONNAME ? this._reportFilterService.SubLedgerObj.SubLedger_DIVISIONNAME : '',
                    COSTCENTERDISPLAYNAME: this._reportFilterService.SubLedgerObj.SubLedger_COSTCENTERDISPLAYNAME ? this._reportFilterService.SubLedgerObj.SubLedger_COSTCENTERDISPLAYNAME : '',
                    HIDECOSTCENTER: this._reportFilterService.SubLedgerObj.SubLedger_HIDECOSTCENTER ? this._reportFilterService.SubLedgerObj.SubLedger_HIDECOSTCENTER : 0,
                    HIDENARATION: this._reportFilterService.SubLedgerObj.SubLedger_HIDENARATION ? this._reportFilterService.SubLedgerObj.SubLedger_HIDENARATION : 0,
                    IGNOREOPPOSITAC: this._reportFilterService.SubLedgerObj.IGNOREOPPOSITAC ? this._reportFilterService.SubLedgerObj.IGNOREOPPOSITAC : 0
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.SubLedger_loadedTimes = this._reportFilterService.SubLedger_loadedTimes + 1;
        }
    };
    SubLedgerReport.prototype.accodeChanged = function (value) {
        var item;
        item = this.masterService.accountList.find(function (x) { return x.ACCODE == value; });
        this._reportFilterService.SubLedgerObj.SubLedger_ACCNAME = '';
        if (item) {
            value = item.ACNAME;
            //console.log(value + "****");
            this._reportFilterService.SubLedgerObj.SubLedger_ACCNAME = value;
        }
    };
    SubLedgerReport.prototype.onEnterAcnameChange = function (value) {
        this.accodeChanged(value);
    };
    SubLedgerReport.prototype.itemChanged = function (value) {
        //console.log({ itemChangedValue: value });
        if (typeof (value) === "object") {
            this._reportFilterService.SubLedgerObj.SubLedger_ACCNAME = value.ACNAME;
            this._reportFilterService.SubLedgerObj.SubLedger_ACCODE = value.ACCODE;
            this._reportFilterService.SubLedgerObj.SubLedger_ACID = value.ACID;
        }
    };
    SubLedgerReport.prototype.checkValue = function () {
        if (this._reportFilterService.SubLedgerObj.SubLedger_REPORTTYPE == "0") {
            this.showSummaryTree = true;
        }
        else {
            this.showSummaryTree = false;
        }
        if (this._reportFilterService.SubLedgerObj.SubLedger_REPORTTYPE == "1") {
            this.showLedgerSegregation = true;
        }
        else {
            this.showLedgerSegregation = false;
        }
    };
    SubLedgerReport.prototype.AccountEnterClicked = function () {
        if (this.userSetting.ENABLESUBLEDGER == 2) {
            this.gridPopupSettingsForSubLedgerList = this.masterService.getGenericGridPopUpSettings('MainLedgerListAtSettingTwo');
            this.genericGridSubLedger.show();
        }
        else {
            this.gridPopupSettingsForSubLedgerList = this.masterService.getGenericGridPopUpSettings('MainLedgerListAtSettingOne');
            this.genericGridSubLedger.show();
        }
    };
    SubLedgerReport.prototype.dblClickAccountSelect = function (account) {
        this._reportFilterService.SubLedgerObj.SubLedger_ACID = account.ACID;
        this._reportFilterService.SubLedgerObj.SubLedger_ACCNAME = account.ACNAME;
    };
    SubLedgerReport.prototype.SubLedgerEnterClicked = function () {
        if (this.userSetting.ENABLESUBLEDGER == 2) {
            this.gridPopupSettingsForSubLedgerListOnly = this.masterService.getGenericGridPopUpSettings('SubLedgerListAtSettingTwo');
            this.genericGridSubLedgerOnly.show();
        }
        else {
            if (this._reportFilterService.SubLedgerObj.SubLedger_ACCNAME == '') {
                this._reportFilterService.SubLedgerObj.SubLedger_ACID = '';
            }
            if (this._reportFilterService.SubLedgerObj.SubLedger_ACID) {
                this.gridPopupSettingsForSubLedgerListOnly = this.masterService.getGenericGridSettingForSubLedger(this._reportFilterService.SubLedgerObj.SubLedger_ACID);
            }
            else {
                this.gridPopupSettingsForSubLedgerListOnly = this.masterService.getGenericGridPopUpSettings('SubLedgerListAtSettingOne');
            }
            this.genericGridSubLedgerOnly.show();
        }
    };
    SubLedgerReport.prototype.dblClickSubLedgerSelect = function (account) {
        this._reportFilterService.SubLedgerObj.SubLedger_SL_ACID = account.ACID;
        this._reportFilterService.SubLedgerObj.SubLedger_SL_ACNAME = account.ACNAME;
    };
    return SubLedgerReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], SubLedgerReport.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridSubLedger"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], SubLedgerReport.prototype, "genericGridSubLedger", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridSubLedgerOnly"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], SubLedgerReport.prototype, "genericGridSubLedgerOnly", void 0);
SubLedgerReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'sub-ledger-report',
        template: __webpack_require__(1760),
        styles: [__webpack_require__(1163), __webpack_require__(120)],
    }),
    __param(8, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_3__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_4__common_services_permission_authService_service__["a" /* AuthService */],
        __WEBPACK_IMPORTED_MODULE_5__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_8__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_8__angular_router__["ActivatedRoute"], __WEBPACK_IMPORTED_MODULE_9__common_popupLists_report_filter_report_filter_service__["a" /* ReportFilterService */],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object])
], SubLedgerReport);



/***/ }),

/***/ 1527:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_angular_tree_component__ = __webpack_require__(556);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_ng2_smart_table__ = __webpack_require__(562);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_Subject__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_Subject___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_rxjs_Subject__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_services_spinner_spinner_service__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__masters_components_PLedger_PLedger_component__ = __webpack_require__(1181);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__masters_components_account_ledger_accountLedger_service__ = __webpack_require__(1271);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_ngx_contextmenu__ = __webpack_require__(213);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__common_popupLists_report_filter_report_filter_service__ = __webpack_require__(555);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SummaryLedgerReport; });














var actionMapping = {
    mouse: {
        contextMenu: function (tree, node, $event) {
            $event.preventDefault();
            alert("context menu for " + node.data.name);
        },
        dblClick: function (tree, node, $event) {
            if (node.hasChildren)
                __WEBPACK_IMPORTED_MODULE_2_angular_tree_component__["a" /* TREE_ACTIONS */].TOGGLE_EXPANDED(tree, node, $event);
        },
        click: function (tree, node, $event) {
            $event.shiftKey
                ? __WEBPACK_IMPORTED_MODULE_2_angular_tree_component__["a" /* TREE_ACTIONS */].TOGGLE_SELECTED_MULTI(tree, node, $event)
                : __WEBPACK_IMPORTED_MODULE_2_angular_tree_component__["a" /* TREE_ACTIONS */].TOGGLE_SELECTED(tree, node, $event);
        }
    },
    keys: (_a = {},
        _a[__WEBPACK_IMPORTED_MODULE_2_angular_tree_component__["b" /* KEYS */].ENTER] = function (tree, node, $event) { return node.setActiveAndVisible(); },
        _a)
};
var SummaryLedgerReport = (function () {
    function SummaryLedgerReport(masterService, _authService, loadingService, _reportFilterService, alertService, arouter, _ActivatedRoute, reportService) {
        // this._reportFilterService.showAllcontactsInCC = false;
        var _this = this;
        this.masterService = masterService;
        this._authService = _authService;
        this.loadingService = loadingService;
        this._reportFilterService = _reportFilterService;
        this.alertService = alertService;
        this.arouter = arouter;
        this._ActivatedRoute = _ActivatedRoute;
        this.reportService = reportService;
        this.source = new __WEBPACK_IMPORTED_MODULE_3_ng2_smart_table__["b" /* LocalDataSource */]();
        this.loadListSubject = new __WEBPACK_IMPORTED_MODULE_5_rxjs_Subject__["Subject"]();
        this.loadList$ = this.loadListSubject.asObservable();
        this.formObj = {};
        this.nodeObj = {};
        this.isOnlyMainParent = 0;
        this.Parent = {};
        this.BankPartyVerification = {};
        this.AdditionalInfo = 0;
        this.showPLedgerInfo = 0;
        this.showCustomer = 0;
        this.showBank = 0;
        this.showAssets = 0;
        this.HSN_Active = 0;
        this.isAccount = true;
        this.nodes = [];
        this.selectedNodeEdit = 0;
        this.addMode = false;
        this.division = [];
        this.CostcenterList = [];
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.instanceWiseRepName = 'Summary Ledger Report';
        this.asyncChildren = [
            {
                name: 'child2.1',
                subTitle: 'new and improved'
            }, {
                name: 'child2.2',
                subTitle: 'new and improved2'
            }
        ];
        this.customTemplateStringOptions = {
            displayField: 'ACNAME',
            isExpandedField: 'expanded',
            idField: 'uuid',
            getChildren: this.getChildren.bind(this),
            actionMapping: actionMapping,
            allowDrag: false
        };
        this.reportnameFormatWise = 'Summary Ledger Report';
        this.mode = "add";
        this.masterService.PType = '';
        this.busy = this.masterService.getacListTree().map(function (x) { return x; })
            .subscribe(function (res) {
            _this.nodes = res;
            if (_this.tree != null) {
                _this.tree.treeModel.update();
            }
        }, function (error) {
            var err = _this.masterService.resolveError(error, "accountLedger - accountLedger");
            if (err) {
                alert(err.json());
            }
        });
        this.userProfile = this._authService.getUserProfile();
        this.division = [];
        //let data: Array<IDivision> = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                //////console.log("div" + JSON.stringify(res));
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        // this.masterService.getAccDivList();
        this.masterService.getCostcenter().subscribe(function (res) {
            _this.CostcenterList = res;
        });
    }
    SummaryLedgerReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            var mode = params.mode;
            // ////console.log("@@drillParam",this.reportService.drillParam)
            if (mode == "DRILL" && _this.reportService.drillParam.returnUrl && _this.reportService.drillParam.reportname == 'Summary Ledger Report' && _this._reportFilterService.SummaryLedgerObj.assignPrevioiusDate != true) {
                _this._reportFilterService.SummaryLedgerObj.SummaryLedger_DATE1 = _this.reportService.drillParam.reportparam.DATE1;
                _this._reportFilterService.SummaryLedgerObj.SummaryLedger_DATE2 = _this.reportService.drillParam.reportparam.DATE2;
                _this._reportFilterService.SummaryLedgerObj.SummaryLedger_DIV = _this.reportService.drillParam.reportparam.DIV;
                _this._reportFilterService.SummaryLedgerObj.CCENTER = _this.reportService.drillParam.reportparam.COSTCENTER;
                _this._reportFilterService.SummaryLedgerObj.SummaryLedger_ReportType = 0;
                _this._reportFilterService.SummaryLedgerObj.SummaryLedger_selectedNode = _this.reportService.drillParam.reportparam.PARENT;
                _this.changeEntryDate(_this._reportFilterService.SummaryLedgerObj.SummaryLedger_DATE1, "AD");
                _this.changeEndDate(_this._reportFilterService.SummaryLedgerObj.SummaryLedger_DATE2, "AD");
                _this.checkValue();
            }
            else {
                if (_this._reportFilterService.SummaryLedgerObj.assignPrevioiusDate != true) {
                    _this.masterService.getAccDivList();
                    _this._reportFilterService.SummaryLedgerObj.SummaryLedger_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                    if (_this.userProfile.CompanyInfo.ActualFY == _this.masterService.PhiscalObj.PhiscalID) {
                        _this._reportFilterService.SummaryLedgerObj.SummaryLedger_DATE2 = new Date().toJSON().split('T')[0];
                    }
                    else {
                        var x = _this.masterService.PhiscalObj.EndDate;
                        x = x.substring(0, 10);
                        _this._reportFilterService.SummaryLedgerObj.SummaryLedger_DATE2 = x;
                    }
                    // this._reportFilterService.SummaryLedgerObj.SummaryLedger_DIV = this.masterService.userProfile.CompanyInfo.INITIAL;
                    _this.masterService.viewDivision.subscribe(function () {
                        if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                            _this._reportFilterService.SummaryLedgerObj.SummaryLedger_DIV = '%';
                        }
                        else {
                            if (_this.masterService.userSetting.userwisedivision == 1 && _this.division.length == 1) {
                                _this._reportFilterService.SummaryLedgerObj.SummaryLedger_DIV = _this.division[0].INITIAL;
                            }
                            else {
                                _this._reportFilterService.SummaryLedgerObj.SummaryLedger_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                            }
                        }
                    });
                    _this._reportFilterService.SummaryLedgerObj.SummaryLedger_CostCenter = '%';
                    _this._reportFilterService.SummaryLedgerObj.SummaryLedger_ReportType = 0;
                    ////console.log("@@selecctednde", this._reportFilterService.SummaryLedgerObj.SummaryLedger_selectedNode)
                    _this.changeEntryDate(_this._reportFilterService.SummaryLedgerObj.SummaryLedger_DATE1, "AD");
                    _this.changeEndDate(_this._reportFilterService.SummaryLedgerObj.SummaryLedger_DATE2, "AD");
                    // this.checkValue();
                }
                if (params.instancename) {
                    // ////console.log("@@[Summary Ledger Report0]",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                    _this._reportFilterService.SummaryLedgerObj.SummaryLedger_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                    _this.changeEntryDate(_this._reportFilterService.SummaryLedgerObj.SummaryLedger_DATE1, "AD");
                    _this.changeEndDate(_this._reportFilterService.SummaryLedgerObj.SummaryLedger_DATE2, "AD");
                    _this._reportFilterService.SummaryLedgerObj.SummaryLedger_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
                    _this._reportFilterService.SummaryLedgerObj.CCENTER = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.COSTCENTER;
                    _this._reportFilterService.SummaryLedgerObj.SummaryLedger_ReportType = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.REPORTTYPE;
                    _this._reportFilterService.SummaryLedgerObj.SummaryLedger_selectedNode = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.PARENT;
                }
                _this.checkValue();
            }
        });
    };
    SummaryLedgerReport.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.SummaryLedgerObj.SummaryLedger_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.SummaryLedgerObj.SummaryLedger_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.SummaryLedgerObj.SummaryLedger_DATE1 = this.masterService.toBSDate(value);
        }
    };
    SummaryLedgerReport.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.SummaryLedgerObj.SummaryLedger_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_2);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.SummaryLedgerObj.SummaryLedger_DATE2 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.SummaryLedgerObj.SummaryLedger_DATE2 = this.masterService.toBSDate(value);
        }
    };
    SummaryLedgerReport.prototype.onload = function () {
        if (this._reportFilterService.SummaryLedgerObj.SummaryLedger_ReportType == 0 && (this._reportFilterService.SummaryLedgerObj.SummaryLedger_selectedNode === undefined || this._reportFilterService.SummaryLedgerObj.SummaryLedger_selectedNode == '')) {
            this.alertService.info("Please Select a Account Group");
            return;
        }
        else if (this._reportFilterService.SummaryLedgerObj.SummaryLedger_ReportType == 2 &&
            ((this._reportFilterService.SummaryLedgerObj.SummaryLedger_multipleCostcenter === undefined || this._reportFilterService.SummaryLedgerObj.SummaryLedger_multipleCostcenter.length == 0) &&
                this._reportFilterService.SummaryLedgerObj.SummaryLedger_showAllContacts != true)) {
            this.alertService.info("Please Select Costcenter");
            return;
        }
        else {
            this.DialogClosedResult("ok");
        }
    };
    SummaryLedgerReport.prototype.DialogClosedResult = function (res) {
        var _this = this;
        var multipleSelectedCC = [];
        var SelectedCC = '';
        if (this._reportFilterService.SummaryLedgerObj.SummaryLedger_multipleCostcenter === undefined) {
            SelectedCC = this._reportFilterService.SummaryLedgerObj.CCENTER;
        }
        else {
            if (this._reportFilterService.SummaryLedgerObj.SummaryLedger_multipleCostcenter.length != 0) {
                this._reportFilterService.SummaryLedgerObj.SummaryLedger_multipleCostcenter.forEach(function (COSTCENTER) {
                    multipleSelectedCC.push(COSTCENTER.CCID);
                    SelectedCC += multipleSelectedCC + ",";
                });
            }
            else {
                SelectedCC = this._reportFilterService.SummaryLedgerObj.CCENTER;
            }
        }
        if (this._reportFilterService.SummaryLedgerObj.SummaryLedger_showAllContacts == true) {
            SelectedCC = '%';
        }
        if (this._reportFilterService.SummaryLedgerObj.SummaryLedger_ReportType == 0) {
            this.PARENTacid = this._reportFilterService.SummaryLedgerObj.SummaryLedger_selectedNode ? this._reportFilterService.SummaryLedgerObj.SummaryLedger_selectedNode : '%';
        }
        else {
            this.PARENTacid = '%';
        }
        if (this._reportFilterService.SummaryLedgerObj.SummaryLedger_ReportType != 2) {
            SelectedCC = this._reportFilterService.SummaryLedgerObj.SummaryLedger_CostCenter;
        }
        if (this._reportFilterService.SummaryLedgerObj.SummaryLedger_DIV && this._reportFilterService.SummaryLedgerObj.SummaryLedger_DIV == '%') {
            this._reportFilterService.SummaryLedgerObj.SummaryLedger_DIVISIONNAME = 'All';
        }
        else if (this._reportFilterService.SummaryLedgerObj.SummaryLedger_DIV && this._reportFilterService.SummaryLedgerObj.SummaryLedger_DIV != '%') {
            var abc = this.division.filter(function (x) { return x.INITIAL == _this._reportFilterService.SummaryLedgerObj.SummaryLedger_DIV; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.SummaryLedgerObj.SummaryLedger_DIVISIONNAME = abc[0].NAME;
            }
            else {
                this._reportFilterService.SummaryLedgerObj.SummaryLedger_DIVISIONNAME = '';
            }
        }
        else {
            this._reportFilterService.SummaryLedgerObj.SummaryLedger_DIVISIONNAME = '';
        }
        if (this._reportFilterService.SummaryLedgerObj.SummaryLedger_CostCenter && this._reportFilterService.SummaryLedgerObj.SummaryLedger_CostCenter == '%') {
            this._reportFilterService.SummaryLedgerObj.SummaryLedger_COSTCENTERDISPLAYNAME = 'All';
        }
        else if (this._reportFilterService.SummaryLedgerObj.SummaryLedger_CostCenter != '%') {
            var abc = this.CostcenterList.filter(function (x) { return x.CCID == _this._reportFilterService.SummaryLedgerObj.SummaryLedger_CostCenter; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.SummaryLedgerObj.SummaryLedger_COSTCENTERDISPLAYNAME = abc[0].COSTCENTERNAME;
            }
            else {
                this._reportFilterService.SummaryLedgerObj.SummaryLedger_COSTCENTERDISPLAYNAME = '';
            }
        }
        else {
            this._reportFilterService.SummaryLedgerObj.SummaryLedger_COSTCENTERDISPLAYNAME = '';
        }
        if (res == "ok") {
            this._reportFilterService.SummaryLedgerObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Account Group Ledger Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.loadedTimes
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Account Group Ledger Report' + '_' + this._reportFilterService.loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.loadedTimes
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: 'Account Group Ledger',
                reportname: this.reportnameFormatWise, instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.loadedTimes, reportparam: {
                    ACCOUNTGROUPDISPLAYNAME: this._reportFilterService.SummaryLedgerObj.SummaryLedger_GROUPDISPLAYNAME ? this._reportFilterService.SummaryLedgerObj.SummaryLedger_GROUPDISPLAYNAME : '',
                    REPORTOPTIONDISPLAYNAME: this._reportFilterService.SummaryLedgerObj.SummaryLedger_REPORTOPTIONDISPLAYNAME ? this._reportFilterService.SummaryLedgerObj.SummaryLedger_REPORTOPTIONDISPLAYNAME : '',
                    DATE1: this._reportFilterService.SummaryLedgerObj.SummaryLedger_DATE1,
                    DATE2: this._reportFilterService.SummaryLedgerObj.SummaryLedger_DATE2,
                    BSDATE1: this._reportFilterService.SummaryLedgerObj.SummaryLedger_BSDATE1,
                    BSDATE2: this._reportFilterService.SummaryLedgerObj.SummaryLedger_BSDATE2,
                    DIV: this._reportFilterService.SummaryLedgerObj.SummaryLedger_DIV ? this._reportFilterService.SummaryLedgerObj.SummaryLedger_DIV : '%',
                    PARENT: this.PARENTacid,
                    CCENTER: SelectedCC ? SelectedCC : '%',
                    AREA: '%',
                    COMID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    ISPARTYGROUPLEDGER: '0',
                    REPORTTYPE: this._reportFilterService.SummaryLedgerObj.SummaryLedger_ReportType,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    DIVISIONNAME: this._reportFilterService.SummaryLedgerObj.SummaryLedger_DIVISIONNAME ? this._reportFilterService.SummaryLedgerObj.SummaryLedger_DIVISIONNAME : '',
                    COSTCENTERDISPLAYNAME: this._reportFilterService.SummaryLedgerObj.SummaryLedger_COSTCENTERDISPLAYNAME ? this._reportFilterService.SummaryLedgerObj.SummaryLedger_COSTCENTERDISPLAYNAME : '',
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.loadedTimes = this._reportFilterService.loadedTimes + 1;
        }
    };
    // Close Method
    SummaryLedgerReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("cancel");
    };
    SummaryLedgerReport.prototype.checkValue = function () {
        if (this._reportFilterService.SummaryLedgerObj.SummaryLedger_ReportType == 0) {
            this.showTree = true;
            this._reportFilterService.SummaryLedgerObj.SummaryLedger_multipleCostcenter = [];
            this._reportFilterService.SummaryLedgerObj.SummaryLedger_multipleCostcenter = [];
            this.reportnameFormatWise = 'Summary Ledger Report';
            this._reportFilterService.SummaryLedgerObj.SummaryLedger_REPORTOPTIONDISPLAYNAME = '';
        }
        else {
            this.showTree = false;
        }
        if (this._reportFilterService.SummaryLedgerObj.SummaryLedger_ReportType == 2) {
            this.showCCtable = true;
            this.showMultipleCC = true;
            this._reportFilterService.SummaryLedgerObj.SummaryLedger_selectedNode = '';
            this.reportnameFormatWise = 'Summary Ledger Report_1';
            this._reportFilterService.SummaryLedgerObj.SummaryLedger_REPORTOPTIONDISPLAYNAME = 'Cost Center Wise Report';
            this._reportFilterService.showAllcontactsInCC = true;
        }
        else {
            this.showCCtable = false;
        }
    };
    //Tree Part
    SummaryLedgerReport.prototype.getChildren = function (node) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            setTimeout(function () { return resolve(_this.asyncChildren.map(function (c) {
                return Object.assign({}, c, {
                    hasChildren: node.level < 5
                });
            })); }, 1000);
        });
    };
    SummaryLedgerReport.prototype.onEvent = function ($event) {
        // //console.log.bind(console);
    };
    SummaryLedgerReport.prototype.onselect = function (tree, $event) {
        var _this = this;
        this.source = new __WEBPACK_IMPORTED_MODULE_3_ng2_smart_table__["b" /* LocalDataSource */]();
        this.AdditionalInfo = 0;
        this.showBank = 0;
        this.showPLedgerInfo = 0;
        this.selectedNode = tree.treeModel.getFocusedNode().data;
        this.selectedNodeEdit = this.selectedNode.ACID;
        this._reportFilterService.SummaryLedgerObj.SummaryLedger_selectedNode = this.selectedNode.ACID;
        this._reportFilterService.SummaryLedgerObj.SummaryLedger_GROUPDISPLAYNAME = this.selectedNode.ACNAME ? this.selectedNode.ACNAME : '';
        this.getRootParent(this.selectedNode, this.nodes);
        this.loadListSubject.next(this.selectedNode);
        this.formObj.ACNAME = this.selectedNode.ACNAME;
        if (this.selectedNode.PARENT !== null && this.selectedNode !== null) {
            if (this.selectedNode.ACNAME == 'BANK' || this.selectedNode.PARENT.MAPID == 'B' || this.selectedNode.MAPID == 'B') {
                this.showBank = 1;
                this.isGroup = 0;
            }
            else {
                this.isGroup = 0;
                this.showBank = 0;
            }
        }
        else {
            this.showBank = 0;
            this.showBank = 0;
        }
        this.formObj.HASSUBLEDGER = this.selectedNode.HASSUBLEDGER;
        this.formObj.HSN_SACCODE = this.selectedNode.HSN_SACCODE;
        var childAccountList = this.masterService.PartialAccountList.filter(function (a) { return a.PARENT == _this.selectedNode.id; });
        this.mode = "select";
        var customerData;
        var checkAcid = this.selectedNode.ACID.substring(0, 2);
        if (this.selectedNode.PType == "C" && this.selectedNode.TYPE == "A") {
            this.loadingService.show("Getting data, Please wait...");
            this.masterService.getAllAccount(this.selectedNode.ACID).subscribe(function (data) {
                _this.NewItem();
                _this.modeTitle = 'View And Edit Customer';
                _this.showPLedgerInfo = 1;
                _this.isGroup = 0;
                _this.Party = "Customer";
                _this.PTypeForParty = _this.selectedNode.PType;
                _this.formObj.ACNAME = _this.selectedNode.ACNAME;
                _this.formObj.mode = "edit";
                _this.mode = "view";
                _this.loadingService.hide();
                customerData = data.result;
                ////console.log("selectedData", customerData);
                _this.formObj.isAutoGSTApplicable = 0;
                _this.formObj.isRCMApplicable = 0;
                _this.PLedgerChild.setEditFromValue(customerData);
            }, function (error) {
                _this.loadingService.hide();
            });
        }
        else if ((this.selectedNode.PType == 'V' && checkAcid == 'PA') || this.selectedNode.ACID == 'LB1199') {
            this.loadingService.show("Getting data, Please wait...");
            this.masterService.getAllAccount(this.selectedNode.ACID).subscribe(function (data) {
                _this.NewItem();
                _this.modeTitle = 'View And Edit Supplier';
                _this.showPLedgerInfo = 1;
                _this.isGroup = 0;
                _this.Party = "Supplier";
                _this.PTypeForParty = _this.selectedNode.PType;
                _this.formObj.ACNAME = _this.selectedNode.ACNAME;
                _this.formObj.mode = "edit";
                _this.mode = "view";
                _this.loadingService.hide();
                customerData = data.result;
                _this.formObj.isAutoGSTApplicable = customerData.isAutoGSTApplicable;
                _this.formObj.isRCMApplicable = customerData.isRCMApplicable;
                _this.formObj.isReverseChargeApplicable = customerData.isReverseChargeApplicable;
                _this.PLedgerChild.setEditFromValue(customerData);
            }, function (error) {
                _this.loadingService.hide();
            });
        }
        else {
            this.masterService.getAllAccount(this.selectedNode.ACID).subscribe(function (data) {
                _this.NewItem();
                _this.modeTitle = 'View And Edit';
                _this.PTypeForParty = _this.selectedNode.PType;
                _this.formObj.ACNAME = _this.selectedNode.ACNAME;
                _this.formObj.mode = "edit";
                _this.mode = "view";
                _this.loadingService.hide();
                customerData = data.result;
                _this.formObj.isAutoGSTApplicable = customerData.isAutoGSTApplicable;
                _this.formObj.isRCMApplicable = customerData.isRCMApplicable;
                _this.formObj.isReverseChargeApplicable = customerData.isReverseChargeApplicable;
            }, function (error) {
                _this.loadingService.hide();
            });
        }
    };
    SummaryLedgerReport.prototype.getRootParent = function (node, list) {
        this.nodeObj = node;
        this.UnderObj = node.PARENT;
        if (node.PARENTID == 'BS' || node.PARENTID == 'PL' || node.PARENTID == 'TD') {
            this.PrimaryGrpObj = node;
            this.Parent.Primary = node.ACNAME;
            this.isOnlyMainParent = 1;
            this.UnderObj = node;
            return;
        }
        for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
            var t = list_1[_i];
            if (node.PARENTID != t.ACID) {
                this.loopingChild(node, t.children, t);
            }
            else {
                this.root = node.PARENTID;
                this.PrimaryGrpObj = node;
            }
        }
        this.Parent.Under = this.UnderObj.ACNAME;
        if (node.TYPE == 'G') {
            this.UnderObj = node;
            this.isGroup == 1;
            this.modeTitle = 'View Group';
        }
        if (this.root == 'LB') {
            this.Parent.Primary = 'LIABILITES';
        }
        else if (this.root == 'AT') {
            this.Parent.Primary = 'ASSETS';
        }
        else if (this.root == 'DI') {
            this.Parent.Primary = 'DIRECT INCOME';
        }
        else if (this.root == 'DE') {
            this.Parent.Primary = 'DIRECT EXPENSES';
        }
        else if (this.root == 'IE') {
            this.Parent.Primary = 'INDIRECT EXPENSES';
        }
        else if (this.root == 'II') {
            this.Parent.Primary = 'INDIRECT INCOME';
        }
        else if (this.root == 'CA') {
            this.Parent.Primary = 'Capital';
        }
        this.isOnlyMainParent = 0;
    };
    SummaryLedgerReport.prototype.NewItem = function () {
        //console.log(this.nodeObj)
        //console.log(this.formObj.MAPID)
        this.mode = "add";
        this.isAccount = true;
        this.addMode = true;
        this.formObj.ACNAME = '';
        this.modeTitle = 'New Account';
        this.formObj.TYPE = 'A';
        this.isGroup = 0;
        this.showBank = 0;
        this.showPLedgerInfo = 0;
        this.HSN_Active = 0;
        this.BankPartyVerification.Bank = 0;
        this.BankPartyVerification.Customer = 0;
        this.BankPartyVerification.Supplier = 0;
        this.BankPartyVerification.SupplierGrp = 0;
        var checkAcid = this.nodeObj.ACID.substring(0, 2);
        if (this.nodeObj.TYPE == 'G') {
            this.Parent.Under = this.nodeObj.ACNAME;
            this.formObj.PARENT = this.nodeObj.ACID;
            this.formObj.MAPID = this.nodeObj.MAPID;
            this.formObj.PType = this.nodeObj.PType;
            this.formObj.LEVELS = this.nodeObj.LEVELS + 1;
            if (this.nodeObj.ACID.substring(0, 2) == 'IE' || this.nodeObj.ACID.substring(0, 2) == 'DE') {
                this.HSN_Active = 1;
            }
        }
        else {
            this.Parent.Under = this.UnderObj.ACNAME;
            this.formObj.PARENT = this.UnderObj.ACID;
            this.formObj.MAPID = this.nodeObj.MAPID;
            this.formObj.PType = this.nodeObj.PType;
            this.formObj.LEVELS = this.nodeObj.LEVELS;
        }
        if (this.formObj.MAPID == 'B') {
            this.AdditionalInfo = 1;
            this.showBank = 1;
            this.isGroup = 0;
            this.BankPartyVerification.Bank = 1;
            this.formObj.MAPID = 'B';
        }
        else if (this.formObj.MAPID == 'C') {
            this.showAssets = 1;
            this.formObj.MAPID = 'C';
        }
        else {
            this.showAssets = 0;
            this.formObj.MAPID = '';
        }
        if (this.formObj.PType == 'C') {
            this.AdditionalInfo = 1;
            this.showPLedgerInfo = 1;
            this.showCustomer = 1;
            this.masterService.PType = 'C';
            this.Party = "Customer";
            this.isGroup = 0;
            this.BankPartyVerification.Customer = 1;
            this.fromTreeTag = 1;
        }
        if ((this.formObj.PType == 'V' && checkAcid == 'PA') || this.nodeObj.ACID == 'LB1199') {
            this.AdditionalInfo = 1;
            this.showPLedgerInfo = 1;
            this.PTypeForParty = 'V';
            this.Party = "Supplier";
            this.isGroup = 0;
            this.showCustomer = 0;
            this.masterService.PType = 'V';
            this.BankPartyVerification.Supplier = 1;
            this.fromTreeTag = 2;
        }
    };
    SummaryLedgerReport.prototype.loopingChild = function (node, cList, root) {
        for (var _i = 0, cList_1 = cList; _i < cList_1.length; _i++) {
            var c = cList_1[_i];
            if (c != node) {
                this.loopingChild(node, c.children, root);
            }
            else {
                this.root = root.ACID;
                this.PrimaryGrpObj = root;
            }
        }
    };
    SummaryLedgerReport.prototype.childrenCount = function (node) {
        return node && node.children ? "(" + node.children.length + ")" : '';
    };
    SummaryLedgerReport.prototype.filterNodes = function (text, tree) {
        try {
            tree.treeModel.filterNodes(text, true);
        }
        catch (ex) {
            //console.log(ex);
            alert(ex);
        }
    };
    SummaryLedgerReport.prototype.checkCostCnterValue = function () {
        if (this._reportFilterService.SummaryLedgerObj.SummaryLedger_showAllContacts == true) {
            this.showMultipleCC = false;
        }
        else {
            this.showMultipleCC = true;
        }
    };
    SummaryLedgerReport.prototype.addCostcenterToList = function () {
        var ccData = this._reportFilterService.SummaryLedgerObj.CCENTER;
        this._reportFilterService.SummaryLedgerObj.CCENTER = ccData && ccData.CCID ? ccData.CCID : '';
        var selectCCenterList = this._reportFilterService.SummaryLedgerObj.SummaryLedger_multipleCostcenter.filter(function (centerList) { return centerList.COSTCENTERNAME == ccData.COSTCENTERNAME; });
        if (ccData.COSTCENTERNAME === "" ||
            ccData.COSTCENTERNAME === null ||
            ccData.COSTCENTERNAME === undefined) {
            return;
        }
        if (selectCCenterList.length === 0) {
            this._reportFilterService.SummaryLedgerObj.SummaryLedger_multipleCostcenter.push({ CCID: ccData.CCID, COSTCENTERNAME: ccData.COSTCENTERNAME });
        }
    };
    SummaryLedgerReport.prototype.deleteCostcenter = function (index) {
        this._reportFilterService.SummaryLedgerObj.SummaryLedger_multipleCostcenter.splice(index, 1);
    };
    return SummaryLedgerReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("PLedgerChild"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_7__masters_components_PLedger_PLedger_component__["a" /* PLedgerComponent */])
], SummaryLedgerReport.prototype, "PLedgerChild", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])(__WEBPACK_IMPORTED_MODULE_9_ngx_contextmenu__["b" /* ContextMenuComponent */]),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_9_ngx_contextmenu__["b" /* ContextMenuComponent */])
], SummaryLedgerReport.prototype, "contextMenu", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], SummaryLedgerReport.prototype, "reportdataEmit", void 0);
SummaryLedgerReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'summary-ledger-report',
        template: __webpack_require__(1761),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
        // styles:[require('../MasterDialogReport/Report.css')]
        providers: [__WEBPACK_IMPORTED_MODULE_8__masters_components_account_ledger_accountLedger_service__["a" /* TreeViewAcService */]]
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_4__common_services_permission_authService_service__["a" /* AuthService */],
        __WEBPACK_IMPORTED_MODULE_6__common_services_spinner_spinner_service__["a" /* SpinnerService */], __WEBPACK_IMPORTED_MODULE_10__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */],
        __WEBPACK_IMPORTED_MODULE_11__common_services_alert_alert_service__["a" /* AlertService */], __WEBPACK_IMPORTED_MODULE_12__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_12__angular_router__["ActivatedRoute"], __WEBPACK_IMPORTED_MODULE_13__common_popupLists_report_filter_report_filter_service__["a" /* ReportFilterService */]])
], SummaryLedgerReport);

var _a;


/***/ }),

/***/ 1528:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_angular_tree_component__ = __webpack_require__(556);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_ng2_smart_table__ = __webpack_require__(562);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_Subject__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_Subject___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_rxjs_Subject__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__masters_components_PLedger_PLedger_component__ = __webpack_require__(1181);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_ngx_contextmenu__ = __webpack_require__(213);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__masters_components_party_ledger_partyledger_service__ = __webpack_require__(575);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__common_popupLists_report_filter_report_filter_service__ = __webpack_require__(555);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SummaryPartyLedger; });













var actionMapping = {
    mouse: {
        contextMenu: function (tree, node, $event) {
            $event.preventDefault();
            alert("context menu for " + node.data.name);
        },
        dblClick: function (tree, node, $event) {
            if (node.hasChildren)
                __WEBPACK_IMPORTED_MODULE_2_angular_tree_component__["a" /* TREE_ACTIONS */].TOGGLE_EXPANDED(tree, node, $event);
        },
        click: function (tree, node, $event) {
            $event.shiftKey
                ? __WEBPACK_IMPORTED_MODULE_2_angular_tree_component__["a" /* TREE_ACTIONS */].TOGGLE_SELECTED_MULTI(tree, node, $event)
                : __WEBPACK_IMPORTED_MODULE_2_angular_tree_component__["a" /* TREE_ACTIONS */].TOGGLE_SELECTED(tree, node, $event);
        }
    },
    keys: (_a = {},
        _a[__WEBPACK_IMPORTED_MODULE_2_angular_tree_component__["b" /* KEYS */].ENTER] = function (tree, node, $event) { return node.setActiveAndVisible(); },
        _a)
};
var SummaryPartyLedger = (function () {
    function SummaryPartyLedger(masterService, _authService, partyservice, _reportFilterService, alertService, arouter, _ActivatedRoute, reportService) {
        var _this = this;
        this.masterService = masterService;
        this._authService = _authService;
        this.partyservice = partyservice;
        this._reportFilterService = _reportFilterService;
        this.alertService = alertService;
        this.arouter = arouter;
        this._ActivatedRoute = _ActivatedRoute;
        this.reportService = reportService;
        this.source = new __WEBPACK_IMPORTED_MODULE_3_ng2_smart_table__["b" /* LocalDataSource */]();
        this.loadListSubject = new __WEBPACK_IMPORTED_MODULE_5_rxjs_Subject__["Subject"]();
        this.loadList$ = this.loadListSubject.asObservable();
        this.nodes = [];
        this.division = [];
        this.CostcenterList = [];
        this.AreaList = [];
        this.instanceWiseRepName = 'Summary Party Ledger Report';
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.asyncChildren = [
            {
                name: 'child2.1',
                subTitle: 'new and improved'
            }, {
                name: 'child2.2',
                subTitle: 'new and improved2'
            }
        ];
        this.customTemplateStringOptions = {
            displayField: 'ACNAME',
            isExpandedField: 'expanded',
            idField: 'uuid',
            getChildren: this.getChildren.bind(this),
            actionMapping: actionMapping,
            allowDrag: false
        };
        this.reportNameFormatWise = 'Summary Party Ledger Report';
        this.mode = "add";
        this.busy = this.masterService.getpartyListTree().map(function (x) { return x; })
            .subscribe(function (res) {
            //console.log(res);
            _this.nodes = res;
            //console.log(this.nodes);
            if (_this.tree != null) {
                _this.tree.treeModel.update();
            }
            //console.log(this.tree);
        }, function (error) {
            _this.masterService.resolveError(error, "partyLedger - PartyLedger");
        });
        this.division = [];
        this.division = [];
        //let data: Array<IDivision> = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                //////console.log("div" + JSON.stringify(res));
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        this.masterService.getCostcenter().subscribe(function (res) {
            _this.CostcenterList = res;
        });
        this.masterService.getAreaList().subscribe(function (res) {
            _this.AreaList = res.result;
        });
        this.showMultipleCC = true;
        // this.masterService.getAccDivList();
    }
    SummaryPartyLedger.prototype.ngOnInit = function () {
        var _this = this;
        this.userProfile = this._authService.getUserProfile();
        this.isUserwiseDivision = this.masterService.userSetting.UserwiseDivision;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            var mode = params.mode;
            // ////console.log("@@this.reportMasterService.drillParam.returnUrl",params.mode,this.reportService.drillParam.returnUrl);
            // ////console.log("@@this.reportMasterService.drillParam",this.reportService.drillParam)
            if (mode == "DRILL" && _this.reportService.drillParam.returnUrl && _this.reportService.drillParam.reportname == 'Summary Party Ledger Report' && _this._reportFilterService.SummaryPartyLedgerObj.assignPrevioiusDate != true) {
                _this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DATE1 = _this.reportService.drillParam.reportparam.DATE1;
                _this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DATE2 = _this.reportService.drillParam.reportparam.DATE2;
                _this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DIV = _this.reportService.drillParam.reportparam.DIV;
                _this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_CostCenter = _this.reportService.drillParam.reportparam.COSTCENTER;
                _this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_ReportType = 2;
                _this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_ReportType = 0;
                _this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_selectedNode = _this.reportService.drillParam.reportparam.PARENT;
                _this.checkValue();
                _this.changeEntryDate(_this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DATE1, "AD");
                _this.changeEndDate(_this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DATE2, "AD");
            }
            else {
                if (_this._reportFilterService.SummaryPartyLedgerObj.assignPrevioiusDate != true) {
                    _this.masterService.getAccDivList();
                    _this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                    _this.changeEntryDate(_this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DATE1, "AD");
                    if (_this.userProfile.CompanyInfo.ActualFY == _this.masterService.PhiscalObj.PhiscalID) {
                        _this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DATE2 = new Date().toJSON().split('T')[0];
                        _this.changeEndDate(_this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DATE2, "AD");
                    }
                    else {
                        _this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                        _this.changeEndDate(_this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DATE2, "AD");
                    }
                    _this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                    _this.masterService.viewDivision.subscribe(function () {
                        if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                            _this._reportFilterService.SummaryPartyLedgerObj.SummaryLedger_DIV = '%';
                        }
                        else {
                            if (_this.masterService.userSetting.userwisedivision == 1 && _this.division.length == 1) {
                                _this._reportFilterService.SummaryPartyLedgerObj.SummaryLedger_DIV = _this.division[0].INITIAL;
                            }
                            else {
                                _this._reportFilterService.SummaryPartyLedgerObj.SummaryLedger_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                            }
                        }
                    });
                    _this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_CostCenter = '%';
                    _this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_ReportType = 0;
                }
                if (params.instancename) {
                    // ////console.log("@@[Summary Party Ledger Report0]",params.instancename,this._reportFilterService.reportDataStore[params.instancename])
                    _this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                    _this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                    _this.changeEntryDate(_this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DATE1, "AD");
                    _this.changeEndDate(_this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DATE2, "AD");
                    _this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
                    _this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_CostCenter = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.CCENTER;
                    _this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_ReportType = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.REPORTTYPE;
                    _this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_selectedNode = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.PARENT;
                    _this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_AreaWise = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.AREA;
                }
                _this.checkValue();
            }
        });
        // this._reportFilterService.SummaryPartyLedgerObj.loadedTimes =0;
        this.changeEntryDate(this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DATE1, "AD");
        this.changeEndDate(this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DATE2, "AD");
    };
    SummaryPartyLedger.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DATE1 = this.masterService.toBSDate(value);
        }
    };
    SummaryPartyLedger.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_2);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DATE2 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DATE2 = this.masterService.toBSDate(value);
        }
    };
    SummaryPartyLedger.prototype.onload = function () {
        if (this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_ReportType == 0 && (this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_selectedNode === undefined || this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_selectedNode == '')) {
            this.alertService.info("Please Select a Party Group");
            return;
        }
        else if (this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_ReportType == 1 && (this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_multipleAreas === undefined || this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_multipleAreas.length == 0)) {
            this.alertService.info("Please Select Area");
            return;
        }
        else if (this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_ReportType == 2 && (this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_multipleCostcenter === undefined || this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_multipleCostcenter.length == 0)) {
            this.alertService.info("Please Select Costcenter");
            return;
        }
        else {
            this.DialogClosedResult("ok");
        }
    };
    SummaryPartyLedger.prototype.DialogClosedResult = function (res) {
        var _this = this;
        // ////console.log("@@this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_AreaWise",this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_AreaWise)
        var multipleSelectedCC = [];
        var SelectedCC = '';
        if (this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_multipleCostcenter === undefined) {
            SelectedCC = this._reportFilterService.SummaryPartyLedgerObj.CCENTER;
        }
        else {
            if (this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_multipleCostcenter.length != 0) {
                this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_multipleCostcenter.forEach(function (COSTCENTER) {
                    multipleSelectedCC.push(COSTCENTER.CCID);
                    SelectedCC += multipleSelectedCC + ",";
                });
            }
            else {
                SelectedCC = this._reportFilterService.SummaryPartyLedgerObj.CCENTER;
            }
        }
        var multipleSelectedArea = [];
        var SelectedArea = '';
        if (this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_multipleAreas === undefined) {
            SelectedArea = this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_AreaWise;
        }
        else {
            if (this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_multipleAreas.length != 0) {
                this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_multipleAreas.forEach(function (Area) {
                    multipleSelectedArea.push(Area.AREA_ID);
                    SelectedArea += multipleSelectedArea + ",";
                });
            }
            else {
                SelectedArea = this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_AreaWise;
            }
        }
        if (this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_ReportType == 0) {
            this.PARENTacid = this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_selectedNode ? this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_selectedNode : '%';
        }
        else {
            this.PARENTacid = '%';
        }
        if (this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_ReportType != 2) {
            SelectedCC = this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_CostCenter;
        }
        if (this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_ReportType != 1) {
            SelectedArea = '%';
        }
        if (this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DIV && this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DIV == '%') {
            this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DIVISIONNAME = 'All';
        }
        else if (this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DIV && this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DIV != '%') {
            var abc = this.division.filter(function (x) { return x.INITIAL == _this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DIV; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DIVISIONNAME = abc[0].NAME;
            }
            else {
                this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DIVISIONNAME = '';
            }
        }
        else {
            this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DIVISIONNAME = '';
        }
        if (this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_CostCenter && this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_CostCenter == '%') {
            this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_COSTCENTERDISPLAYNAME = 'All';
        }
        else if (this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_CostCenter != '%') {
            var abc = this.CostcenterList.filter(function (x) { return x.CCID == _this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_CostCenter; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_COSTCENTERDISPLAYNAME = abc[0].COSTCENTERNAME;
            }
            else {
                this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_COSTCENTERDISPLAYNAME = '';
            }
        }
        else {
            this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_COSTCENTERDISPLAYNAME = '';
        }
        if (res == "ok") {
            this._reportFilterService.SummaryPartyLedgerObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.SummaryParty_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Party Group Ledger Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.SummaryParty_loadedTimes
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Party Group Ledger Report' + '_' + this._reportFilterService.SummaryParty_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.SummaryParty_loadedTimes
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: 'Party Group Ledger',
                reportname: this.reportNameFormatWise,
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.SummaryParty_loadedTimes,
                reportparam: {
                    PARTYGROUPDISPLAYNAME: this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_GROUPDISPLAYNAME ? this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_GROUPDISPLAYNAME : '',
                    REPORTOPTIONDISPLAYNAME: this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_REPORTOPTIONDISPLAYNAME ? this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_REPORTOPTIONDISPLAYNAME : '',
                    DATE1: this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DATE1,
                    DATE2: this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DATE2,
                    BSDATE1: this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_BSDATE1,
                    BSDATE2: this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_BSDATE2,
                    DIV: this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DIV ? this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DIV : '%',
                    PARENT: this.PARENTacid,
                    CCENTER: SelectedCC ? SelectedCC : '%',
                    AREA: SelectedArea ? SelectedArea : '%',
                    COMID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    ISPARTYGROUPLEDGER: '1',
                    REPORTTYPE: this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_ReportType,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    DIVISIONNAME: this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DIVISIONNAME ? this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DIVISIONNAME : '',
                    COSTCENTERDISPLAYNAME: this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_COSTCENTERDISPLAYNAME ? this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_COSTCENTERDISPLAYNAME : '',
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.SummaryParty_loadedTimes = this._reportFilterService.SummaryParty_loadedTimes + 1;
        }
    };
    // Close Method
    SummaryPartyLedger.prototype.closeReportBox = function () {
        this.DialogClosedResult("cancel");
    };
    SummaryPartyLedger.prototype.checkValue = function () {
        if (this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_ReportType == 0) {
            this.showTree = true;
            this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_multipleAreas = [];
            this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_multipleAreas = [];
            this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_multipleCostcenter = [];
            this.reportNameFormatWise = 'Summary Party Ledger Report';
            this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_REPORTOPTIONDISPLAYNAME = '';
        }
        else {
            this.showTree = false;
        }
        if (this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_ReportType == 1) {
            this.showAreaTable = true;
            this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_selectedNode = '';
            this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_multipleCostcenter = [];
            this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_multipleCostcenter = [];
            this.reportNameFormatWise = 'Summary Party Ledger Report_1';
            this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_REPORTOPTIONDISPLAYNAME = 'Area Wise Report';
        }
        else {
            this.showAreaTable = false;
        }
        if (this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_ReportType == 2) {
            this.showCCtable = true;
            this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_multipleAreas = [];
            this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_selectedNode = '';
            this.reportNameFormatWise = 'Summary Party Ledger Report_2';
            this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_REPORTOPTIONDISPLAYNAME = 'Cost Center Wise Report';
        }
        else {
            this.showCCtable = false;
        }
    };
    //Tree Part
    SummaryPartyLedger.prototype.getChildren = function (node) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            setTimeout(function () { return resolve(_this.asyncChildren.map(function (c) {
                return Object.assign({}, c, {
                    hasChildren: node.level < 5
                });
            })); }, 1000);
        });
    };
    SummaryPartyLedger.prototype.onEvent = function ($event) {
        // //console.log.bind(console);
    };
    SummaryPartyLedger.prototype.addNode = function (addednode) {
        this.tree.treeModel.getFocusedNode().data.children.push(addednode);
        this.tree.treeModel.update();
    };
    SummaryPartyLedger.prototype.onselect = function (tree, $event) {
        this.source = new __WEBPACK_IMPORTED_MODULE_3_ng2_smart_table__["b" /* LocalDataSource */]();
        this.selectedNode = tree.treeModel.getFocusedNode().data;
        this.getRootParent(this.selectedNode, this.nodes);
        this.loadListSubject.next(this.selectedNode);
        this.partyservice.ParentInfo = this.selectedNode;
        this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_selectedNode = this.selectedNode.ACID;
        this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_GROUPDISPLAYNAME = this.selectedNode.ACNAME ? this.selectedNode.ACNAME : '';
    };
    SummaryPartyLedger.prototype.getRootParent = function (node, list) {
        if (node.PARENTID == "PA") {
            this.root = node.ACID;
            return;
        }
        for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
            var t = list_1[_i];
            if (node.PARENTID != t.ACID) {
                this.loopingChild(node, t.children, t);
            }
            else {
                this.root = t.ACID;
            }
        }
    };
    SummaryPartyLedger.prototype.loopingChild = function (node, cList, root) {
        for (var _i = 0, cList_1 = cList; _i < cList_1.length; _i++) {
            var c = cList_1[_i];
            if (c != node) {
                this.loopingChild(node, c.children, root);
            }
            else {
                this.root = root.ACID;
            }
        }
    };
    SummaryPartyLedger.prototype.childrenCount = function (node) {
        return node && node.children ? "(" + node.children.length + ")" : '';
    };
    SummaryPartyLedger.prototype.filterNodes = function (text, tree) {
        try {
            tree.treeModel.filterNodes(text, true);
        }
        catch (ex) {
            //console.log(ex);
            alert(ex);
        }
    };
    SummaryPartyLedger.prototype.addAreaToList = function () {
        var areaData = this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_AreaWise;
        this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_AreaWise = areaData && areaData.AREA_ID ? areaData.AREA_ID : '';
        var selectAreaList = this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_multipleAreas.filter(function (areaList) { return areaList.AREA_NAME == areaData.AREA_NAME; });
        if (areaData.AREA_NAME === "" ||
            areaData.AREA_NAME === null ||
            areaData.AREA_NAME === undefined) {
            return;
        }
        if (selectAreaList.length === 0) {
            this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_multipleAreas.push({ AREA_ID: areaData.AREA_ID, AREA_NAME: areaData.AREA_NAME });
        }
    };
    SummaryPartyLedger.prototype.deleteArea = function (index) {
        this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_multipleAreas.splice(index, 1);
    };
    SummaryPartyLedger.prototype.checkCostCenterValue = function () {
        if (this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_showAllContacts == true) {
            this.showMultipleCC = false;
        }
        else {
            this.showMultipleCC = true;
        }
    };
    SummaryPartyLedger.prototype.addCostcenterToList = function () {
        var ccData = this._reportFilterService.SummaryPartyLedgerObj.CCENTER;
        this._reportFilterService.SummaryPartyLedgerObj.CCENTER = ccData && ccData.CCID ? ccData.CCID : '';
        var selectCCenterList = this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_multipleCostcenter.filter(function (centerList) { return centerList.COSTCENTERNAME == ccData.COSTCENTERNAME; });
        if (ccData.COSTCENTERNAME === "" ||
            ccData.COSTCENTERNAME === null ||
            ccData.COSTCENTERNAME === undefined) {
            return;
        }
        if (selectCCenterList.length === 0) {
            this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_multipleCostcenter.push({ CCID: ccData.CCID, COSTCENTERNAME: ccData.COSTCENTERNAME });
        }
    };
    SummaryPartyLedger.prototype.deleteCostcenter = function (index) {
        this._reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_multipleCostcenter.splice(index, 1);
    };
    return SummaryPartyLedger;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("PLedgerChild"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_6__masters_components_PLedger_PLedger_component__["a" /* PLedgerComponent */])
], SummaryPartyLedger.prototype, "PLedgerChild", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])(__WEBPACK_IMPORTED_MODULE_7_ngx_contextmenu__["b" /* ContextMenuComponent */]),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_7_ngx_contextmenu__["b" /* ContextMenuComponent */])
], SummaryPartyLedger.prototype, "contextMenu", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], SummaryPartyLedger.prototype, "reportdataEmit", void 0);
SummaryPartyLedger = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'summary-party-ledger',
        template: __webpack_require__(1762),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
        // styles:[require('../MasterDialogReport/Report.css')]
        providers: [__WEBPACK_IMPORTED_MODULE_8__masters_components_party_ledger_partyledger_service__["a" /* TreeViewPartyervice */]]
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_4__common_services_permission_authService_service__["a" /* AuthService */],
        __WEBPACK_IMPORTED_MODULE_8__masters_components_party_ledger_partyledger_service__["a" /* TreeViewPartyervice */], __WEBPACK_IMPORTED_MODULE_9__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */],
        __WEBPACK_IMPORTED_MODULE_10__common_services_alert_alert_service__["a" /* AlertService */], __WEBPACK_IMPORTED_MODULE_11__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_11__angular_router__["ActivatedRoute"],
        __WEBPACK_IMPORTED_MODULE_12__common_popupLists_report_filter_report_filter_service__["a" /* ReportFilterService */]])
], SummaryPartyLedger);

var _a;


/***/ }),

/***/ 1529:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TDSReport; });








var TDSReport = (function () {
    function TDSReport(masterService, _authService, alertService, _reportFilterService, arouter, _ActivatedRoute, dialogref, data) {
        var _this = this;
        this.masterService = masterService;
        this._authService = _authService;
        this.alertService = alertService;
        this._reportFilterService = _reportFilterService;
        this.arouter = arouter;
        this._ActivatedRoute = _ActivatedRoute;
        this.dialogref = dialogref;
        this.data = data;
        this.ReportParameters = {};
        this.voucherTypeList = [];
        this.userList = [];
        this.division = [];
        this.instanceWiseRepName = 'TDS Report';
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.gridACListPopupSettings = new __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridPartyListPopupSettings = new __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridSubLedgerSetting = new __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this._reportFilterService.TDSObj.Reportnameis = 'TDS Report';
        this.division = [];
        //let data: Array<IDivision> = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                //////console.log("div" + JSON.stringify(res));
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        // this.masterService.getAccDivList();
    }
    TDSReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            if (_this._reportFilterService.TDSObj.assignPrevioiusDate != true) {
                _this.masterService.getAccDivList();
                _this._reportFilterService.TDSObj.TDS_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                if (_this.masterService.userProfile.CompanyInfo.ActualFY == _this.masterService.PhiscalObj.PhiscalID) {
                    _this._reportFilterService.TDSObj.TDS_DATE2 = new Date().toJSON().split('T')[0];
                    _this.changeEndDate(_this._reportFilterService.TDSObj.TDS_DATE2, "AD");
                }
                else {
                    _this._reportFilterService.TDSObj.TDS_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                    _this.changeEndDate(_this._reportFilterService.TDSObj.TDS_DATE2, "AD");
                }
                // this._reportFilterService.TDSObj.TDS_DIV = this.masterService.userProfile.CompanyInfo.INITIAL;
                _this.masterService.viewDivision.subscribe(function () {
                    if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                        _this._reportFilterService.TDSObj.TDS_DIV = '%';
                    }
                    else {
                        if (_this.masterService.userSetting.userwisedivision == 1 && _this.division.length == 1) {
                            _this._reportFilterService.TDSObj.TDS_DIV = _this.division[0].INITIAL;
                        }
                        else {
                            _this._reportFilterService.TDSObj.TDS_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                        }
                    }
                });
                _this._reportFilterService.TDSObj.TDS_REPORTTYPE = '0';
            }
            if (params.instancename) {
                _this._reportFilterService.TDSObj.TDS_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                _this._reportFilterService.TDSObj.TDS_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                _this._reportFilterService.TDSObj.TDS_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
                _this._reportFilterService.TDSObj.TDS_REPORTTYPE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.REPORTTYPE;
                _this._reportFilterService.TDSObj.TDS_TDSNAME = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.TDSDISPLAYNAME;
                _this._reportFilterService.TDSObj.TDS_PARTYNAME = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.TDS_PARTYNAME;
            }
        });
        this.changeEntryDate(this._reportFilterService.TDSObj.TDS_DATE1, "AD");
        this.changeEndDate(this._reportFilterService.TDSObj.TDS_DATE2, "AD");
    };
    TDSReport.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.TDSObj.TDS_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.TDSObj.TDS_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.TDSObj.TDS_DATE1 = this.masterService.toBSDate(value);
        }
    };
    TDSReport.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.TDSObj.TDS_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_2);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.TDSObj.TDS_DATE2 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.TDSObj.TDS_DATE2 = this.masterService.toBSDate(value);
        }
    };
    TDSReport.prototype.onload = function () {
        if (this._reportFilterService.TDSObj.TDS_TDSNAME == "" || this._reportFilterService.TDSObj.TDS_TDSNAME == null ||
            this._reportFilterService.TDSObj.TDS_TDSNAME == undefined) {
            this._reportFilterService.TDSObj.TDS_TDSID = '%';
        }
        // if(!this._reportFilterService.TDSObj.TDS_TDSID){
        //     this.alertService.warning("Please select TDS Account")
        //     return;
        // }
        this.DialogClosedResult("ok");
    };
    TDSReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    TDSReport.prototype.DialogClosedResult = function (res) {
        var _this = this;
        this._reportFilterService.TDSObj.TDS_DIV = (this._reportFilterService.TDSObj.TDS_DIV == null || this._reportFilterService.TDSObj.TDS_DIV == "") ? "%" : this._reportFilterService.TDSObj.TDS_DIV;
        var multipleReportFormateName = '';
        if (this._reportFilterService.TDSObj.TDS_ISIRDFORMAT == 1) {
            multipleReportFormateName = 'TDS Report_2';
        }
        else {
            if (this._reportFilterService.TDSObj.TDS_REPORTTYPE == "0") {
                multipleReportFormateName = 'TDS Report';
            }
            else if (this._reportFilterService.TDSObj.TDS_REPORTTYPE == "1") {
                multipleReportFormateName = 'TDS Report_1';
            }
        }
        if (this._reportFilterService.TDSObj.TDS_DIV && this._reportFilterService.TDSObj.TDS_DIV == '%') {
            this._reportFilterService.TDSObj.TDS_DIVISIONNAME = 'All';
        }
        else if (this._reportFilterService.TDSObj.TDS_DIV && this._reportFilterService.TDSObj.TDS_DIV != '%') {
            var abc = this.division.filter(function (x) { return x.INITIAL == _this._reportFilterService.TDSObj.TDS_DIV; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.TDSObj.TDS_DIVISIONNAME = abc[0].NAME;
            }
            else {
                this._reportFilterService.TDSObj.TDS_DIVISIONNAME = '';
            }
        }
        else {
            this._reportFilterService.TDSObj.TDS_DIVISIONNAME = '';
        }
        if (res == "ok") {
            this._reportFilterService.TDSObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.TDS_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'TDS Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.TDS_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'TDS Report' + '_' + this._reportFilterService.TDS_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.TDS_loadedTimes,
                });
            }
        }
        if (this._reportFilterService.TDSObj.TDS_TDSNAME == "" || this._reportFilterService.TDSObj.TDS_TDSNAME == null || this._reportFilterService.TDSObj.TDS_TDSNAME == undefined) {
            this._reportFilterService.TDSObj.TDS_TDSID = '%';
        }
        if (this._reportFilterService.TDSObj.TDS_PARTYNAME == "" || this._reportFilterService.TDSObj.TDS_PARTYID == null || this._reportFilterService.TDSObj.TDS_PARTYID == undefined) {
            this._reportFilterService.TDSObj.TDS_PARTYID = '%';
        }
        if (this._reportFilterService.TDSObj.TDS_SL_ACNAME == "" || this._reportFilterService.TDSObj.TDS_SL_ACNAME == null || this._reportFilterService.TDSObj.TDS_SL_ACNAME == undefined) {
            this._reportFilterService.TDSObj.TDS_SL_ACID = '%';
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: 'TDS Report',
                reportname: multipleReportFormateName,
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.TDS_loadedTimes,
                reportparam: {
                    DATE1: this._reportFilterService.TDSObj.TDS_DATE1,
                    DATE2: this._reportFilterService.TDSObj.TDS_DATE2,
                    BSDATE1: this._reportFilterService.TDSObj.TDS_BSDATE1,
                    BSDATE2: this._reportFilterService.TDSObj.TDS_BSDATE2,
                    DIV: this._reportFilterService.TDSObj.TDS_DIV,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    COMID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    TDSACID: this._reportFilterService.TDSObj.TDS_TDSID ? this._reportFilterService.TDSObj.TDS_TDSID : '%',
                    ACID: this._reportFilterService.TDSObj.TDS_PARTYID ? this._reportFilterService.TDSObj.TDS_PARTYID : '%',
                    REPORTTYPE: this._reportFilterService.TDSObj.TDS_REPORTTYPE,
                    ISIRDFORMAT: this._reportFilterService.TDSObj.TDS_ISIRDFORMAT ? this._reportFilterService.TDSObj.TDS_ISIRDFORMAT : 0,
                    DIVISIONNAME: this._reportFilterService.TDSObj.TDS_DIVISIONNAME ? this._reportFilterService.TDSObj.TDS_DIVISIONNAME : '',
                    TDSDISPLAYNAME: this._reportFilterService.TDSObj.TDS_TDSNAME ? this._reportFilterService.TDSObj.TDS_TDSNAME : '',
                    PARTYDISPLAYNAME: this._reportFilterService.TDSObj.TDS_PARTYNAME ? this._reportFilterService.TDSObj.TDS_PARTYNAME : '',
                    SUBLEDGERDISPLAYNAME: this._reportFilterService.TDSObj.TDS_SL_ACNAME ? this._reportFilterService.TDSObj.TDS_SL_ACNAME : '',
                    SL_ACID: this._reportFilterService.TDSObj.TDS_SL_ACID ? this._reportFilterService.TDSObj.TDS_SL_ACID : ''
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.TDS_loadedTimes = this._reportFilterService.TDS_loadedTimes + 1;
        }
    };
    TDSReport.prototype.TDSEnterCommand = function () {
        this.showAcList();
    };
    TDSReport.prototype.showAcList = function () {
        this.gridACListPopupSettings = {
            title: "Accounts",
            apiEndpoints: "/getAccountPagedListByMapId/Details/TDS",
            defaultFilterIndex: 1,
            columns: [
                {
                    key: "ACID",
                    title: "AC CODE",
                    hidden: false,
                    noSearch: false
                },
                {
                    key: "ACNAME",
                    title: "A/C NAME",
                    hidden: false,
                    noSearch: false
                }
            ]
        };
        this.genericGridACList.show();
    };
    TDSReport.prototype.onAcSelect = function (event) {
        this._reportFilterService.TDSObj.TDS_TDSID = event.ACID;
        this._reportFilterService.TDSObj.TDS_TDSNAME = event.ACNAME;
    };
    TDSReport.prototype.PartyEnterCommand = function () {
        this.showPartyList();
    };
    TDSReport.prototype.showPartyList = function () {
        this.gridPartyListPopupSettings = {
            title: "Accounts",
            apiEndpoints: "/getAccountPagedListByMapId/Details/PartyReceipt",
            defaultFilterIndex: 1,
            columns: [
                {
                    key: "ACID",
                    title: "AC CODE",
                    hidden: false,
                    noSearch: false
                },
                {
                    key: "ACNAME",
                    title: "A/C NAME",
                    hidden: false,
                    noSearch: false
                }
            ]
        };
        this.genericGridPartyList.show();
    };
    TDSReport.prototype.onPartySelect = function (event) {
        this._reportFilterService.TDSObj.TDS_PARTYID = event.ACID;
        this._reportFilterService.TDSObj.TDS_PARTYNAME = event.ACNAME;
    };
    TDSReport.prototype.checkValue = function () {
        if (this._reportFilterService.TDSObj.TDS_ISIRDFORMAT == true) {
            this._reportFilterService.TDSObj.TDS_ISIRDFORMAT = 1;
        }
    };
    TDSReport.prototype.SubLedgerEnterCommand = function () {
        this.gridSubLedgerSetting = {
            title: "SubLedger List",
            apiEndpoints: "/getSubLedgerPageList",
            defaultFilterIndex: 1,
            columns: [
                {
                    key: "SL_ACID",
                    title: "SubLedger ID",
                    hidden: false,
                    noSearch: false
                },
                {
                    key: "SL_ACNAME",
                    title: "SubLedger Name",
                    hidden: false,
                    noSearch: false
                }
            ]
        };
        this.gridSubLedgerSettingList.show();
    };
    TDSReport.prototype.onSubLedgerSelect = function (value) {
        this._reportFilterService.TDSObj.TDS_SL_ACID = value.SL_ACID;
        this._reportFilterService.TDSObj.TDS_SL_ACNAME = value.SL_ACNAME;
    };
    TDSReport.prototype.changeCheckboxValue = function (event) {
        if (event.target.value == 1) {
            this._reportFilterService.TDSObj.TDS_ISIRDFORMAT = 0;
        }
    };
    return TDSReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], TDSReport.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridACList"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], TDSReport.prototype, "genericGridACList", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridPartyList"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], TDSReport.prototype, "genericGridPartyList", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("gridSubLedgerSettingList"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_7__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], TDSReport.prototype, "gridSubLedgerSettingList", void 0);
TDSReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'tds-report',
        template: __webpack_require__(1763),
        styles: [__webpack_require__(1163), __webpack_require__(120)],
    }),
    __param(7, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__["a" /* AuthService */], __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_5__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_5__angular_router__["ActivatedRoute"],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object])
], TDSReport);



/***/ }),

/***/ 1530:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TrialBalanceReport; });







var TrialBalanceReport = (function () {
    function TrialBalanceReport(masterService, _authService, _reportFilterService, arouter, alertService, dialogref, _ActivatedRoute, data) {
        var _this = this;
        this.masterService = masterService;
        this._authService = _authService;
        this._reportFilterService = _reportFilterService;
        this.arouter = arouter;
        this.alertService = alertService;
        this.dialogref = dialogref;
        this._ActivatedRoute = _ActivatedRoute;
        this.data = data;
        // ReportParameters: any = <any>{};
        this.division = [];
        this.CostcenterList = [];
        this.instanceWiseRepName = 'Trial Balance Report';
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.userProfile = this._authService.getUserProfile();
        this.userSetting = _authService.getSetting();
        this.division = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        this.masterService.getCostcenter().subscribe(function (res) {
            _this.CostcenterList = res;
        });
        // this.masterService.getAccDivList();
    }
    TrialBalanceReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            if (_this._reportFilterService.TrialBalanceObj.assignPrevioiusDate != true) {
                _this.masterService.getAccDivList();
                _this._reportFilterService.TrialBalanceObj.TrialBalance_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                _this._reportFilterService.TrialBalanceObj.TrialBalance_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                // this._reportFilterService.TrialBalanceObj.TrialBalance_DIV = this.masterService.userProfile.CompanyInfo.INITIAL;
                _this.masterService.viewDivision.subscribe(function () {
                    if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                        _this._reportFilterService.TrialBalanceObj.TrialBalance_DIV = '%';
                    }
                    else {
                        if (_this.masterService.userSetting.userwisedivision == 1 && _this.division.length == 1) {
                            _this._reportFilterService.TrialBalanceObj.TrialBalance_DIV = _this.division[0].INITIAL;
                        }
                        else {
                            _this._reportFilterService.TrialBalanceObj.TrialBalance_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                        }
                    }
                });
                _this._reportFilterService.TrialBalanceObj.TrialBalance_CostCenter = '%';
                _this._reportFilterService.TrialBalanceObj.TrialBalance_SUMMARYREPORT = '0';
                _this._reportFilterService.TrialBalanceObj.TrialBalance_LEDGERWISE = '0';
                _this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWNETCLOSING = 1;
                if (_this.userSetting.IS_NESTLE == 1) {
                    _this._reportFilterService.TrialBalanceObj.TrialBalance_COMPANYTYPE = 'DMS';
                }
                else {
                    _this._reportFilterService.TrialBalanceObj.TrialBalance_COMPANYTYPE = 'NONDMS';
                }
            }
            if (params.instancename) {
                // ////console.log("@@[trial bln Report0]",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                _this._reportFilterService.TrialBalanceObj.TrialBalance_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                _this._reportFilterService.TrialBalanceObj.TrialBalance_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                _this._reportFilterService.TrialBalanceObj.TrialBalance_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
                _this._reportFilterService.TrialBalanceObj.TrialBalance_CostCenter = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.COSTCENTER;
                _this._reportFilterService.TrialBalanceObj.TrialBalance_LEDGERWISE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.LEDGERWISE;
                _this._reportFilterService.TrialBalanceObj.TrialBalance_LEVELS = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.LEVELS;
                _this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWCLOSINGONPY = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWCLOSINGONPY;
                _this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWDEBTORSCREDITORSDETAILS = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWDEBTORSCREDITORSDETAILS;
                _this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWOPENINGTRIALONLY = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWOPENINGTRIALONLY;
                _this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWSTOCKVALUE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWSTOCKVALUE;
                _this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWSUBLEDGER = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWSUBLEDGER;
                _this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWZEROBL = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWZEROBL;
                _this._reportFilterService.TrialBalanceObj.TrialBalance_SUMMARYREPORT = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SUMMARYREPORT;
                _this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWNETCLOSING = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWNETCLOSING;
            }
        });
        this.changeEntryDate(this._reportFilterService.TrialBalanceObj.TrialBalance_DATE1, "AD");
        this.changeEndDate(this._reportFilterService.TrialBalanceObj.TrialBalance_DATE2, "AD");
    };
    TrialBalanceReport.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.TrialBalanceObj.TrialBalance_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.TrialBalanceObj.TrialBalance_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.TrialBalanceObj.TrialBalance_DATE1 = this.masterService.toBSDate(value);
        }
    };
    TrialBalanceReport.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.TrialBalanceObj.TrialBalance_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_2);
            this._reportFilterService.TrialBalanceObj.TrialBalance_DATE2 = this.masterService.toADDate(value);
        }
    };
    TrialBalanceReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    TrialBalanceReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    TrialBalanceReport.prototype.DialogClosedResult = function (res) {
        var _this = this;
        if (this._reportFilterService.TrialBalanceObj.TrialBalance_SUMMARYREPORT == 0) {
            this._reportFilterService.TrialBalanceObj.TrialBalance_LEVELS = 0;
            this._reportFilterService.TrialBalanceObj.TrialBalance_SUMMARYREPORTDISPLAYNAME = ' @Detail Report';
        }
        else {
            this._reportFilterService.TrialBalanceObj.TrialBalance_SUMMARYREPORTDISPLAYNAME = ' @Summary Report';
        }
        if (this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWOPENINGTRIALONLY == true) {
            this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWOPENINGTRIALONLY = 1;
        }
        else {
            this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWOPENINGTRIALONLY = 0;
        }
        if (this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWSUBLEDGER == true) {
            this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWSUBLEDGER = 1;
        }
        else {
            this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWSUBLEDGER = 0;
        }
        if (this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWDEBTORSCREDITORSDETAILS == true) {
            this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWDEBTORSCREDITORSDETAILS = 1;
        }
        else {
            this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWDEBTORSCREDITORSDETAILS = 0;
        }
        if (this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWSTOCKVALUE == true) {
            this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWSTOCKVALUE = 1;
        }
        else {
            this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWSTOCKVALUE = 0;
        }
        if (this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWCLOSINGONPY == true) {
            this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWCLOSINGONPY = 1;
        }
        else {
            this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWCLOSINGONPY = 0;
        }
        if (this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWZEROBL == true) {
            this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWZEROBL = 1;
        }
        else {
            this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWZEROBL = 0;
        }
        if (this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWNETCLOSING == true) {
            this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWNETCLOSING = 1;
        }
        else {
            this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWNETCLOSING = 0;
        }
        var multipleReportFormateName = '';
        if (this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWOPENINGTRIALONLY == 1) {
            multipleReportFormateName = 'Trial Balance Report';
        }
        else if (this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWOPENINGTRIALONLY == 0 && this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWCLOSINGONPY == 1) {
            multipleReportFormateName = 'Trial Balance Report_1';
        }
        else if (this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWOPENINGTRIALONLY == 0 && this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWCLOSINGONPY == 0) {
            multipleReportFormateName = 'Trial Balance Report_2';
        }
        if (this._reportFilterService.TrialBalanceObj.TrialBalance_DIV && this._reportFilterService.TrialBalanceObj.TrialBalance_DIV == '%') {
            this._reportFilterService.TrialBalanceObj.TrialBalance_DIVISIONNAME = 'All';
        }
        else if (this._reportFilterService.TrialBalanceObj.TrialBalance_DIV && this._reportFilterService.TrialBalanceObj.TrialBalance_DIV != '%') {
            var abc = this.division.filter(function (x) { return x.INITIAL == _this._reportFilterService.TrialBalanceObj.TrialBalance_DIV; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.TrialBalanceObj.TrialBalance_DIVISIONNAME = abc[0].NAME;
            }
            else {
                this._reportFilterService.TrialBalanceObj.TrialBalance_DIVISIONNAME = '';
            }
        }
        else {
            this._reportFilterService.TrialBalanceObj.TrialBalance_DIVISIONNAME = '';
        }
        if (this._reportFilterService.TrialBalanceObj.TrialBalance_CostCenter && this._reportFilterService.TrialBalanceObj.TrialBalance_CostCenter == '%') {
            this._reportFilterService.TrialBalanceObj.TrialBalance_COSTCENTERDISPLAYNAME = 'All';
        }
        else if (this._reportFilterService.TrialBalanceObj.TrialBalance_CostCenter != '%') {
            var abc = this.CostcenterList.filter(function (x) { return x.CCID == _this._reportFilterService.TrialBalanceObj.TrialBalance_CostCenter; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.TrialBalanceObj.TrialBalance_COSTCENTERDISPLAYNAME = abc[0].COSTCENTERNAME;
            }
            else {
                this._reportFilterService.TrialBalanceObj.TrialBalance_COSTCENTERDISPLAYNAME = '';
            }
        }
        else {
            this._reportFilterService.TrialBalanceObj.TrialBalance_COSTCENTERDISPLAYNAME = '';
        }
        if (this._reportFilterService.TrialBalanceObj.TrialBalance_LEDGERWISE == 0) {
            this._reportFilterService.TrialBalanceObj.TrialBalance_REPORTOPTIONDISPLAYNAME = ' @Group Wise Report';
        }
        else if (this._reportFilterService.TrialBalanceObj.TrialBalance_LEDGERWISE == 1) {
            this._reportFilterService.TrialBalanceObj.TrialBalance_REPORTOPTIONDISPLAYNAME = ' @Ledger Wise Report';
        }
        if (res == "ok") {
            this._reportFilterService.TrialBalanceObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.TrialBalance_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Trial Balance Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.TrialBalance_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'Trial Balance Report' + '_' + this._reportFilterService.TrialBalance_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.TrialBalance_loadedTimes,
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: 'Trial Balance Report',
                reportname: multipleReportFormateName,
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.TrialBalance_loadedTimes,
                reportparam: {
                    REPORTOPTIONDISPLAYNAME: this._reportFilterService.TrialBalanceObj.TrialBalance_REPORTOPTIONDISPLAYNAME ? this._reportFilterService.TrialBalanceObj.TrialBalance_REPORTOPTIONDISPLAYNAME : '',
                    DATE1: this._reportFilterService.TrialBalanceObj.TrialBalance_DATE1,
                    DATE2: this._reportFilterService.TrialBalanceObj.TrialBalance_DATE2,
                    BSDATE1: this._reportFilterService.TrialBalanceObj.TrialBalance_BSDATE1,
                    BSDATE2: this._reportFilterService.TrialBalanceObj.TrialBalance_BSDATE2,
                    DIV: this._reportFilterService.TrialBalanceObj.TrialBalance_DIV ? this._reportFilterService.TrialBalanceObj.TrialBalance_DIV : '%',
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    CID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    COSTCENTER: this._reportFilterService.TrialBalanceObj.TrialBalance_CostCenter ? this._reportFilterService.TrialBalanceObj.TrialBalance_CostCenter : '%',
                    LEDGERWISE: this._reportFilterService.TrialBalanceObj.TrialBalance_LEDGERWISE ? this._reportFilterService.TrialBalanceObj.TrialBalance_LEDGERWISE : 0,
                    SUMMARYREPORT: this._reportFilterService.TrialBalanceObj.TrialBalance_SUMMARYREPORT ? this._reportFilterService.TrialBalanceObj.TrialBalance_SUMMARYREPORT : 0,
                    LEVELS: this._reportFilterService.TrialBalanceObj.TrialBalance_LEVELS,
                    SHOWOPENINGTRIALONLY: this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWOPENINGTRIALONLY,
                    SHOWSUBLEDGER: this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWSUBLEDGER,
                    SHOWDEBTORSCREDITORSDETAILS: this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWDEBTORSCREDITORSDETAILS,
                    SHOWSTOCKVALUE: this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWSTOCKVALUE,
                    SHOWCLOSINGONPY: this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWCLOSINGONPY,
                    SHOWZEROBL: this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWZEROBL,
                    COMPANYID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    COMPANYTYPE: this._reportFilterService.TrialBalanceObj.TrialBalance_COMPANYTYPE ? this._reportFilterService.TrialBalanceObj.TrialBalance_COMPANYTYPE : 'NONDMS',
                    DIVISIONNAME: this._reportFilterService.TrialBalanceObj.TrialBalance_DIVISIONNAME ? this._reportFilterService.TrialBalanceObj.TrialBalance_DIVISIONNAME : '',
                    COSTCENTERDISPLAYNAME: this._reportFilterService.TrialBalanceObj.TrialBalance_COSTCENTERDISPLAYNAME ? this._reportFilterService.TrialBalanceObj.TrialBalance_COSTCENTERDISPLAYNAME : '',
                    SUMMARYREPORTDISPLAYNAME: this._reportFilterService.TrialBalanceObj.TrialBalance_SUMMARYREPORTDISPLAYNAME ? this._reportFilterService.TrialBalanceObj.TrialBalance_SUMMARYREPORTDISPLAYNAME : '',
                    SHOWNETCLOSING: this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWNETCLOSING
                    // NODEACID:
                    // NODEACNAME:
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.TrialBalance_loadedTimes = this._reportFilterService.TrialBalance_loadedTimes + 1;
        }
    };
    TrialBalanceReport.prototype.checkValue = function () {
        // ////console.log("@@_reportFilterService.TrialBalanceObj.TrialBalance_SHOWOPENINGTRIALONLY", this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWOPENINGTRIALONLY)
        if (this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWOPENINGTRIALONLY == true) {
            this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWOPENINGTRIALONLY = 1;
            this._reportFilterService.TrialBalanceObj.TrialBalance_SHOWCLOSINGONPY = 0;
        }
    };
    return TrialBalanceReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], TrialBalanceReport.prototype, "reportdataEmit", void 0);
TrialBalanceReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'trial-balance-report',
        template: __webpack_require__(1764),
        styles: [__webpack_require__(1163), __webpack_require__(120)],
    }),
    __param(7, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_3__common_services_permission_authService_service__["a" /* AuthService */],
        __WEBPACK_IMPORTED_MODULE_4__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_5__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], __WEBPACK_IMPORTED_MODULE_5__angular_router__["ActivatedRoute"], Object])
], TrialBalanceReport);



/***/ }),

/***/ 1531:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_repositories__ = __webpack_require__(13);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return VATpurchaseRegisterReportComponent; });


var VATpurchaseRegisterReportComponent = (function () {
    function VATpurchaseRegisterReportComponent(masterService) {
        var _this = this;
        this.masterService = masterService;
        this.VATpurchaseRegisterReport = {};
        this.divisionList = [];
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.VATpurchaseRegisterReport.DATE1 = new Date().toJSON().split('T')[0];
        this.changeEntryDate(this.VATpurchaseRegisterReport.DATE1, "AD");
        this.VATpurchaseRegisterReport.DATE = new Date().toJSON().split('T')[0];
        this.changeEndDate(this.VATpurchaseRegisterReport.DATE, "AD");
        this.masterService.getAllDivisions().subscribe(function (res) {
            _this.divisionList.push(res);
        });
    }
    VATpurchaseRegisterReportComponent.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    VATpurchaseRegisterReportComponent.prototype.DialogClosedResult = function (res) {
        if (this.VATpurchaseRegisterReport.isPI == true) {
            this.VATpurchaseRegisterReport.V1 = 'PI';
        }
        else {
            this.VATpurchaseRegisterReport.V1 = '';
        }
        if (this.VATpurchaseRegisterReport.isCP == true) {
            this.VATpurchaseRegisterReport.V2 = 'CP';
        }
        else {
            this.VATpurchaseRegisterReport.V2 = '';
        }
        if (this.VATpurchaseRegisterReport.isDN == true) {
            this.VATpurchaseRegisterReport.V3 = 'DN';
        }
        else {
            this.VATpurchaseRegisterReport.V3 = '';
        }
        if (this.VATpurchaseRegisterReport.isCN == true) {
            this.VATpurchaseRegisterReport.V4 = 'CN';
        }
        else {
            this.VATpurchaseRegisterReport.V4 = '';
        }
        this.reportdataEmit.emit({
            status: res, data: {
                reportname: 'VAT Purchase Register Report', reportparam: {
                    DATE1: this.VATpurchaseRegisterReport.DATE1,
                    DATE2: this.VATpurchaseRegisterReport.DATE,
                    DIV: this.VATpurchaseRegisterReport.DIV,
                    COMPANYID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    V1: this.VATpurchaseRegisterReport.V1,
                    V2: this.VATpurchaseRegisterReport.V2,
                    V3: this.VATpurchaseRegisterReport.V3,
                    V4: this.VATpurchaseRegisterReport.V4,
                    isPI: false,
                    isCP: false,
                    isCN: false,
                    isDN: false
                }
            }
        });
    };
    VATpurchaseRegisterReportComponent.prototype.divisionChanged = function () {
        this.VATpurchaseRegisterReport.DIV = this.division.nativeElement.value;
    };
    VATpurchaseRegisterReportComponent.prototype.hide = function () {
        this.DialogClosedResult("Error");
    };
    VATpurchaseRegisterReportComponent.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this.VATpurchaseRegisterReport.BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate);
            this.VATpurchaseRegisterReport.DATE1 = this.masterService.toADDate(value);
        }
    };
    VATpurchaseRegisterReportComponent.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this.VATpurchaseRegisterReport.BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate);
            this.VATpurchaseRegisterReport.DATE = this.masterService.toADDate(value);
        }
    };
    VATpurchaseRegisterReportComponent.prototype.cancel = function () {
        this.DialogClosedResult("cancel");
    };
    VATpurchaseRegisterReportComponent.prototype.preventInput = function ($event) {
        $event.preventDefault();
        return false;
    };
    return VATpurchaseRegisterReportComponent;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('division'),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"])
], VATpurchaseRegisterReportComponent.prototype, "division", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], VATpurchaseRegisterReportComponent.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], VATpurchaseRegisterReportComponent.prototype, "reportType", void 0);
VATpurchaseRegisterReportComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'vat-purchase-register-report',
        template: __webpack_require__(1765),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_repositories__["a" /* MasterRepo */]])
], VATpurchaseRegisterReportComponent);



/***/ }),

/***/ 1532:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_repositories_masterRepo_service__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_Observable__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs_Observable__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__masters_components_PLedger_PLedger_service__ = __webpack_require__(1235);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AccountFilters; });





var AccountFilters = (function () {
    function AccountFilters(masterService, _reportFilterService, PledgerService) {
        var _this = this;
        this.masterService = masterService;
        this._reportFilterService = _reportFilterService;
        this.PledgerService = PledgerService;
        this.account = [];
        this.dropListItem = function (keyword) {
            return new __WEBPACK_IMPORTED_MODULE_3_rxjs_Observable__["Observable"](function (observer) {
                if (_this._reportFilterService.ReportFilterObject.Reportnameis == 'accountledger') {
                    _this.masterService.getAccountListACIDNotLikePA().map(function (data) {
                        _this.result = data.result;
                        return _this.result.filter(function (ac) { return ac.ACNAME.toUpperCase().indexOf(keyword.toUpperCase()) > -1; });
                    }).subscribe(function (res) { observer.next(res); });
                }
                else if (_this._reportFilterService.ReportFilterObject.Reportnameis == 'partyledger') {
                    _this.masterService.getAccountListACIDLikePA().map(function (data) {
                        _this.result = data.result;
                        return _this.result.filter(function (ac) { return ac.ACNAME.toUpperCase().indexOf(keyword.toUpperCase()) > -1; });
                    }).subscribe(function (res) { observer.next(res); });
                }
                else if (_this._reportFilterService.ReportFilterObject.Reportnameis == 'debitorsoutstanding') {
                    var ptype = 'C';
                    _this.PledgerService.getPartyItemByPtype(ptype).map(function (data) {
                        if (data.status == "ok") {
                            var result = data.result;
                            return result.filter(function (ac) { return ac.ACNAME.toUpperCase().indexOf(keyword.toUpperCase()) > -1; });
                        }
                    }).subscribe(function (res) { observer.next(res); });
                }
                else if (_this._reportFilterService.ReportFilterObject.Reportnameis == 'creditorsoutstanding') {
                    var ptype = 'V';
                    _this.PledgerService.getPartyItemByPtype(ptype).map(function (data) {
                        if (data.status == "ok") {
                            var result = data.result;
                            return result.filter(function (ac) { return ac.ACNAME.toUpperCase().indexOf(keyword.toUpperCase()) > -1; });
                        }
                    }).subscribe(function (res) { observer.next(res); });
                }
            }).share();
        };
        ////console.log("this._reportFilterService.ReportFilterObject.Reportname", this._reportFilterService.ReportFilterObject.Reportnameis)
        _reportFilterService.ReportFilterObject.multipleAccounts = [];
        if (this._reportFilterService.AccoutLedgerObj.assignPrevioiusDate == true && this._reportFilterService.reportUrlPath == 'accountledgerreport' && (_reportFilterService.AccoutLedgerObj.multipleAccounts && _reportFilterService.AccoutLedgerObj.multipleAccounts.length != 0)) {
            _reportFilterService.ReportFilterObject.multipleAccounts = _reportFilterService.AccoutLedgerObj.multipleAccounts;
        }
        if (this._reportFilterService.PartyLedgerObj.assignPrevioiusDate == true && this._reportFilterService.reportUrlPath == 'partyledgerreport' && (_reportFilterService.PartyLedgerObj.multipleAccounts && _reportFilterService.PartyLedgerObj.multipleAccounts.length != 0)) {
            _reportFilterService.ReportFilterObject.multipleAccounts = _reportFilterService.PartyLedgerObj.multipleAccounts;
        }
        this.masterService.getAccountListACIDNotLikePA().subscribe(function (res) {
            _this.account = res;
            if (_this.account.length != 0) {
                _this._reportFilterService.result = true;
            }
            else {
                _this._reportFilterService.result = false;
            }
        });
        this.masterService.getAccountListACIDLikePA().subscribe(function (res) {
            _this.account = res;
            if (_this.account.length != 0) {
                _this._reportFilterService.result = true;
            }
            else {
                _this._reportFilterService.result = false;
            }
        });
    }
    AccountFilters.prototype.accodeMultipleChanged = function (value) {
        var item = this.masterService.accountList.find(function (x) { return x.ACCODE == value; });
        this._reportFilterService.ReportFilterObject.multipleACNAME = '';
        if (item) {
            value = item.ACNAME;
            //console.log(value + "****");
            this._reportFilterService.ReportFilterObject.multipleACNAME = value;
        }
    };
    AccountFilters.prototype.onEnterMulAcnameChange = function (value) {
        this.accodeMultipleChanged(value);
    };
    AccountFilters.prototype.itemMultipleChanged = function (value) {
        if (typeof (value) === "object") {
            this._reportFilterService.ReportFilterObject.multipleACNAME = value.ACNAME;
            this._reportFilterService.ReportFilterObject.multipleACCODE = value.ACCODE;
            this._reportFilterService.ReportFilterObject.multipleACID = value.ACID;
        }
    };
    AccountFilters.prototype.addAccountToList = function () {
        var _this = this;
        var selectACList = this._reportFilterService.ReportFilterObject.multipleAccounts.filter(function (acList) { return acList.ACNAME == _this._reportFilterService.ReportFilterObject.multipleACNAME; });
        if (this._reportFilterService.ReportFilterObject.multipleACNAME === "" ||
            this._reportFilterService.ReportFilterObject.multipleACNAME === null ||
            this._reportFilterService.ReportFilterObject.multipleACNAME === undefined) {
            return;
        }
        if (selectACList.length === 0) {
            this._reportFilterService.ReportFilterObject.multipleAccounts.push({ ACID: this._reportFilterService.ReportFilterObject.multipleACID, ACNAME: this._reportFilterService.ReportFilterObject.multipleACNAME });
            this._reportFilterService.ReportFilterObject.multipleACNAME = '';
            this._reportFilterService.ReportFilterObject.multipleACCODE = '';
        }
    };
    AccountFilters.prototype.deleteAccount = function (index) {
        this._reportFilterService.ReportFilterObject.multipleAccounts.splice(index, 1);
    };
    return AccountFilters;
}());
AccountFilters = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: "account-filters",
        template: __webpack_require__(1766),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
        providers: [__WEBPACK_IMPORTED_MODULE_4__masters_components_PLedger_PLedger_service__["a" /* PLedgerservice */]]
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_repositories_masterRepo_service__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_2__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_4__masters_components_PLedger_PLedger_service__["a" /* PLedgerservice */]])
], AccountFilters);



/***/ }),

/***/ 1533:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_repositories_masterRepo_service__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AccountList; });




var AccountList = (function () {
    function AccountList(masterService, _reportFilterService) {
        var _this = this;
        this.masterService = masterService;
        this._reportFilterService = _reportFilterService;
        this.account = [];
        this.account2 = [];
        this.gridPopupSettingsForAccountList = new __WEBPACK_IMPORTED_MODULE_3__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        if (this._reportFilterService.CashAndBankBookObj.Reportnameis == 'cashbankbookreport') {
            this.masterService.getCashListForReport().subscribe(function (res) {
                _this.account = res.data;
                ////console.log("@@res",res)
                if (_this.account.length != 0) {
                    _this._reportFilterService.result = true;
                }
                else {
                    _this._reportFilterService.result = false;
                }
            });
            this.masterService.getBankBookListForReport().subscribe(function (res) {
                _this.account2 = res.data;
                if (_this.account2.length != 0) {
                    _this._reportFilterService.result2 = true;
                }
                else {
                    _this._reportFilterService.result2 = false;
                }
            });
        }
    }
    AccountList.prototype.ngOnInit = function () {
    };
    AccountList.prototype.AccountEnterClicked = function () {
        if (this._reportFilterService.CashAndBankBookObj.REPORTMODE == '1') {
            this.gridPopupSettingsForAccountList = this.masterService.getGenericGridPopUpSettings('CashBookList');
        }
        else if (this._reportFilterService.CashAndBankBookObj.REPORTMODE == '2') {
            this.gridPopupSettingsForAccountList = this.masterService.getGenericGridPopUpSettings('BankBookList');
        }
        this.genericGridCashBankBook.show();
    };
    AccountList.prototype.dblClickAccountSelect = function (account) {
        this._reportFilterService.CashAndBankBookObj.ACID = account.ACID;
        this._reportFilterService.CashAndBankBookObj.ACCNAME = account.ACNAME;
        this._reportFilterService.CashAndBankBookObj.SingleAccount = account.ACID;
    };
    return AccountList;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridCashBankBook"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_3__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], AccountList.prototype, "genericGridCashBankBook", void 0);
AccountList = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: "account-list",
        template: __webpack_require__(1767),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_repositories_masterRepo_service__["a" /* MasterRepo */],
        __WEBPACK_IMPORTED_MODULE_2__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */]])
], AccountList);



/***/ }),

/***/ 1534:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_moment__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_moment__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_Transaction_Components_transaction_service__ = __webpack_require__(7);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AccountPayableReport; });





var AccountPayableReport = (function () {
    function AccountPayableReport(masterService, _trnMainService) {
        this.masterService = masterService;
        this._trnMainService = _trnMainService;
        this.gridPopupSettingsForCustomer = new __WEBPACK_IMPORTED_MODULE_3__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.accountpayable = {
            reportname: "",
            reportparam: {
                DATE1: "",
                DATE2: "",
                ACID: "%",
                DIV: "",
                COMPANYID: "",
                PHISCALID: "",
                SHOWZEROBL: 1
            }
        };
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.alwaysShowCalendars = true;
        this.ranges = {
            'Today': [__WEBPACK_IMPORTED_MODULE_2_moment__(), __WEBPACK_IMPORTED_MODULE_2_moment__()],
            'Yesterday': [__WEBPACK_IMPORTED_MODULE_2_moment__().subtract(1, 'days'), __WEBPACK_IMPORTED_MODULE_2_moment__().subtract(1, 'days')],
            'Last 7 Days': [__WEBPACK_IMPORTED_MODULE_2_moment__().subtract(6, 'days'), __WEBPACK_IMPORTED_MODULE_2_moment__()],
            'Last 30 Days': [__WEBPACK_IMPORTED_MODULE_2_moment__().subtract(29, 'days'), __WEBPACK_IMPORTED_MODULE_2_moment__()],
            'This Month': [__WEBPACK_IMPORTED_MODULE_2_moment__().startOf('month'), __WEBPACK_IMPORTED_MODULE_2_moment__().endOf('month')],
            'Last Month': [__WEBPACK_IMPORTED_MODULE_2_moment__().subtract(1, 'month').startOf('month'), __WEBPACK_IMPORTED_MODULE_2_moment__().subtract(1, 'month').endOf('month')],
            'Financial Year': [__WEBPACK_IMPORTED_MODULE_2_moment__().set('date', 1).set('month', 3), __WEBPACK_IMPORTED_MODULE_2_moment__().endOf('month').set('month', 2).add(1, 'year')],
        };
        this.locale = {
            format: 'DD/MM/YYYY',
            direction: 'ltr',
            weekLabel: 'W',
            separator: ' - ',
            cancelLabel: 'Cancel',
            applyLabel: 'Okay',
            clearLabel: 'Clear',
            customRangeLabel: 'Custom Range',
            daysOfWeek: __WEBPACK_IMPORTED_MODULE_2_moment__["weekdaysMin"](),
            monthNames: __WEBPACK_IMPORTED_MODULE_2_moment__["monthsShort"](),
            firstDay: 0 // first day is monday
        };
        var voucherprefix = "voucherprefix";
        this.gridPopupSettingsForCustomer = {
            title: "Suppliers",
            apiEndpoints: "/getAccountPagedListByPType/PA/V/" + voucherprefix,
            defaultFilterIndex: 0,
            columns: [
                {
                    key: "ACNAME",
                    title: "NAME",
                    hidden: false,
                    noSearch: false
                },
                {
                    key: "ACCODE",
                    title: "CODE",
                    hidden: false,
                    noSearch: false
                },
                {
                    key: "ADDRESS",
                    title: "ADDRESS",
                    hidden: false,
                    noSearch: false
                },
                {
                    key: "EMAIL",
                    title: "EMAIL",
                    hidden: false,
                    noSearch: false
                }
            ]
        };
    }
    AccountPayableReport.prototype.onload = function () {
        this.accountpayable.reportname = 'AccountPayable Report';
        this.accountpayable.reportparam.COMPANYID = this.masterService.userProfile.CompanyInfo.COMPANYID;
        this.accountpayable.reportparam.DIV = this.masterService.userProfile.CompanyInfo.INITIAL;
        this.accountpayable.reportparam.PHISCALID = this.masterService.PhiscalObj.PhiscalID;
        this.accountpayable.reportparam.SHOWZEROBL = this.accountpayable.reportparam.SHOWZEROBL ? 1 : 0;
        this.reportdataEmit.emit({ status: "ok", data: this.accountpayable });
    };
    AccountPayableReport.prototype.closeReportBox = function () {
        this.reportdataEmit.emit({ status: "Error!", data: this.accountpayable });
    };
    AccountPayableReport.prototype.onCustomerSelected = function (customer) {
        this.accountpayable.reportparam.ACID = customer.ACID;
        this.ACNAME = customer.ACNAME;
    };
    AccountPayableReport.prototype.dateChanged = function (date) {
        this.accountpayable.reportparam.DATE1 = __WEBPACK_IMPORTED_MODULE_2_moment__(this.selectedDate.startDate).format('MM-DD-YYYY');
        this.accountpayable.reportparam.DATE2 = __WEBPACK_IMPORTED_MODULE_2_moment__(this.selectedDate.endDate).format('MM-DD-YYYY');
    };
    AccountPayableReport.prototype.customerEnterCommand = function (e) {
        this.genericGridCustomer.show();
    };
    AccountPayableReport.prototype.preventInput = function ($event) {
        $event.preventDefault();
        return false;
    };
    return AccountPayableReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridCustomer"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_3__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], AccountPayableReport.prototype, "genericGridCustomer", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], AccountPayableReport.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], AccountPayableReport.prototype, "reportType", void 0);
AccountPayableReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'account-payable-report',
        template: __webpack_require__(1768),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
        providers: [__WEBPACK_IMPORTED_MODULE_4__common_Transaction_Components_transaction_service__["a" /* TransactionService */]]
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_4__common_Transaction_Components_transaction_service__["a" /* TransactionService */]])
], AccountPayableReport);



/***/ }),

/***/ 1535:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_moment__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_moment__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AccountReceivableReport; });




var AccountReceivableReport = (function () {
    function AccountReceivableReport(masterService) {
        this.masterService = masterService;
        this.gridPopupSettingsForSupplier = new __WEBPACK_IMPORTED_MODULE_3__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.accountreceivable = {
            reportname: "",
            reportparam: {
                DATE1: "",
                DATE2: "",
                ACID: "%",
                DIV: "",
                COMPANYID: "",
                PHISCALID: "",
                SHOWZEROBL: 1
            }
        };
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.alwaysShowCalendars = true;
        this.ranges = {
            'Today': [__WEBPACK_IMPORTED_MODULE_2_moment__(), __WEBPACK_IMPORTED_MODULE_2_moment__()],
            'Yesterday': [__WEBPACK_IMPORTED_MODULE_2_moment__().subtract(1, 'days'), __WEBPACK_IMPORTED_MODULE_2_moment__().subtract(1, 'days')],
            'Last 7 Days': [__WEBPACK_IMPORTED_MODULE_2_moment__().subtract(6, 'days'), __WEBPACK_IMPORTED_MODULE_2_moment__()],
            'Last 30 Days': [__WEBPACK_IMPORTED_MODULE_2_moment__().subtract(29, 'days'), __WEBPACK_IMPORTED_MODULE_2_moment__()],
            'This Month': [__WEBPACK_IMPORTED_MODULE_2_moment__().startOf('month'), __WEBPACK_IMPORTED_MODULE_2_moment__().endOf('month')],
            'Last Month': [__WEBPACK_IMPORTED_MODULE_2_moment__().subtract(1, 'month').startOf('month'), __WEBPACK_IMPORTED_MODULE_2_moment__().subtract(1, 'month').endOf('month')],
            'Financial Year': [__WEBPACK_IMPORTED_MODULE_2_moment__().set('date', 1).set('month', 3), __WEBPACK_IMPORTED_MODULE_2_moment__().endOf('month').set('month', 2).add(1, 'year')],
        };
        this.locale = {
            format: 'DD/MM/YYYY',
            direction: 'ltr',
            weekLabel: 'W',
            separator: ' - ',
            cancelLabel: 'Cancel',
            applyLabel: 'Okay',
            clearLabel: 'Clear',
            customRangeLabel: 'Custom Range',
            daysOfWeek: __WEBPACK_IMPORTED_MODULE_2_moment__["weekdaysMin"](),
            monthNames: __WEBPACK_IMPORTED_MODULE_2_moment__["monthsShort"](),
            firstDay: 0 // first day is monday
        };
        var voucherprefix = "voucherprefix";
        this.gridPopupSettingsForSupplier = {
            title: "Customers",
            apiEndpoints: "/getAccountPagedListByPType/PA/C/" + voucherprefix,
            defaultFilterIndex: 0,
            columns: [
                {
                    key: "ACNAME",
                    title: "NAME",
                    hidden: false,
                    noSearch: false
                },
                {
                    key: "ACCODE",
                    title: "CODE",
                    hidden: false,
                    noSearch: false
                },
                {
                    key: "ADDRESS",
                    title: "ADDRESS",
                    hidden: false,
                    noSearch: false
                },
                {
                    key: "EMAIL",
                    title: "EMAIL",
                    hidden: false,
                    noSearch: false
                }
            ]
        };
    }
    AccountReceivableReport.prototype.onload = function () {
        this.accountreceivable.reportname = 'AccountReceivable Report';
        this.accountreceivable.reportparam.COMPANYID = this.masterService.userProfile.CompanyInfo.COMPANYID;
        this.accountreceivable.reportparam.DIV = this.masterService.userProfile.CompanyInfo.INITIAL;
        this.accountreceivable.reportparam.PHISCALID = this.masterService.PhiscalObj.PhiscalID;
        this.accountreceivable.reportparam.SHOWZEROBL = this.accountreceivable.reportparam.SHOWZEROBL ? 1 : 0;
        this.reportdataEmit.emit({ status: "ok", data: this.accountreceivable });
    };
    AccountReceivableReport.prototype.closeReportBox = function () {
        this.reportdataEmit.emit({ status: "Error!", data: this.accountreceivable });
    };
    AccountReceivableReport.prototype.onCustomerSelected = function (customer) {
        this.accountreceivable.reportparam.ACID = customer.ACID;
        this.ACNAME = customer.ACNAME;
    };
    AccountReceivableReport.prototype.dateChanged = function () {
        this.accountreceivable.reportparam.DATE1 = __WEBPACK_IMPORTED_MODULE_2_moment__(this.selectedDate.startDate).format('MM-DD-YYYY');
        this.accountreceivable.reportparam.DATE2 = __WEBPACK_IMPORTED_MODULE_2_moment__(this.selectedDate.endDate).format('MM-DD-YYYY');
    };
    AccountReceivableReport.prototype.customerEnterCommand = function () {
        this.genericGridCustomer.show();
    };
    AccountReceivableReport.prototype.preventInput = function ($event) {
        $event.preventDefault();
        return false;
    };
    return AccountReceivableReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridCustomer"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_3__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], AccountReceivableReport.prototype, "genericGridCustomer", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], AccountReceivableReport.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], AccountReceivableReport.prototype, "reportType", void 0);
AccountReceivableReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'account-receivable-report',
        template: __webpack_require__(1769),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_repositories__["a" /* MasterRepo */]])
], AccountReceivableReport);



/***/ }),

/***/ 1536:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_moment__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_moment__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_Transaction_Components_transaction_service__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AgingPayableReport; });






var AgingPayableReport = (function () {
    function AgingPayableReport(masterService, _trnMainService, alertService) {
        this.masterService = masterService;
        this._trnMainService = _trnMainService;
        this.alertService = alertService;
        this.gridPopupSettingsForCustomer = new __WEBPACK_IMPORTED_MODULE_3__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.agingpayable = {
            reportname: "",
            reportparam: {
                from: "",
                acid: "%",
                summaryreport: 1,
                phiscalid: this.masterService.PhiscalObj.PhiscalID,
                companyid: this.masterService.userProfile.CompanyInfo.COMPANYID,
                div: this.masterService.userProfile.userDivision,
            }
        };
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.alwaysShowCalendars = true;
        this.selectedVoucherList = [];
        this.acidList = [];
        var voucherprefix = "voucherprefix";
        this.gridPopupSettingsForCustomer = {
            title: "Suppliers",
            apiEndpoints: "/getAccountPagedListByPType/PA/V/" + voucherprefix,
            defaultFilterIndex: 0,
            columns: [
                {
                    key: "ACNAME",
                    title: "NAME",
                    hidden: false,
                    noSearch: false
                },
                {
                    key: "ACCODE",
                    title: "CODE",
                    hidden: false,
                    noSearch: false
                }
            ]
        };
    }
    AgingPayableReport.prototype.onload = function () {
        // if (!this.agingpayable.reportparam.summaryreport && (this.ACNAME == "" || this.ACNAME == null || this.ACNAME == undefined)) {
        //   this.alertService.error("Please Choose Supplier for Detail Report");
        //   return;
        // }
        this.agingpayable.reportparam.summaryreport = this.agingpayable.reportparam.summaryreport ? 1 : 0;
        this.agingpayable.reportname = 'AGING PAYABLE';
        this.agingpayable.reportparam.acid = this.acidList.length ? this.acidList.join(",") : '%';
        this.reportdataEmit.emit({ status: "ok", data: this.agingpayable });
    };
    AgingPayableReport.prototype.closeReportBox = function () {
        this.reportdataEmit.emit({ status: "Error!", data: this.agingpayable });
    };
    AgingPayableReport.prototype.onCustomerSelected = function (customer) {
        var x;
        x = this.selectedVoucherList.filter(function (itm) { return itm.ACID == customer.ACID; });
        if (x.length > 0) {
            return;
        }
        this.selectedVoucherList.push(customer);
        this.acidList.push(customer.ACID);
    };
    AgingPayableReport.prototype.removeFromSelectedList = function (index) {
        this.selectedVoucherList.splice(index, 1);
        this.acidList.splice(index, 1);
    };
    AgingPayableReport.prototype.dateChanged = function (date) {
        this.agingpayable.reportparam.from = __WEBPACK_IMPORTED_MODULE_2_moment__(this.selectedDate.startDate).format('MM-DD-YYYY');
    };
    AgingPayableReport.prototype.preventInput = function ($event) {
        $event.preventDefault();
        return false;
    };
    AgingPayableReport.prototype.customerEnterCommand = function (e) {
        this.genericGridSupplier.show();
    };
    return AgingPayableReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridSupplier"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_3__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], AgingPayableReport.prototype, "genericGridSupplier", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], AgingPayableReport.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], AgingPayableReport.prototype, "reportType", void 0);
AgingPayableReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'aging-payable-report',
        template: __webpack_require__(1770),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
        providers: [__WEBPACK_IMPORTED_MODULE_4__common_Transaction_Components_transaction_service__["a" /* TransactionService */]]
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_4__common_Transaction_Components_transaction_service__["a" /* TransactionService */], __WEBPACK_IMPORTED_MODULE_5__common_services_alert_alert_service__["a" /* AlertService */]])
], AgingPayableReport);



/***/ }),

/***/ 1537:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_moment__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_moment__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_Transaction_Components_transaction_service__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AgingReceivableReport; });






var AgingReceivableReport = (function () {
    function AgingReceivableReport(masterService, _trnMainService, alertService) {
        this.masterService = masterService;
        this._trnMainService = _trnMainService;
        this.alertService = alertService;
        this.gridPopupSettingsForCustomer = new __WEBPACK_IMPORTED_MODULE_3__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.ACNAME = "";
        this.agingreceivable = {
            reportname: "",
            reportparam: {
                from: "",
                acid: "%",
                summaryreport: 1,
                phiscalid: this.masterService.PhiscalObj.PhiscalID,
                companyid: this.masterService.userProfile.CompanyInfo.COMPANYID,
                div: this.masterService.userProfile.userDivision,
            }
        };
        this.alwaysShowCalendars = true;
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.selectedVoucherList = [];
        this.acidList = [];
        var voucherprefix = "voucherprefix";
        this.gridPopupSettingsForCustomer = {
            title: "Customers",
            apiEndpoints: "/getAccountPagedListByPType/PA/C/" + voucherprefix,
            defaultFilterIndex: 0,
            columns: [
                {
                    key: "ACNAME",
                    title: "NAME",
                    hidden: false,
                    noSearch: false
                },
                {
                    key: "ACCODE",
                    title: "CODE",
                    hidden: false,
                    noSearch: false
                }
            ]
        };
    }
    AgingReceivableReport.prototype.onload = function () {
        // if (!this.agingreceivable.reportparam.summaryreport && (this.ACNAME == "" || this.ACNAME == null || this.ACNAME == undefined)) {
        //   this.alertService.error("Please Choose Customer for Detail Report");
        //   return;
        // }
        this.agingreceivable.reportparam.summaryreport = this.agingreceivable.reportparam.summaryreport ? 1 : 0;
        this.agingreceivable.reportname = 'AGING RECEIVABLE';
        this.agingreceivable.reportparam.acid = this.acidList.length ? this.acidList.join(",") : '%';
        this.reportdataEmit.emit({ status: "ok", data: this.agingreceivable });
    };
    AgingReceivableReport.prototype.closeReportBox = function () {
        this.reportdataEmit.emit({ status: "Error!", data: this.agingreceivable });
    };
    AgingReceivableReport.prototype.onCustomerSelected = function (customer) {
        var x;
        x = this.selectedVoucherList.filter(function (itm) { return itm.ACID == customer.ACID; });
        if (x.length > 0) {
            return;
        }
        this.selectedVoucherList.push(customer);
        this.acidList.push(customer.ACID);
    };
    AgingReceivableReport.prototype.removeFromSelectedList = function (index) {
        this.selectedVoucherList.splice(index, 1);
        this.acidList.splice(index, 1);
    };
    AgingReceivableReport.prototype.dateChanged = function () {
        this.agingreceivable.reportparam.from = __WEBPACK_IMPORTED_MODULE_2_moment__(this.selectedDate.startDate).format('MM-DD-YYYY');
    };
    AgingReceivableReport.prototype.preventInput = function ($event) {
        $event.preventDefault();
        return false;
    };
    AgingReceivableReport.prototype.customerEnterCommand = function () {
        this.genericGridCustomer.show();
    };
    return AgingReceivableReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridCustomer"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_3__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], AgingReceivableReport.prototype, "genericGridCustomer", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], AgingReceivableReport.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], AgingReceivableReport.prototype, "reportType", void 0);
AgingReceivableReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'aging-receivable-report',
        template: __webpack_require__(1771),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
        providers: [__WEBPACK_IMPORTED_MODULE_4__common_Transaction_Components_transaction_service__["a" /* TransactionService */]]
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_4__common_Transaction_Components_transaction_service__["a" /* TransactionService */], __WEBPACK_IMPORTED_MODULE_5__common_services_alert_alert_service__["a" /* AlertService */]])
], AgingReceivableReport);



/***/ }),

/***/ 1538:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_repositories_masterRepo_service__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AreaFilters; });



var AreaFilters = (function () {
    function AreaFilters(masterService, _reportFilterService) {
        var _this = this;
        this.masterService = masterService;
        this._reportFilterService = _reportFilterService;
        this.AreaList = [];
        this.masterService.getAreaList().subscribe(function (res) {
            _this.AreaList = res.result;
        });
        _reportFilterService.ReportFilterObject.multipleAreas = [];
        // this.showMultipleCC = true;
        if (this._reportFilterService.SummaryPartyLedgerObj.assignPrevioiusDate == true && this._reportFilterService.reportUrlPath == 'summarypartyledger' && (_reportFilterService.SummaryPartyLedgerObj.multipleAreas && _reportFilterService.SummaryPartyLedgerObj.multipleAreas.length != 0)) {
            _reportFilterService.ReportFilterObject.multipleAreas = _reportFilterService.SummaryPartyLedgerObj.multipleAreas;
        }
    }
    // checkValue() {
    //     if (this._reportFilterService.ReportFilterObject.showAllContacts == true) {
    //         this.showMultipleCC = false;
    //     } else {
    //         this.showMultipleCC = true;
    //     }
    // }
    AreaFilters.prototype.addAreaToList = function () {
        var areaData = this._reportFilterService.ReportFilterObject.AreaWise;
        this._reportFilterService.ReportFilterObject.AreaWise = areaData && areaData.AREA_ID ? areaData.AREA_ID : '';
        var selectAreaList = this._reportFilterService.ReportFilterObject.multipleAreas.filter(function (areaList) { return areaList.AREA_NAME == areaData.AREA_NAME; });
        if (areaData.AREA_NAME === "" ||
            areaData.AREA_NAME === null ||
            areaData.AREA_NAME === undefined) {
            return;
        }
        if (selectAreaList.length === 0) {
            this._reportFilterService.ReportFilterObject.multipleAreas.push({ AREA_ID: areaData.AREA_ID, AREA_NAME: areaData.AREA_NAME });
        }
    };
    AreaFilters.prototype.deleteArea = function (index) {
        this._reportFilterService.ReportFilterObject.multipleAreas.splice(index, 1);
    };
    return AreaFilters;
}());
AreaFilters = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: "area-filters",
        template: __webpack_require__(1772),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_repositories_masterRepo_service__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_2__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */]])
], AreaFilters);



/***/ }),

/***/ 1539:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_repositories_masterRepo_service__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AreaList; });



var AreaList = (function () {
    function AreaList(masterService, _reportFilterService) {
        var _this = this;
        this.masterService = masterService;
        this._reportFilterService = _reportFilterService;
        this.AreaList = [];
        this.masterService.getAreaList().subscribe(function (res) {
            _this.AreaList = res.result;
        });
        this._reportFilterService.ReportFilterObject.AreaWise = 0;
        if (this._reportFilterService.PartyLedgerObj.assignPrevioiusDate == true && this._reportFilterService.reportUrlPath == 'partyledgerreport') {
            _reportFilterService.ReportFilterObject.AreaWise = _reportFilterService.PartyLedgerObj.AreaWise;
        }
    }
    return AreaList;
}());
AreaList = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: "area-list",
        template: __webpack_require__(1773),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_repositories_masterRepo_service__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_2__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */]])
], AreaList);



/***/ }),

/***/ 1540:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_repositories_masterRepo_service__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CompanyNormsDepreciationReport; });






4;
var CompanyNormsDepreciationReport = (function () {
    function CompanyNormsDepreciationReport(masterService, arouter, _authService, _ActivatedRoute, _reportFilterService) {
        var _this = this;
        this.masterService = masterService;
        this.arouter = arouter;
        this._authService = _authService;
        this._ActivatedRoute = _ActivatedRoute;
        this._reportFilterService = _reportFilterService;
        this.ReportParameters = {};
        this.instanceWiseRepName = 'DEPRECIATION  REPORT AS PER COMPANY NORMS';
        this.REPORTOPTION = [
            { Mode: '1', ReportOptionName: 'Pool Wise' },
            { Mode: '2', ReportOptionName: 'Block Wise' },
            { Mode: '3', ReportOptionName: 'Item Wise' },
            { Mode: '4', ReportOptionName: 'Asset Code Wise' }
        ];
        this.poolName = [];
        this.AssetNameList = [];
        this.AssetIDList = [];
        this.ACID = "";
        this.MCODE = "";
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.gridLedgerListPopupSettings = new __WEBPACK_IMPORTED_MODULE_2__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridAssetNameListPopupSettings = new __WEBPACK_IMPORTED_MODULE_2__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridAssetIDListPopupSettings = new __WEBPACK_IMPORTED_MODULE_2__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this._reportFilterService.CompanyNormsObj.Reportnameis = "DEPRECIATION  REPORT AS PER COMPANY NORMS";
        this._reportFilterService.CompanyNormsObj.CompanyNorms_REPORTOPTION = '1';
        this.poolName = [];
        this.masterService.getPoolName().subscribe(function (res) {
            _this.poolName = res;
        });
    }
    CompanyNormsDepreciationReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            if (params.instancename) {
                _this._reportFilterService.CompanyNormsObj.CompanyNorms_REPORTOPTION;
                // this._reportFilterService.CompanyNormsObj.CompanyNorms_INCLUDEOPENINGVALUE = this._reportFilterService.reportDataStore[params.instancename].param.reportparam.INCLUDEOPENINGVALUE;
                _this._reportFilterService.CompanyNormsObj.CompanyNorms_POOLNAME = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.POOL;
                _this._reportFilterService.CompanyNormsObj.CompanyNorms_ASSETGROUPID = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.ASSETGROUPID;
                _this._reportFilterService.CompanyNormsObj.CompanyNorms_LEDGERNAME = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.BLOCK;
                _this._reportFilterService.CompanyNormsObj.CompanyNorms_ASSETNAME = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.ITEM;
                _this._reportFilterService.CompanyNormsObj.CompanyNorms_ASSETID = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.ASSETID;
                _this._reportFilterService.CompanyNormsObj.CompanyNorms_ACCODE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.ACCODE;
            }
        });
    };
    CompanyNormsDepreciationReport.prototype.onload = function () {
        if (this._reportFilterService.CompanyNormsObj.CompanyNorms_LEDGERNAME == "" || this._reportFilterService.CompanyNormsObj.CompanyNorms_LEDGERNAME == null ||
            this._reportFilterService.CompanyNormsObj.CompanyNorms_LEDGERNAME == undefined) {
            this._reportFilterService.CompanyNormsObj.CompanyNorms_ACCODE = '%';
        }
        if (this._reportFilterService.CompanyNormsObj.CompanyNorms_ASSETNAME == "" || this._reportFilterService.CompanyNormsObj.CompanyNorms_ASSETNAME == null ||
            this._reportFilterService.CompanyNormsObj.CompanyNorms_ASSETNAME == undefined) {
            this._reportFilterService.CompanyNormsObj.CompanyNorms_ITEMID = '%';
        }
        if (this._reportFilterService.CompanyNormsObj.CompanyNorms_ASSETID == "" || this._reportFilterService.CompanyNormsObj.CompanyNorms_ASSETID == null ||
            this._reportFilterService.CompanyNormsObj.CompanyNorms_ASSETID == undefined) {
            this._reportFilterService.CompanyNormsObj.CompanyNorms_ASSETID = '%';
        }
        this.DialogClosedResult("ok");
    };
    CompanyNormsDepreciationReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    CompanyNormsDepreciationReport.prototype.DialogClosedResult = function (res) {
        var multipleReportFormateName = '';
        if (this._reportFilterService.CompanyNormsObj.CompanyNorms_REPORTOPTION == '1') {
            multipleReportFormateName = 'DEPRECIATION  REPORT AS PER COMPANY NORMS_1';
        }
        else if (this._reportFilterService.CompanyNormsObj.CompanyNorms_REPORTOPTION == '2') {
            multipleReportFormateName = 'DEPRECIATION  REPORT AS PER COMPANY NORMS_2';
        }
        else if (this._reportFilterService.CompanyNormsObj.CompanyNorms_REPORTOPTION == '3') {
            multipleReportFormateName = 'DEPRECIATION  REPORT AS PER COMPANY NORMS_3';
        }
        else if (this._reportFilterService.CashAndBankBookObj.CompanyNorms_REPORTOPTION == '4') {
            multipleReportFormateName = 'DEPRECIATION  REPORT AS PER COMPANY NORMS_4';
        }
        else {
            multipleReportFormateName = 'DEPRECIATION  REPORT AS PER COMPANY NORMS';
        }
        if (res == "ok") {
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.CompanyNorms_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'DEPRECIATION  REPORT AS PER COMPANY NORMS',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.CompanyNorms_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'DEPRECIATION  REPORT AS PER COMPANY NORMS' + '_' + this._reportFilterService.CompanyNorms_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.CompanyNorms_loadedTimes,
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: 'DEPRECIATION  REPORT (AS PER COMPANY NORMS)',
                reportname: multipleReportFormateName,
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.CompanyNorms_loadedTimes,
                reportparam: {
                    // REPORTOPTIONDISPLAYNAME: this._reportFilterService.CompanyNormsObj.CompanyNorms_REPORTOPTIONDISPLAYNAME ? this._reportFilterService.CompanyNormsObj.CompanyNorms_REPORTOPTIONDISPLAYNAME : '',
                    MODE: this._reportFilterService.CompanyNormsObj.CompanyNorms_REPORTOPTION,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    // INCLUDEOPENINGVALUE: this._reportFilterService.CompanyNormsObj.CompanyNorms_INCLUDEOPENINGVALUE ? this._reportFilterService.CompanyNormsObj.CompanyNorms_INCLUDEOPENINGVALUE : 0,
                    POOL: this._reportFilterService.CompanyNormsObj.CompanyNorms_POOLNAME ? this._reportFilterService.CompanyNormsObj.CompanyNorms_POOLNAME : '%',
                    BLOCK: this._reportFilterService.CompanyNormsObj.CompanyNorms_ACCODE ? this._reportFilterService.CompanyNormsObj.CompanyNorms_ACCODE : '%',
                    ITEM: this._reportFilterService.CompanyNormsObj.CompanyNorms_ITEMID ? this._reportFilterService.CompanyNormsObj.CompanyNorms_ITEMID : '%',
                    ASSETID: this._reportFilterService.CompanyNormsObj.CompanyNorms_ASSETID ? this._reportFilterService.CompanyNormsObj.CompanyNorms_ASSETID : '%'
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.CompanyNorms_loadedTimes = this._reportFilterService.CompanyNorms_loadedTimes + 1;
        }
    };
    CompanyNormsDepreciationReport.prototype.LedgerNameEnterCommand = function () {
        this.showLedgerList();
    };
    CompanyNormsDepreciationReport.prototype.showLedgerList = function () {
        this.gridLedgerListPopupSettings = {
            title: "Accounts",
            apiEndpoints: "/loadLedger",
            defaultFilterIndex: 1,
            columns: [
                {
                    key: "ACID",
                    title: "AC CODE",
                    hidden: false,
                    noSearch: false
                },
                {
                    key: "ACNAME",
                    title: "A/C NAME",
                    hidden: false,
                    noSearch: false
                }
            ]
        };
        this.genericGridLedgerList.show('', false, '', '', this._reportFilterService.CompanyNormsObj.CompanyNorms_ASSETGROUPID);
    };
    CompanyNormsDepreciationReport.prototype.onLedgerSelect = function (event) {
        this._reportFilterService.CompanyNormsObj.CompanyNorms_ACCODE = event.ACID;
        this._reportFilterService.CompanyNormsObj.CompanyNorms_LEDGERNAME = event.ACNAME;
    };
    CompanyNormsDepreciationReport.prototype.AssetNameEnterCommand = function () {
        this.showAssetNameList();
    };
    CompanyNormsDepreciationReport.prototype.showAssetNameList = function () {
        this.gridAssetNameListPopupSettings = {
            title: "Assets",
            apiEndpoints: "/loadAssetName",
            defaultFilterIndex: 1,
            columns: [
                {
                    key: "MCODE",
                    title: "ASSET NAME",
                    hidden: false,
                    noSearch: false
                },
                {
                    key: "ASSET_NAME",
                    title: "ITEM NAME",
                    hidden: false,
                    noSearch: false
                }
            ]
        };
        this.genericGridAssetNameList.show();
    };
    CompanyNormsDepreciationReport.prototype.onAssetNameSelect = function (event) {
        this._reportFilterService.CompanyNormsObj.CompanyNorms_ITEMID = event.MCODE;
        this._reportFilterService.CompanyNormsObj.CompanyNorms_ASSETNAME = event.ASSET_NAME;
    };
    CompanyNormsDepreciationReport.prototype.clearAssetMcode = function () {
        if (!this._reportFilterService.CompanyNormsObj.CompanyNorms_ASSETNAME) {
            this._reportFilterService.CompanyNormsObj.CompanyNorms_ITEMID = '';
        }
    };
    CompanyNormsDepreciationReport.prototype.AssetIdEnterCommand = function () {
        this.showAssetIDList();
    };
    CompanyNormsDepreciationReport.prototype.showAssetIDList = function () {
        this.gridAssetIDListPopupSettings = {
            title: "Assets",
            apiEndpoints: "/loadAssetID",
            defaultFilterIndex: 1,
            columns: [
                {
                    key: "ASSET_NAME",
                    title: "ITEM NAME",
                    hidden: false,
                    noSearch: false
                },
                {
                    key: "AssetID",
                    title: "ASSET ID",
                    hidden: false,
                    noSearch: false
                }
            ]
        };
        this.genericGridAssetIDList.show('', false, '', '', null, this._reportFilterService.CompanyNormsObj.CompanyNorms_ITEMID);
    };
    CompanyNormsDepreciationReport.prototype.onAssetIDSelect = function (event) {
        this._reportFilterService.CompanyNormsObj.CompanyNorms_ASSETID = event.AssetID;
        this._reportFilterService.CompanyNormsObj.CompanyNorms_ASSETNAME = event.ASSET_NAME;
    };
    CompanyNormsDepreciationReport.prototype.onPoolNameChange = function (event) {
        this._reportFilterService.CompanyNormsObj.CompanyNorms_ASSETGROUPID = event;
        // console.log(event)
    };
    return CompanyNormsDepreciationReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], CompanyNormsDepreciationReport.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridLedgerList"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_2__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], CompanyNormsDepreciationReport.prototype, "genericGridLedgerList", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridAssetNameList"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_2__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], CompanyNormsDepreciationReport.prototype, "genericGridAssetNameList", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridAssetIDList"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_2__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], CompanyNormsDepreciationReport.prototype, "genericGridAssetIDList", void 0);
CompanyNormsDepreciationReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'companynorms-depreciation-report',
        template: __webpack_require__(1774),
        styles: [__webpack_require__(1163), __webpack_require__(120)],
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_3__common_repositories_masterRepo_service__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_1__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_4__common_services_permission_authService_service__["a" /* AuthService */], __WEBPACK_IMPORTED_MODULE_1__angular_router__["ActivatedRoute"], __WEBPACK_IMPORTED_MODULE_5__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */]])
], CompanyNormsDepreciationReport);



/***/ }),

/***/ 1541:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_repositories_masterRepo_service__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CostcenterFilters; });



var CostcenterFilters = (function () {
    function CostcenterFilters(masterService, _reportFilterService) {
        var _this = this;
        this.masterService = masterService;
        this._reportFilterService = _reportFilterService;
        this.CostcenterList = [];
        this.masterService.getCostcenter().subscribe(function (res) {
            _this.CostcenterList = res;
        });
        _reportFilterService.ReportFilterObject.multipleCostcenter = [];
        if (this._reportFilterService.AccoutLedgerObj.assignPrevioiusDate == true && this._reportFilterService.reportUrlPath == 'accountledgerreport' && (_reportFilterService.AccoutLedgerObj.multipleCostcenter && _reportFilterService.AccoutLedgerObj.multipleCostcenter.length != 0)) {
            _reportFilterService.ReportFilterObject.multipleCostcenter = _reportFilterService.AccoutLedgerObj.multipleCostcenter;
        }
        if (this._reportFilterService.PartyLedgerObj.assignPrevioiusDate == true && this._reportFilterService.reportUrlPath == 'partyledgerreport' && (_reportFilterService.PartyLedgerObj.multipleCostcenter && _reportFilterService.PartyLedgerObj.multipleCostcenter.length != 0)) {
            _reportFilterService.ReportFilterObject.multipleCostcenter = _reportFilterService.PartyLedgerObj.multipleCostcenter;
        }
        if (this._reportFilterService.SummaryLedgerObj.assignPrevioiusDate == true && this._reportFilterService.reportUrlPath == 'summaryledgerreport' && (_reportFilterService.SummaryLedgerObj.multipleCostcenter && _reportFilterService.SummaryLedgerObj.multipleCostcenter.length != 0)) {
            _reportFilterService.ReportFilterObject.multipleCostcenter = _reportFilterService.SummaryLedgerObj.multipleCostcenter;
        }
        if (this._reportFilterService.SummaryPartyLedgerObj.assignPrevioiusDate == true && this._reportFilterService.reportUrlPath == 'summarypartyledger' && (_reportFilterService.SummaryPartyLedgerObj.multipleCostcenter && _reportFilterService.SummaryPartyLedgerObj.multipleCostcenter.length != 0)) {
            _reportFilterService.ReportFilterObject.multipleCostcenter = _reportFilterService.SummaryPartyLedgerObj.multipleCostcenter;
        }
        this.showMultipleCC = true;
    }
    CostcenterFilters.prototype.checkValue = function () {
        if (this._reportFilterService.ReportFilterObject.showAllContacts == true) {
            this.showMultipleCC = false;
        }
        else {
            this.showMultipleCC = true;
        }
    };
    CostcenterFilters.prototype.addCostcenterToList = function () {
        var ccData = this._reportFilterService.ReportFilterObject.CCENTER;
        this._reportFilterService.ReportFilterObject.CCENTER = ccData && ccData.CCID ? ccData.CCID : '';
        var selectCCenterList = this._reportFilterService.ReportFilterObject.multipleCostcenter.filter(function (centerList) { return centerList.COSTCENTERNAME == ccData.COSTCENTERNAME; });
        if (ccData.COSTCENTERNAME === "" ||
            ccData.COSTCENTERNAME === null ||
            ccData.COSTCENTERNAME === undefined) {
            return;
        }
        if (selectCCenterList.length === 0) {
            this._reportFilterService.ReportFilterObject.multipleCostcenter.push({ CCID: ccData.CCID, COSTCENTERNAME: ccData.COSTCENTERNAME });
        }
    };
    CostcenterFilters.prototype.deleteCostcenter = function (index) {
        this._reportFilterService.ReportFilterObject.multipleCostcenter.splice(index, 1);
    };
    return CostcenterFilters;
}());
CostcenterFilters = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: "costcenter-filters",
        template: __webpack_require__(1775),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_repositories_masterRepo_service__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_2__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */]])
], CostcenterFilters);



/***/ }),

/***/ 1542:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_repositories_masterRepo_service__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CostcenterList; });



var CostcenterList = (function () {
    function CostcenterList(masterService, _reportFilterService) {
        var _this = this;
        this.masterService = masterService;
        this._reportFilterService = _reportFilterService;
        this.CostcenterList = [];
        this.masterService.getCostcenter().subscribe(function (res) {
            _this.CostcenterList = res;
        });
        _reportFilterService.ReportFilterObject.CostCenter = '%';
    }
    return CostcenterList;
}());
CostcenterList = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: "costcenter-list",
        template: __webpack_require__(1776),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_repositories_masterRepo_service__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_2__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */]])
], CostcenterList);



/***/ }),

/***/ 1543:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CreditorsAgingReport; });






var CreditorsAgingReport = (function () {
    function CreditorsAgingReport(masterService, dialogref, data, _ActivatedRoute, _reportFilterService, alertService, arouter) {
        //----------Default values on load
        var _this = this;
        this.masterService = masterService;
        this.dialogref = dialogref;
        this.data = data;
        this._ActivatedRoute = _ActivatedRoute;
        this._reportFilterService = _reportFilterService;
        this.alertService = alertService;
        this.arouter = arouter;
        this.ReportParameters = {};
        this.division = [];
        this.CostcenterList = [];
        this.instanceWiseRepName = 'Creditors Ageing Report';
        this.AreaList = [];
        this.PartyGroupList = [];
        this.PartyCategoryList = [];
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        //   this.ReportParameters.DATE2 = new Date().toJSON().split('T')[0];
        //   this.changeEndDate(this.ReportParameters.DATE2,'AD');
        this.multipleReportFormateName = 'Creditors Aging Report';
        this.ReportParameters.COMID = this.masterService.userProfile.CompanyInfo.COMPANYID;
        //   this.ReportParameters.CreditorsAgeing_CostCenter = "%";
        this._reportFilterService.StockAgeingObj.StockAgeing_AGE1 = "30";
        this._reportFilterService.StockAgeingObj.StockAgeing_AGE2 = "60";
        this._reportFilterService.StockAgeingObj.StockAgeing_AGE3 = "90";
        this._reportFilterService.StockAgeingObj.StockAgeing_AGE4 = "120";
        this._reportFilterService.StockAgeingObj.StockAgeing_AGE5 = "150";
        this._reportFilterService.StockAgeingObj.StockAgeing_AGE6 = "180";
        this._reportFilterService.StockAgeingObj.StockAgeing_AGE7 = "210";
        this._reportFilterService.StockAgeingObj.StockAgeing_AGE8 = "240";
        this._reportFilterService.StockAgeingObj.StockAgeing_AGE9 = "270";
        this._reportFilterService.StockAgeingObj.StockAgeing_AGE10 = "300";
        //   this.ReportParameters.CHK_AGEINGOFPARTYOPENING = 1;
        //   this.ReportParameters.CHK_SHOWAGEINGREPORT = 0;
        // this.ReportParameters.DIVISION=this.masterService.userProfile.CompanyInfo.INITIAL;
        this.ReportParameters.ISDEBTORS = 0;
        this.division = [];
        //let data: Array<IDivision> = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                //////console.log("div" + JSON.stringify(res));
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        this.masterService.getCostcenter().subscribe(function (res) {
            _this.CostcenterList = res;
        });
        this.masterService.getAreaList().subscribe(function (res) {
            _this.AreaList = res.result;
        });
        this.masterService.getPartyGroupList().subscribe(function (res) {
            _this.PartyGroupList = res.result;
        });
        this.masterService.getPartyCategoryList().subscribe(function (res) {
            _this.PartyCategoryList = res.result;
        });
        // this.masterService.getAccDivList();
    }
    CreditorsAgingReport.prototype.ngOnInit = function () {
        var _this = this;
        var AgingObj = {};
        AgingObj = this.masterService.userProfile.userRights.find(function (x) { return x.right == 'StockAgeingLimit'; });
        console.log("dd", AgingObj);
        this.AgingValue = AgingObj.value;
        console.log("AGINGVALUE", this.AgingValue);
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            if (_this._reportFilterService.CreditorsAgeingObj.assignPrevioiusDate != true) {
                _this.masterService.getAccDivList();
                if (_this.masterService.userProfile.CompanyInfo.ActualFY == _this.masterService.PhiscalObj.PhiscalID) {
                    _this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DATE1 = new Date().toJSON().split('T')[0];
                    _this.changestartDate(_this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DATE1, "AD");
                }
                else {
                    _this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DATE1 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                    _this.changestartDate(_this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DATE1, "AD");
                }
                _this.masterService.viewDivision.subscribe(function () {
                    if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                        _this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DIV = '%';
                    }
                    else {
                        _this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                    }
                });
                _this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_CostCenter = '%';
                _this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_AreaWise = 0;
                _this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_PartyGroup = '%';
                _this._reportFilterService.CreditorsAgeingObj.REPORTMODE = '0';
            }
            if (params.instancename) {
                // ////console.log("@@[Creditors Outs Report0]",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                _this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                _this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
                _this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_CostCenter = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.COSTCENTER;
                _this._reportFilterService.CreditorsAgeingObj.DOAGEINGOFOPENINGBL = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DOAGEINGOFOPENINGBL;
                _this._reportFilterService.CreditorsAgeingObj.GROUPBY = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.GROUPBY;
                _this.ReportParameters.ISDEBTORS = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.ISDEBTORS;
                _this._reportFilterService.CreditorsAgeingObj.REPORTMODE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.REPORTMODE;
                _this._reportFilterService.CreditorsAgeingObj.SHOWDPARTYDETAIL = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWDPARTYDETAIL;
                _this.ReportParameters.D1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.D1;
                _this.ReportParameters.D2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.D2;
                _this.ReportParameters.D3 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.D3;
                _this.ReportParameters.D4 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.D4;
                _this.ReportParameters.D5 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.D5;
                _this.ReportParameters.D6 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.D6;
                _this.ReportParameters.D7 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.D7;
                _this.ReportParameters.D8 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.D8;
                _this.ReportParameters.D9 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.D9;
                _this.ReportParameters.D10 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.D10;
            }
        });
        this.changestartDate(this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DATE1, "AD");
    };
    CreditorsAgingReport.prototype.onload = function () {
        this.ReportParameters.D1 = this._reportFilterService.StockAgeingObj.StockAgeing_AGE1 ? this._reportFilterService.StockAgeingObj.StockAgeing_AGE1 : "30";
        this.ReportParameters.D2 = this._reportFilterService.StockAgeingObj.StockAgeing_AGE2 ? this._reportFilterService.StockAgeingObj.StockAgeing_AGE2 : "60";
        this.ReportParameters.D3 = this._reportFilterService.StockAgeingObj.StockAgeing_AGE3 ? this._reportFilterService.StockAgeingObj.StockAgeing_AGE3 : "90";
        this.ReportParameters.D4 = this._reportFilterService.StockAgeingObj.StockAgeing_AGE4 ? this._reportFilterService.StockAgeingObj.StockAgeing_AGE4 : "120";
        if (this.AgingValue >= 5) {
            this.ReportParameters.D5 = this._reportFilterService.StockAgeingObj.StockAgeing_AGE5 ? this._reportFilterService.StockAgeingObj.StockAgeing_AGE5 : "150";
        }
        else {
            this.ReportParameters.D5 = this.ReportParameters.D4;
        }
        if (this.AgingValue >= 6) {
            this.ReportParameters.D6 = this._reportFilterService.StockAgeingObj.StockAgeing_AGE6 ? this._reportFilterService.StockAgeingObj.StockAgeing_AGE6 : "180";
        }
        else {
            this.ReportParameters.D6 = this.ReportParameters.D5;
        }
        if (this.AgingValue >= 7) {
            this.ReportParameters.D7 = this._reportFilterService.StockAgeingObj.StockAgeing_AGE7 ? this._reportFilterService.StockAgeingObj.StockAgeing_AGE7 : "210";
        }
        else {
            this.ReportParameters.D7 = this.ReportParameters.D6;
        }
        if (this.AgingValue >= 8) {
            this.ReportParameters.D8 = this._reportFilterService.StockAgeingObj.StockAgeing_AGE8 ? this._reportFilterService.StockAgeingObj.StockAgeing_AGE8 : "240";
        }
        else {
            this.ReportParameters.D8 = this.ReportParameters.D7;
        }
        if (this.AgingValue >= 9) {
            this.ReportParameters.D9 = this._reportFilterService.StockAgeingObj.StockAgeing_AGE9 ? this._reportFilterService.StockAgeingObj.StockAgeing_AGE9 : "270";
        }
        else {
            this.ReportParameters.D9 = this.ReportParameters.D8;
        }
        console.log("aging", this.AgingValue);
        if (this.AgingValue >= 10) {
            this.ReportParameters.D10 = this._reportFilterService.StockAgeingObj.StockAgeing_AGE10 ? this._reportFilterService.StockAgeingObj.StockAgeing_AGE10 : "300";
        }
        else {
            this.ReportParameters.D10 = this.ReportParameters.D9;
        }
        this.DialogClosedResult("ok");
    };
    CreditorsAgingReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    CreditorsAgingReport.prototype.DialogClosedResult = function (res) {
        var _this = this;
        this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DIV = (this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DIV == null || this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DIV == "") ? "%" : this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DIV;
        if (this._reportFilterService.CreditorsAgeingObj.SHOWDPARTYDETAIL == 1) {
            this.multipleReportFormateName = 'Creditors Aging Report_1';
        }
        else {
            this.multipleReportFormateName = 'Creditors Aging Report';
        }
        if (this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DIV && this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DIV == '%') {
            this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DIVISIONNAME = 'All';
        }
        else if (this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DIV && this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DIV != '%') {
            var abc = this.division.filter(function (x) { return x.INITIAL == _this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DIV; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DIVISIONNAME = abc[0].NAME;
            }
            else {
                this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DIVISIONNAME = '';
            }
        }
        else {
            this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DIVISIONNAME = '';
        }
        if (this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_CostCenter && this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_CostCenter == '%') {
            this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_COSTCENTERDISPLAYNAME = 'All';
        }
        else if (this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_CostCenter != '%') {
            var abc = this.CostcenterList.filter(function (x) { return x.CCID == _this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_CostCenter; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_COSTCENTERDISPLAYNAME = abc[0].COSTCENTERNAME;
            }
            else {
                this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_COSTCENTERDISPLAYNAME = '';
            }
        }
        else {
            this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_COSTCENTERDISPLAYNAME = '';
        }
        if (res == "ok") {
            this._reportFilterService.CreditorsAgeingObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.CreditorsAgeing_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Creditors Ageing Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.CreditorsAgeing_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Creditors Ageing Report' + '_' + this._reportFilterService.CreditorsAgeing_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.CreditorsAgeing_loadedTimes,
                });
            }
        }
        this.reportdataEmit.emit({ status: res, data: { reportname: this.multipleReportFormateName,
                REPORTDISPLAYNAME: 'Creditors Ageing Report',
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.CreditorsAgeing_loadedTimes,
                reportparam: {
                    DATE: this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DATE1,
                    BSDATE: this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_BSDATE1,
                    DIV: this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DIV,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    COMID: this.ReportParameters.COMID,
                    CreditorsAgeing_CostCenter: this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_CostCenter,
                    SHOWDPARTYDETAIL: this._reportFilterService.CreditorsAgeingObj.SHOWDPARTYDETAIL,
                    // OPNINGBLONLY: this._reportFilterService.CreditorsAgeingObj.OPNINGBLONLY,
                    REPORTMODE: this._reportFilterService.CreditorsAgeingObj.REPORTMODE,
                    GROUPBY: this._reportFilterService.CreditorsAgeingObj.GROUPBY ? this._reportFilterService.CreditorsAgeingObj.GROUPBY : 0,
                    D1: this.ReportParameters.D1,
                    D2: this.ReportParameters.D2,
                    D3: this.ReportParameters.D3,
                    D4: this.ReportParameters.D4,
                    D5: this.ReportParameters.D5,
                    D6: this.ReportParameters.D6,
                    D7: this.ReportParameters.D7,
                    D8: this.ReportParameters.D8,
                    D9: this.ReportParameters.D9,
                    D10: this.ReportParameters.D10,
                    DOAGEINGOFOPENINGBL: this._reportFilterService.CreditorsAgeingObj.DOAGEINGOFOPENINGBL,
                    ISDEBTORS: this.ReportParameters.ISDEBTORS,
                    COSTCENTER: this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_CostCenter,
                    // DATE1: this.masterService.PhiscalObj.BeginDate.split('T')[0],
                    // DATE2: this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DATE1,
                    DIVISIONNAME: this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DIVISIONNAME ? this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DIVISIONNAME : '',
                    COSTCENTERDISPLAYNAME: this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_COSTCENTERDISPLAYNAME ? this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_COSTCENTERDISPLAYNAME : '',
                    AREA: this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_AreaWise ? this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_AreaWise : 0,
                    PARTYGROUP: this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_PartyGroup ? this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_PartyGroup : '%',
                    INCLUDEPOSTEDTRANSACTION: this._reportFilterService.CreditorsAgeingObj.CreditorsAgeingObj_INCLUDEPOSTEDTRANSACTION ? this._reportFilterService.CreditorsAgeingObj.CreditorsAgeingObj_INCLUDEPOSTEDTRANSACTION : 0
                } } });
        if (res == "ok") {
            this._reportFilterService.CreditorsAgeing_loadedTimes = this._reportFilterService.CreditorsAgeing_loadedTimes + 1;
        }
    };
    CreditorsAgingReport.prototype.changestartDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DATE1 = this.masterService.toBSDate(value);
        }
    };
    CreditorsAgingReport.prototype.changeEndDate = function (value, format) {
        try {
            var adbs = __webpack_require__(19);
            if (format == "AD") {
                var adDate = (value.replace("-", "/")).replace("-", "/");
                var bsDate = adbs.ad2bs(adDate);
                this.ReportParameters.BSDATE2 = this.masterService.toBSDate(value);
            }
            else if (format == "BS") {
                var datearr = value.split('/');
                var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                // var bsDate = (value.replace("-", "/")).replace("-", "/");
                var adDate = adbs.bs2ad(bsDate_2);
                this.ReportParameters.DATE2 = this.masterService.toADDate(value);
            }
        }
        catch (e) { }
    };
    return CreditorsAgingReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], CreditorsAgingReport.prototype, "reportdataEmit", void 0);
CreditorsAgingReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'result-creditros-aging-report-dialog',
        template: __webpack_require__(1777),
        styles: [__webpack_require__(1163), __webpack_require__(120)]
    }),
    __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object, __WEBPACK_IMPORTED_MODULE_4__angular_router__["ActivatedRoute"],
        __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_5__common_services_alert_alert_service__["a" /* AlertService */], __WEBPACK_IMPORTED_MODULE_4__angular_router__["Router"]])
], CreditorsAgingReport);



/***/ }),

/***/ 1544:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CreditorsOutstandingReport; });







var CreditorsOutstandingReport = (function () {
    function CreditorsOutstandingReport(masterService, _ActivatedRoute, alertService, dialogref, data, _reportFilterService, arouter) {
        var _this = this;
        this.masterService = masterService;
        this._ActivatedRoute = _ActivatedRoute;
        this.alertService = alertService;
        this.dialogref = dialogref;
        this.data = data;
        this._reportFilterService = _reportFilterService;
        this.arouter = arouter;
        this.allCustomerlist = [];
        this.multipleCustomerList = [];
        this.division = [];
        this.AreaList = [];
        this.CostcenterList = [];
        this.PartyGroupList = [];
        this.instanceWiseRepName = 'Creditors Outstanding Report';
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.gridPopupSettingsForMultipleAccountLedgerList = new __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.showCustomer = true;
        this._reportFilterService.CreditorsOutstandingObj.Reportnameis = 'creditorsoutstanding';
        this.allCustomerlist = [];
        this.masterService.getAllCustomers().subscribe(function (res) {
            _this.allCustomerlist.push(res);
        });
        this.division = [];
        //let data: Array<IDivision> = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                //////console.log("div" + JSON.stringify(res));
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        this.masterService.getAreaList().subscribe(function (res) {
            _this.AreaList = res.result;
        });
        this.masterService.getCostcenter().subscribe(function (res) {
            _this.CostcenterList = res;
        });
        this.masterService.getPartyGroupList().subscribe(function (res) {
            _this.PartyGroupList = res.result;
        });
        // this.masterService.getAccDivList();
    }
    CreditorsOutstandingReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            if (_this._reportFilterService.CreditorsOutstandingObj.assignPrevioiusDate != true) {
                _this.masterService.getAccDivList();
                if (_this.masterService.userProfile.CompanyInfo.ActualFY == _this.masterService.PhiscalObj.PhiscalID) {
                    _this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DATE1 = new Date().toJSON().split('T')[0];
                    _this.changestartDate(_this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DATE1, "AD");
                }
                else {
                    _this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DATE1 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                    _this.changestartDate(_this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DATE1, "AD");
                }
                // this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DATE1 = new Date().toJSON().split('T')[0];
                // this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DIV = this.masterService.userProfile.CompanyInfo.INITIAL;
                _this.masterService.viewDivision.subscribe(function () {
                    if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                        _this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DIV = '%';
                    }
                    else {
                        if (_this.masterService.userSetting.userwisedivision == 1 && _this.division.length == 1) {
                            _this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DIV = _this.division[0].INITIAL;
                        }
                        else {
                            _this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                        }
                    }
                });
                _this._reportFilterService.CreditorsOutstandingObj.ISSUMMARY = '1';
                _this._reportFilterService.CreditorsOutstandingObj.ReportType = '1';
                _this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_AreaWise = 0;
                _this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_multipleAccounts = [];
                _this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_CostCenter = '%';
                _this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_PartyGroup = '%';
                _this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_AreaWiseInSummary = 0;
            }
            if (params.instancename) {
                ////console.log("@@[Crediors Outs Report0]",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                // this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DATE1=this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                // this.changestartDate(this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DATE1, "AD");
                // this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DIV=this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
                // this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_CostCenter=this._reportFilterService.reportDataStore[params.instancename].param.reportparam.COSTCENTER;
            }
        });
        // this.changestartDate(this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DATE1, "AD");
        this.checkValue();
    };
    CreditorsOutstandingReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    CreditorsOutstandingReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    CreditorsOutstandingReport.prototype.DialogClosedResult = function (res) {
        var _this = this;
        var multipleSelectedAccount = [];
        var SelectedAccount = '';
        if (this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_multipleAccounts === undefined) {
            SelectedAccount = this._reportFilterService.CreditorsOutstandingObj.SingleAccount;
        }
        else {
            if (this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_multipleAccounts.length != 0) {
                this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_multipleAccounts.forEach(function (acList) {
                    multipleSelectedAccount.push(acList.ACID);
                    SelectedAccount += multipleSelectedAccount + ",";
                });
            }
            else {
                SelectedAccount = this._reportFilterService.CreditorsOutstandingObj.multipleACID;
            }
        }
        // if((this._reportFilterService.CreditorsOutstandingObj.ISSUMMARY=='0' && this._reportFilterService.CreditorsOutstandingObj.ReportType=="1")&& res=="ok"){
        //     if(SelectedAccount=="" || SelectedAccount==null || SelectedAccount==undefined || !SelectedAccount){
        //         this.alertService.info("Please Select Account First");
        //         return;
        //     }
        // }
        // if (this._reportFilterService.CreditorsOutstandingObj.DOAGEINGOFOPENINGBL == true) {
        //     this._reportFilterService.CreditorsOutstandingObj.DOAGEINGOFOPENINGBL = '0';
        // } else {
        //     this._reportFilterService.CreditorsOutstandingObj.DOAGEINGOFOPENINGBL = '1';
        // }
        if (this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DIV && this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DIV == '%') {
            this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DIVISIONNAME = 'All';
        }
        else if (this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DIV && this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DIV != '%') {
            var abc = this.division.filter(function (x) { return x.INITIAL == _this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DIV; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DIVISIONNAME = abc[0].NAME;
            }
            else {
                this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DIVISIONNAME = '';
            }
        }
        else {
            this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DIVISIONNAME = '';
        }
        if (this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_CostCenter && this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_CostCenter == '%') {
            this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_COSTCENTERDISPLAYNAME = 'All';
        }
        else if (this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_CostCenter != '%') {
            var abc = this.CostcenterList.filter(function (x) { return x.CCID == _this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_CostCenter; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_COSTCENTERDISPLAYNAME = abc[0].COSTCENTERNAME;
            }
            else {
                this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_COSTCENTERDISPLAYNAME = '';
            }
        }
        else {
            this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_COSTCENTERDISPLAYNAME = '';
        }
        if (res == "ok") {
            this._reportFilterService.CreditorsOutstandingObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.CreditorsOuts_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Creditors Outstanding Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.CreditorsOuts_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Creditors Outstanding Report' + '_' + this._reportFilterService.CreditorsOuts_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.CreditorsOuts_loadedTimes,
                });
            }
        }
        var multiplereportname = 'Creditors Outstanding Report';
        var Area = '0';
        if (this._reportFilterService.CreditorsOutstandingObj.ISSUMMARY == '1') {
            multiplereportname = 'Creditors Outstanding Report';
            Area = this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_AreaWiseInSummary;
        }
        else if (this._reportFilterService.CreditorsOutstandingObj.ISSUMMARY == '0') {
            multiplereportname = 'Creditors Outstanding Report_1';
            Area = this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_AreaWise;
        }
        this._reportFilterService.CreditorsOutstandingObj.DIV = (this._reportFilterService.CreditorsOutstandingObj.DIV == null || this._reportFilterService.CreditorsOutstandingObj.DIV == "") ? "%" : this._reportFilterService.CreditorsOutstandingObj.DIV;
        this.reportdataEmit.emit({
            status: res, data: {
                reportname: multiplereportname,
                REPORTDISPLAYNAME: 'Creditors Outstanding Report',
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.CreditorsOuts_loadedTimes,
                reportparam: {
                    DATE: this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DATE1,
                    BSDATE: this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_BSDATE1,
                    DIV: this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DIV,
                    COMID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    COSTCENTER: this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_CostCenter ? this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_CostCenter : '%',
                    ISCreditors: "0",
                    GROUPBY: this._reportFilterService.CreditorsOutstandingObj.GROUPBY ? this._reportFilterService.CreditorsOutstandingObj.GROUPBY : '0',
                    DOAGEINGOFOPENINGBL: this._reportFilterService.CreditorsOutstandingObj.DOAGEINGOFOPENINGBL ? this._reportFilterService.CreditorsOutstandingObj.DOAGEINGOFOPENINGBL : 0,
                    ACID: SelectedAccount ? SelectedAccount : '%',
                    AREA: Area ? Area : '0',
                    REPORTTYPE: this._reportFilterService.CreditorsOutstandingObj.ReportType ? this._reportFilterService.CreditorsOutstandingObj.ReportType : '0',
                    ISSUMMARY: this._reportFilterService.CreditorsOutstandingObj.ISSUMMARY,
                    // DATE1: this.masterService.PhiscalObj.BeginDate.split('T')[0],
                    // DATE2: this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DATE1,
                    DIVISIONNAME: this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DIVISIONNAME ? this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DIVISIONNAME : '',
                    COSTCENTERDISPLAYNAME: this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_COSTCENTERDISPLAYNAME ? this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_COSTCENTERDISPLAYNAME : '',
                    PARTYGROUP: this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_PartyGroup ? this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_PartyGroup : '%',
                    ISDEBTORS: "0",
                    INCLUDEPOSTEDTRANSACTION: this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_INCLUDEPOSTEDTRANSACTION ? this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_INCLUDEPOSTEDTRANSACTION : 0
                }
            }
        });
        this._reportFilterService.CreditorsOuts_loadedTimes = this._reportFilterService.CreditorsOuts_loadedTimes + 1;
    };
    CreditorsOutstandingReport.prototype.changestartDate = function (value, format) {
        try {
            var adbs = __webpack_require__(19);
            if (format == "AD") {
                var adDate = (value.replace("-", "/")).replace("-", "/");
                var bsDate = adbs.ad2bs(adDate);
                this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_BSDATE1 = this.masterService.toBSDate(value);
            }
            else if (format == "BS") {
                var datearr = value.split('/');
                var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                // var bsDate = (value.replace("-", "/")).replace("-", "/");
                var adDate = adbs.bs2ad(bsDate_1);
                var Engdate = this.masterService.toADDate(value);
                var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
                if (Validatedata == true) {
                    var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                    var adDate1 = adbs.bs2ad(bsDate1);
                    this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DATE1 = this.masterService.toADDate(value);
                }
                else {
                    this.alertService.error("Cannot Change the date");
                    return;
                }
                // this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DATE1 = this.masterService.toBSDate(value);
            }
        }
        catch (e) { }
    };
    CreditorsOutstandingReport.prototype.checkValue = function () {
        if (this._reportFilterService.CreditorsOutstandingObj.ReportType == 1) {
            this.showCustomer = true;
        }
        else {
            this.showCustomer = false;
        }
        if (this._reportFilterService.CreditorsOutstandingObj.ReportType == 2) {
            this.showArea = true;
        }
        else {
            this.showArea = false;
        }
    };
    // onChangeSummaryReport() {
    //     this.ReportParameters.SummaryReportWise = 0;
    // }
    // onChangeDetailReport() {
    //     this.ReportParameters.DetailReportWise = 0;
    // }
    CreditorsOutstandingReport.prototype.addAccountToList = function () {
        var _this = this;
        var selectACList = this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_multipleAccounts.filter(function (acList) { return acList.ACNAME == _this._reportFilterService.CreditorsOutstandingObj.multipleACNAME; });
        if (this._reportFilterService.CreditorsOutstandingObj.multipleACNAME === "" ||
            this._reportFilterService.CreditorsOutstandingObj.multipleACNAME === null ||
            this._reportFilterService.CreditorsOutstandingObj.multipleACNAME === undefined) {
            return;
        }
        if (selectACList.length === 0) {
            this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_multipleAccounts.push({ ACID: this._reportFilterService.CreditorsOutstandingObj.multipleACID, ACNAME: this._reportFilterService.CreditorsOutstandingObj.multipleACNAME });
            this._reportFilterService.CreditorsOutstandingObj.multipleACNAME = '';
            this._reportFilterService.CreditorsOutstandingObj.multipleACCODE = '';
            this._reportFilterService.CreditorsOutstandingObj.multipleACID = '';
        }
    };
    CreditorsOutstandingReport.prototype.deleteAccount = function (index) {
        this._reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_multipleAccounts.splice(index, 1);
    };
    CreditorsOutstandingReport.prototype.MultipleAccountEnterClicked = function () {
        this.gridPopupSettingsForMultipleAccountLedgerList = this.masterService.getGenericGridPopUpSettings('V');
        this.genericGridMultipleAccountLedger.show();
    };
    CreditorsOutstandingReport.prototype.dblClickMultipleAccountSelect = function (account) {
        this._reportFilterService.CreditorsOutstandingObj.multipleACID = account.ACID;
        this._reportFilterService.CreditorsOutstandingObj.multipleACNAME = account.ACNAME;
    };
    return CreditorsOutstandingReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], CreditorsOutstandingReport.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridMultipleAccountLedger"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], CreditorsOutstandingReport.prototype, "genericGridMultipleAccountLedger", void 0);
CreditorsOutstandingReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'result-creditors-outstanding-report-dialog',
        template: __webpack_require__(1778),
        styles: [__webpack_require__(1163), __webpack_require__(120)],
    }),
    __param(4, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_4__angular_router__["ActivatedRoute"], __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object, __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_4__angular_router__["Router"]])
], CreditorsOutstandingReport);



/***/ }),

/***/ 1545:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__common_popupLists_report_filter_report_filter_service__ = __webpack_require__(555);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DebtorsAgingReport; });








var DebtorsAgingReport = (function () {
    function DebtorsAgingReport(masterService, _authService, reportService, alertService, dialogref, _ActivatedRoute, data, _reportFilterService, arouter) {
        //----------Default values on load
        var _this = this;
        this.masterService = masterService;
        this._authService = _authService;
        this.reportService = reportService;
        this.alertService = alertService;
        this.dialogref = dialogref;
        this._ActivatedRoute = _ActivatedRoute;
        this.data = data;
        this._reportFilterService = _reportFilterService;
        this.arouter = arouter;
        this.ReportParameters = {};
        this.division = [];
        this.CostcenterList = [];
        this.instanceWiseRepName = 'Debtors Ageing Report';
        this.AreaList = [];
        this.PartyGroupList = [];
        this.PartyCategoryList = [];
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        // this.ReportParameters.DATE2 = new Date().toJSON().split('T')[0];
        // this.changeEndDate(this.ReportParameters.DATE2, 'AD');
        this.ReportParameters.COMID = this.masterService.userProfile.CompanyInfo.COMPANYID;
        this.ReportParameters.DebtorsAgeing_CostCenter = "%";
        this._reportFilterService.StockAgeingObj.StockAgeing_AGE1 = "30";
        this._reportFilterService.StockAgeingObj.StockAgeing_AGE2 = "60";
        this._reportFilterService.StockAgeingObj.StockAgeing_AGE3 = "90";
        this._reportFilterService.StockAgeingObj.StockAgeing_AGE4 = "120";
        this._reportFilterService.StockAgeingObj.StockAgeing_AGE5 = "150";
        this._reportFilterService.StockAgeingObj.StockAgeing_AGE6 = "180";
        this._reportFilterService.StockAgeingObj.StockAgeing_AGE7 = "210";
        this._reportFilterService.StockAgeingObj.StockAgeing_AGE8 = "240";
        this._reportFilterService.StockAgeingObj.StockAgeing_AGE9 = "270";
        this._reportFilterService.StockAgeingObj.StockAgeing_AGE10 = "300";
        // this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DIV=this.masterService.userProfile.CompanyInfo.INITIAL;
        this.ReportParameters.ISDEBTORS = 1;
        this.division = [];
        //let data: Array<IDivision> = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                //////console.log("div" + JSON.stringify(res));
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        this.masterService.getCostcenter().subscribe(function (res) {
            _this.CostcenterList = res;
        });
        this.masterService.getAreaList().subscribe(function (res) {
            _this.AreaList = res.result;
        });
        this.masterService.getPartyGroupList().subscribe(function (res) {
            _this.PartyGroupList = res.result;
        });
        this.masterService.getPartyCategoryList().subscribe(function (res) {
            _this.PartyCategoryList = res.result;
        });
        // this.masterService.getAccDivList();
    }
    DebtorsAgingReport.prototype.ngOnInit = function () {
        var _this = this;
        var AgingObj = {};
        AgingObj = this.masterService.userProfile.userRights.find(function (x) { return x.right == 'StockAgeingLimit'; });
        console.log("dd", AgingObj);
        this.AgingValue = AgingObj.value;
        console.log("AGINGVALUE", this.AgingValue);
        this.userProfile = this._authService.getUserProfile();
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            if (_this._reportFilterService.DebtorsAgeingObj.assignPrevioiusDate != true) {
                _this.masterService.getAccDivList();
                if (_this.userProfile.CompanyInfo.ActualFY == _this.masterService.PhiscalObj.PhiscalID) {
                    _this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DATE1 = new Date().toJSON().split('T')[0];
                    _this.changestartDate(_this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DATE1, "AD");
                }
                else {
                    _this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DATE1 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                    _this.changestartDate(_this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DATE1, "AD");
                }
                // this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DIV=this.masterService.userProfile.CompanyInfo.INITIAL;
                _this.masterService.viewDivision.subscribe(function () {
                    if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                        _this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DIV = '%';
                    }
                    else {
                        if (_this.masterService.userSetting.userwisedivision == 1 && _this.division.length == 1) {
                            _this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DIV = _this.division[0].INITIAL;
                        }
                        else {
                            _this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                        }
                    }
                });
                _this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_CostCenter = '%';
                _this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_AreaWise = 0;
                _this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_PartyGroup = '%';
                _this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_PartyCategory = '%';
                _this._reportFilterService.DebtorsAgeingObj.REPORTMODE = '0';
            }
            if (params.instancename) {
                // ////console.log("@@[Creditors Report0]",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                _this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE;
                _this.changestartDate(_this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DATE1, "AD");
                _this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
                _this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_CostCenter = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.COSTCENTER;
                _this._reportFilterService.DebtorsAgeingObj.DOAGEINGOFOPENINGBL = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DOAGEINGOFOPENINGBL;
                _this._reportFilterService.DebtorsAgeingObj.GROUPBY = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.GROUPBY;
                _this.ReportParameters.ISDEBTORS = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.ISDEBTORS;
                _this._reportFilterService.DebtorsAgeingObj.REPORTMODE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.REPORTMODE;
                _this._reportFilterService.DebtorsAgeingObj.SHOWDPARTYDETAIL = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.SHOWDPARTYDETAIL;
                _this.ReportParameters.D1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.D1;
                _this.ReportParameters.D2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.D2;
                _this.ReportParameters.D3 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.D3;
                _this.ReportParameters.D4 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.D4;
                _this.ReportParameters.D5 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.D5;
                _this.ReportParameters.D6 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.D6;
                _this.ReportParameters.D7 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.D7;
                _this.ReportParameters.D8 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.D8;
                _this.ReportParameters.D9 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.D9;
                _this.ReportParameters.D10 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.D10;
                //     this._reportFilterService.StockAgeingObj.StockAgeing_AGE1 = 30;
                //     this._reportFilterService.StockAgeingObj.StockAgeing_AGE2 = 60;
                //     this._reportFilterService.StockAgeingObj.StockAgeing_AGE3 = 90;
                //     this._reportFilterService.StockAgeingObj.StockAgeing_AGE4 = 120;
                //     this._reportFilterService.StockAgeingObj.StockAgeing_AGE5 = 150;
                //     this._reportFilterService.StockAgeingObj.StockAgeing_AGE6 = 180;
                //     this._reportFilterService.StockAgeingObj.StockAgeing_AGE7 = 210;
                //     this._reportFilterService.StockAgeingObj.StockAgeing_AGE8 = 240;
                //     this._reportFilterService.StockAgeingObj.StockAgeing_AGE9 = 270;
                //     this._reportFilterService.StockAgeingObj.StockAgeing_AGE10 = 300;
            }
        });
    };
    DebtorsAgingReport.prototype.onload = function () {
        this.ReportParameters.D1 = this._reportFilterService.StockAgeingObj.StockAgeing_AGE1 ? this._reportFilterService.StockAgeingObj.StockAgeing_AGE1 : "30";
        this.ReportParameters.D2 = this._reportFilterService.StockAgeingObj.StockAgeing_AGE2 ? this._reportFilterService.StockAgeingObj.StockAgeing_AGE2 : "60";
        this.ReportParameters.D3 = this._reportFilterService.StockAgeingObj.StockAgeing_AGE3 ? this._reportFilterService.StockAgeingObj.StockAgeing_AGE3 : "90";
        this.ReportParameters.D4 = this._reportFilterService.StockAgeingObj.StockAgeing_AGE4 ? this._reportFilterService.StockAgeingObj.StockAgeing_AGE4 : "120";
        if (this.AgingValue >= 5) {
            this.ReportParameters.D5 = this._reportFilterService.StockAgeingObj.StockAgeing_AGE5 ? this._reportFilterService.StockAgeingObj.StockAgeing_AGE5 : "150";
        }
        else {
            this.ReportParameters.D5 = this.ReportParameters.D4;
        }
        if (this.AgingValue >= 6) {
            this.ReportParameters.D6 = this._reportFilterService.StockAgeingObj.StockAgeing_AGE6 ? this._reportFilterService.StockAgeingObj.StockAgeing_AGE6 : "180";
        }
        else {
            this.ReportParameters.D6 = this.ReportParameters.D5;
        }
        if (this.AgingValue >= 7) {
            this.ReportParameters.D7 = this._reportFilterService.StockAgeingObj.StockAgeing_AGE7 ? this._reportFilterService.StockAgeingObj.StockAgeing_AGE7 : "210";
        }
        else {
            this.ReportParameters.D7 = this.ReportParameters.D6;
        }
        if (this.AgingValue >= 8) {
            this.ReportParameters.D8 = this._reportFilterService.StockAgeingObj.StockAgeing_AGE8 ? this._reportFilterService.StockAgeingObj.StockAgeing_AGE8 : "240";
        }
        else {
            this.ReportParameters.D8 = this.ReportParameters.D7;
        }
        if (this.AgingValue >= 9) {
            this.ReportParameters.D9 = this._reportFilterService.StockAgeingObj.StockAgeing_AGE9 ? this._reportFilterService.StockAgeingObj.StockAgeing_AGE9 : "270";
        }
        else {
            this.ReportParameters.D9 = this.ReportParameters.D8;
        }
        if (this.AgingValue >= 10) {
            this.ReportParameters.D10 = this._reportFilterService.StockAgeingObj.StockAgeing_AGE10 ? this._reportFilterService.StockAgeingObj.StockAgeing_AGE10 : "300";
        }
        else {
            this.ReportParameters.D10 = this.ReportParameters.D9;
        }
        this.DialogClosedResult("ok");
    };
    DebtorsAgingReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    DebtorsAgingReport.prototype.DialogClosedResult = function (res) {
        var _this = this;
        this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DIV = (this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DIV == null || this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DIV == "") ? "%" : this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DIV;
        if (this._reportFilterService.DebtorsAgeingObj.SHOWDPARTYDETAIL == 1) {
            this.multipleReportFormateName = 'Debtors Aging Report_1';
        }
        else {
            this.multipleReportFormateName = 'Debtors Aging Report';
        }
        if (this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DIV && this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DIV == '%') {
            this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DIVISIONNAME = 'All';
        }
        else if (this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DIV && this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DIV != '%') {
            var abc = this.division.filter(function (x) { return x.INITIAL == _this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DIV; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DIVISIONNAME = abc[0].NAME;
            }
            else {
                this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DIVISIONNAME = '';
            }
        }
        else {
            this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DIVISIONNAME = '';
        }
        if (this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_CostCenter && this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_CostCenter == '%') {
            this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_COSTCENTERDISPLAYNAME = 'All';
        }
        else if (this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_CostCenter != '%') {
            var abc = this.CostcenterList.filter(function (x) { return x.CCID == _this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_CostCenter; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_COSTCENTERDISPLAYNAME = abc[0].COSTCENTERNAME;
            }
            else {
                this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_COSTCENTERDISPLAYNAME = '';
            }
        }
        else {
            this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_COSTCENTERDISPLAYNAME = '';
        }
        if (res == "ok") {
            this._reportFilterService.DebtorsAgeingObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.DebtorsAgeing_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Debtors Ageing Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.DebtorsAgeing_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Debtors Ageing Report' + '_' + this._reportFilterService.DebtorsAgeing_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.DebtorsAgeing_loadedTimes,
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: 'Debtors Ageing Report',
                reportname: this.multipleReportFormateName,
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.DebtorsAgeing_loadedTimes,
                reportparam: {
                    DATE: this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DATE1,
                    BSDATE: this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_BSDATE1,
                    DIV: this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DIV,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    COMID: this.ReportParameters.COMID,
                    DebtorsAgeing_CostCenter: this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_CostCenter,
                    SHOWDPARTYDETAIL: this._reportFilterService.DebtorsAgeingObj.SHOWDPARTYDETAIL,
                    // OPNINGBLONLY: this._reportFilterService.DebtorsAgeingObj.OPNINGBLONLY,
                    REPORTMODE: this._reportFilterService.DebtorsAgeingObj.REPORTMODE,
                    GROUPBY: this._reportFilterService.DebtorsAgeingObj.GROUPBY ? this._reportFilterService.DebtorsAgeingObj.GROUPBY : 0,
                    D1: this.ReportParameters.D1,
                    D2: this.ReportParameters.D2,
                    D3: this.ReportParameters.D3,
                    D4: this.ReportParameters.D4,
                    D5: this.ReportParameters.D5,
                    D6: this.ReportParameters.D6,
                    D7: this.ReportParameters.D7,
                    D8: this.ReportParameters.D8,
                    D9: this.ReportParameters.D9,
                    D10: this.ReportParameters.D10,
                    DOAGEINGOFOPENINGBL: this._reportFilterService.DebtorsAgeingObj.DOAGEINGOFOPENINGBL,
                    ISDEBTORS: this.ReportParameters.ISDEBTORS,
                    COSTCENTER: this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_CostCenter,
                    // DATE1: this.masterService.PhiscalObj.BeginDate.split('T')[0],
                    // DATE2: this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DATE1,
                    DIVISIONNAME: this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DIVISIONNAME ? this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DIVISIONNAME : '',
                    COSTCENTERDISPLAYNAME: this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_COSTCENTERDISPLAYNAME ? this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_COSTCENTERDISPLAYNAME : '',
                    AREA: this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_AreaWise ? this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_AreaWise : 0,
                    PARTYGROUP: this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_PartyGroup ? this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_PartyGroup : '%',
                    INCLUDEPOSTEDTRANSACTION: this._reportFilterService.DebtorsAgeingObj.DebtorsAgeingObj_INCLUDEPOSTEDTRANSACTION ? this._reportFilterService.DebtorsAgeingObj.DebtorsAgeingObj_INCLUDEPOSTEDTRANSACTION : 0
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.DebtorsAgeing_loadedTimes = this._reportFilterService.DebtorsAgeing_loadedTimes + 1;
        }
    };
    DebtorsAgingReport.prototype.changestartDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DATE1 = this.masterService.toBSDate(value);
        }
    };
    DebtorsAgingReport.prototype.changeEndDate = function (value, format) {
        try {
            var adbs = __webpack_require__(19);
            if (format == "AD") {
                var adDate = (value.replace("-", "/")).replace("-", "/");
                var bsDate = adbs.ad2bs(adDate);
                this.ReportParameters.BSDATE2 = this.masterService.toBSDate(value);
            }
            else if (format == "BS") {
                var datearr = value.split('/');
                var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                // var bsDate = (value.replace("-", "/")).replace("-", "/");
                var adDate = adbs.bs2ad(bsDate_2);
                this.ReportParameters.DATE2 = this.masterService.toADDate(value);
            }
        }
        catch (e) { }
    };
    return DebtorsAgingReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], DebtorsAgingReport.prototype, "reportdataEmit", void 0);
DebtorsAgingReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'result-debtors-aging-report-dialog',
        template: __webpack_require__(1779),
        styles: [__webpack_require__(1163), __webpack_require__(120)]
    }),
    __param(6, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_5__common_services_permission_authService_service__["a" /* AuthService */],
        __WEBPACK_IMPORTED_MODULE_7__common_popupLists_report_filter_report_filter_service__["a" /* ReportFilterService */], __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], __WEBPACK_IMPORTED_MODULE_4__angular_router__["ActivatedRoute"], Object, __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_4__angular_router__["Router"]])
], DebtorsAgingReport);



/***/ }),

/***/ 1546:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DebtorsOutstandingReport; });







var DebtorsOutstandingReport = (function () {
    function DebtorsOutstandingReport(masterService, dialogref, data, _ActivatedRoute, alertService, _reportFilterService, arouter) {
        var _this = this;
        this.masterService = masterService;
        this.dialogref = dialogref;
        this.data = data;
        this._ActivatedRoute = _ActivatedRoute;
        this.alertService = alertService;
        this._reportFilterService = _reportFilterService;
        this.arouter = arouter;
        this.allCustomerlist = [];
        this.multipleCustomerList = [];
        this.division = [];
        this.AreaList = [];
        this.CostcenterList = [];
        this.PartyGroupList = [];
        this.instanceWiseRepName = 'Debtors Outstanding Report';
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.gridPopupSettingsForMultipleAccountLedgerList = new __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.showCustomer = true;
        this._reportFilterService.DebtorsOutstandingObj.Reportnameis = 'debitorsoutstanding';
        this.allCustomerlist = [];
        this.masterService.getAllCustomers().subscribe(function (res) {
            _this.allCustomerlist.push(res);
        });
        this.division = [];
        //let data: Array<IDivision> = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                //////console.log("div" + JSON.stringify(res));
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        this.masterService.getAreaList().subscribe(function (res) {
            _this.AreaList = res.result;
        });
        this.masterService.getCostcenter().subscribe(function (res) {
            _this.CostcenterList = res;
        });
        this.masterService.getPartyGroupList().subscribe(function (res) {
            _this.PartyGroupList = res.result;
        });
        // this.masterService.getAccDivList();
    }
    DebtorsOutstandingReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            if (_this._reportFilterService.DebtorsOutstandingObj.assignPrevioiusDate != true) {
                _this.masterService.getAccDivList();
                if (_this.masterService.userProfile.CompanyInfo.ActualFY == _this.masterService.PhiscalObj.PhiscalID) {
                    _this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DATE1 = new Date().toJSON().split('T')[0];
                    _this.changestartDate(_this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DATE1, "AD");
                }
                else {
                    _this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DATE1 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                    _this.changestartDate(_this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DATE1, "AD");
                }
                // this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DATE1 = new Date().toJSON().split('T')[0];
                // this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DIV = this.masterService.userProfile.CompanyInfo.INITIAL;
                _this.masterService.viewDivision.subscribe(function () {
                    if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                        _this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DIV = '%';
                    }
                    else {
                        _this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                    }
                });
                _this._reportFilterService.DebtorsOutstandingObj.ISSUMMARY = '1';
                _this._reportFilterService.DebtorsOutstandingObj.ReportType = '1';
                _this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_AreaWise = 0;
                _this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_multipleAccounts = [];
                _this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_CostCenter = '%';
                _this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_PartyGroup = '%';
                _this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_AreaWiseInSummary = 0;
            }
            if (params.instancename) {
                ////console.log("@@[Debtors Outs Report0]",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                // this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DATE1=this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                // this.changestartDate(this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DATE1, "AD");
                // this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DIV=this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
                // this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_CostCenter=this._reportFilterService.reportDataStore[params.instancename].param.reportparam.COSTCENTER;
            }
        });
        // this.changestartDate(this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DATE1, "AD");
        this.checkValue();
    };
    DebtorsOutstandingReport.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    DebtorsOutstandingReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    DebtorsOutstandingReport.prototype.DialogClosedResult = function (res) {
        var _this = this;
        var multipleSelectedAccount = [];
        var SelectedAccount = '';
        if (this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_multipleAccounts === undefined) {
            SelectedAccount = this._reportFilterService.DebtorsOutstandingObj.SingleAccount;
        }
        else {
            if (this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_multipleAccounts.length != 0) {
                this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_multipleAccounts.forEach(function (acList) {
                    multipleSelectedAccount.push(acList.ACID);
                    SelectedAccount += multipleSelectedAccount + ",";
                });
            }
            else {
                SelectedAccount = this._reportFilterService.DebtorsOutstandingObj.multipleACID;
            }
        }
        // if (this._reportFilterService.DebtorsOutstandingObj.DOAGEINGOFOPENINGBL == true) {
        //     this._reportFilterService.DebtorsOutstandingObj.DOAGEINGOFOPENINGBL = '0';
        // } else {
        //     this._reportFilterService.DebtorsOutstandingObj.DOAGEINGOFOPENINGBL = '1';
        // }
        // if((this._reportFilterService.DebtorsOutstandingObj.ISSUMMARY=='0' && this._reportFilterService.DebtorsOutstandingObj.ReportType=="1")&& res=="ok"){
        //     if(SelectedAccount=="" || SelectedAccount==null || SelectedAccount==undefined || !SelectedAccount){
        //         this.alertService.info("Please Select Account First");
        //         SelectedAccount='%'
        //         return;
        //     }
        // }
        if (this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DIV && this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DIV == '%') {
            this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DIVISIONNAME = 'All';
        }
        else if (this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DIV && this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DIV != '%') {
            var abc = this.division.filter(function (x) { return x.INITIAL == _this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DIV; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DIVISIONNAME = abc[0].NAME;
            }
            else {
                this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DIVISIONNAME = '';
            }
        }
        else {
            this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DIVISIONNAME = '';
        }
        if (this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_CostCenter && this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_CostCenter == '%') {
            this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_COSTCENTERDISPLAYNAME = 'All';
        }
        else if (this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_CostCenter != '%') {
            var abc = this.CostcenterList.filter(function (x) { return x.CCID == _this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_CostCenter; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_COSTCENTERDISPLAYNAME = abc[0].COSTCENTERNAME;
            }
            else {
                this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_COSTCENTERDISPLAYNAME = '';
            }
        }
        else {
            this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_COSTCENTERDISPLAYNAME = '';
        }
        if (res == "ok") {
            this._reportFilterService.DebtorsOutstandingObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.DebtorsOuts_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Debtors Outstanding Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.DebtorsOuts_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Debtors Outstanding Report' + '_' + this._reportFilterService.DebtorsOuts_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.DebtorsOuts_loadedTimes,
                });
            }
        }
        var multiplereportname = 'Debtors Outstanding Report';
        var Area = '0';
        if (this._reportFilterService.DebtorsOutstandingObj.ISSUMMARY == '1') {
            multiplereportname = 'Debtors Outstanding Report';
            Area = this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_AreaWiseInSummary;
        }
        else if (this._reportFilterService.DebtorsOutstandingObj.ISSUMMARY == '0') {
            multiplereportname = 'Debtors Outstanding Report_1';
            Area = this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_AreaWise;
        }
        this._reportFilterService.DebtorsOutstandingObj.DIV = (this._reportFilterService.DebtorsOutstandingObj.DIV == null || this._reportFilterService.DebtorsOutstandingObj.DIV == "") ? "%" : this._reportFilterService.DebtorsOutstandingObj.DIV;
        this.reportdataEmit.emit({
            status: res, data: {
                reportname: multiplereportname,
                REPORTDISPLAYNAME: 'Debtors Outstanding Report',
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.DebtorsOuts_loadedTimes,
                reportparam: {
                    DATE: this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DATE1,
                    BSDATE: this._reportFilterService.CreditorsAgeingObj.DebtorsOutstanding_BSDATE1,
                    DIV: this._reportFilterService.DebtorsOutstandingObj.DIV,
                    COMID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    COSTCENTER: this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_CostCenter ? this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_CostCenter : '%',
                    ISDEBTORS: "1",
                    GROUPBY: this._reportFilterService.DebtorsOutstandingObj.GROUPBY ? this._reportFilterService.DebtorsOutstandingObj.GROUPBY : '0',
                    DOAGEINGOFOPENINGBL: this._reportFilterService.DebtorsOutstandingObj.DOAGEINGOFOPENINGBL ? this._reportFilterService.DebtorsOutstandingObj.DOAGEINGOFOPENINGBL : 0,
                    ACID: SelectedAccount ? SelectedAccount : '%',
                    AREA: Area ? Area : '0',
                    REPORTTYPE: this._reportFilterService.DebtorsOutstandingObj.ReportType ? this._reportFilterService.DebtorsOutstandingObj.ReportType : 0,
                    ISSUMMARY: this._reportFilterService.DebtorsOutstandingObj.ISSUMMARY,
                    // DATE1: this.masterService.PhiscalObj.BeginDate.split('T')[0],
                    // DATE2: this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DATE1 ,
                    DIVISIONNAME: this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DIVISIONNAME ? this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DIVISIONNAME : '',
                    COSTCENTERDISPLAYNAME: this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_COSTCENTERDISPLAYNAME ? this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_COSTCENTERDISPLAYNAME : '',
                    PARTYGROUP: this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_PartyGroup ? this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_PartyGroup : '%',
                    INCLUDEPOSTEDTRANSACTION: this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_INCLUDEPOSTEDTRANSACTION ? this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_INCLUDEPOSTEDTRANSACTION : 0
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.DebtorsOuts_loadedTimes = this._reportFilterService.DebtorsOuts_loadedTimes + 1;
        }
    };
    DebtorsOutstandingReport.prototype.changestartDate = function (value, format) {
        try {
            var adbs = __webpack_require__(19);
            if (format == "AD") {
                var adDate = (value.replace("-", "/")).replace("-", "/");
                var bsDate = adbs.ad2bs(adDate);
                this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_BSDATE1 = this.masterService.toBSDate(value);
            }
            else if (format == "BS") {
                var datearr = value.split('/');
                var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                // var bsDate = (value.replace("-", "/")).replace("-", "/");
                var adDate = adbs.bs2ad(bsDate_1);
                var Engdate = this.masterService.toADDate(value);
                var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
                if (Validatedata == true) {
                    var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                    var adDate1 = adbs.bs2ad(bsDate1);
                    this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DATE1 = this.masterService.toADDate(value);
                }
                else {
                    this.alertService.error("Cannot Change the date");
                    return;
                }
                // this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DATE1 = this.masterService.toBSDate(value);
            }
        }
        catch (e) { }
    };
    DebtorsOutstandingReport.prototype.checkValue = function () {
        if (this._reportFilterService.DebtorsOutstandingObj.ReportType == '1') {
            this.showCustomer = true;
        }
        else {
            this.showCustomer = false;
        }
        if (this._reportFilterService.DebtorsOutstandingObj.ReportType == '2') {
            this.showArea = true;
        }
        else {
            this.showArea = false;
        }
    };
    // onChangeSummaryReport() {
    //     this._reportFilterService.DebtorsOutstandingObj.SummaryReportWise = 0;
    // }
    // onChangeDetailReport() {
    //     this._reportFilterService.DebtorsOutstandingObj.DetailReportWise = 0;
    // }
    DebtorsOutstandingReport.prototype.addAccountToList = function () {
        var _this = this;
        var selectACList = this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_multipleAccounts.filter(function (acList) { return acList.ACNAME == _this._reportFilterService.DebtorsOutstandingObj.multipleACNAME; });
        if (this._reportFilterService.DebtorsOutstandingObj.multipleACNAME === "" ||
            this._reportFilterService.DebtorsOutstandingObj.multipleACNAME === null ||
            this._reportFilterService.DebtorsOutstandingObj.multipleACNAME === undefined) {
            return;
        }
        if (selectACList.length === 0) {
            this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_multipleAccounts.push({ ACID: this._reportFilterService.DebtorsOutstandingObj.multipleACID, ACNAME: this._reportFilterService.DebtorsOutstandingObj.multipleACNAME });
            this._reportFilterService.DebtorsOutstandingObj.multipleACNAME = '';
            this._reportFilterService.DebtorsOutstandingObj.multipleACCODE = '';
            this._reportFilterService.DebtorsOutstandingObj.multipleACID = '';
        }
    };
    DebtorsOutstandingReport.prototype.deleteAccount = function (index) {
        this._reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_multipleAccounts.splice(index, 1);
    };
    DebtorsOutstandingReport.prototype.MultipleAccountEnterClicked = function () {
        this.gridPopupSettingsForMultipleAccountLedgerList = this.masterService.getGenericGridPopUpSettings('C');
        this.genericGridMultipleAccountLedger.show();
    };
    DebtorsOutstandingReport.prototype.dblClickMultipleAccountSelect = function (account) {
        this._reportFilterService.DebtorsOutstandingObj.multipleACID = account.ACID;
        this._reportFilterService.DebtorsOutstandingObj.multipleACNAME = account.ACNAME;
    };
    return DebtorsOutstandingReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], DebtorsOutstandingReport.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridMultipleAccountLedger"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_5__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], DebtorsOutstandingReport.prototype, "genericGridMultipleAccountLedger", void 0);
DebtorsOutstandingReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'result-debtors-outstanding-report-dialog',
        template: __webpack_require__(1780),
        styles: [__webpack_require__(1163), __webpack_require__(120)],
    }),
    __param(2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_repositories__["a" /* MasterRepo */],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object, __WEBPACK_IMPORTED_MODULE_4__angular_router__["ActivatedRoute"], __WEBPACK_IMPORTED_MODULE_6__common_services_alert_alert_service__["a" /* AlertService */],
        __WEBPACK_IMPORTED_MODULE_3__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_4__angular_router__["Router"]])
], DebtorsOutstandingReport);



/***/ }),

/***/ 1547:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_repositories_masterRepo_service__ = __webpack_require__(8);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DivisionComponent; });




var DivisionComponent = (function () {
    function DivisionComponent(_authService, _reportFilterService, masterService) {
        var _this = this;
        this._authService = _authService;
        this._reportFilterService = _reportFilterService;
        this.masterService = masterService;
        this.division = [];
        this.division = [];
        this.masterService.getAllDivisions()
            .subscribe(function (res) {
            _this.division.push(res);
        }, function (error) {
            _this.masterService.resolveError(error, "divisions - getDivisions");
        });
        this._reportFilterService.ReportFilterObject.DIV = this.masterService.userProfile.CompanyInfo.INITIAL;
    }
    return DivisionComponent;
}());
DivisionComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: "division-list",
        template: __webpack_require__(1781),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
        providers: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_authService_service__["a" /* AuthService */]]
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_authService_service__["a" /* AuthService */],
        __WEBPACK_IMPORTED_MODULE_2__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */],
        __WEBPACK_IMPORTED_MODULE_3__common_repositories_masterRepo_service__["a" /* MasterRepo */]])
], DivisionComponent);



/***/ }),

/***/ 1548:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_repositories_masterRepo_service__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FaarAssetDepreciationReport; });






4;
var FaarAssetDepreciationReport = (function () {
    function FaarAssetDepreciationReport(masterService, arouter, _authService, _ActivatedRoute, _reportFilterService) {
        var _this = this;
        this.masterService = masterService;
        this.arouter = arouter;
        this._authService = _authService;
        this._ActivatedRoute = _ActivatedRoute;
        this._reportFilterService = _reportFilterService;
        this.ReportParameters = {};
        this.instanceWiseRepName = 'DEPRECIATION  REPORT AS PER FAAR ASSET';
        this.REPORTOPTION = [
            { Mode: '1', ReportOptionName: 'Pool Wise' },
            { Mode: '2', ReportOptionName: 'Block Wise' },
            { Mode: '3', ReportOptionName: 'Item Wise' },
            { Mode: '4', ReportOptionName: 'Asset Code Wise' }
        ];
        this.poolName = [];
        this.AssetNameList = [];
        this.AssetIDList = [];
        this.ACID = "";
        this.MCODE = "";
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.gridLedgerListPopupSettings = new __WEBPACK_IMPORTED_MODULE_2__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridAssetNameListPopupSettings = new __WEBPACK_IMPORTED_MODULE_2__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.gridAssetIDListPopupSettings = new __WEBPACK_IMPORTED_MODULE_2__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this._reportFilterService.FaarAssetObj.Reportnameis = "DEPRECIATION  REPORT AS PER FAAR ASSET";
        this._reportFilterService.FaarAssetObj.FaarAsset_REPORTOPTION = '1';
        this.poolName = [];
        this.masterService.getPoolName().subscribe(function (res) {
            _this.poolName = res;
        });
    }
    FaarAssetDepreciationReport.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            if (params.instancename) {
                _this._reportFilterService.FaarAssetObj.FaarAsset_REPORTOPTION;
                // this._reportFilterService.FaarAssetObj.FaarAsset_INCLUDEOPENINGVALUE = this._reportFilterService.reportDataStore[params.instancename].param.reportparam.INCLUDEOPENINGVALUE;
                _this._reportFilterService.FaarAssetObj.FaarAsset_POOLNAME = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.POOL;
                _this._reportFilterService.FaarAssetObj.FaarAsset_ASSETGROUPID = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.ASSETGROUPID;
                _this._reportFilterService.FaarAssetObj.FaarAsset_LEDGERNAME = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.BLOCK;
                _this._reportFilterService.FaarAssetObj.FaarAsset_ASSETNAME = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.ITEM;
                _this._reportFilterService.FaarAssetObj.FaarAsset_ASSETID = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.ASSETID;
            }
        });
    };
    FaarAssetDepreciationReport.prototype.onload = function () {
        if (this._reportFilterService.FaarAssetObj.FaarAsset_LEDGERNAME == "" || this._reportFilterService.FaarAssetObj.FaarAsset_LEDGERNAME == null ||
            this._reportFilterService.FaarAssetObj.FaarAsset_LEDGERNAME == undefined) {
            this._reportFilterService.FaarAssetObj.FaarAsset_ACCODE = '%';
        }
        if (this._reportFilterService.FaarAssetObj.FaarAsset_ASSETNAME == "" || this._reportFilterService.FaarAssetObj.FaarAsset_ASSETNAME == null ||
            this._reportFilterService.FaarAssetObj.FaarAsset_ASSETNAME == undefined) {
            this._reportFilterService.FaarAssetObj.FaarAsset_ITEMID = '%';
        }
        if (this._reportFilterService.FaarAssetObj.FaarAsset_ASSETID == "" || this._reportFilterService.FaarAssetObj.FaarAsset_ASSETID == null ||
            this._reportFilterService.FaarAssetObj.FaarAsset_ASSETID == undefined) {
            this._reportFilterService.FaarAssetObj.FaarAsset_ASSETID = '%';
        }
        this.DialogClosedResult("ok");
    };
    FaarAssetDepreciationReport.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    FaarAssetDepreciationReport.prototype.DialogClosedResult = function (res) {
        var multipleReportFormateName = '';
        if (this._reportFilterService.FaarAssetObj.FaarAsset_REPORTOPTION == '1') {
            multipleReportFormateName = 'DEPRECIATION  REPORT AS PER FAAR ASSET_1';
        }
        else if (this._reportFilterService.FaarAssetObj.FaarAsset_REPORTOPTION == '2') {
            multipleReportFormateName = 'DEPRECIATION  REPORT AS PER FAAR ASSET_2';
        }
        else if (this._reportFilterService.FaarAssetObj.FaarAsset_REPORTOPTION == '3') {
            multipleReportFormateName = 'DEPRECIATION  REPORT AS PER FAAR ASSET_3';
        }
        else if (this._reportFilterService.FaarAssetObj.FaarAsset_REPORTOPTION == '4') {
            multipleReportFormateName = 'DEPRECIATION  REPORT AS PER FAAR ASSET_4';
        }
        else {
            multipleReportFormateName = 'DEPRECIATION  REPORT AS PER FAAR ASSET';
        }
        if (res == "ok") {
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.FaarAsset_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'DEPRECIATION  REPORT AS PER FAAR ASSET',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.FaarAsset_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({
                    reportname: 'DEPRECIATION  REPORT AS PER FAAR ASSET' + '_' + this._reportFilterService.FaarAsset_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.FaarAsset_loadedTimes,
                });
            }
        }
        this.reportdataEmit.emit({
            status: res, data: {
                REPORTDISPLAYNAME: 'FIXED ASSETS REGISTER REPORT',
                reportname: multipleReportFormateName,
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.FaarAsset_loadedTimes,
                reportparam: {
                    MODE: this._reportFilterService.FaarAssetObj.FaarAsset_REPORTOPTION,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    // INCLUDEOPENINGVALUE: this._reportFilterService.CompanyNormsObj.CompanyNorms_INCLUDEOPENINGVALUE ? this._reportFilterService.CompanyNormsObj.CompanyNorms_INCLUDEOPENINGVALUE : 0,
                    POOL: this._reportFilterService.FaarAssetObj.FaarAsset_POOLNAME ? this._reportFilterService.FaarAssetObj.FaarAsset_POOLNAME : '%',
                    BLOCK: this._reportFilterService.FaarAssetObj.FaarAsset_ACCODE ? this._reportFilterService.FaarAssetObj.FaarAsset_ACCODE : '%',
                    ITEM: this._reportFilterService.FaarAssetObj.FaarAsset_ITEMID ? this._reportFilterService.FaarAssetObj.FaarAsset_ITEMID : '%',
                    ASSETID: this._reportFilterService.FaarAssetObj.FaarAsset_ASSETID ? this._reportFilterService.FaarAssetObj.FaarAsset_ASSETID : '%'
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.FaarAsset_loadedTimes = this._reportFilterService.FaarAsset_loadedTimes + 1;
        }
    };
    FaarAssetDepreciationReport.prototype.LedgerNameEnterCommand = function () {
        this.showLedgerList();
    };
    FaarAssetDepreciationReport.prototype.showLedgerList = function () {
        this.gridLedgerListPopupSettings = {
            title: "Accounts",
            apiEndpoints: "/loadLedger",
            defaultFilterIndex: 1,
            columns: [
                {
                    key: "ACID",
                    title: "AC CODE",
                    hidden: false,
                    noSearch: false
                },
                {
                    key: "ACNAME",
                    title: "A/C NAME",
                    hidden: false,
                    noSearch: false
                }
            ]
        };
        this.genericGridLedgerList.show('', false, '', '', this._reportFilterService.FaarAssetObj.FaarAsset_ASSETGROUPID);
    };
    FaarAssetDepreciationReport.prototype.onLedgerSelect = function (event) {
        this._reportFilterService.FaarAssetObj.FaarAsset_ACCODE = event.ACID;
        this._reportFilterService.FaarAssetObj.FaarAsset_LEDGERNAME = event.ACNAME;
    };
    FaarAssetDepreciationReport.prototype.AssetNameEnterCommand = function () {
        this.showAssetNameList();
    };
    FaarAssetDepreciationReport.prototype.showAssetNameList = function () {
        this.gridAssetNameListPopupSettings = {
            title: "Assets",
            apiEndpoints: "/loadAssetName",
            defaultFilterIndex: 1,
            columns: [
                {
                    key: "MCODE",
                    title: "ASSET NAME",
                    hidden: false,
                    noSearch: false
                },
                {
                    key: "ASSET_NAME",
                    title: "ITEM NAME",
                    hidden: false,
                    noSearch: false
                }
            ]
        };
        this.genericGridAssetNameList.show();
    };
    FaarAssetDepreciationReport.prototype.onAssetNameSelect = function (event) {
        this._reportFilterService.FaarAssetObj.FaarAsset_ITEMID = event.MCODE;
        this._reportFilterService.FaarAssetObj.FaarAsset_ASSETNAME = event.ASSET_NAME;
    };
    FaarAssetDepreciationReport.prototype.clearAssetMcode = function () {
        if (!this._reportFilterService.FaarAssetObj.FaarAsset_ASSETNAME) {
            this._reportFilterService.FaarAssetObj.FaarAsset_ITEMID = '';
        }
    };
    FaarAssetDepreciationReport.prototype.AssetIdEnterCommand = function () {
        this.showAssetIDList();
    };
    FaarAssetDepreciationReport.prototype.showAssetIDList = function () {
        this.gridAssetIDListPopupSettings = {
            title: "Assets",
            apiEndpoints: "/loadAssetID",
            defaultFilterIndex: 1,
            columns: [
                {
                    key: "ASSET_NAME",
                    title: "ITEM NAME",
                    hidden: false,
                    noSearch: false
                },
                {
                    key: "AssetID",
                    title: "ASSET ID",
                    hidden: false,
                    noSearch: false
                }
            ]
        };
        this.genericGridAssetIDList.show('', false, '', '', null, this._reportFilterService.FaarAssetObj.FaarAsset_ITEMID);
    };
    FaarAssetDepreciationReport.prototype.onAssetIDSelect = function (event) {
        this._reportFilterService.FaarAssetObj.FaarAsset_ASSETID = event.AssetID;
        this._reportFilterService.FaarAssetObj.FaarAsset_ASSETNAME = event.MCODE;
    };
    FaarAssetDepreciationReport.prototype.onPoolNameChange = function (event) {
        this._reportFilterService.FaarAssetObj.FaarAsset_ASSETGROUPID = event;
        // console.log(event)
    };
    return FaarAssetDepreciationReport;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], FaarAssetDepreciationReport.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridLedgerList"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_2__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], FaarAssetDepreciationReport.prototype, "genericGridLedgerList", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridAssetNameList"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_2__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], FaarAssetDepreciationReport.prototype, "genericGridAssetNameList", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridAssetIDList"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_2__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], FaarAssetDepreciationReport.prototype, "genericGridAssetIDList", void 0);
FaarAssetDepreciationReport = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'faarasset-depreciation-report',
        template: __webpack_require__(1782),
        styles: [__webpack_require__(1163), __webpack_require__(120)],
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_3__common_repositories_masterRepo_service__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_1__angular_router__["Router"], __WEBPACK_IMPORTED_MODULE_4__common_services_permission_authService_service__["a" /* AuthService */], __WEBPACK_IMPORTED_MODULE_1__angular_router__["ActivatedRoute"], __WEBPACK_IMPORTED_MODULE_5__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */]])
], FaarAssetDepreciationReport);



/***/ }),

/***/ 1549:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_repositories__ = __webpack_require__(13);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return OneLakhAbovePURCHASEreportComponent; });


var OneLakhAbovePURCHASEreportComponent = (function () {
    function OneLakhAbovePURCHASEreportComponent(masterService) {
        var _this = this;
        this.masterService = masterService;
        this.OneLakhAbovePurchaseReport = {};
        this.divisionList = [];
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.OneLakhAbovePurchaseReport.DATE1 = new Date().toJSON().split('T')[0];
        this.changeEntryDate(this.OneLakhAbovePurchaseReport.DATE1, "AD");
        this.OneLakhAbovePurchaseReport.DATE = new Date().toJSON().split('T')[0];
        this.changeEndDate(this.OneLakhAbovePurchaseReport.DATE, "AD");
        this.masterService.getAllDivisions().subscribe(function (res) {
            _this.divisionList.push(res);
        });
    }
    OneLakhAbovePURCHASEreportComponent.prototype.onload = function () {
        this.DialogClosedResult("ok");
    };
    OneLakhAbovePURCHASEreportComponent.prototype.DialogClosedResult = function (res) {
        if (this.OneLakhAbovePurchaseReport.isR1 == true) {
            this.OneLakhAbovePurchaseReport.R1 = '1';
        }
        else {
            this.OneLakhAbovePurchaseReport.R1 = '';
        }
        if (this.OneLakhAbovePurchaseReport.isR2 == true) {
            this.OneLakhAbovePurchaseReport.R2 = '1';
        }
        else {
            this.OneLakhAbovePurchaseReport.R2 = '';
        }
        if (this.OneLakhAbovePurchaseReport.isR3 == true) {
            this.OneLakhAbovePurchaseReport.R3 = '1';
        }
        else {
            this.OneLakhAbovePurchaseReport.R3 = '';
        }
        this.reportdataEmit.emit({
            status: res, data: {
                reportname: 'One Lakh Above Purchase Report', reportparam: {
                    DATE1: this.OneLakhAbovePurchaseReport.DATE1,
                    DATE2: this.OneLakhAbovePurchaseReport.DATE,
                    DIV: this.OneLakhAbovePurchaseReport.DIV,
                    COMPANYID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    R1: this.OneLakhAbovePurchaseReport.R1,
                    R2: this.OneLakhAbovePurchaseReport.R2,
                    R3: this.OneLakhAbovePurchaseReport.R3,
                    DETAIL: '0',
                    PARTY: '%',
                    VATNO: '%',
                    isR1: false,
                    isR2: false,
                    isR3: false
                }
            }
        });
    };
    OneLakhAbovePURCHASEreportComponent.prototype.divisionChanged = function () {
        this.OneLakhAbovePurchaseReport.DIV = this.division.nativeElement.value;
    };
    OneLakhAbovePURCHASEreportComponent.prototype.hide = function () {
        this.DialogClosedResult("Error");
    };
    OneLakhAbovePURCHASEreportComponent.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this.OneLakhAbovePurchaseReport.BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate);
            this.OneLakhAbovePurchaseReport.DATE1 = this.masterService.toADDate(value);
        }
    };
    OneLakhAbovePURCHASEreportComponent.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this.OneLakhAbovePurchaseReport.BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate);
            this.OneLakhAbovePurchaseReport.DATE = this.masterService.toADDate(value);
        }
    };
    OneLakhAbovePURCHASEreportComponent.prototype.cancel = function () {
        this.DialogClosedResult("cancel");
    };
    OneLakhAbovePURCHASEreportComponent.prototype.preventInput = function ($event) {
        $event.preventDefault();
        return false;
    };
    return OneLakhAbovePURCHASEreportComponent;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('division'),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"])
], OneLakhAbovePURCHASEreportComponent.prototype, "division", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], OneLakhAbovePURCHASEreportComponent.prototype, "reportdataEmit", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], OneLakhAbovePURCHASEreportComponent.prototype, "reportType", void 0);
OneLakhAbovePURCHASEreportComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'one-lakh-above-purchase-report',
        template: __webpack_require__(1783),
        styles: [__webpack_require__(120), __webpack_require__(1163)],
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_repositories__["a" /* MasterRepo */]])
], OneLakhAbovePURCHASEreportComponent);



/***/ }),

/***/ 1550:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_material__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_repositories__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_services_permission_authService_service__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Reports_components_ReportMain_ReportMain_service__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__common_services_alert_alert_service__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__angular_router__ = __webpack_require__(6);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return VoucherRegister; });









var VoucherRegister = (function () {
    function VoucherRegister(masterService, _authService, _ActivatedRoute, _reportFilterService, alertService, arouter, dialogref, data) {
        var _this = this;
        this.masterService = masterService;
        this._authService = _authService;
        this._ActivatedRoute = _ActivatedRoute;
        this._reportFilterService = _reportFilterService;
        this.alertService = alertService;
        this.arouter = arouter;
        this.dialogref = dialogref;
        this.data = data;
        // ReportParameters: any = <any>{};
        this.division = [];
        this.CostcenterList = [];
        this.voucherTypeList = [];
        this.costlists = [];
        this.userList = [];
        this.allAccountList = [];
        this.gridACListPartyPopupSettings = new __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.instanceWiseRepName = 'Voucher Register Report';
        this.gridPopupSettingsForAccountList = new __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__["b" /* GenericPopUpSettings */]();
        this.reportdataEmit = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.dropListItem = function (keyword) {
            return new __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__["Observable"](function (observer) {
                _this.masterService.getAllAccountList().map(function (data) {
                    _this.result = data.result;
                    return _this.result.filter(function (ac) { return ac.ACNAME.toUpperCase().indexOf(keyword.toUpperCase()) > -1; });
                }).subscribe(function (res) { observer.next(res); });
            }).share();
        };
        //----------Default values on load
        this.getVoucherType();
        this.getCostCenter();
        this.getuserList();
        this.getAllAcccountList();
        this.userProfile = this._authService.getUserProfile();
        // this._reportFilterService.VoucherRegisterObj.REPORTMODEVR = '0';
        this.gridACListPartyPopupSettings = {
            title: "Accounts",
            apiEndpoints: "/getAccountPagedListByMapId/Master/ALL/",
            defaultFilterIndex: 1,
            columns: [
                {
                    key: "ACCODE",
                    title: "AC CODE",
                    hidden: false,
                    noSearch: false
                },
                {
                    key: "ACNAME",
                    title: "A/C NAME",
                    hidden: false,
                    noSearch: false
                }
            ]
        };
        this.division = [];
        //let data: Array<IDivision> = [];
        if (this.masterService.userSetting.userwisedivision == 1) {
            this.masterService.getDivisionFromRightPrivelege().subscribe(function (res) {
                if (res.status == 'ok') {
                    _this.division = res.result;
                }
            });
        }
        else {
            this.masterService.getAllDivisions()
                .subscribe(function (res) {
                //////console.log("div" + JSON.stringify(res));
                _this.division.push(res);
            }, function (error) {
                _this.masterService.resolveError(error, "divisions - getDivisions");
            });
        }
        // this.masterService.getAccDivList();
    }
    VoucherRegister.prototype.ngOnInit = function () {
        var _this = this;
        this._ActivatedRoute.queryParams.subscribe(function (params) {
            if (_this._reportFilterService.VoucherRegisterObj.assignPrevioiusDate != true) {
                _this.masterService.getAccDivList();
                _this._reportFilterService.VoucherRegisterObj.VoucherRegister_DATE1 = _this.masterService.PhiscalObj.BeginDate.split('T')[0];
                if (_this.masterService.userProfile.CompanyInfo.ActualFY == _this.masterService.PhiscalObj.PhiscalID) {
                    _this._reportFilterService.VoucherRegisterObj.VoucherRegister_DATE2 = new Date().toJSON().split('T')[0];
                    _this.changeEndDate(_this._reportFilterService.VoucherRegisterObj.VoucherRegister_DATE2, "AD");
                }
                else {
                    _this._reportFilterService.VoucherRegisterObj.VoucherRegister_DATE2 = _this.masterService.PhiscalObj.EndDate.split('T')[0];
                    _this.changeEndDate(_this._reportFilterService.VoucherRegisterObj.VoucherRegister_DATE2, "AD");
                }
                // this._reportFilterService.VoucherRegisterObj.VoucherRegister_DATE2 = new Date().toJSON().split('T')[0];
                // this._reportFilterService.VoucherRegisterObj.VoucherRegister_DIV=this.masterService.userProfile.CompanyInfo.INITIAL;
                _this.masterService.viewDivision.subscribe(function () {
                    if (_this.masterService.userSetting.userwisedivision == 0 || _this.masterService.showAll == true) {
                        _this._reportFilterService.VoucherRegisterObj.VoucherRegister_DIV = '%';
                    }
                    else {
                        if (_this.masterService.userSetting.userwisedivision == 1 && _this.division.length == 1) {
                            _this._reportFilterService.VoucherRegisterObj.VoucherRegister_DIV = _this.division[0].INITIAL;
                        }
                        else {
                            _this._reportFilterService.VoucherRegisterObj.VoucherRegister_DIV = _this.masterService.userProfile.CompanyInfo.INITIAL;
                        }
                    }
                });
                _this._reportFilterService.VoucherRegisterObj.VTYPE = "%";
                _this._reportFilterService.VoucherRegisterObj.REPORT_TYPE = '1';
                _this._reportFilterService.VoucherRegisterObj.REPORTMODEVR = '0';
                _this._reportFilterService.VoucherRegisterObj.VoucherRegister_MultipleVoucher = [];
            }
            if (params.instancename) {
                // ////console.log("@@[voucher reg Report0]",params.instancename,this._reportFilterService.reportDataStore[params.instancename].param.reportparam)
                _this._reportFilterService.VoucherRegisterObj.VoucherRegister_DATE1 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE1;
                _this._reportFilterService.VoucherRegisterObj.VoucherRegister_DATE2 = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DATE2;
                _this._reportFilterService.VoucherRegisterObj.VoucherRegister_DIV = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.DIV;
                _this._reportFilterService.VoucherRegisterObj.CCENTER = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.CostCenter;
                _this._reportFilterService.VoucherRegisterObj.VoucherRegister_ACID = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.ACID;
                _this._reportFilterService.VoucherRegisterObj.VoucherRegister_ACCNAME = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.ACNAME;
                _this._reportFilterService.VoucherRegisterObj.FROM_VNO = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.FROM_VNO;
                _this._reportFilterService.VoucherRegisterObj.REPORTMODEVR = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.REPORT_MODE;
                _this._reportFilterService.VoucherRegisterObj.REPORT_TYPE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.REPORT_TYPE;
                _this._reportFilterService.VoucherRegisterObj.TO_VNO = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.TO_VNO;
                _this._reportFilterService.VoucherRegisterObj.USER = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.USER;
                _this._reportFilterService.VoucherRegisterObj.VTYPE = _this._reportFilterService.reportDataStore[params.instancename].param.reportparam.VTYPE;
            }
        });
        this.changeEntryDate(this._reportFilterService.VoucherRegisterObj.VoucherRegister_DATE1, "AD");
        this.changeEndDate(this._reportFilterService.VoucherRegisterObj.VoucherRegister_DATE2, "AD");
        if (this._reportFilterService.VoucherRegisterObj.VoucherRegister_MultipleVoucher.length > 0) {
            this.showVoucherTable = true;
        }
    };
    VoucherRegister.prototype.changeEntryDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.VoucherRegisterObj.VoucherRegister_BSDATE1 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_1);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.VoucherRegisterObj.VoucherRegister_DATE1 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            //  this._reportFilterService.VoucherRegisterObj.VoucherRegister_DATE1 = this.masterService.toBSDate(value);
        }
    };
    VoucherRegister.prototype.changeEndDate = function (value, format) {
        var adbs = __webpack_require__(19);
        if (format == "AD") {
            var adDate = (value.replace("-", "/")).replace("-", "/");
            var bsDate = adbs.ad2bs(adDate);
            this._reportFilterService.VoucherRegisterObj.VoucherRegister_BSDATE2 = this.masterService.toBSDate(value);
        }
        else if (format == "BS") {
            var datearr = value.split('/');
            var bsDate_2 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
            // var bsDate = (value.replace("-", "/")).replace("-", "/");
            var adDate = adbs.bs2ad(bsDate_2);
            var Engdate = this.masterService.toADDate(value);
            var Validatedata = this.masterService.ValidateNepaliDate(Engdate);
            if (Validatedata == true) {
                var bsDate1 = datearr[2] + "/" + datearr[1] + "/" + datearr[0];
                var adDate1 = adbs.bs2ad(bsDate1);
                this._reportFilterService.VoucherRegisterObj.VoucherRegister_DATE2 = this.masterService.toADDate(value);
            }
            else {
                this.alertService.error("Cannot Change the date");
                return;
            }
            // this._reportFilterService.VoucherRegisterObj.VoucherRegister_DATE2 = this.masterService.toBSDate(value);
        }
    };
    VoucherRegister.prototype.onload = function () {
        if (this._reportFilterService.VoucherRegisterObj.REPORTMODEVR == 1 && (this._reportFilterService.VoucherRegisterObj.FROM_VNO > this._reportFilterService.VoucherRegisterObj.TO_VNO)) {
            this.alertService.info("Starting Voucher No is Greater Than Ending Voucher No!");
            return;
        }
        else {
            this.DialogClosedResult("ok");
        }
    };
    VoucherRegister.prototype.getVoucherType = function () {
        var _this = this;
        this.masterService.getAllVoucherType().subscribe(function (res) {
            // ////console.log("vouchertyperes",res);
            _this.voucherTypeList.push(res);
        });
    };
    VoucherRegister.prototype.getAllAcccountList = function () {
        var _this = this;
        this.masterService.getAllAccountList().subscribe(function (res) {
            ////console.log("accres",res);
            _this.allAccountList = res.result;
        });
    };
    VoucherRegister.prototype.getCostCenter = function () {
        var _this = this;
        this.masterService.getAllNEWCostCenter().subscribe(function (res) {
            if (res) {
                _this.costlists = res.result;
            }
        }, function (error) {
            _this.costlists = [];
        });
    };
    VoucherRegister.prototype.getuserList = function () {
        var _this = this;
        this.masterService.getUserList().subscribe(function (res) {
            ////console.log("res",res);
            _this.userList = res;
        });
    };
    VoucherRegister.prototype.closeReportBox = function () {
        this.DialogClosedResult("Error!");
    };
    VoucherRegister.prototype.OnVoucherSelect = function () {
        var _this = this;
        this.showVoucherTable = true;
        if (this._reportFilterService.VoucherRegisterObj.VTYPE == 'All' || this._reportFilterService.VoucherRegisterObj.VTYPE == '%') {
            this.showVoucherTable = false;
            this._reportFilterService.VoucherRegisterObj.VoucherRegister_MultipleVoucher = [];
        }
        var vouchername = this.voucherTypeList.filter(function (x) { return x.VOUCHER_ID == _this._reportFilterService.VoucherRegisterObj.VTYPE; });
        console.log("@@vouchername", vouchername);
        if (vouchername.length > 0) {
            this._reportFilterService.VoucherRegisterObj.VoucherRegister_VTYPENAME = vouchername[0].VOUCHER_NAME;
        }
    };
    VoucherRegister.prototype.addVoucherList = function () {
        var _this = this;
        var selectACList = this._reportFilterService.VoucherRegisterObj.VoucherRegister_MultipleVoucher.filter(function (vcList) { return vcList.VOUCHER_ID == _this._reportFilterService.VoucherRegisterObj.VTYPE; });
        console.log('selectdAclist', selectACList);
        if (this._reportFilterService.VoucherRegisterObj.VTYPE === "" ||
            this._reportFilterService.VoucherRegisterObj.VTYPE === null ||
            this._reportFilterService.VoucherRegisterObj.VTYPE === undefined) {
            return;
        }
        if (selectACList.length === 0) {
            this._reportFilterService.VoucherRegisterObj.VoucherRegister_MultipleVoucher.push({ VOUCHER_ID: this._reportFilterService.VoucherRegisterObj.VTYPE, VOUCHER_NAME: this._reportFilterService.VoucherRegisterObj.VoucherRegister_VTYPENAME });
        }
    };
    VoucherRegister.prototype.deleteVoucher = function (index) {
        this._reportFilterService.VoucherRegisterObj.VoucherRegister_MultipleVoucher.splice(index, 1);
        this._reportFilterService.SelectedVouchers = '';
    };
    VoucherRegister.prototype.onClikcAccountEnter = function (event) {
        this.genericGridACListParty.show();
    };
    VoucherRegister.prototype.onEnterAcnameChange = function (event) {
    };
    VoucherRegister.prototype.itemChanged = function (value) {
        if (typeof (value) === "object") {
            this._reportFilterService.VoucherRegisterObj.VoucherRegister_ACCNAME = value.ACNAME;
            this._reportFilterService.VoucherRegisterObj.VoucherRegister_ACID = value.ACID;
        }
    };
    VoucherRegister.prototype.DialogClosedResult = function (res) {
        var _this = this;
        var multipleVouchers = [];
        // let SelectedGroupACC = '';
        this._reportFilterService.SelectedVouchers = '';
        if (this._reportFilterService.VoucherRegisterObj.VoucherRegister_MultipleVoucher === undefined || this._reportFilterService.VoucherRegisterObj.VoucherRegister_MultipleVoucher === null || (this._reportFilterService.VoucherRegisterObj.VoucherRegister_MultipleVoucher && this._reportFilterService.VoucherRegisterObj.VoucherRegister_MultipleVoucher.length == 0)) {
            this._reportFilterService.SelectedVouchers = this._reportFilterService.VoucherRegisterObj.VTYPE;
        }
        else {
            if (this._reportFilterService.VoucherRegisterObj.VoucherRegister_MultipleVoucher.length != 0) {
                this._reportFilterService.VoucherRegisterObj.VoucherRegister_MultipleVoucher.forEach(function (vcList) {
                    multipleVouchers.push(vcList.VOUCHER_ID);
                });
                this._reportFilterService.SelectedVouchers += multipleVouchers + ",";
            }
            else {
                this._reportFilterService.SelectedVouchers = '%';
            }
        }
        this._reportFilterService.VoucherRegisterObj.VoucherRegister_DIV = (this._reportFilterService.VoucherRegisterObj.VoucherRegister_DIV == null || this._reportFilterService.VoucherRegisterObj.VoucherRegister_DIV == "") ? "%" : this._reportFilterService.VoucherRegisterObj.VoucherRegister_DIV;
        var multipleReportFormateName = '';
        if (this._reportFilterService.VoucherRegisterObj.REPORT_TYPE == 0) {
            multipleReportFormateName = 'vat register report';
        }
        else {
            multipleReportFormateName = 'vat register report_1';
        }
        if (this._reportFilterService.VoucherRegisterObj.FROM_VNO == null ||
            this._reportFilterService.VoucherRegisterObj.FROM_VNO == "" ||
            this._reportFilterService.VoucherRegisterObj.FROM_VNO === undefined) {
            this._reportFilterService.VoucherRegisterObj.FROM_VNO = 0;
        }
        if (this._reportFilterService.VoucherRegisterObj.TO_VNO == null ||
            this._reportFilterService.VoucherRegisterObj.TO_VNO == "" ||
            this._reportFilterService.VoucherRegisterObj.TO_VNO === undefined) {
            this._reportFilterService.VoucherRegisterObj.TO_VNO = 0;
        }
        if (this._reportFilterService.VoucherRegisterObj.REPORTMODEVR == 0) {
            this._reportFilterService.VoucherRegisterObj.FROM_VNO = 0;
            this._reportFilterService.VoucherRegisterObj.TO_VNO = 0;
        }
        if (this._reportFilterService.VoucherRegisterObj.VoucherRegister_DIV && this._reportFilterService.VoucherRegisterObj.VoucherRegister_DIV == '%') {
            this._reportFilterService.VoucherRegisterObj.VoucherRegister_DIVISIONNAME = 'All';
        }
        else if (this._reportFilterService.VoucherRegisterObj.VoucherRegister_DIV && this._reportFilterService.VoucherRegisterObj.VoucherRegister_DIV != '%') {
            var abc = this.division.filter(function (x) { return x.INITIAL == _this._reportFilterService.VoucherRegisterObj.VoucherRegister_DIV; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.VoucherRegisterObj.VoucherRegister_DIVISIONNAME = abc[0].NAME;
            }
            else {
                this._reportFilterService.VoucherRegisterObj.VoucherRegister_DIVISIONNAME = '';
            }
        }
        else {
            this._reportFilterService.VoucherRegisterObj.VoucherRegister_DIVISIONNAME = '';
        }
        if (this._reportFilterService.VoucherRegisterObj.CCENTER && this._reportFilterService.VoucherRegisterObj.CCENTER == '%') {
            this._reportFilterService.VoucherRegisterObj.VoucherRegister_COSTCENTERDISPLAYNAME = 'All';
        }
        else if (this._reportFilterService.VoucherRegisterObj.CCENTER != '%') {
            var abc = this.CostcenterList.filter(function (x) { return x.CCID == _this._reportFilterService.VoucherRegisterObj.CCENTER; });
            if (abc && abc.length > 0 && abc[0]) {
                this._reportFilterService.VoucherRegisterObj.VoucherRegister_COSTCENTERDISPLAYNAME = abc[0].COSTCENTERNAME;
            }
            else {
                this._reportFilterService.VoucherRegisterObj.VoucherRegister_COSTCENTERDISPLAYNAME = '';
            }
        }
        else {
            this._reportFilterService.VoucherRegisterObj.VoucherRegister_COSTCENTERDISPLAYNAME = '';
        }
        if (this._reportFilterService.VoucherRegisterObj.VTYPE && this._reportFilterService.VoucherRegisterObj.VTYPE == '%') {
            this._reportFilterService.VoucherRegisterObj.VoucherRegister_VTYPEDISPLAYNAME = 'All';
        }
        else if (this._reportFilterService.VoucherRegisterObj.VTYPE && this._reportFilterService.VoucherRegisterObj.VTYPE != '%') {
            if (this._reportFilterService.VoucherRegisterObj.VoucherRegister_MultipleVoucher.length == 0) {
                var abc = this.voucherTypeList.filter(function (x) { return x.VOUCHER_ID == _this._reportFilterService.VoucherRegisterObj.VTYPE; });
                if (abc && abc.length > 0 && abc[0]) {
                    this._reportFilterService.VoucherRegisterObj.VoucherRegister_VTYPEDISPLAYNAME = abc[0].VOUCHER_NAME;
                }
                else {
                    this._reportFilterService.VoucherRegisterObj.VoucherRegister_VTYPEDISPLAYNAME = '';
                }
            }
            else {
                this._reportFilterService.VoucherRegisterObj.VoucherRegister_VTYPEDISPLAYNAME = '';
            }
        }
        else {
            this._reportFilterService.VoucherRegisterObj.VoucherRegister_VTYPEDISPLAYNAME = '';
        }
        if (res == "ok") {
            this._reportFilterService.VoucherRegisterObj.assignPrevioiusDate = true;
            var routepaths = this.arouter.url.split('/');
            var activeurlpath2 = void 0;
            if (routepaths && routepaths.length) {
                activeurlpath2 = routepaths[routepaths.length - 1];
            }
            if (this._reportFilterService.VoucherReg_loadedTimes == 0) {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Voucher Register Report',
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.VoucherReg_loadedTimes,
                });
            }
            else {
                this._reportFilterService.previouslyLoadedReportList.push({ reportname: 'Voucher Register Report' + '_' + this._reportFilterService.VoucherReg_loadedTimes,
                    activeurlpath: this.arouter.url,
                    activerurlpath2: activeurlpath2,
                    instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.VoucherReg_loadedTimes,
                });
            }
        }
        if (this._reportFilterService.VoucherRegisterObj.VoucherRegister_ACCNAME == '') {
            this._reportFilterService.VoucherRegisterObj.VoucherRegister_ACID = '%';
        }
        this.reportdataEmit.emit({
            status: res, data: {
                reportname: multipleReportFormateName,
                REPORTDISPLAYNAME: 'Voucher Register',
                instanceWiseRepName: this.instanceWiseRepName + this._reportFilterService.VoucherReg_loadedTimes,
                reportparam: {
                    VTYPEDISPLAYNAME: this._reportFilterService.VoucherRegisterObj.VoucherRegister_VTYPEDISPLAYNAME ? this._reportFilterService.VoucherRegisterObj.VoucherRegister_VTYPEDISPLAYNAME : '',
                    DATE1: this._reportFilterService.VoucherRegisterObj.VoucherRegister_DATE1,
                    DATE2: this._reportFilterService.VoucherRegisterObj.VoucherRegister_DATE2,
                    BSDATE1: this._reportFilterService.VoucherRegisterObj.VoucherRegister_BSDATE1,
                    BSDATE2: this._reportFilterService.VoucherRegisterObj.VoucherRegister_BSDATE2,
                    DIV: this._reportFilterService.VoucherRegisterObj.VoucherRegister_DIV,
                    PHISCALID: this.masterService.PhiscalObj.PhiscalID,
                    COMID: this.masterService.userProfile.CompanyInfo.COMPANYID,
                    CostCenter: this._reportFilterService.VoucherRegisterObj.CCENTER,
                    REPORT_MODE: this._reportFilterService.VoucherRegisterObj.REPORTMODEVR,
                    FROM_VNO: this._reportFilterService.VoucherRegisterObj.FROM_VNO,
                    TO_VNO: this._reportFilterService.VoucherRegisterObj.TO_VNO,
                    VTYPE: this._reportFilterService.SelectedVouchers ? this._reportFilterService.SelectedVouchers : '%',
                    // VTYPE : this._reportFilterService.VoucherRegisterObj.VTYPE?this._reportFilterService.VoucherRegisterObj.VTYPE:'%',
                    REPORT_TYPE: this._reportFilterService.VoucherRegisterObj.REPORT_TYPE,
                    USER: this._reportFilterService.VoucherRegisterObj.USER,
                    ACID: this._reportFilterService.VoucherRegisterObj.VoucherRegister_ACID,
                    ACNAME: this._reportFilterService.VoucherRegisterObj.VoucherRegister_ACCNAME,
                    DIVISIONNAME: this._reportFilterService.VoucherRegisterObj.VoucherRegister_DIVISIONNAME ? this._reportFilterService.VoucherRegisterObj.VoucherRegister_DIVISIONNAME : '',
                    COSTCENTERDISPLAYNAME: this._reportFilterService.VoucherRegisterObj.VoucherRegister_COSTCENTERDISPLAYNAME ? this._reportFilterService.VoucherRegisterObj.VoucherRegister_COSTCENTERDISPLAYNAME : '',
                    ACCOUNTDISPLAYNAME: this._reportFilterService.VoucherRegisterObj.VoucherRegister_ACCNAME ? this._reportFilterService.VoucherRegisterObj.VoucherRegister_ACCNAME : '',
                    USERDISPLAYNAME: this._reportFilterService.VoucherRegisterObj.USER ? this._reportFilterService.VoucherRegisterObj.USER : ''
                }
            }
        });
        if (res == "ok") {
            this._reportFilterService.VoucherReg_loadedTimes = this._reportFilterService.VoucherReg_loadedTimes + 1;
        }
    };
    VoucherRegister.prototype.AccountEnterClicked = function () {
        this.gridPopupSettingsForAccountList = this.masterService.getGenericGridPopUpSettings('AllAcountList');
        this.genericGridAccountList.show();
    };
    VoucherRegister.prototype.dblClickAccountSelect = function (account) {
        this._reportFilterService.VoucherRegisterObj.VoucherRegister_ACID = account.ACID;
        this._reportFilterService.VoucherRegisterObj.VoucherRegister_ACCNAME = account.ACNAME;
    };
    return VoucherRegister;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridACListParty"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], VoucherRegister.prototype, "genericGridACListParty", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("genericGridAccountList"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_6__common_popupLists_generic_grid_generic_popup_grid_component__["c" /* GenericPopUpComponent */])
], VoucherRegister.prototype, "genericGridAccountList", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], VoucherRegister.prototype, "reportdataEmit", void 0);
VoucherRegister = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'voucher-registor-dialog',
        template: __webpack_require__(1784),
        styles: [__webpack_require__(1163), __webpack_require__(120)],
    }),
    __param(7, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_material__["b" /* MD_DIALOG_DATA */])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_3__common_repositories__["a" /* MasterRepo */], __WEBPACK_IMPORTED_MODULE_4__common_services_permission_authService_service__["a" /* AuthService */], __WEBPACK_IMPORTED_MODULE_8__angular_router__["ActivatedRoute"],
        __WEBPACK_IMPORTED_MODULE_5__Reports_components_ReportMain_ReportMain_service__["a" /* ReportMainService */], __WEBPACK_IMPORTED_MODULE_7__common_services_alert_alert_service__["a" /* AlertService */], __WEBPACK_IMPORTED_MODULE_8__angular_router__["Router"],
        __WEBPACK_IMPORTED_MODULE_1__angular_material__["c" /* MdDialogRef */], Object])
], VoucherRegister);



/***/ }),

/***/ 1551:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_router__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__ = __webpack_require__(90);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Reports_component__ = __webpack_require__(1376);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__ = __webpack_require__(1377);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return routing; });




var routes = [
    {
        path: '',
        component: __WEBPACK_IMPORTED_MODULE_2__Reports_component__["a" /* ReportsComponent */],
        children: [
            { path: 'reportmain', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'accountpayablereport', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'accountreceivablereport', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'gstsalessummary', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'gstpurchasesummary', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'agingpayable', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'agingreceivable', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'purchasebookreport', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'cashbookreport', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'salesbookreport', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'journalbook', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'duevoucherreport', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'debtorsreport', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'creditorsreport', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'PartyLedger', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'debtorsagingreport', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'creditorsagingreport', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'debtorsoutstandingreport', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'creditorsoutstandingreport', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'summaryledgerreport', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'accountledgerreport', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'summarypartyledger', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'partyledgerreport', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'voucher-regeister-report', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'cash-bank-book-report', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'day-book-report', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'sub-ledger-report', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'sub-ledger-report-acbase', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'trial-balance-report', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            // { path: 'actual-vs-budget-report',component: ReportMain, canActivate:[CanActivateTeam] },
            { path: 'additionalcost-itemwise-report', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'additionalcost-voucherwise-report', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'salesreturnsummary-report', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'salesreturnsummaryretailer-report', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'salesreturn-reportdetail', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'stockabc-analysis-reportdms', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'stockvaluation-reportdms', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'stockledger-reportdms', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'stocksummary-reportdms', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'currentstock-warehousewise-reportdms', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'consolidated-trialbalance-report', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'actual-vs-budget-report', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'profit-loss-report', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'balance-sheet-report', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'tds-report', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'consolidated-balance-sheet-report', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'consolidated-profit-loss-report', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'bill-tracking-report', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'creditorsbill-tracking-report', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'postdated-chequevoucher-report', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'monthly-sales-payment-report', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'local-purchase-cost-allocation-report', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'incometax-depreciation-report', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'companynorms-depreciation-report', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'faarasset-depreciation-report', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
            { path: 'cash-collection-voucher-report', component: __WEBPACK_IMPORTED_MODULE_3__components_ReportMain_ReportMain__["a" /* ReportMain */], canActivate: [__WEBPACK_IMPORTED_MODULE_1__common_services_permission_guard_service__["a" /* CanActivateTeam */]] },
        ]
    }
];
var routing = __WEBPACK_IMPORTED_MODULE_0__angular_router__["RouterModule"].forChild(routes);


/***/ }),

/***/ 1552:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_util__ = __webpack_require__(1458);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_util___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_util__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__context_menu_data__ = __webpack_require__(1378);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ContextmenuComponent; });



var ContextmenuComponent = ContextmenuComponent_1 = (function () {
    function ContextmenuComponent(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.containerPosY = 0;
        this.containerPosX = 0;
        this.isArrowUpward = true;
    }
    ContextmenuComponent.prototype.ngOnInit = function () {
        this.changeDetectorRef.detectChanges();
        this.prepareContextMenu();
    };
    ContextmenuComponent.prototype.hideContextMenuWithTimer = function (miliseconds) {
        var _this = this;
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_util__["isNullOrUndefined"])(miliseconds)) {
            miliseconds = ContextmenuComponent_1.MOUSE_OUT_TIMEOUT_MS;
        }
        this.autoHideTimer = setTimeout(function () {
            _this.data.show = false;
        }, miliseconds);
    };
    ContextmenuComponent.prototype.clearContextMenuHideTimer = function () {
        clearTimeout(this.autoHideTimer);
    };
    ContextmenuComponent.prototype.isValueNullOrUndefined = function (value) {
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_util__["isNullOrUndefined"])(value)) {
            return true;
        }
        return false;
    };
    ContextmenuComponent.prototype.callSubscriber = function (item) {
        item.subject.next(item);
    };
    ContextmenuComponent.prototype.prepareContextMenu = function () {
        try {
            this.validateData();
            this.buildDisplayPositions();
        }
        catch (e) {
            this.hideContextMenuWithTimer(0);
            console.error("unable to prepareContextMenu the context menu due to following exception/error: " + e);
        }
        finally {
            if (this.data.show) {
                this.hideContextMenuWithTimer(ContextmenuComponent_1.IDLE_TIMEOUT_MS);
            }
        }
    };
    ContextmenuComponent.prototype.buildDisplayPositions = function () {
        var containerElement = this.container.nativeElement;
        var height = 0;
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_util__["isNullOrUndefined"])(containerElement)) {
            height = containerElement.offsetHeight;
        }
        if (height > 0) {
            this.buildTopPosition(height);
            this.buildLeftPosition();
        }
    };
    ContextmenuComponent.prototype.validateData = function () {
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_util__["isNullOrUndefined"])(this.data)) {
            throw new TypeError("context menu info can not be null or undefined");
        }
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_util__["isNullOrUndefined"])(this.data.mouseEvent)) {
            throw new TypeError("context menu should be associated with mouseEvent e.g. mouse left click");
        }
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_util__["isNullOrUndefined"])(this.data.menuItems)) {
            throw new TypeError("action item is missing");
        }
    };
    ContextmenuComponent.prototype.buildLeftPosition = function () {
        var clickedPosX = this.data.mouseEvent.clientX;
        this.containerPosX = clickedPosX;
    };
    ContextmenuComponent.prototype.buildTopPosition = function (contextMenuHeight) {
        var clickedElementHeight = this.data.mouseEvent.currentTarget.offsetHeight;
        var pageHeight = window.innerHeight;
        var clickedPosY = this.data.mouseEvent.clientY;
        var sum = contextMenuHeight + clickedPosY + clickedElementHeight;
        var top = -10;
        if (sum < pageHeight) {
            top = clickedPosY + clickedElementHeight;
        }
        else {
            top = clickedPosY - (contextMenuHeight + clickedElementHeight);
            this.isArrowUpward = false;
        }
        if (top < 0) {
            top = 0;
        }
        this.containerPosY = top;
    };
    return ContextmenuComponent;
}());
ContextmenuComponent.IDLE_TIMEOUT_MS = 20000;
ContextmenuComponent.MOUSE_OUT_TIMEOUT_MS = 20000;
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_2__context_menu_data__["a" /* ContextMenuView */])
], ContextmenuComponent.prototype, "data", void 0);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])("modalcontainer"),
    __metadata("design:type", __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"])
], ContextmenuComponent.prototype, "container", void 0);
ContextmenuComponent = ContextmenuComponent_1 = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: "app-contextmenu",
        template: __webpack_require__(1786),
        styles: [__webpack_require__(1682)]
    }),
    __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectorRef"])),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectorRef"]])
], ContextmenuComponent);

var ContextmenuComponent_1;


/***/ }),

/***/ 1662:
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),

/***/ 1682:
/***/ (function(module, exports) {

module.exports = "li {\n  list-style: none; }\n\n.modal-container {\n  left: 40px;\n  position: absolute;\n  z-index: 100000; }\n  .modal-container .modal-tip {\n    content: '';\n    display: block;\n    position: absolute;\n    left: 20px;\n    width: 8px;\n    height: 4px; }\n  .modal-container .modal-tip-upward-arrow {\n    top: -4px; }\n  .modal-container .modal-tip-downward-arrow {\n    bottom: -4px;\n    top: auto; }\n  .modal-container .left-container {\n    float: left;\n    padding: 15px 15px;\n    min-width: 110px;\n    margin-right: 5px;\n    margin-bottom: 0;\n    box-shadow: 1px 1px 2px #999999;\n    border: 1px solid #999999;\n    background-color: #FFFFFF; }\n    .modal-container .left-container li {\n      padding: 3px 0; }\n"

/***/ }),

/***/ 1718:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .action-btn {\r\n        width: 80%;\r\n        height: 80%;\r\n        display: block;\r\n        margin: 0 auto;\r\n        background-color: inherit;\r\n        border: none;\r\n    }\r\n    .input-text{\r\n        width : 100%;\r\n        /* height: 30px !important; */\r\n        font-weight: bold;\r\n    }\r\n    .td-class{\r\n        border: none !important;\r\n    }\r\n    .date-input{\r\n        width: 93%;\r\n        font-size: 12px !important;\r\n        height: 30px !important;\r\n    }\r\n      @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .report-height{\r\n        height:52vh !important; \r\n        overflow:auto;\r\n    }\r\n    }\r\n    @media screen and (max-width:767px) {\r\n        .smallBoldLabel{\r\n            width: auto !important;\r\n        }\r\n          .report-container{\r\n           width: 85% !important;\r\n    }\r\n        \r\n    }\r\n</style>\r\n<div class=\"container report-container\">\r\n    <div class=\"row\">\r\n        <!-- Filter Starts -->\r\n        <div class=\"col-12 col-md-12\">\r\n            <div style=\"background-color : #ffffff; width: 100%;\">\r\n                <div class=\"row\">\r\n                    <div class=\"modal-header\" style=\"border:0px;\">\r\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\"\r\n                            (click)=\"closeReportBox()\">&times;</button>\r\n                        <h4 class=\"modal-title\" style=\"padding-left: 3%;\">{{this.reportNameFormatWise}}</h4>\r\n                    </div>\r\n                    <div class=\"col-md-12 report-height\" style=\"padding-top: 2%; height:71vh; overflow:auto; \">\r\n                        <div class=\"col-md-6\">\r\n                            <fieldset>\r\n                                <legend style=\"font-size:11px;font-weight: bold; width:auto;margin-bottom: -4px;\">Date Range Selection :</legend>\r\n                                <table>\r\n                                    <tr>\r\n                                        <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                                        <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td class=\"td-class\">\r\n                                                <input type=\"date\" class=\"date-input form-control\"\r\n                                                    placeholder=\"Year Start Date\"\r\n                                                    [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.AccLedger_DATE1\"\r\n                                                    (change)=\"changeEntryDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                                        </td>\r\n                                        <td class=\"td-class\">\r\n                                                <input type=\"date\" class=\"date-input form-control\"\r\n                                                    placeholder=\"Year Start Date\"\r\n                                                    [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.AccLedger_DATE2\"\r\n                                                    (change)=\"changeEndDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td class=\"td-class\">\r\n                                          <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                                            (change)=\"changeEntryDate($event.detail.value,'BS')\"\r\n                                            [label]=\"'From'\"\r\n                                            [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.AccLedger_BSDATE1\">\r\n                                          </nepali-date-picker>\r\n                                                <!-- <input id=\"nepaliDate\"\r\n                                                    style=\"text-align:center;\"\r\n                                                    class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                                    [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.AccLedger_BSDATE1\" type=\"text\"\r\n                                                    (change)=\"changeEntryDate($event.target.value,'BS')\"\r\n                                                    placeholder=\"yyyy-mm-dd\" />                             -->\r\n                                        </td>\r\n                                        <td class=\"td-class\">\r\n                                          <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDateTo'\"\r\n                                            (change)=\"changeEndDate($event.detail.value,'BS')\"\r\n                                            [label]=\"'To'\"\r\n                                            [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.AccLedger_BSDATE2\">\r\n                                          </nepali-date-picker>\r\n                                                <!-- <input id=\"nepaliDate\"\r\n                                                style=\"text-align:center;\"\r\n                                                    class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                                    [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.AccLedger_BSDATE2\" type=\"text\"\r\n                                                    (change)=\"changeEndDate($event.target.value,'BS')\"\r\n                                                    placeholder=\"yyyy-mm-dd\" /> -->\r\n                                        </td>\r\n                                    </tr>\r\n                                </table>\r\n                            </fieldset>\r\n\r\n                            <fieldset>\r\n                                <legend>Division Selection:</legend>\r\n                                <select [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.AccLedger_DIV\" style=\"height: 30px !important;\"\r\n                                class=\"form-control input-text\" >\r\n                                    <option value=\"%\"  *ngIf=\"masterService.userSetting.userwisedivision==0 || masterService.showAll\">ALL</option>\r\n                                    <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                                        {{ div.NAME }}\r\n                                    </option>\r\n                                </select>\r\n                            </fieldset>\r\n                            <fieldset *ngIf=\"_reportFilterService.AccoutLedgerObj.AccLedger_HIDECOSTCENTER == 0\" >\r\n                                <legend>Cost Center:</legend>\r\n                                <select [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.AccLedger_CostCenter\"\r\n                                style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                                    <option value=\"%\"> </option>\r\n                                    <option *ngFor=\"let i of CostcenterList\" value={{i.CCID}}>{{i.COSTCENTERNAME}}\r\n                                    </option>\r\n                                </select>\r\n                            </fieldset>\r\n\r\n                            <fieldset>\r\n                                <legend>Report Type:</legend>\r\n                                <label class=\"smallBoldLabel\" style=\"padding-right:15px;\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                                      [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.AccLedger_SUMMARYREPORT\" value=0 >&nbsp;Detail Ledger\r\n                                      Report</label>\r\n                                <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                                      [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.AccLedger_SUMMARYREPORT\" value=1 >&nbsp;Summary Ledger Report</label>\r\n                             </fieldset>\r\n\r\n                            <!-- <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n                                <label class=\"smallBoldLabel\">\r\n                                    <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.SHOWNDATE\">\r\n                                    Show BS Date In Report\r\n                                </label>\r\n                            </div> -->\r\n\r\n                            <!-- <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n                                <label class=\"smallBoldLabel\">\r\n                                    <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.IGNOREOPPOSITAC\">\r\n                                    Show Ledger Report in Summary\r\n                                </label>\r\n                            </div> -->\r\n                           <div style=\"display: flex; flex-wrap:wrap\">\r\n                                <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\" *ngIf=\"_reportFilterService.AccoutLedgerObj.AccLedger_SUMMARYREPORT== 0\">\r\n                                    <label class=\"smallBoldLabel\" style=\"width: 203px; margin-left: 4px;\">\r\n                                        <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.IGNOREOPPOSITAC\">\r\n                                        Hide Opposite A/C in Ledger Report\r\n                                    </label>\r\n                                </div>\r\n\r\n                                <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\" *ngIf=\"_reportFilterService.AccoutLedgerObj.AccLedger_SUMMARYREPORT==0\">\r\n                                    <label class=\"smallBoldLabel\" style=\"width: 210px;\">\r\n                                        <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.AccLedger_HIDENARATION\" style=\"margin-left: 5px;\"\r\n                                        (change)=\"$event.target.checked?(_reportFilterService.AccoutLedgerObj.AccLedger_HIDENARATION=1):(_reportFilterService.AccoutLedgerObj.AccLedger_HIDENARATION=0)\"\r\n                                        [checked]=\"_reportFilterService.AccoutLedgerObj.AccLedger_HIDENARATION == 1\">\r\n                                        Hide Narration In Ledger Report\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div style=\"display: flex; flex-wrap:wrap\">\r\n                                <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\" *ngIf=\"_reportFilterService.AccoutLedgerObj.AccLedger_SUMMARYREPORT== 1\">\r\n                                    <label class=\"smallBoldLabel\" style=\"width: 210px;\">\r\n                                        <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.AccLedger_HIDEVOUCHERTYPE\" style=\"margin-left: 5px\"\r\n                                        (change)=\"$event.target.checked?(_reportFilterService.AccoutLedgerObj.AccLedger_HIDEVOUCHERTYPE=1):(_reportFilterService.AccoutLedgerObj.AccLedger_HIDEVOUCHERTYPE=0)\"\r\n                                [checked]=\"_reportFilterService.AccoutLedgerObj.AccLedger_HIDEVOUCHERTYPE == 1\">\r\n                                        Hide Voucher Type in Ledger Report\r\n                                    </label>\r\n                                </div>\r\n\r\n                                <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n                                    <label class=\"smallBoldLabel\" style=\"width:203px; margin-left: 4px;\" *ngIf=\"_reportFilterService.AccoutLedgerObj.AccLedger_SUMMARYREPORT==0\">\r\n                                        <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.AccLedger_SHOWITEMDETAIL\"\r\n                                        (change)=\"$event.target.checked?(_reportFilterService.AccoutLedgerObj.AccLedger_SHOWITEMDETAIL=1):(_reportFilterService.AccoutLedgerObj.AccLedger_SHOWITEMDETAIL=0)\"\r\n                                [checked]=\"_reportFilterService.AccoutLedgerObj.AccLedger_SHOWITEMDETAIL == 1\" >\r\n                                        Show Item Detail Also\r\n                                    </label>\r\n                                </div>\r\n\r\n                                <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n                                    <label class=\"smallBoldLabel\" style=\"width:225px;\">\r\n                                        <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.AccLedger_INCLUDEPOSTDATE\" style=\"margin-left: 5px;\"\r\n                                        (change)=\"$event.target.checked?(_reportFilterService.AccoutLedgerObj.AccLedger_INCLUDEPOSTDATE=1):(_reportFilterService.AccoutLedgerObj.AccLedger_INCLUDEPOSTDATE=0)\"\r\n                                [checked]=\"_reportFilterService.AccoutLedgerObj.AccLedger_INCLUDEPOSTDATE == 1\" >\r\n                                        Include Post Dated Transaction Also\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                            <div>\r\n                                <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n                                    <label class=\"smallBoldLabel\" style=\"width:225px; margin-left:4px;\">\r\n                                        <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.AccLedger_HIDECOSTCENTER\"\r\n                                        (change)=\"$event.target.checked?(_reportFilterService.AccoutLedgerObj.AccLedger_HIDECOSTCENTER=1):(_reportFilterService.AccoutLedgerObj.AccLedger_HIDECOSTCENTER=0)\"\r\n                                [checked]=\"_reportFilterService.AccoutLedgerObj.AccLedger_HIDECOSTCENTER == 1\" >\r\n                                      Hide Cost Center\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n\r\n                            \r\n                        \r\n\r\n\r\n                        </div>\r\n                        <!-- The One With Tree Part-->\r\n                        <div class=\"col-md-6 filter-part\">\r\n                            <fieldset>\r\n                                <legend>Account Selection :</legend>\r\n                                <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\" [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.AccLedger_ACCNAME\"\r\n                                    placeholder=\"Press Enter or Tab for Account List\" (keydown.Tab)=\"AccountEnterClicked($event)\"\r\n                                    (keydown.enter)=\"AccountEnterClicked($event)\">\r\n                            </fieldset>\r\n\r\n                            <fieldset>\r\n                                <legend><label class=\"smallBoldLabel\">\r\n                                        <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.EnableCombineLedger\"\r\n                                            (change)=\"checkValueForCombine()\">\r\n                                        Show Combined Ledger</label></legend>\r\n                                <select [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.AccLedger_ReportType\"\r\n                                    style=\"height: 30px !important;\" (change)=\"checkValue()\" class=\"form-control input-text\" [disabled]=\"_reportFilterService.AccoutLedgerObj.EnableCombineLedger == false || _reportFilterService.AccoutLedgerObj.EnableCombineLedger === undefined\">\r\n                                    <option value=6>ALL</option>\r\n                                    <option value=2>Multi Ledger Wise</option>\r\n                                    <!-- <option value=1>Area Wise</option> -->\r\n                                    <option value=4>Cost Center Wise</option>\r\n                                    <option value=5>Account Group Wise</option>\r\n                                </select>\r\n                            </fieldset>\r\n\r\n                            <div *ngIf=\"showLedgerTable\">\r\n                                <fieldset>\r\n                                    <legend><label class=\"smallBoldLabel\">&nbsp;Ledger Wise</label></legend>\r\n                                    <div>\r\n                                        <div class=\"col-md-10\">\r\n                                            <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\" [disabled]=\"_reportFilterService.AccoutLedgerObj.EnableCombineLedger == false || _reportFilterService.AccoutLedgerObj.EnableCombineLedger ===undefined\" [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.multipleACNAME\"\r\n                                        placeholder=\"Press Enter or Tab for Account List\" (keydown.Tab)=\"MultipleAccountEnterClicked($event)\"\r\n                                        (keydown.enter)=\"MultipleAccountEnterClicked($event)\">\r\n\r\n                                        </div>\r\n                                        <div class=\"col-md-2\">\r\n                                            <button type=\"button\" class=\"btn btn-info\"\r\n                                                (click)=\"addAccountToList()\" [disabled]=\"_reportFilterService.AccoutLedgerObj.EnableCombineLedger == false || _reportFilterService.AccoutLedgerObj.EnableCombineLedger ===undefined\">Add</button>\r\n                                        </div>\r\n                                        <div class=\"col-md-12\">\r\n                                            <table style=\"height:175px;\">\r\n                                                <tr class=\"smallBoldLabel\">\r\n                                                    <th style=\"width:3px;font-weight: bold;\">S.No.</th>\r\n                                                    <th style=\"width:10px;font-weight: bold;\">Account</th>\r\n                                                    <th style=\"width:4px;font-weight: bold;\">Action</th>\r\n                                                </tr>\r\n                                                <tr *ngFor=\"let data of _reportFilterService.AccoutLedgerObj.AccLedger_multipleAccounts;let i = index\"\r\n                                                    class=\"smallBoldLabel\">\r\n                                                    <td style=\"width:3px;\">{{ i + 1 }}</td>\r\n                                                    <td style=\"width:10px;\">{{data.ACNAME}}</td>\r\n                                                    <td style=\"width:4px;\">\r\n                                                        <button type=\"button\" class=\"action-btn\"\r\n                                                            (click)=\"deleteAccount(i)\">Delete</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n                                        <label class=\"smallBoldLabel\">\r\n                                            <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.MERGEREPORT\" [disabled]=\"_reportFilterService.AccoutLedgerObj.EnableCombineLedger == false || _reportFilterService.AccoutLedgerObj.EnableCombineLedger ===undefined\">\r\n                                            Merge Combined Ledger\r\n                                        </label>\r\n                                    </div>\r\n                                </fieldset>\r\n                            </div>\r\n\r\n                            <div *ngIf=\"showAreaTable && showCombineLedgerList\">\r\n                                <area-list></area-list>\r\n                            </div>\r\n\r\n                            <div *ngIf=\"showCCtable\">\r\n                                <fieldset>\r\n                                    <legend><label class=\"smallBoldLabel\">&nbsp;Cost Center Wise</label></legend>\r\n                                    <div>\r\n                                        <div class=\"col-md-10\">\r\n                                            <select [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.CCENTER\"\r\n                                                style=\"height: 30px !important;\" class=\"form-control input-text\" [disabled]=\"_reportFilterService.AccoutLedgerObj.EnableCombineLedger == false || _reportFilterService.AccoutLedgerObj.EnableCombineLedger ===undefined\">\r\n                                                <option *ngFor=\"let i of CostcenterList\" [ngValue]=\"i\">\r\n                                                    {{i.COSTCENTERNAME}}\r\n                                                </option>\r\n                                            </select>\r\n                                        </div>\r\n                                        <div class=\"col-md-2\">\r\n                                            <button type=\"button\" class=\"btn btn-info\" *ngIf=\"showMultipleCC\"\r\n                                                (click)=\"addCostcenterToList()\" [disabled]=\"_reportFilterService.AccoutLedgerObj.EnableCombineLedger == false || _reportFilterService.AccoutLedgerObj.EnableCombineLedger ===undefined\">Add</button>\r\n                                        </div>\r\n                                        <div class=\"col-md-12\" *ngIf=\"showMultipleCC\">\r\n                                            <table style=\"height:150px;\">\r\n                                                <tr class=\"smallBoldLabel\">\r\n                                                    <th style=\"width:3px;font-weight: bold;\">S.No.</th>\r\n                                                    <th style=\"width:10px;font-weight: bold;\">Cost Center</th>\r\n                                                    <th style=\"width:4px;font-weight: bold;\">Action</th>\r\n                                                </tr>\r\n                                                <tr *ngFor=\"let data of _reportFilterService.AccoutLedgerObj.AccLedger_multipleCostcenter;let i = index\"\r\n                                                    class=\"smallBoldLabel\">\r\n                                                    <td style=\"width:3px;\">{{ i + 1 }}</td>\r\n                                                    <td style=\"width:10px;\">{{data.COSTCENTERNAME}}</td>\r\n                                                    <td style=\"width:4px;\">\r\n                                                        <button type=\"button\" class=\"action-btn\"\r\n                                                            (click)=\"deleteCostcenter(i)\">Delete</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div *ngIf=\"_reportFilterService.showAllcontactsInCC\" class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n                                        <label class=\"smallBoldLabel\">\r\n                                            <input type=\"checkbox\"\r\n                                                [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.AccLedger_showAllContacts\"\r\n                                                (change)=\"checkCostCenterValue()\" [disabled]=\"_reportFilterService.AccoutLedgerObj.EnableCombineLedger == false || _reportFilterService.AccoutLedgerObj.EnableCombineLedger ===undefined\">\r\n                                            Show All Cost Center\r\n                                        </label>\r\n                                    </div>\r\n\r\n                                    <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n                                        <label class=\"smallBoldLabel\">\r\n                                            <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.MERGEREPORT\" [disabled]=\"_reportFilterService.AccoutLedgerObj.EnableCombineLedger == false || _reportFilterService.AccoutLedgerObj.EnableCombineLedger ===undefined\">\r\n                                            Merge Combined Ledger\r\n                                        </label>\r\n                                    </div>\r\n                                </fieldset>\r\n                            </div>\r\n\r\n                            <div *ngIf=\"showAccGrpTable\">\r\n                                <fieldset>\r\n                                    <legend><label class=\"smallBoldLabel\">&nbsp;Group Wise</label></legend>\r\n                                    <div>\r\n                                        <div class=\"col-md-10\">\r\n                                            <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\" [disabled]=\"_reportFilterService.AccoutLedgerObj.EnableCombineLedger == false || _reportFilterService.AccoutLedgerObj.EnableCombineLedger ===undefined\"\r\n                                             [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.Multiple_GROUP_ACNAME\"\r\n                                        placeholder=\"Press Enter or Tab for Account List\" (keydown.Tab)=\"GroupAccountclick($event)\"\r\n                                        (keydown.enter)=\"GroupAccountclick($event)\">\r\n\r\n                                        </div>\r\n                                        <div class=\"col-md-2\">\r\n                                            <button type=\"button\" class=\"btn btn-info\"\r\n                                                (click)=\"addGroupAccountToList()\" [disabled]=\"_reportFilterService.AccoutLedgerObj.EnableCombineLedger == false || _reportFilterService.AccoutLedgerObj.EnableCombineLedger ===undefined\">Add</button>\r\n                                        </div>\r\n                                        <div class=\"col-md-12\">\r\n                                            <table style=\"height:175px;\">\r\n                                                <tr class=\"smallBoldLabel\">\r\n                                                    <th style=\"width:3px;font-weight: bold;\">S.No.</th>\r\n                                                    <th style=\"width:10px;font-weight: bold;\">Account</th>\r\n                                                    <th style=\"width:4px;font-weight: bold;\">Action</th>\r\n                                                </tr>\r\n                                                <tr *ngFor=\"let data of _reportFilterService.AccoutLedgerObj.AccLedger_multipleGroupAccounts;let i = index\"\r\n                                                    class=\"smallBoldLabel\">\r\n                                                    <td style=\"width:3px;\">{{ i + 1 }}</td>\r\n                                                    <td style=\"width:10px;\">{{data.ACNAME}}</td>\r\n                                                    <td style=\"width:4px;\">\r\n                                                        <button type=\"button\" class=\"action-btn\"\r\n                                                            (click)=\"deleteGroupAccount(i)\">Delete</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n                                        <label class=\"smallBoldLabel\">\r\n                                            <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.AccoutLedgerObj.MERGEREPORT\" [disabled]=\"_reportFilterService.AccoutLedgerObj.EnableCombineLedger == false || _reportFilterService.AccoutLedgerObj.EnableCombineLedger ===undefined\">\r\n                                            Merge Combined Ledger\r\n                                        </label>\r\n                                    </div>\r\n                                </fieldset>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n                        <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n                        <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\"\r\n                            class=\"btn btn-info\">Close</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <!-- Filter Ends -->\r\n    </div>\r\n</div>\r\n\r\n<div style=\"width:90%\" class=\"reportpopup\">\r\n    <generic-popup-grid #genericGridAccountLedger [popupsettings]=\"gridPopupSettingsForAccountLedgerList\"\r\n    (onItemDoubleClick)=\"dblClickAccountSelect($event)\">\r\n</generic-popup-grid>\r\n</div>\r\n\r\n\r\n<div style=\"width:90%\" class=\"reportpopup\">\r\n    <generic-popup-grid #genericGridMultipleAccountLedger [popupsettings]=\"gridPopupSettingsForMultipleAccountLedgerList\"\r\n    (onItemDoubleClick)=\"dblClickMultipleAccountSelect($event)\">\r\n</generic-popup-grid>\r\n</div>\r\n\r\n<div style=\"width:90%\" class=\"reportpopup\">\r\n    <generic-popup-grid #genericGridMultipleGroupAccount [popupsettings]=\"gridPopupSettingsForMultipleGroupAccountList\"\r\n    (onItemDoubleClick)=\"dblClickGroupAccountSelect($event)\">\r\n</generic-popup-grid>\r\n</div>\r\n"

/***/ }),

/***/ 1719:
/***/ (function(module, exports) {

module.exports = "<style>\r\n   .input-text {\r\n      width: 100%;\r\n      /* height: 30px !important; */\r\n      font-weight: bold;\r\n   }\r\n   label{\r\n       font-size: 12px;\r\n       margin: 0;\r\n   }\r\n\r\n   .td-class {\r\n      border: none !important;\r\n   }\r\n\r\n   .date-input {\r\n      width: 93%;\r\n      font-size: 12px !important;\r\n      height: 30px !important;\r\n   }\r\n     @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .report-height{\r\n        height:52vh; \r\n        overflow:auto;\r\n    }\r\n    }\r\n         @media screen and (max-width:767px) {\r\n            .smallBoldLabel{\r\n                  width: auto !important;\r\n            }\r\n            \r\n        \r\n    }\r\n</style>\r\n<div class=\"container report-container\" style=\"background-color : #ffffff; padding :1%; height : 77vh;  \">\r\n   <div class=\"row\">\r\n      <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\" >&times;</button>\r\n         <h4 class=\"modal-title\">Actual Vs Budget Report</h4>\r\n      </div>\r\n      <div class=\"col-md-12 report-height\" style=\"padding-top: 2%;\">\r\n         <!-- Left Column -->\r\n         <div class=\"col-md-6\">\r\n             <!-- <fieldset>\r\n               <legend style=\"font-size:11px;font-weight: bold; width:auto;margin-bottom: -4px;\">Date Range Selection :\r\n               </legend>\r\n               <table>\r\n                  <tr>\r\n                     <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                     <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td class=\"td-class\">\r\n                       <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                          [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATE1\"\r\n                          (change)=\"changestartDate($event.target.value,'AD')\"\r\n                          max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\"\r\n                          min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                    </td>\r\n                    <td class=\"td-class\">\r\n                       <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                          [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATE2\"\r\n                          (change)=\"changeEndDate($event.target.value,'AD')\"\r\n                          max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\"\r\n                          min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td class=\"td-class\">\r\n                       <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                       (change)=\"changestartDate($event.detail.value,'BS')\"\r\n                       [label]=\"'From'\"\r\n                       [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_BSDATE1\">\r\n                     </nepali-date-picker>\r\n                  \r\n \r\n                      </td>\r\n                      <td class=\"td-class\">\r\n                       <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDateTo'\"\r\n                       (change)=\"changeEndDate($event.detail.value,'BS')\"\r\n                       [label]=\"'To'\"\r\n                       [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_BSDATE2\">\r\n                     </nepali-date-picker>\r\n                       \r\n                      </td>\r\n                  </tr>\r\n               </table>\r\n            </fieldset>  -->\r\n            <fieldset>\r\n              <legend>Budget Selection :</legend>\r\n             <input #budgetSelectionField type=\"text\" class=\"form-control\" placeholder=\"Press Enter or Tab for Budget List\"   [(ngModel)]=\" this._reportFilterService.ActualVsBudgetObj.ActualVsBudget_Budget_Name\" (ngModelChange)=\"onBudgetSelectionChange()\"\r\n             (keydown.enter)=\"BudgetSelectionClicked() \"\r\n             >\r\n           </fieldset>\r\n\r\n            <fieldset>\r\n               <legend>Division Selection:</legend>\r\n               <select [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_DIV\"\r\n               style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n               <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL</option>\r\n               <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                  {{ div.NAME }}\r\n               </option>\r\n            </select>\r\n            </fieldset>\r\n            <fieldset *ngIf=\"userSetting.enableCostCenter!=0\">\r\n               <legend><input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERWISE\" (change)=\"onChangeCostcenterWise($event)\"  style=\"height: 10px; width: 10px;\"> Cost Center Wise Report</legend>\r\n               \r\n               <div class=\"row\">\r\n                  <div class=\"col-md-6\">\r\n                    <label for=\"\">Category: </label>\r\n                     <select [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERCATEGORY\" (ngModelChange)=\"showCostCenterGroupChange()\" [disabled]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERWISE==0\"\r\n                     style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                     <option value=\"%\">All</option>\r\n                     <option *ngFor=\"let i of costCenterCategoryList\" value={{i.ccgid}}>{{i.COSTCENTERGROUPNAME}}\r\n                     </option>\r\n                  </select>\r\n                  </div>\r\n                  <div class=\"col-md-6\">\r\n                    <label for=\"\">Cost Center: </label>\r\n                     <select [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_CostCenter\"  [disabled]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERWISE==0\"\r\n                     style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                     <option value=\"%\">All</option>\r\n                     <option *ngFor=\"let i of CostcenterList\" value={{i.CCID}}>{{i.COSTCENTERNAME}}\r\n                     </option>\r\n                  </select>\r\n                  </div>\r\n\r\n               </div>\r\n               <div class=\"row\" *ngIf=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERWISE==1\">\r\n                  <!-- <div class=\"col-md-10\">\r\n                     <input type=\"checkbox\" style=\"height: 10px; width: 10px;\" [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_OPT_COSTCENTER\" (change)=\"onCostCenterWiseSegregationReportCheck($event)\" [disabled]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_CostCenter == '%' && _reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERCATEGORY == '%'\"> <label for=\"\">Show CostCenterWise Segregation Report</label>\r\n\r\n                  </div> -->\r\n                  <div class=\"col-md-6\">\r\n                     <label class=\"\"><input type=\"radio\"\r\n                        [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_OPT_COSTCENTER\" value=0\r\n                         >&nbsp;Category Wise\r\n                          </label>\r\n                  </div>\r\n                  <div class=\"col-md-6\">\r\n                     <label class=\"\"><input type=\"radio\"\r\n                      [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_OPT_COSTCENTER\" value=1\r\n                        >&nbsp;Cost Center Wise\r\n                         </label>\r\n                  </div>\r\n               </div>\r\n            </fieldset>\r\n            <!-- <label class=\"\"><input type=\"radio\" name=\"showCred\" \r\n              [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_CheckOption\" value=\"0\"\r\n              >&nbsp;All </label><br> -->\r\n\r\n            <!-- <label class=\"\"><input type=\"radio\" name=\"showCred\" \r\n              [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_CheckOption\"  value=\"3\"\r\n              >&nbsp;Show Zero Variance\r\n            Only </label><br> -->\r\n            <!-- <label class=\"\"><input type=\"radio\" name=\"showCred\"\r\n              [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_ShowInPercent\"\r\n              >&nbsp;Show in Percentage</label><br> -->\r\n\r\n            <!-- <label class=\"\"><input type=\"radio\" name=\"showCred\"\r\n              [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_ShowInAmount\"\r\n           >&nbsp;Show in Amount\r\n            </label><br> -->\r\n\r\n            <!-- <label class=\"\"><input type=\"radio\" name=\"showCred\"\r\n              [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_CheckOption\"  value=\"1\"\r\n               >&nbsp;Over Budget\r\n                </label><br>\r\n                <label class=\"\"><input type=\"radio\" name=\"showCred\"\r\n                 [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_CheckOption\"  value=\"2\"\r\n                   >&nbsp;Under Budget\r\n                    </label><br> -->\r\n\r\n\r\n            \r\n        \r\n         </div>\r\n         <!-- Right Column -->\r\n         <div class=\"col-md-6\">\r\n          \r\n           <!-- <fieldset>\r\n              <legend>Account Selection :</legend>\r\n              <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\" [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_AccLedger_ACCNAME\"\r\n                  placeholder=\"Press Enter or Tab for Account List\" (keydown.Tab)=\"AccountEnterClicked($event)\"\r\n                  (keydown.enter)=\"AccountEnterClicked($event)\">\r\n          </fieldset> -->\r\n\r\n            <fieldset>\r\n               <legend>Report Format Selection :</legend>\r\n               <div class=\"row\">\r\n                  <div class=\"col-sm-4\">\r\n                     <label class=\"\"><input type=\"radio\" name=\"reportType\"\r\n                       [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_OVERVIEWREPORT\" value=0\r\n                       (change)=\"overViewSelect($event)\"\r\n                          >&nbsp;Overview</label>\r\n                  </div>\r\n               \r\n                  <div class=\"col-sm-8\">\r\n                     <label class=\"\" style=\"margin-left: -33px;\"><input type=\"radio\" name=\"reportType\"\r\n                       [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_OVERVIEWREPORT\" value=1\r\n                       (change)=\"ActualVSbudgetSelect($event)\">&nbsp;Actual Vs Budget\r\n                        </label>\r\n                  </div>\r\n               </div>\r\n              \r\n            </fieldset>\r\n            <!-- <fieldset *ngIf=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_OVERVIEWREPORT==1\">\r\n              <legend>Date Type :</legend>\r\n              <div class=\"row\">\r\n                 <div class=\"col-sm-2\" *ngIf=\"_reportFilterService.ReportOptionAll\">\r\n                    <label class=\"\"><input type=\"radio\" name=\"dateType\"\r\n                      [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATETYPE\" value=0\r\n                         >&nbsp;All</label>\r\n                 </div>\r\n                 <div class=\"col-sm-4\">\r\n                    <label class=\"\"><input type=\"radio\" name=\"dateType\"\r\n                      [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATETYPE\" value=1\r\n                         >&nbsp;AD</label>\r\n                 </div>\r\n              \r\n                 <div class=\"col-sm-4\">\r\n                    <label class=\"\" style=\"margin-left: -33px;\"><input type=\"radio\" name=\"dateType\"\r\n                      [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATETYPE\" value=2\r\n                      >&nbsp;BS\r\n                       </label>\r\n                 </div>\r\n              </div>\r\n             \r\n           </fieldset> -->\r\n\r\n            <fieldset *ngIf=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_OVERVIEWREPORT==1\">\r\n               <legend>Budget Interval :</legend>\r\n               <div class=\"row\">\r\n                 \r\n              \r\n                  <div class=\"col-sm-2\" *ngIf=\"_reportFilterService.ReportOptionAll\">\r\n                     <label class=\"\"><input type=\"radio\" name=\"reportOption\" [disabled]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERWISE==1 || _reportFilterService.ActualVsBudgetObj.ActualVsBudget_BUDGETSELECTION != '%'\"\r\n                       [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION\" value=0\r\n                          >&nbsp;All</label>\r\n                  </div>\r\n\r\n                  <div class=\"col-sm-3\">\r\n                    <label class=\"\" ><input type=\"radio\" name=\"reportOption\"\r\n                      [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION\" value=1  [disabled]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERWISE==1 || _reportFilterService.ActualVsBudgetObj.ActualVsBudget_BUDGETSELECTION != '%'\"\r\n                         >&nbsp;Monthly</label>\r\n                 </div>\r\n               \r\n                  <div class=\"col-sm-3\">\r\n                     <label class=\"\"><input type=\"radio\" name=\"reportOption\"\r\n                       [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION\" value=2  [disabled]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERWISE==1 || _reportFilterService.ActualVsBudgetObj.ActualVsBudget_BUDGETSELECTION != '%'\"\r\n                           >&nbsp;Quarterly\r\n                        </label>\r\n                  </div>\r\n                  <div class=\"col-sm-3\">\r\n                   <label class=\"\"><input type=\"radio\" name=\"reportOption\"\r\n                    [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION\" value=3  [disabled]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_COSTCENTERWISE==1 || _reportFilterService.ActualVsBudgetObj.ActualVsBudget_BUDGETSELECTION != '%'\"\r\n                         >&nbsp;Annually\r\n                      </label>\r\n                </div>\r\n               </div>\r\n              \r\n            </fieldset>\r\n\r\n            <!-- <fieldset>\r\n               <legend>Budget  Selection :</legend>\r\n               <div class=\"row\">\r\n                  <div class=\"col-sm-4\">\r\n                     <label class=\"\"><input type=\"radio\" name=\"budgetSelection\"\r\n                       [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_BUDGETSELECTION\" value=0\r\n                          >&nbsp;All</label>\r\n                  </div>\r\n               \r\n                  <div class=\"col-sm-4\">\r\n                     <label class=\"\" style=\"margin-left: -33px;\"><input type=\"radio\" name=\"budgetSelection\"\r\n                       [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_BUDGETSELECTION\" value=1\r\n                           >&nbsp;Active\r\n                        </label>\r\n                  </div>\r\n                  <div class=\"col-sm-4\">\r\n                   <label class=\"\" style=\"margin-left: -33px;\"><input type=\"radio\" name=\"budgetSelection\"\r\n                    [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_BUDGETSELECTION\" value=2\r\n                         >&nbsp;Inactive \r\n                      </label>\r\n                </div>\r\n               </div>\r\n              \r\n            </fieldset> -->\r\n            <fieldset *ngIf=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_OVERVIEWREPORT==1\">\r\n               <legend>Report Filters :</legend>\r\n               <div class=\"row\">\r\n                  <div class=\"col-md-12\">\r\n                     <label class=\"\"><input type=\"checkbox\" \r\n                        [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_ShowZeroVariance\"\r\n                        >&nbsp;Show Zero Variance\r\n                      Only </label><br>\r\n                      <!-- <label class=\"\"><input type=\"radio\" name=\"showCred\"\r\n                        [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_ShowInPercent\"\r\n                        >&nbsp;Show in Percentage</label><br> -->\r\n          \r\n                      <!-- <label class=\"\"><input type=\"radio\" name=\"showCred\"\r\n                        [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_ShowInAmount\"\r\n                     >&nbsp;Show in Amount\r\n                      </label><br> -->\r\n          \r\n                      <label class=\"\"><input type=\"checkbox\" \r\n                        [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_OverBUdget\" \r\n                         >&nbsp;Over Budget\r\n                          </label><br>\r\n                          <label class=\"\"><input type=\"checkbox\"\r\n                           [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_UnderBudget\"\r\n                             >&nbsp;Under Budget\r\n                              </label><br>\r\n                  </div>\r\n       \r\n               </div>\r\n            </fieldset>\r\n            <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n               <label class=\"smallBoldLabel\" style=\"width:225px;\">\r\n                   <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_INCLUDEPOSTDATE\" style=\"margin-left: 5px;\"\r\n                   (change)=\"$event.target.checked?(_reportFilterService.ActualVsBudgetObj.ActualVsBudget_INCLUDEPOSTDATE=1):(_reportFilterService.ActualVsBudgetObj.ActualVsBudget_INCLUDEPOSTDATE=0)\"\r\n           [checked]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_INCLUDEPOSTDATE == 1\" >\r\n                   Include Post Dated Transaction Also\r\n               </label>\r\n           </div>\r\n\r\n           <div *ngIf=\"userSetting.EnableLatePost==1\"class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n            <label class=\"smallBoldLabel\" style=\"width:225px;\">\r\n                <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_INCLUDEUNAPPROVEDTRANSACTION\" style=\"margin-left: 5px;\"\r\n                (change)=\"$event.target.checked?(_reportFilterService.ActualVsBudgetObj.ActualVsBudget_INCLUDEUNAPPROVEDTRANSACTION=1):(_reportFilterService.ActualVsBudgetObj.ActualVsBudget_INCLUDEUNAPPROVEDTRANSACTION=0)\"\r\n        [checked]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_INCLUDEUNAPPROVEDTRANSACTION == 1\" >\r\n        Including Unapproved Transaction\r\n            </label>\r\n        </div>\r\n\r\n         </div>\r\n       \r\n      </div>\r\n\r\n      <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n         <button class=\"btn btn-info confirm-btn\" type=\"button\"  (click)=\"onload()\" [disabled]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_OVERVIEWREPORT==1 && (_reportFilterService.ActualVsBudgetObj.ActualVsBudget_DATETYPE==0 || _reportFilterService.ActualVsBudgetObj.ActualVsBudget_REPORTOPTION==0)\">RUN</button>\r\n         <button type=\"button\"  title=\"Cancel\" class=\"btn btn-info\" (click)=\"closeReportBox()\">Close</button>\r\n      </div>\r\n\r\n   </div>\r\n\r\n\r\n\r\n\r\n   <generic-popup-grid #genericGridAccountLedger [popupsettings]=\"gridPopupSettingsForAccountLedgerList\"\r\n   (onItemDoubleClick)=\"dblClickAccountSelect($event)\">\r\n</generic-popup-grid>\r\n\r\n<div style=\"width:90%\" class=\"reportpopup\">\r\n   <generic-popup-grid #genericGridBudgetList [popupsettings]=\"gridPopupSettingsForBudgetList\"\r\n   (onItemDoubleClick)=\"dblClickBudgetSelect($event)\">\r\n  </generic-popup-grid>\r\n\r\n</div>\r\n "

/***/ }),

/***/ 1720:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .input-text {\r\n       width: 100%;\r\n       /* height: 30px !important; */\r\n       font-weight: bold;\r\n    }\r\n \r\n    .td-class {\r\n       border: none !important;\r\n    }\r\n \r\n    .date-input {\r\n       width: 93%;\r\n       font-size: 12px !important;\r\n       height: 30px !important;\r\n    }\r\n \r\n    .ageing {\r\n       width: 15%;\r\n       float: left;\r\n       margin-right: 5%;\r\n       font-weight: bold;\r\n       font-size: 14px !important;\r\n    }\r\n     @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .report-height{\r\n        height:52vh; \r\n        overflow:auto;\r\n    }\r\n    }\r\n         @media screen and (max-width:767px) {\r\n            .smallBoldLabel{\r\n                  width: auto !important;\r\n            }\r\n            \r\n        \r\n    }\r\n </style>\r\n <div class=\"container report-container\" style=\"background-color : #ffffff; padding :1%; height : auto;  \">\r\n    <div class=\"row report-height\">\r\n       <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n          <h4 class=\"modal-title\">Additional Cost Itemwise Report</h4>\r\n       </div>\r\n       <!-- Left Column -->\r\n       <div class=\"col-md-6\" style=\"padding-top: 2%;\">\r\n         <fieldset>\r\n            <legend style=\"font-size:11px;font-weight: bold; width:auto;margin-bottom: -4px;\">Date Range Selection :</legend>\r\n            <table>\r\n                <tr>\r\n                    <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                    <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                </tr>\r\n                <tr>\r\n                    <td class=\"td-class\">\r\n                            <input type=\"date\"\r\n                         class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                [(ngModel)]=\"_reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DATE1\"\r\n                                (change)=\"changestartDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                    </td>\r\n                    <td class=\"td-class\">\r\n                            <input type=\"date\"\r\n                         class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                [(ngModel)]=\"_reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DATE2\"\r\n                                (change)=\"changeEndDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td class=\"td-class\">\r\n                     <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                     (change)=\"changestartDate($event.detail.value,'BS')\"\r\n                     [label]=\"'From'\"\r\n                     [(ngModel)]=\"_reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_BSDATE1\">\r\n                     </nepali-date-picker>\r\n                            <!-- <input id=\"nepaliDate\"\r\n                                style=\"text-align:center;\"\r\n                                class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                [(ngModel)]=\"_reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_BSDATE1\" type=\"text\"\r\n                                (change)=\"changestartDate($event.target.value,'BS')\"\r\n                                placeholder=\"yyyy-mm-dd\" />            -->\r\n                    </td>\r\n                    <td class=\"td-class\">\r\n                     <nepali-date-picker name=\"nepaliDateTo\" [id]=\"'nepaliDateTo'\"\r\n                     (change)=\"changeEndDate($event.detail.value,'BS')\"\r\n                     [label]=\"'To'\"\r\n                     [(ngModel)]=\"_reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_BSDATE2\">\r\n                     </nepali-date-picker>\r\n                            <!-- <input id=\"nepaliDate\" style=\"text-align:center;\"\r\n                            class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                [(ngModel)]=\"_reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_BSDATE2\" type=\"text\"\r\n                                (change)=\"changeEndDate($event.target.value,'BS')\"\r\n                                placeholder=\"yyyy-mm-dd\" /> -->\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n        </fieldset>\r\n \r\n          <fieldset>\r\n             <legend>Division Selection:</legend>\r\n             <select [(ngModel)]=\"_reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_DIV\"\r\n                style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL</option>\r\n                <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                   {{ div.NAME }}\r\n                </option>\r\n             </select>\r\n          </fieldset>\r\n          <fieldset *ngIf=\"masterService.userSetting.enableCostCenter == 1 || masterService.userSetting.enableCostCenter == 2\">\r\n            <legend>Cost Center</legend>\r\n            <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\"\r\n            [(ngModel)]=\"_reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_COSTCENTERNAME\" placeholder=\"Press Enter to select COST CENTER\"\r\n            (keydown.Tab)=\"showCostCenterGroupList()\" (keydown.enter)=\"showCostCenterGroupList()\">          \r\n            \r\n          </fieldset>\r\n \r\n        \r\n \r\n       </div>\r\n       <!-- Right Column -->\r\n       <div class=\"col-md-6\" style=\"padding-top: 2%;\">\r\n         <fieldset>\r\n            <legend>Report Style:</legend>\r\n            <label class=\"smallBoldLabel\" style=\"padding-right:15px;\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                  [(ngModel)]=\"_reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_ISSUMMARY\" value=1>&nbsp;Summary\r\n               Report</label>\r\n            <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                  [(ngModel)]=\"_reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_ISSUMMARY\" value=0>&nbsp;Detail Report</label>\r\n         </fieldset>\r\n         <fieldset>\r\n            <legend>Supplier Selection: </legend>\r\n            <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\"\r\n                [(ngModel)]=\"_reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_ACNAME\" placeholder=\"Press Enter or Tab for Supplier\"\r\n                (keydown.Tab)=\"AccountEnterClicked($event)\" (keydown.enter)=\"AccountEnterClicked($event)\">\r\n        </fieldset>\r\n         <fieldset>\r\n            <legend>Voucher No Selection: </legend>\r\n            <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\"\r\n                [(ngModel)]=\"_reportFilterService.AdditionalCostDetailObj.AdditionalCostDetail_VOUCHERNO\" placeholder=\"Press Enter or Tab for Voucher No\"\r\n                (keydown.Tab)=\"VoucherNoEnterClicked($event)\" (keydown.enter)=\"VoucherNoEnterClicked($event)\">\r\n        </fieldset>\r\n\r\n \r\n       </div>\r\n       <div class=\"btn\" style=\"float : right;\">\r\n          <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n          <button type=\"button\" title=\"Cancel\" class=\"btn btn-info\" (click)=\"closeReportBox()\">Close</button>\r\n       </div>\r\n \r\n    </div>\r\n\r\n    <generic-popup-grid #genericGridVoucherNo [popupsettings]=\"gridPopupSettingsForVoucherList\"\r\n    (onItemDoubleClick)=\"dblClickVoucherSelect($event)\">\r\n</generic-popup-grid>\r\n\r\n<generic-popup-grid #genericGridAccount [popupsettings]=\"gridPopupSettingsForAccountList\"\r\n(onItemDoubleClick)=\"dblClickAccountSelect($event)\">\r\n</generic-popup-grid>\r\n\r\n<generic-popup-grid #genericGridCostCenterList [popupsettings]=\"gridCostCenterListPopupSettings\"\r\n(onItemDoubleClick)=\"onCostCenterSelect($event)\"></generic-popup-grid>\r\n<generic-popup-grid #genericGridCostCenterGroupList [popupsettings]=\"gridCostCenterGroupListPopupSettings\"\r\n(onItemDoubleClick)=\"onCostCenterGroupSelect($event)\"></generic-popup-grid>"

/***/ }),

/***/ 1721:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .input-text {\r\n       width: 100%;\r\n       /* height: 30px !important; */\r\n       font-weight: bold;\r\n    }\r\n \r\n    .td-class {\r\n       border: none !important;\r\n    }\r\n \r\n    .date-input {\r\n       width: 93%;\r\n       font-size: 12px !important;\r\n       height: 30px !important;\r\n    }\r\n \r\n    .ageing {\r\n       width: 15%;\r\n       float: left;\r\n       margin-right: 5%;\r\n       font-weight: bold;\r\n       font-size: 14px !important;\r\n    }\r\n      @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .report-height{\r\n        height:52vh; \r\n        overflow:auto;\r\n    }\r\n    }\r\n         @media screen and (max-width:767px) {\r\n            .smallBoldLabel{\r\n                  width: auto !important;\r\n            }\r\n            \r\n        \r\n    }\r\n </style>\r\n <div class=\"container report-container\" style=\"background-color : #ffffff; padding :1%; height : auto;  \">\r\n    <div class=\"row report-height\">\r\n       <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n          <h4 class=\"modal-title\">Additional Cost Voucherwise Report</h4>\r\n       </div>\r\n       <!-- Left Column -->\r\n       <div class=\"col-md-6 \" style=\"padding-top: 2%;\">\r\n         <fieldset>\r\n            <legend style=\"font-size:11px;font-weight: bold; width:auto;margin-bottom: -4px;\">Date Range Selection :</legend>\r\n            <table>\r\n                <tr>\r\n                    <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                    <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                </tr>\r\n                <tr>\r\n                    <td class=\"td-class\">\r\n                            <input type=\"date\"\r\n                         class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                [(ngModel)]=\"_reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DATE1\"\r\n                                (change)=\"changestartDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                    </td>\r\n                    <td class=\"td-class\">\r\n                            <input type=\"date\"\r\n                         class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                [(ngModel)]=\"_reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DATE2\"\r\n                                (change)=\"changeEndDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td class=\"td-class\">\r\n                     <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                     (change)=\"changestartDate($event.detail.value,'BS')\"\r\n                     [label]=\"'From'\"\r\n                     [(ngModel)]=\"_reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_BSDATE1\">\r\n                     </nepali-date-picker>\r\n\r\n                            <!-- <input id=\"nepaliDate\"\r\n                                style=\"text-align:center;\"\r\n                                class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                [(ngModel)]=\"_reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_BSDATE1\" type=\"text\"\r\n                                (change)=\"changeEntryDate($event.target.value,'BS')\"\r\n                                placeholder=\"yyyy-mm-dd\" />            -->\r\n                    </td>\r\n                    <td class=\"td-class\">\r\n                     <nepali-date-picker name=\"nepaliDateTo\" [id]=\"'nepaliDateTo'\"\r\n                     (change)=\"changeEndDate($event.detail.value,'BS')\"\r\n                     [label]=\"'To'\"\r\n                     [(ngModel)]=\"_reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_BSDATE2\">\r\n                     </nepali-date-picker>\r\n                            <!-- <input id=\"nepaliDate\" style=\"text-align:center;\"\r\n                            class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                [(ngModel)]=\"_reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_BSDATE2\" type=\"text\"\r\n                                (change)=\"changeEndDate($event.target.value,'BS')\"\r\n                                placeholder=\"yyyy-mm-dd\" /> -->\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n        </fieldset>\r\n \r\n          <fieldset>\r\n             <legend>Division Selection:</legend>\r\n             <select [(ngModel)]=\"_reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_DIV\"\r\n                style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL</option>\r\n                <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                   {{ div.NAME }}\r\n                </option>\r\n             </select>\r\n          </fieldset>\r\n          <fieldset *ngIf=\"masterService.userSetting.enableCostCenter == 1 || masterService.userSetting.enableCostCenter == 2\">\r\n            <legend>Cost Center</legend>\r\n            <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\"\r\n            [(ngModel)]=\"_reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_COSTCENTERNAME\" placeholder=\"Press Enter to select COST CENTER\"\r\n            (keydown.Tab)=\"showCostCenterGroupList()\" (keydown.enter)=\"showCostCenterGroupList()\">          \r\n            \r\n          </fieldset>\r\n \r\n        \r\n \r\n       </div>\r\n       <!-- Right Column -->\r\n       <div class=\"col-md-6\" style=\"padding-top: 2%;\">\r\n         <fieldset>\r\n            <legend>Report Style:</legend>\r\n            <label class=\"smallBoldLabel\" style=\"padding-right:15px;\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                  [(ngModel)]=\"_reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_ISSUMMARY\" value=1>&nbsp;Summary\r\n               Report</label>\r\n            <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                  [(ngModel)]=\"_reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_ISSUMMARY\" value=0>&nbsp;Detail Report</label>\r\n         </fieldset>\r\n         <fieldset>\r\n            <legend>Supplier Selection: </legend>\r\n            <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\"\r\n                [(ngModel)]=\"_reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_ACNAME\" placeholder=\"Press Enter or Tab for Supplier\"\r\n                (keydown.Tab)=\"AccountEnterClicked($event)\" (keydown.enter)=\"AccountEnterClicked($event)\">\r\n        </fieldset>\r\n         <fieldset>\r\n            <legend>Voucher No Selection: </legend>\r\n            <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\"\r\n                [(ngModel)]=\"_reportFilterService.AdditionalCostSummaryObj.AdditionalCostSummary_VOUCHERNO\" placeholder=\"Press Enter or Tab for Voucher No\"\r\n                (keydown.Tab)=\"VoucherNoEnterClicked($event)\" (keydown.enter)=\"VoucherNoEnterClicked($event)\">\r\n        </fieldset>\r\n\r\n \r\n       </div>\r\n       <div class=\"btn\" style=\"float : right;\">\r\n          <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n          <button type=\"button\" title=\"Cancel\" class=\"btn btn-info\" (click)=\"closeReportBox()\">Close</button>\r\n       </div>\r\n \r\n    </div>\r\n\r\n    <generic-popup-grid #genericGridVoucherNo [popupsettings]=\"gridPopupSettingsForVoucherList\"\r\n    (onItemDoubleClick)=\"dblClickVoucherSelect($event)\">\r\n</generic-popup-grid>\r\n\r\n<generic-popup-grid #genericGridAccount [popupsettings]=\"gridPopupSettingsForAccountList\"\r\n(onItemDoubleClick)=\"dblClickAccountSelect($event)\">\r\n</generic-popup-grid>\r\n<generic-popup-grid #genericGridCostCenterList [popupsettings]=\"gridCostCenterListPopupSettings\"\r\n(onItemDoubleClick)=\"onCostCenterSelect($event)\"></generic-popup-grid>\r\n<generic-popup-grid #genericGridCostCenterGroupList [popupsettings]=\"gridCostCenterGroupListPopupSettings\"\r\n(onItemDoubleClick)=\"onCostCenterGroupSelect($event)\"></generic-popup-grid>"

/***/ }),

/***/ 1722:
/***/ (function(module, exports) {

module.exports = "<style>\r\n   .input-text {\r\n      width: 100%;\r\n      /* height: 30px !important; */\r\n      font-weight: bold;\r\n   }\r\n\r\n   .td-class {\r\n      border: none !important;\r\n   }\r\n\r\n   .date-input {\r\n      width: 93%;\r\n      font-size: 12px !important;\r\n      height: 30px !important;\r\n   }\r\n    @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .report-height{\r\n        height:52vh; \r\n        overflow:auto;\r\n    }\r\n    }\r\n         @media screen and (max-width:767px) {\r\n            .smallBoldLabel{\r\n                  width: auto !important;\r\n            }\r\n            \r\n        \r\n    }\r\n</style>\r\n<div class=\"container report-container\" style=\"background-color : #ffffff; padding :1%; height : auto;  \">\r\n   <div class=\"row\">\r\n      <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n         <h4 class=\"modal-title\">Balance Sheet Report</h4>\r\n      </div>\r\n      <div class=\"col-md-12 report-height\" style=\"padding-top: 2%;\">\r\n         <!-- Left Column -->\r\n         <div class=\"col-md-6\">\r\n            <fieldset>\r\n               <legend style=\"font-size:11px;font-weight: bold; width:auto;margin-bottom: -4px;\">Date Range Selection :\r\n               </legend>\r\n               <table>\r\n                  <tr>\r\n                     <!-- <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td> -->\r\n                     <!-- <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td> -->\r\n                  </tr>\r\n                  <tr>\r\n                     <td class=\"td-class\">\r\n                        <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                           [(ngModel)]=\"_reportFilterService.BalanceSheetObj.BalanceSheet_DATE2\"\r\n                           (change)=\"changeEndDate($event.target.value,'AD')\"\r\n                           max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\"\r\n                           min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                     </td>\r\n                     <td class=\"td-class\">\r\n                        <!-- <td class=\"td-class\"> -->\r\n                           <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                              (change)=\"changeEndDate($event.detail.value,'BS')\" [label]=\"'From'\"\r\n                              [(ngModel)]=\"_reportFilterService.BalanceSheetObj.BalanceSheet_BSDATE2\">\r\n                           </nepali-date-picker>\r\n                        <!-- </td> -->\r\n\r\n                        <!-- <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                           [(ngModel)]=\"_reportFilterService.BalanceSheetObj.BalanceSheet_DATE2\"\r\n                           (change)=\"changeEndDate($event.target.value,'AD')\"\r\n                           max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\"\r\n                           min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\"> -->\r\n                     </td>\r\n                  </tr>\r\n                  <tr>\r\n                     <!-- <td class=\"td-class\">\r\n                        <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                           (change)=\"changeEntryDate($event.detail.value,'BS')\" [label]=\"'From'\"\r\n                           [(ngModel)]=\"_reportFilterService.BalanceSheetObj.BalanceSheet_BSDATE1\">\r\n                        </nepali-date-picker>\r\n                     </td> -->\r\n                     <!-- <td class=\"td-class\">\r\n                        <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDateTo'\"\r\n                           (change)=\"changeEndDate($event.detail.value,'BS')\" [label]=\"'To'\"\r\n                           [(ngModel)]=\"_reportFilterService.BalanceSheetObj.BalanceSheet_BSDATE2\">\r\n                        </nepali-date-picker>\r\n                     </td> -->\r\n                  </tr>\r\n               </table>\r\n            </fieldset>\r\n\r\n    <fieldset *ngIf=\"masterService.userSetting.EnableManualStockValuation==1\" style=\"margin-top: 10px;\">\r\n               <legend style=\"font-size:11px;font-weight: bold; width:auto\">Stock\r\n                  Valuation :</legend>\r\n               <div class=\"col-md-12\" style=\"margin-top:5px;\">\r\n                  <div class=\"opening\">\r\n                     <div class=\"col-md-4\" style=\"padding: 0px;\">\r\n                        <label class=\"smallBoldLabel\"\r\n                           style=\"margin-left: 0px;padding-top:5px;margin-top: -10px;\">Opening Stock:</label>\r\n                     </div>\r\n                     <div class=\"col-md-8\" style=\"padding: 0px;\">\r\n                        <input type=\"number\" class=\"form-control\" style=\"height: 25px;margin-top: -10px;\"\r\n                           [(ngModel)]=_reportFilterService.BalanceSheetObj.BalanceSheet_OSTOCK>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"col-md-12\" style=\"margin-top:5px;\">\r\n                  <div class=\"closing\">\r\n                     <div class=\"col-md-4\" style=\"padding: 0px;\">\r\n                        <label class=\"smallBoldLabel\" style=\"margin-left: 0px; padding-top:5px;\">Closing Stock:</label>\r\n                     </div>\r\n                     <div class=\"col-md-8\" style=\"padding: 0px;\">\r\n                        <input type=\"number\" class=\"form-control\" style=\"height: 25px;\"\r\n                           [(ngModel)]=_reportFilterService.BalanceSheetObj.BalanceSheet_CSTOCK>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div *ngIf=\"userSetting.ENABLECCENTER_INFINALREPORT==1\" class=\"col-md-12\" style=\"margin-top:10px; \">\r\n                  <div class=\"pl-action\">\r\n                     <div class=\"cal-btn col-md-4\" style=\"padding: 0px; float:right;\">\r\n                        <button class=\"btn btn-info\" style=\" float:right;\" (click)=\"calcStock()\">Calculate</button>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </fieldset>\r\n            <fieldset>\r\n               <legend style=\"font-size:11px;font-weight: bold; width:auto\">Division Selection:</legend>\r\n               <select [(ngModel)]=\"_reportFilterService.BalanceSheetObj.BalanceSheet_DIV\"\r\n                  style=\"height: 30px !important;\" class=\"form-control input-text\" (change)=\"changeDivision()\">\r\n                  <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL\r\n                  </option>\r\n                  <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                     {{ div.NAME }}\r\n                  </option>\r\n               </select>\r\n            </fieldset>\r\n\r\n\r\n         </div>\r\n         <!-- Right Column -->\r\n         <div class=\"col-md-6\">\r\n            <fieldset *ngIf=\"userSetting.IS_NESTLE==1\">\r\n               <legend style=\"font-size:11px;font-weight: bold; width:auto\">Company Selection:</legend>\r\n               <select [(ngModel)]=\"_reportFilterService.BalanceSheetObj.BalanceSheet_COMPANYTYPE\"\r\n                  style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                  <option value=\"DMS\">DMS</option>\r\n                  <option value=\"NONDMS\">NON DMS</option>\r\n               </select>\r\n            </fieldset>\r\n\r\n            \r\n            <fieldset *ngIf=\"userSetting.ENABLECCENTER_INFINALREPORT==1\">\r\n               <legend>Cost Center:</legend>\r\n               <select [(ngModel)]=\"_reportFilterService.BalanceSheetObj.BalanceSheet_CostCenter\"\r\n                   style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                   <option value=\"%\"> </option>\r\n                   <option *ngFor=\"let i of CostcenterList\" value={{i.CCID}}>{{i.COSTCENTERNAME}}\r\n                   </option>\r\n               </select>\r\n           </fieldset>\r\n            <fieldset style=\"padding-bottom: 5px;\">\r\n               <legend style=\"font-size:11px;font-weight: bold; width:auto\">Report Format :</legend>\r\n               <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"reportmode\"\r\n                     [(ngModel)]=\"_reportFilterService.BalanceSheetObj.BalanceSheet_VERTICALFORMAT\"\r\n                     value=1>&nbsp;Vertical\r\n                  Format </label>&nbsp;&nbsp;&nbsp;\r\n               <label class=\"smallBoldLabel\" style=\"clear : both;\"><input type=\"radio\" name=\"reportmode\"\r\n                     [(ngModel)]=\"_reportFilterService.BalanceSheetObj.BalanceSheet_VERTICALFORMAT\"\r\n                     value=0>&nbsp;Horizontal\r\n                  Format\r\n               </label>\r\n            </fieldset>\r\n\r\n            <fieldset style=\"margin-top: 10px;\">\r\n               <legend style=\"font-size:11px;font-weight: bold; width:auto\">Report\r\n                  Options :</legend>\r\n               <div class=\"col-md-12 checkbox\" style=\"padding-top:5px\">\r\n                  <label class=\"smallBoldLabel\" style=\"margin-left: 0px;\">\r\n                     <input type=\"checkbox\"\r\n                        [(ngModel)]=\"_reportFilterService.BalanceSheetObj.BalanceSheet_SHOWSUBLEDGER\" (change)=\"\r\n                   $event.target.checked\r\n                     ? (_reportFilterService.BalanceSheetObj.BalanceSheet_SHOWSUBLEDGER = 1)\r\n                     : (_reportFilterService.BalanceSheetObj.BalanceSheet_SHOWSUBLEDGER = 0)\">&nbsp;&nbsp;Show Sub\r\n                     Ledger\r\n                     In\r\n                     Balance Sheet\r\n                  </label>\r\n               </div>\r\n               <div class=\"col-md-12 checkbox\" style=\"padding-top:5px\">\r\n                  <label class=\"smallBoldLabel\" style=\"margin-left: 0px;\">\r\n                     <input type=\"checkbox\"\r\n                        [(ngModel)]=\"_reportFilterService.BalanceSheetObj.BalanceSheet_SHOWDEBTORSCREDITORS\" (change)=\"\r\n                   $event.target.checked\r\n                     ? (_reportFilterService.BalanceSheetObj.BalanceSheet_SHOWDEBTORSCREDITORS = 1)\r\n                     : (_reportFilterService.BalanceSheetObj.BalanceSheet_SHOWDEBTORSCREDITORS = 0)\">&nbsp;&nbsp;Show\r\n                     Debtors /\r\n                     Creditors Party List\r\n                  </label>\r\n               </div>\r\n            </fieldset>\r\n\r\n         </div>\r\n      </div>\r\n\r\n      <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n         <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n         <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n      </div>\r\n\r\n   </div>"

/***/ }),

/***/ 1723:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .action-btn {\r\n        width: 80%;\r\n        height: 80%;\r\n        display: block;\r\n        margin: 0 auto;\r\n        background-color: inherit;\r\n        border: none;\r\n    }\r\n\r\n    .input-text {\r\n        width: 100%;\r\n        /* height: 30px !important; */\r\n        font-weight: bold;\r\n    }\r\n\r\n    .td-class {\r\n        border: none !important;\r\n    }\r\n\r\n    .date-input {\r\n        width: 93%;\r\n        font-size: 12px !important;\r\n        height: 30px !important;\r\n    }\r\n      @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .report-height{\r\n        height:52vh; \r\n        overflow:auto;\r\n    }\r\n    }\r\n         @media screen and (max-width:767px) {\r\n            .smallBoldLabel{\r\n                  width: auto !important;\r\n            }\r\n            \r\n        \r\n    }\r\n</style>\r\n<div class=\"container report-container\">\r\n    <div class=\"row\">\r\n        <!-- Filter Starts -->\r\n        <div class=\"col-12 col-md-12\">\r\n            <div style=\"background-color : #ffffff;  width: 100%;\">\r\n                <div class=\"row\">\r\n                    <div class=\"modal-header\" style=\"border:0px;\">\r\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\"\r\n                            (click)=\"closeReportBox()\">&times;</button>\r\n                        <h4 class=\"modal-title\" style=\"padding-left: 3%;\">Debtors Bill Tracking Report</h4>\r\n                    </div>\r\n                    <div class=\"col-md-12 report-height \" style=\"padding-top: 2%;\">\r\n                        <!-- Left Side-->\r\n                        <div class=\"col-md-6\">\r\n                            <fieldset>\r\n                                <legend>As On Date :</legend>\r\n                                <table>\r\n                                    <!-- <tr>\r\n                                        <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                                        <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                                    </tr> -->\r\n                                    <tr>\r\n                                        <td class=\"td-class\">\r\n                                            <input type=\"date\" class=\"date-input form-control\"\r\n                                                placeholder=\"Year Start Date\"\r\n                                                [(ngModel)]=\"_reportFilterService.BillTrackingObj.BillTracking_DATE1\"\r\n                                                (change)=\"changeEntryDate($event.target.value,'AD')\">\r\n                                        </td>\r\n                                        <!-- <td class=\"td-class\">\r\n                                            <input type=\"date\" class=\"date-input form-control\"\r\n                                                placeholder=\"Year Start Date\"\r\n                                                [(ngModel)]=\"_reportFilterService.BillTrackingObj.BillTracking_DATE2\"\r\n                                                (change)=\"changeEndDate($event.target.value,'AD')\">\r\n                                        </td> -->\r\n                                        <td class=\"td-class\">\r\n                                            <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                                                (change)=\"changeEntryDate($event.detail.value,'BS')\" [label]=\"'From'\"\r\n                                                [(ngModel)]=\"_reportFilterService.BillTrackingObj.BillTracking_BSDATE1\">\r\n                                            </nepali-date-picker>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <!-- <tr>\r\n                                        <td class=\"td-class\">\r\n                                            <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                                                (change)=\"changeEntryDate($event.detail.value,'BS')\" [label]=\"'From'\"\r\n                                                [(ngModel)]=\"_reportFilterService.BillTrackingObj.BillTracking_BSDATE1\">\r\n                                            </nepali-date-picker>\r\n                                        </td>\r\n                                        <td class=\"td-class\">\r\n                                            <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDateTo'\"\r\n                                                (change)=\"changeEndDate($event.detail.value,'BS')\" [label]=\"'To'\"\r\n                                                [(ngModel)]=\"_reportFilterService.BillTrackingObj.BillTracking_BSDATE2\">\r\n                                            </nepali-date-picker>\r\n                                        </td>\r\n                                    </tr> -->\r\n                                </table>\r\n                            </fieldset>\r\n\r\n                            <fieldset>\r\n                                <legend>Division Selection:</legend>\r\n                                <select [(ngModel)]=\"_reportFilterService.BillTrackingObj.BillTracking_DIV\"\r\n                                    style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                                    <option value=\"%\"\r\n                                        *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">\r\n                                        ALL</option>\r\n                                    <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                                        {{ div.NAME }}\r\n                                    </option>\r\n                                </select>\r\n                            </fieldset>\r\n                            <fieldset>\r\n                                <legend>Cost Center:</legend>\r\n                                <select [(ngModel)]=\"_reportFilterService.BillTrackingObj.BillTracking_CostCenter\"\r\n                                    style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                                    <option value=\"%\"> </option>\r\n                                    <option *ngFor=\"let i of CostcenterList\" value={{i.CCID}}>{{i.COSTCENTERNAME}}\r\n                                    </option>\r\n                                </select>\r\n                            </fieldset>\r\n\r\n                            <fieldset>\r\n                                <legend>Report Type:</legend>\r\n                                <label class=\"smallBoldLabel\" style=\"padding-right:15px;\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                                      [(ngModel)]=\"_reportFilterService.BillTrackingObj.BillTracking_Detail\" value=0>&nbsp;Summary Report</label>\r\n                                <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                                      [(ngModel)]=\"_reportFilterService.BillTrackingObj.BillTracking_Detail\" value=1>&nbsp;Detail Report</label>\r\n                             </fieldset>\r\n                             \r\n<!-- \r\n                            <fieldset>\r\n                                <legend>Voucher Type:</legend>\r\n                                <select [(ngModel)]=\"_reportFilterService.BillTrackingObj.BillTracking_VoucherType\"\r\n                                    style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                                    <option value=\"PV\">Payment Voucher</option>\r\n                                    <option value=\"RV\">Receipt Voucher</option>\r\n                                </select>\r\n                            </fieldset> -->\r\n                        </div>\r\n                        <!-- Left Side-->\r\n\r\n                        <!-- Right Side-->\r\n                        <div class=\"col-md-6 filter-part\">\r\n                            <fieldset>\r\n                                <legend>Party A/C Selection :</legend>\r\n                                <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\"\r\n                                    [(ngModel)]=\"_reportFilterService.BillTrackingObj.BillTracking_ACCNAME\"\r\n                                    placeholder=\"Press Enter or Tab for Account List\"\r\n                                    (keydown.Tab)=\"AccountEnterClicked($event)\"\r\n                                    (keydown.enter)=\"AccountEnterClicked($event)\"\r\n                                    (keypress)=\"keyPress($event)\">\r\n                            </fieldset>\r\n                        </div>\r\n                        <!-- Right Side-->\r\n\r\n                    </div>\r\n                    <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n                        <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n                        <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\"\r\n                            class=\"btn btn-info\">Close</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <!-- Filter Ends -->\r\n    </div>\r\n</div>\r\n\r\n<div style=\"width:90%\" class=\"reportpopup\">\r\n    <generic-popup-grid #genericGridPartyLedger [popupsettings]=\"gridPopupSettingsForPartyLedgerList\"\r\n        (onItemDoubleClick)=\"dblClickAccountSelect($event)\">\r\n    </generic-popup-grid>\r\n</div>"

/***/ }),

/***/ 1724:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .action-btn {\r\n        width: 80%;\r\n        height: 80%;\r\n        display: block;\r\n        margin: 0 auto;\r\n        background-color: inherit;\r\n        border: none;\r\n    }\r\n    .input-text{\r\n        width : 100%;\r\n        /* height: 30px !important; */\r\n        font-weight: bold;\r\n    }\r\n    .td-class{\r\n        border: none !important;\r\n    }\r\n\r\n    label{\r\n       font-size: 12px;\r\n       margin: 0px 10px;\r\n   }\r\n    .date-input{\r\n        width: 93%;\r\n        font-size: 12px !important;\r\n        height: 30px !important;\r\n    }\r\n     @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .reportForm{\r\n        height: 50vh !important;\r\n       \r\n    }\r\n    }\r\n     @media screen and (max-width:767px) {\r\n        .smallBoldLabel{\r\n            width: auto !important;\r\n        }\r\n          .report-container{\r\n           width: 85% !important;\r\n    }\r\n        \r\n    }\r\n   \r\n</style>\r\n<div class=\"container report-container\">\r\n    <div class=\"row \">\r\n        <!-- Filter Starts -->\r\n        <div class=\"col-12 col-md-12\">\r\n            <div  style=\"background-color : #ffffff;  width: 100%;\">\r\n                <div class=\"row\">\r\n                    <div class=\"modal-header\" style=\"border:0px;\">\r\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\"\r\n                            (click)=\"closeReportBox()\">&times;</button>\r\n                        <h4 class=\"modal-title\"  style=\"padding-left: 3%;\">Cash Collection Voucher Report</h4>\r\n                    </div>\r\n                    <div class=\"col-md-12 reportForm\" style=\"padding-top: 2%; height:auto; overflow:auto;\">\r\n                        <div class=\"col-md-6\">\r\n                            <fieldset>\r\n                                <legend style=\"font-size:11px;font-weight: bold; width:auto;margin-bottom: -4px;\">Date Range Selection :</legend>\r\n                                <table>\r\n                                    <tr>\r\n                                        <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                                        <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td class=\"td-class\">\r\n                                                <input type=\"date\"\r\n                                                class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                                    [(ngModel)]=\"_reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_DATE1\"\r\n                                                    (change)=\"changeEntryDate($event.target.value,'AD')\">\r\n                                        </td>\r\n                                        <td class=\"td-class\">\r\n                                                <input type=\"date\"\r\n                                                class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                                    [(ngModel)]=\"_reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_DATE2\"\r\n                                                    (change)=\"changeEndDate($event.target.value,'AD')\">\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td class=\"td-class\">\r\n                                          <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                                            (change)=\"changeEntryDate($event.detail.value,'BS')\"\r\n                                            [label]=\"'From'\"\r\n                                            [(ngModel)]=\"_reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_BSDATE1\">\r\n                                          </nepali-date-picker>\r\n                                                <!-- <input id=\"nepaliDate\"\r\n                                                    style=\"text-align:center;\"\r\n                                                    class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                                    [(ngModel)]=\"_reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_BSDATE1\" type=\"text\"\r\n                                                    (change)=\"changeEntryDate($event.target.value,'BS')\"\r\n                                                    placeholder=\"yyyy-mm-dd\" />                             -->\r\n                                        </td>\r\n                                        <td class=\"td-class\">\r\n                                          <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDateTo'\"\r\n                                            (change)=\"changeEndDate($event.detail.value,'BS')\"\r\n                                            [label]=\"'To'\"\r\n                                            [(ngModel)]=\"_reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_BSDATE2\">\r\n                                          </nepali-date-picker>\r\n                                                <!-- <input id=\"nepaliDate\" style=\"text-align:center;\"\r\n                                                    class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                                    [(ngModel)]=\"_reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_BSDATE2\" type=\"text\"\r\n                                                    (change)=\"changeEndDate($event.target.value,'BS')\"\r\n                                                    placeholder=\"yyyy-mm-dd\" /> -->\r\n                                        </td>\r\n                                    </tr>\r\n                                </table>\r\n                            </fieldset>\r\n                            </div>\r\n\r\n\r\n                        <!-- The One With Tree Part-->\r\n                        <div class=\"col-md-6 filter-part\">\r\n                            <fieldset>\r\n                                <legend>Voucher Status:</legend>\r\n                                <div class=\"row\">\r\n                                    <div class=\"col-md-12\">\r\n                                        <label for=\"\"><input type=\"radio\" [(ngModel)]=\"_reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_VoucherStatus\" value=0>&nbsp;All</label>\r\n                                        <label for=\"\"><input type=\"radio\" [(ngModel)]=\"_reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_VoucherStatus\" value=1>&nbsp;Voucher Generated</label>\r\n                                        <label for=\"\"><input type=\"radio\" [(ngModel)]=\"_reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_VoucherStatus\" value=2>&nbsp;Not Generated</label>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </fieldset>\r\n                            <fieldset>\r\n                                <legend>Party A/C Selection :</legend>\r\n                                <input #partyAccountSelection type=\"text\" style=\"font-weight: bold;\" class=\"form-control\" [(ngModel)]=\"_reportFilterService.CashCollectionVoucherObj.CashCollectionVoucher_PartyName\"\r\n                                    placeholder=\"Press Enter or Tab for Party List\" (keydown.Tab)=\"AccountEnterClicked($event)\" (ngModelChange)=\"onValueChange()\"\r\n                                    (keydown.enter)=\"AccountEnterClicked($event)\">\r\n                            </fieldset>                        \r\n\r\n                  \r\n\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n                        <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n                        <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\"\r\n                            class=\"btn btn-info\">Close</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <!-- Filter Ends -->\r\n    </div>\r\n</div>\r\n\r\n<div style=\"width:90%\" class=\"reportpopup\">\r\n    <generic-popup-grid #genericGridPartyLedger [popupsettings]=\"gridPopupSettingsForPartyLedgerList\"\r\n    (onItemDoubleClick)=\"dblClickAccountSelect($event)\">\r\n</generic-popup-grid>\r\n</div>\r\n\r\n\r\n<div style=\"width:90%\" class=\"reportpopup\">\r\n    <generic-popup-grid #genericGridMultiplePartyLedger [popupsettings]=\"gridPopupSettingsForMultiplePartyLedgerList\"\r\n    (onItemDoubleClick)=\"dblClickMultipleAccountSelect($event)\">\r\n</generic-popup-grid>\r\n</div>\r\n\r\n<div style=\"width:90%\" class=\"reportpopup\">\r\n    <generic-popup-grid #genericGridMultipleGroupAccount [popupsettings]=\"gridPopupSettingsForMultipleGroupAccountList\"\r\n    (onItemDoubleClick)=\"dblClickGroupAccountSelect($event)\">\r\n</generic-popup-grid>\r\n</div>\r\n"

/***/ }),

/***/ 1725:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .input-text{\r\n        width : 100%;\r\n        /* height: 30px !important; */\r\n        font-weight: bold;\r\n    }\r\n    .td-class{\r\n        border: none !important;\r\n    }\r\n    .date-input{\r\n        width: 93%;\r\n        font-size: 12px !important;\r\n        height: 30px !important;\r\n    }\r\n       @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .report-height{\r\n        height:52vh; \r\n        overflow:auto;\r\n    }\r\n    }\r\n         @media screen and (max-width:767px) {\r\n            .smallBoldLabel{\r\n                  width: auto !important;\r\n            }\r\n            \r\n        \r\n    }\r\n</style>\r\n<div class=\"container report-container \" style=\"background-color : #ffffff; padding :1%; height : auto;  \">\r\n    <div class=\"row\">\r\n        <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n            <h4 class=\"modal-title\">Cash & Bank Book Report</h4>\r\n        </div>\r\n        <div class=\"col-md-12 report-height\">\r\n            <!-- Left Column -->\r\n            <div class=\"col-md-6\">\r\n                <fieldset>\r\n                    <legend style=\"font-size:11px;font-weight: bold; width:auto\">Date Range Selection :</legend>\r\n                <table>\r\n                        <tr>\r\n                            <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                            <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td class=\"td-class\">\r\n                                    <input type=\"date\"\r\n                                    class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                        [(ngModel)]=\"_reportFilterService.CashAndBankBookObj.CashBankBook_DATE1\"\r\n                                        (change)=\"changeEntryDate($event.target.value,'AD')\" (focusout)=\"focusOutFromDate($event.target.value)\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                            </td>\r\n                            <td class=\"td-class\">\r\n                                    <input type=\"date\"\r\n                                    class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                        [(ngModel)]=\"_reportFilterService.CashAndBankBookObj.CashBankBook_DATE2\"\r\n                                        (change)=\"changeEndDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td class=\"td-class\">\r\n                              <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                              (change)=\"changeEntryDate($event.detail.value,'BS')\"\r\n                              [label]=\"'From'\"\r\n                              [(ngModel)]=\"_reportFilterService.CashAndBankBookObj.CashBankBook_BSDATE1\">\r\n                            </nepali-date-picker>\r\n                                     <!-- <input id=\"nepaliDate\"\r\n                                     style=\"text-align:center;\"\r\n                                     class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                        [(ngModel)]=\"_reportFilterService.CashAndBankBookObj.CashBankBook_BSDATE1\" type=\"text\"\r\n                                        (change)=\"changeEntryDate($event.target.value,'BS')\"\r\n                                        placeholder=\"yyyy-mm-dd\" />                 -->\r\n                            </td>\r\n                            <td class=\"td-class\">\r\n                              <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDateTo'\"\r\n                              (change)=\"changeEndDate($event.detail.value,'BS')\"\r\n                              [label]=\"'To'\"\r\n                              [(ngModel)]=\"_reportFilterService.CashAndBankBookObj.CashBankBook_BSDATE2\">\r\n                            </nepali-date-picker>\r\n                                    <!-- <input id=\"nepaliDate\" style=\"text-align:center;\"\r\n                                    class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                        [(ngModel)]=\"_reportFilterService.CashAndBankBookObj.CashBankBook_BSDATE2\" type=\"text\"\r\n                                        (change)=\"changeEndDate($event.target.value,'BS')\"\r\n                                        placeholder=\"yyyy-mm-dd\" /> -->\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </fieldset>\r\n\r\n                <fieldset>\r\n                    <legend>Division Selection:</legend>\r\n                    <select [(ngModel)]=\"_reportFilterService.CashAndBankBookObj.CashBankBook_DIV\" style=\"height: 30px !important;\"\r\n                    class=\"form-control input-text\">\r\n                    <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL</option>\r\n                        <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                            {{ div.NAME }}\r\n                        </option>\r\n                    </select>\r\n                </fieldset>\r\n\r\n                <fieldset>\r\n                    <legend>Report Option</legend>\r\n                    <label class=\"smallBoldLabel\"><input type=\"radio\" style=\"padding-right:15px;\" name=\"BalViewOp1\"\r\n                            [(ngModel)]=\"_reportFilterService.CashAndBankBookObj.REPORTMODE\" value=\"1\"\r\n                            (change)=\"checkReportMode()\">&nbsp;Cash Only</label><br>\r\n                    <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOp1\"\r\n                            [(ngModel)]=\"_reportFilterService.CashAndBankBookObj.REPORTMODE\" value=\"2\"\r\n                            (change)=\"checkReportMode()\">&nbsp;Bank Only</label><br>\r\n                    <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOp1\"\r\n                            [(ngModel)]=\"_reportFilterService.CashAndBankBookObj.REPORTMODE\" value=\"0\"\r\n                            [disabled]=\"_reportFilterService.CashAndBankBookObj.CashBankBook_DETAILREPORT=='1'\">&nbsp;Both</label>\r\n                </fieldset>\r\n                <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n                    <label class=\"smallBoldLabel\" style=\"width:225px;\">\r\n                        <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.CashAndBankBookObj.CashBankBook_INCLUDEPOSTDATE\" style=\"margin-left: 21px;\"\r\n                        (change)=\"$event.target.checked?(_reportFilterService.CashAndBankBookObj.CashBankBook_INCLUDEPOSTDATE=1):(_reportFilterService.CashAndBankBookObj.CashBankBook_INCLUDEPOSTDATE=0)\"\r\n                [checked]=\"_reportFilterService.CashAndBankBookObj.CashBankBook_INCLUDEPOSTDATE == 1\" >\r\n                        Include Post Dated Transaction Also\r\n                    </label>\r\n                </div> \r\n            </div>\r\n            <!-- Right Column -->\r\n            <div class=\"col-md-6\">\r\n                <fieldset>\r\n                    <legend>Report Type:</legend>\r\n                    <label class=\"smallBoldLabel\" style=\"padding-right:15px;\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                            [(ngModel)]=\"_reportFilterService.CashAndBankBookObj.CashBankBook_DETAILREPORT\" value=0\r\n                            (change)=\"checkSummary()\">&nbsp;Summary Report</label>\r\n                    <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                            [(ngModel)]=\"_reportFilterService.CashAndBankBookObj.CashBankBook_DETAILREPORT\" value=1\r\n                            (change)=\"checkSummary()\">&nbsp;Detail Report</label>\r\n                </fieldset>\r\n\r\n                <!-- <account-list></account-list> -->\r\n                <fieldset>\r\n                    <legend>Account Selection: </legend>\r\n                    <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\"\r\n                        [disabled]=\"_reportFilterService.CashAndBankBookObj.CashBankBook_DETAILREPORT==0\"\r\n                        [(ngModel)]=\"_reportFilterService.CashAndBankBookObj.ACCNAME\" placeholder=\"Press Enter or Tab for Account List\"\r\n                        (keydown.Tab)=\"AccountEnterClicked($event)\" (keydown.enter)=\"AccountEnterClicked($event)\">\r\n                </fieldset>\r\n\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n            <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n            <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <generic-popup-grid #genericGridCashBankBook [popupsettings]=\"gridPopupSettingsForAccountList\"\r\n    (onItemDoubleClick)=\"dblClickAccountSelect($event)\">\r\n</generic-popup-grid>\r\n"

/***/ }),

/***/ 1726:
/***/ (function(module, exports) {

module.exports = "\r\n <div id=\"cashBookReportId\" style=\"background-color : #ffffff; height : auto; padding:1%; width : 60%;\" >\r\n      <div class=\"row\">\r\n            <div class=\"modal-header\"  style=\"width : 97%; margin : 0px auto;\">\r\n               <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n               <h4 class=\"modal-title\">Cash Book Report</h4>\r\n             </div>\r\n \r\n      <div class=\"col-md-12\">\r\n\r\n            <fieldset style=\"width : 99%;\">\r\n                  <legend>Date Range Selection :</legend>\r\n                  <div class=\"_date_range\">\r\n                     <a (click)=\"changeDateByRange('1')\" value=\"week\" style=\"color : white;\" class=\"btn btn-info\">This Week</a>\r\n                     <a (click)=\"changeDateByRange('2')\" value=\"month\" style=\"color : white;\" class=\"btn btn-info\">This Month</a>\r\n                     <a (click)=\"changeDateByRange('3')\" value=\"year\" style=\"color : white;\" class=\"btn btn-info\">This Year</a>\r\n                  </div>\r\n                  <table>\r\n                     <tr>\r\n                        <td><label class=\"smallBoldLabel\">From(AD):</label></td>\r\n                        <td><label class=\"smallBoldLabel\">To(AD):</label></td>\r\n                     </tr>\r\n                     <tr>\r\n                        <td>                                                 \r\n                              <label class=\"smallBoldLabel\"><input  type=\"date\"  style=\"width:152px; min-width:50%;\"  placeholder=\"Year Start Date\" [(ngModel)]=\"ReportParameters.DATE1\"  (change)=\"changestartDate($event.target.value,'AD')\"  ></label>\r\n                        </td>\r\n                        <td>                                                 \r\n                              <label class=\"smallBoldLabel\"><input  type=\"date\" style=\"width:152px; min-width:50%;\"  placeholder=\"Year Start Date\" [(ngModel)]=\"ReportParameters.DATE2\"  (change)=\"changeEndDate($event.target.value,'AD')\"   ></label>\r\n                        </td>\r\n                     </tr>\r\n                     <tr>\r\n                        <td>\r\n                              <label class=\"smallBoldLabel\"><input id=\"nepaliDate\" style=\"width:152px;height:25px;text-align:center\" class=\"nepali-calendar ndp-nepali-calendar\" [(ngModel)]=\"ReportParameters.BSDATE1\"\r\n                           type=\"text\" (change)=\"changestartDate($event.target.value,'BS')\"\r\n                           placeholder=\"yyyy-mm-dd\" /> </label>\r\n                        </td>\r\n                        <td>\r\n                              <label class=\"smallBoldLabel\"><input id=\"nepaliDate\" style=\"width:152px;height:25px;text-align:center\" class=\"nepali-calendar ndp-nepali-calendar\" [(ngModel)]=\"ReportParameters.BSDATE2\"\r\n                           type=\"text\" (change)=\"changeEndDate($event.target.value,'BS')\"\r\n                           placeholder=\"yyyy-mm-dd\" /> </label>\r\n                        </td>\r\n                     </tr>\r\n                  </table>\r\n            </fieldset>\r\n\r\n\r\n            <fieldset>\r\n                  <legend>Cash Account Selection:</legend>\r\n                  <select [(ngModel)]=\"ReportParameters.CASH_ACID\" style=\"width : 100%;\">\r\n                    <option value=\"%\">ALL</option>\r\n                     <option *ngFor=\"let cashAc of cashAccount\" value=\"{{ cashAc.ACID }}\">\r\n                        {{ cashAc.ACNAME  }}\r\n                     </option>\r\n                  </select>\r\n                  <br>\r\n                  <label class=\"smallBoldLabel\" style=\"width : 100%; margin: 0;\"><input type=\"checkbox\" name=\"showConCashBook\"  style=\"margin-left : 1%;\">&nbsp;Show Consolidated Cash Book </label>       \r\n               </fieldset>\r\n               <label class=\"smallBoldLabel\"><input type=\"checkbox\" name=\"mergeVat\" (change)=\"$event.target.checked?(ReportParameters.MergeVatAc=1):(ReportParameters.MergeVatAc=0)\" [checked]=\"ReportParameters.MergeVatAc == 1\">&nbsp;Merge Vat a/c In Abb. Sale/Sales Return</label>       \r\n               <br>\r\n               <fieldset>\r\n                  <legend>Division Selection:</legend>\r\n                  <select [(ngModel)]=\"ReportParameters.DIVISION\" style=\"width : 100%;\">\r\n                     <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0\">ALL</option>\r\n                     <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                        {{ div.NAME }}\r\n                     </option>\r\n                  </select>\r\n               </fieldset>\r\n           \r\n               <div class=\"btn\">\r\n                    <!-- <button type=\"button\"  title=\"onSave\" class=\"btn btn-info\">Run</button>    -->\r\n                    <button class=\"btn btn-info confirm-btn\" type=\"button\"  (click)=onload()>RUN</button>\r\n                    <button type=\"button\"  title=\"Cancel\" class=\"btn btn-info\">Close</button>  \r\n                 </div>\r\n\r\n      </div>\r\n   </div>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n"

/***/ }),

/***/ 1727:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .input-text {\r\n        width: 100%;\r\n        /* height: 30px !important; */\r\n        font-weight: bold;\r\n    }\r\n\r\n    .td-class {\r\n        border: none !important;\r\n    }\r\n\r\n    .date-input {\r\n        width: 93%;\r\n        font-size: 12px !important;\r\n        height: 30px !important;\r\n    }\r\n     @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .report-height{\r\n        height:52vh; \r\n        overflow:auto;\r\n    }\r\n    }\r\n         @media screen and (max-width:767px) {\r\n            .smallBoldLabel{\r\n                  width: auto !important;\r\n            }\r\n            \r\n        \r\n    }\r\n</style>\r\n<div class=\"container report-container\" style=\"background-color : #ffffff; padding :1%; height : auto;  \">\r\n    <div class=\"row\">\r\n        <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n            <h4 class=\"modal-title\">Consolidated Balance Sheet Report</h4>\r\n        </div>\r\n        <div class=\"col-md-12 report-height\" style=\"padding-top: 2%;\">\r\n            <!-- Left Column -->\r\n            <div class=\"col-md-6\">\r\n                <fieldset>\r\n                    <legend style=\"font-size:11px;font-weight: bold; width:auto;margin-bottom: -4px;\">Date Range\r\n                        Selection :\r\n                    </legend>\r\n                    <table>\r\n                        <tr>\r\n                            <!-- <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td> -->\r\n                            <!-- <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td> -->\r\n                        </tr>\r\n                        <tr>\r\n                            <td class=\"td-class\">\r\n                                <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                    [(ngModel)]=\"_reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_DATE2\"\r\n                                    (change)=\"changeEndDate($event.target.value,'AD')\"\r\n                                    max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\"\r\n                                    min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                            </td>\r\n                            <td class=\"td-class\">\r\n                                <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                                    (change)=\"changeEndDate($event.detail.value,'BS')\" [label]=\"'From'\"\r\n                                    [(ngModel)]=\"_reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_BSDATE2\">\r\n                                </nepali-date-picker>\r\n\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n\r\n                        </tr>\r\n                    </table>\r\n                </fieldset>\r\n\r\n\r\n            </div>\r\n            <!-- Right Column -->\r\n            <div class=\"col-md-6\">\r\n                <div class=\"col-md-12 checkbox\" style=\"padding-top:5px;\">\r\n                    <label class=\"smallBoldLabel\" style=\"margin-left: 0px;\">\r\n                        <input type=\"checkbox\" style=\"margin-left:119px;\"\r\n                            [(ngModel)]=\"_reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_SHOWDEBTORSCREDITORS\"\r\n                            (change)=\"\r\n                    $event.target.checked\r\n                      ? (_reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_SHOWDEBTORSCREDITORS = 1)\r\n                      : (_reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_SHOWDEBTORSCREDITORS = 0)\">&nbsp;&nbsp;Show\r\n                        Debtors / Creditors Party List\r\n                    </label>\r\n                </div>\r\n\r\n                <div class=\"col-md-12 checkbox\" style=\"padding-top:5px\">\r\n                    <label class=\"smallBoldLabel\" style=\"margin-left: 0px;\">\r\n                        <input type=\"checkbox\" style=\"margin-left: 121px;\"\r\n                            [(ngModel)]=\"_reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_SHOWTOTALINGROUP\" (change)=\"\r\n                    $event.target.checked\r\n                      ? (_reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_SHOWTOTALINGROUP = 1)\r\n                      : (_reportFilterService.ConsolidatedBalanceSheetObj.Consolidated_BalanceSheet_SHOWTOTALINGROUP = 0)\">&nbsp;&nbsp;Show Group\r\n                        Total In Report\r\n                    </label>\r\n                </div>\r\n                <!-- </fieldset> -->\r\n\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n            <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n            <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n        </div>\r\n\r\n    </div>"

/***/ }),

/***/ 1728:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .input-text {\r\n        width: 100%;\r\n        /* height: 30px !important; */\r\n        font-weight: bold;\r\n    }\r\n\r\n    .td-class {\r\n        border: none !important;\r\n    }\r\n\r\n    .date-input {\r\n        width: 93%;\r\n        font-size: 12px !important;\r\n        height: 30px !important;\r\n    }\r\n      @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .report-height{\r\n        height:52vh; \r\n        overflow:auto;\r\n    }\r\n    }\r\n         @media screen and (max-width:767px) {\r\n            .smallBoldLabel{\r\n                  width: auto !important;\r\n            }\r\n            \r\n        \r\n    }\r\n</style>\r\n<div class=\"container report-container\" style=\"background-color : #ffffff; padding :1%; height : auto;  \">\r\n    <div class=\"row\">\r\n        <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n            <h4 class=\"modal-title\">Consolidated Profit & Loss Report</h4>\r\n        </div>\r\n        <div class=\"col-md-12 report-height\" style=\"padding-top: 2%;\">\r\n            <!-- Left Column -->\r\n            <div class=\"col-md-6\">\r\n                <fieldset>\r\n                    <legend style=\"font-size:11px;font-weight: bold; width:auto;margin-bottom: -4px;\">Date Range Selection :\r\n                    </legend>\r\n                    <table>\r\n                       <tr>\r\n                          <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                          <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                       </tr>\r\n                       <tr>\r\n                          <td class=\"td-class\">\r\n                             <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                [(ngModel)]=\"_reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_DATE1\"\r\n                                (change)=\"changeEntryDate($event.target.value,'AD')\"\r\n                                max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\"\r\n                                min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                          </td>\r\n                          <td class=\"td-class\">\r\n                             <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                [(ngModel)]=\"_reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_DATE2\"\r\n                                (change)=\"changeEndDate($event.target.value,'AD')\"\r\n                                max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\"\r\n                                min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                          </td>\r\n                       </tr>\r\n                       <tr>\r\n                          <td class=\"td-class\">\r\n                             <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                                (change)=\"changeEntryDate($event.detail.value,'BS')\" [label]=\"'From'\"\r\n                                [(ngModel)]=\"_reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_BSDATE1\">\r\n                             </nepali-date-picker>\r\n                          </td>\r\n                          <td class=\"td-class\">\r\n                             <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDateTo'\"\r\n                                (change)=\"changeEndDate($event.detail.value,'BS')\" [label]=\"'To'\"\r\n                                [(ngModel)]=\"_reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_BSDATE2\">\r\n                             </nepali-date-picker>\r\n                          </td>\r\n                       </tr>\r\n                    </table>\r\n                 </fieldset>\r\n                 <fieldset>\r\n                    <legend style=\"font-size:11px;font-weight: bold; width:auto;margin-bottom: -4px;\">Cost Center Wise Selection\r\n                    </legend>\r\n                    <div class=\"col-md-12 checkbox\" style=\"padding-top:5px\">\r\n                        <label class=\"smallBoldLabel\" style=\"margin-left: 0px;\">\r\n                            <input type=\"checkbox\"\r\n                                [(ngModel)]=\"_reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_COSTCENTERWISE\" (change)=\"\r\n                        $event.target.checked\r\n                          ? (_reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_COSTCENTERWISE = 1)\r\n                          : (_reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_COSTCENTERWISE = 0)\">&nbsp;&nbsp;Cost Center Wise\r\n                        </label>\r\n                    </div>\r\n                 </fieldset>\r\n\r\n\r\n            </div>\r\n            <!-- Right Column -->\r\n            <div class=\"col-md-6\">\r\n                <div class=\"col-md-12 checkbox\" style=\"padding-top:5px\">\r\n                    <label class=\"smallBoldLabel\" style=\"margin-left: 0px;\">\r\n                        <input type=\"checkbox\" style=\"margin-left: 158px;\"\r\n                            [(ngModel)]=\"_reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_SHOWTOTALINGROUP\" (change)=\"\r\n                    $event.target.checked\r\n                      ? (_reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_SHOWTOTALINGROUP = 1)\r\n                      : (_reportFilterService.ConsolidatedProfitLossObj.Consolidated_ProfitLoss_SHOWTOTALINGROUP = 0)\">&nbsp;&nbsp;Show Group\r\n                        Total In Report\r\n                    </label>\r\n                </div>\r\n                <!-- </fieldset> -->\r\n\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n            <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n            <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n        </div>\r\n\r\n    </div>"

/***/ }),

/***/ 1729:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .input-text {\r\n       width: 100%;\r\n       /* height: 30px !important; */\r\n       font-weight: bold;\r\n    }\r\n \r\n    .td-class {\r\n       border: none !important;\r\n    }\r\n \r\n    .date-input {\r\n       width: 93%;\r\n       font-size: 12px !important;\r\n       height: 30px !important;\r\n    }\r\n     @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .report-height{\r\n        height:52vh; \r\n        overflow:auto;\r\n    }\r\n    }\r\n         @media screen and (max-width:767px) {\r\n            .smallBoldLabel{\r\n                  width: auto !important;\r\n            }\r\n            \r\n        \r\n    }\r\n </style>\r\n <div class=\"container report-container\" style=\"background-color : #ffffff; padding :1%; height : auto;  \">\r\n    <div class=\"row\">\r\n       <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n          <h4 class=\"modal-title\" style=\"font-size:1.25rem; font-weight:545; color:black;\">Consolidated Trial Balance</h4>\r\n       </div>\r\n       <div class=\"col-md-12 report-height\" style=\"padding-top: 2%;\">\r\n          <!-- Left Column -->\r\n          <div class=\"col-md-6\">\r\n             <fieldset>\r\n                <legend style=\"font-size:13px;font-weight: bold; width:auto;margin-bottom: -4px;\">Date Range Selection :\r\n                </legend>\r\n                <table>\r\n                   <tr>\r\n                      <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                      <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                   </tr>\r\n                   <tr>\r\n                      <td class=\"td-class\">\r\n                         <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                            [(ngModel)]=\"_reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DATE1\"\r\n                            (change)=\"changeEntryDate($event.target.value,'AD')\"\r\n                            max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\"\r\n                            min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                      </td>\r\n                      <td class=\"td-class\">\r\n                         <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                            [(ngModel)]=\"_reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DATE2\"\r\n                            (change)=\"changeEndDate($event.target.value,'AD')\"\r\n                            max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\"\r\n                            min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                      </td>\r\n                   </tr>\r\n                   <tr>\r\n                      <td class=\"td-class\">\r\n                       <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                       (change)=\"changeEntryDate($event.detail.value,'BS')\"\r\n                       [label]=\"'From'\"\r\n                       [(ngModel)]=\"_reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_BSDATE1\">\r\n                     </nepali-date-picker>\r\n                         \r\n                      </td>\r\n                      <td class=\"td-class\">\r\n                       <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDateTo'\"\r\n                       (change)=\"changeEndDate($event.detail.value,'BS')\"\r\n                       [label]=\"'To'\"\r\n                       [(ngModel)]=\"_reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_BSDATE2\">\r\n                     </nepali-date-picker>\r\n                      </td>\r\n                   </tr>\r\n                </table>\r\n             </fieldset>\r\n \r\n \r\n             <!-- <fieldset>\r\n                <legend>Division Selection:</legend>\r\n                <select [(ngModel)]=\"_reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_DIV\"\r\n                   style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                   <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL</option>\r\n                   <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                      {{ div.NAME }}\r\n                   </option>\r\n                </select>\r\n             </fieldset> -->\r\n\r\n             <fieldset>\r\n                <legend>Cost Center:</legend>\r\n                <select [(ngModel)]=\"_reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_CostCenter\"\r\n                   style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                   <option value=\"%\"> </option>\r\n                   <option *ngFor=\"let i of CostcenterList\" value={{i.CCID}}>{{i.COSTCENTERNAME}}\r\n                   </option>\r\n                </select>\r\n             </fieldset>\r\n          </div>\r\n          <!-- Right Column -->\r\n          <div class=\"col-md-6\">\r\n             <fieldset style=\"padding-bottom: 5px;\">\r\n                <legend>Report Format :</legend>\r\n                <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"reportformat\"\r\n                      [(ngModel)]=\"_reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_LEDGERWISE\" value= 0>&nbsp;A/C Group\r\n                   Wise Format</label>&nbsp;&nbsp;&nbsp;\r\n                <label class=\"smallBoldLabel\" style=\"clear : both;\"><input type=\"radio\" name=\"reportformat\"\r\n                      [(ngModel)]=\"_reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_LEDGERWISE\" value= 1>&nbsp;A/C Ledger\r\n                   Wise Format\r\n                </label>\r\n             </fieldset>\r\n \r\n             <fieldset>\r\n                <legend>Report Options :</legend>\r\n                <label class=\"smallBoldLabel\"><input type=\"checkbox\" (change)=\"checkValue()\"\r\n                      [(ngModel)]=\"_reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWOPENINGTRIALONLY\">&nbsp;Show\r\n                   Opening Trial Balance Report Only</label><br>\r\n                <label class=\"smallBoldLabel\"><input type=\"checkbox\"\r\n                      [(ngModel)]=\"_reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWSUBLEDGER\">&nbsp;Show Sub\r\n                   Ledger In Trial Balance Report</label><br>\r\n                <label class=\"smallBoldLabel\"><input type=\"checkbox\"\r\n                      [(ngModel)]=\"_reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWDEBTORSCREDITORSDETAILS\">&nbsp;Show\r\n                   Debtors/Creditors Party List</label><br>\r\n                   <label class=\"smallBoldLabel\"><input type=\"checkbox\"\r\n                      [(ngModel)]=\"_reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWSTOCKVALUE\">&nbsp;Show\r\n                   Closing\r\n                   Stock Value In Trial Balance Report</label><br>\r\n                <label class=\"smallBoldLabel\"><input type=\"checkbox\" [checked]=\"_reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWNETCLOSING == 1\"\r\n                      [(ngModel)]=\"_reportFilterService.ConsolidatedTrialBalanceObj.Consolidated_TrialBalance_SHOWNETCLOSING\">&nbsp;Show Net Value in Opening/Closing Balance</label>\r\n             </fieldset>\r\n\r\n \r\n          </div>\r\n       </div>\r\n \r\n       <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n          <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n          <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n       </div>\r\n \r\n    </div>\r\n "

/***/ }),

/***/ 1730:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .input-text {\r\n       width: 100%;\r\n       /* height: 30px !important; */\r\n       font-weight: bold;\r\n    }\r\n\r\n    .td-class {\r\n       border: none !important;\r\n    }\r\n\r\n    .date-input {\r\n       width: 93%;\r\n       font-size: 12px !important;\r\n       height: 30px !important;\r\n    }\r\n        @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .report-height{\r\n        height:52vh; \r\n        overflow:auto;\r\n    }\r\n    }\r\n    @media screen and (max-width:767px) {\r\n        .smallBoldLabel{\r\n            width: auto !important;\r\n        }\r\n      \r\n        \r\n    }\r\n </style>\r\n<div class=\"container report-container\" style=\"background-color : #ffffff; padding :1%; height : auto;  \">\r\n   <div class=\"row\">\r\n      <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n         <h4 class=\"modal-title\">Creditors Report</h4>\r\n      </div>\r\n      <div class=\"col-md-12 report-height\" style=\"padding-top: 2%;\">\r\n         <!-- Left Column -->\r\n         <div class=\"col-md-6\">\r\n            <fieldset>\r\n               <legend style=\"font-size:11px;font-weight: bold; width:auto;margin-bottom: -4px;\">Date Range Selection :</legend>\r\n               <table>\r\n                   <tr>\r\n                       <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                       <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td class=\"td-class\">\r\n                               <input type=\"date\"\r\n                            class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                   [(ngModel)]=\"_reportFilterService.CreditorsReportObj.Creditors_DATE1\"\r\n                                   (change)=\"changeEntryDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                       </td>\r\n                       <td class=\"td-class\">\r\n                               <input type=\"date\"\r\n                            class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                   [(ngModel)]=\"_reportFilterService.CreditorsReportObj.Creditors_DATE2\"\r\n                                   (change)=\"changeEndDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                       </td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td class=\"td-class\">\r\n                        <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                        (change)=\"changeEntryDate($event.detail.value,'BS')\"\r\n                        [label]=\"'From'\"\r\n                        [(ngModel)]=\"_reportFilterService.CreditorsReportObj.Creditors_BSDATE1\">\r\n                        </nepali-date-picker>\r\n                       </td>\r\n                       <td class=\"td-class\">\r\n                        <nepali-date-picker name=\"nepaliDateTo\" [id]=\"'nepaliDateTo'\"\r\n                        (change)=\"changeEndDate($event.detail.value,'BS')\"\r\n                        [label]=\"'To'\"\r\n                        [(ngModel)]=\"_reportFilterService.CreditorsReportObj.Creditors_BSDATE2\">\r\n                        </nepali-date-picker>\r\n                       </td>\r\n                   </tr>\r\n               </table>\r\n           </fieldset>\r\n            <fieldset>\r\n               <legend>Division Selection:</legend>\r\n               <select [(ngModel)]=\"_reportFilterService.CreditorsReportObj.Creditors_DIV\" style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                  <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL</option>\r\n                   <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                       {{ div.NAME }}\r\n                   </option>\r\n               </select>\r\n           </fieldset>\r\n            <fieldset *ngIf=\"this.masterService.userSetting.enableCostCenter!=0\">\r\n                <legend>Cost Center:</legend>\r\n                <select [(ngModel)]=\"_reportFilterService.CreditorsReportObj.Creditors_CostCenter\"\r\n                style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                    <option value=\"%\"> </option>\r\n                    <option *ngFor=\"let i of CostcenterList\" value={{i.CCID}}>{{i.COSTCENTERNAME}}\r\n                    </option>\r\n                </select>\r\n            </fieldset>\r\n            <label class=\"smallBoldLabel\"><input type=\"checkbox\" name=\"showCred\"\r\n               (change)=\"checkValueForOpeningCreditors()\"\r\n                    [(ngModel)]=\"_reportFilterService.CreditorsReportObj.Creditors_OPNINGBLONLY\">&nbsp;Show Opening Creditors Only </label><br>\r\n\r\n            <label class=\"smallBoldLabel\"><input type=\"checkbox\" name=\"showCred\"\r\n                     (change)=\"$event.target.checked?(_reportFilterService.CreditorsReportObj.Creditors_SHOWBRANCHBL=1):(_reportFilterService.CreditorsReportObj.Creditors_SHOWBRANCHBL=0)\"\r\n                     [checked]=\"_reportFilterService.CreditorsReportObj.Creditors_SHOWBRANCHBL == 1\">&nbsp;Do Not Show Branch Party B/L in Debtors Report</label><br>\r\n\r\n            <label class=\"smallBoldLabel\"><input type=\"checkbox\" name=\"showCred\"\r\n               (change)=\"$event.target.checked?(_reportFilterService.CreditorsReportObj.SHOWDPARTYDETAIL=1):(_reportFilterService.CreditorsReportObj.SHOWDPARTYDETAIL=0)\"\r\n               [checked]=\"_reportFilterService.CreditorsReportObj.SHOWDPARTYDETAIL == 1\">&nbsp;Show Party Detail Info</label><br>\r\n               <label class=\"smallBoldLabel\"><input type=\"checkbox\" name=\"incpostdate\"\r\n                  (change)=\"$event.target.checked?(_reportFilterService.CreditorsReportObj.Creditors_INCLUDEPOSTEDTRANSACTION=1):(_reportFilterService.CreditorsReportObj.Creditors_INCLUDEPOSTEDTRANSACTION=0)\"\r\n                  [checked]=\"_reportFilterService.CreditorsReportObj.Creditors_INCLUDEPOSTEDTRANSACTION == 1\">&nbsp;Include Post Dated\r\n               Transaction</label><br>\r\n               <!-- <label class=\"smallBoldLabel\"><input type=\"checkbox\" name=\"incpostdate\"\r\n                     (change)=\"$event.target.checked?(_reportFilterService.CreditorsReportObj.CreditorsReport_INCLUDEPOSTDATE=1):(_reportFilterService.CreditorsReportObj.CreditorsReport_INCLUDEPOSTDATE=0)\"\r\n                     [checked]=\"_reportFilterService.CreditorsReportObj.CreditorsReport_INCLUDEPOSTDATE == 1\">&nbsp;Include Post Dated\r\n                  Transaction</label><br> -->\r\n         </div>\r\n         <!-- Right Column -->\r\n         <div class=\"col-md-6\">\r\n            <!-- <label class=\"smallBoldLabel\"><input type=\"checkbox\" name=\"showCred\"\r\n                (change)=\"checkValueForOpeningCreditors()\"\r\n                     [(ngModel)]=\"_reportFilterService.CreditorsReportObj.Creditors_OPNINGBLONLY\">&nbsp;Show Opening Creditors Only </label><br> -->\r\n            <fieldset>\r\n               <legend>Report Option</legend>\r\n                <div class=\"row\">\r\n                  <div class=\"col-sm-4\">\r\n                     <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                           [(ngModel)]=\"_reportFilterService.CreditorsReportObj.REPORTMODEC\" value=0>&nbsp;Show All</label>\r\n                  </div>\r\n               \r\n                  <!-- <div class=\"col-sm-8\">\r\n                     <label class=\"smallBoldLabel\" style=\"margin-left: -33px;\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                           [(ngModel)]=\"_reportFilterService.CreditorsReportObj.REPORTMODEC\" value=4>&nbsp;Show Negative Creditors B/L\r\n                        Separately</label>\r\n                  </div> -->\r\n               </div>\r\n               <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                     [(ngModel)]=\"_reportFilterService.CreditorsReportObj.REPORTMODEC\" value=1>&nbsp;Exclude Negative Creditors B/L\r\n                  Balance</label>\r\n               <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                     [(ngModel)]=\"_reportFilterService.CreditorsReportObj.REPORTMODEC\" value=2>&nbsp;Show Negative Creditors B/L Only</label>\r\n                     <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                        [(ngModel)]=\"_reportFilterService.CreditorsReportObj.REPORTMODEC\" value=3>&nbsp;Exclude Zero B/L Creditors</label>\r\n               <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                     [(ngModel)]=\"_reportFilterService.CreditorsReportObj.REPORTMODEC\" value=4>&nbsp;Show Zero B/L Creditors Only</label>\r\n            </fieldset>\r\n\r\n            <fieldset>\r\n               <legend>Report Filter Option:</legend>\r\n               <div class=\"row\">\r\n                  <div class=\"col-sm-5\"><label class=\"smallBoldLabel\">Area:</label></div>\r\n                  <div class=\"col-sm-7\">\r\n                     <select [(ngModel)]=\"_reportFilterService.CreditorsReportObj.CreditorsReport_AreaWise\"\r\n                     style=\"height: 30px !important;\" class=\"form-control\">\r\n                         <option value=0></option>\r\n                         <option *ngFor=\"let i of AreaList\" value={{i.AREA_ID}}>{{i.AREA_NAME}}</option>\r\n                     </select>\r\n                  </div>\r\n               </div>\r\n\r\n               <div class=\"row\" style=\"margin-top: 10px;\">\r\n                  <div class=\"col-sm-5\"><label class=\"smallBoldLabel\">Party Group:</label></div>\r\n                  <div class=\"col-sm-7\">\r\n                     <select [(ngModel)]=\"_reportFilterService.CreditorsReportObj.CreditorsReport_PartyGroup\"\r\n                     style=\"height: 30px !important;\" class=\"form-control\">\r\n                         <option value='%'></option>\r\n                         <option *ngFor=\"let i of PartyGroupList\" value={{i.ACID}}>{{i.ACNAME}}</option>\r\n                     </select>\r\n                  </div>\r\n               </div>\r\n\r\n               <div class=\"row\" style=\"margin-top: 10px;\">\r\n                  <div class=\"col-sm-5\"><label class=\"smallBoldLabel\">Party Category:</label></div>\r\n                  <div class=\"col-sm-7\">\r\n                     <select [(ngModel)]=\"_reportFilterService.CreditorsReportObj.CreditorsReport_PartyCategory\"\r\n                     style=\"height: 30px !important;\" class=\"form-control\">\r\n                         <option value='%'></option>\r\n                         <option *ngFor=\"let i of PartyCategoryList\" value={{i.CATEGORY_ID}}>{{i.CATEGORYNAME}}</option>\r\n                     </select>\r\n                  </div>\r\n               </div>\r\n                  \r\n            </fieldset>\r\n\r\n            <fieldset>\r\n               <legend>Report Grouping Options :</legend>\r\n               <select class=\"smallBoldLabel\" [(ngModel)]=\"_reportFilterService.CreditorsReportObj.GROUPBY\" style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                  <option value=0></option>\r\n                  <option value=1>Area Wise</option>\r\n                  <option value=2>Party Group Wise</option>\r\n                  <option value=3>Party Group Wise in Tree Formate</option>\r\n               </select>\r\n            </fieldset>\r\n\r\n            <!-- <label class=\"smallBoldLabel\"><input type=\"checkbox\" name=\"showCred\"\r\n                  (change)=\"$event.target.checked?(_reportFilterService.CreditorsReportObj.SHOWDPARTYDETAIL=1):(_reportFilterService.CreditorsReportObj.SHOWDPARTYDETAIL=0)\"\r\n                  [checked]=\"_reportFilterService.CreditorsReportObj.SHOWDPARTYDETAIL == 1\">&nbsp;Show Party Detail Info</label><br> -->\r\n         </div>\r\n      </div>\r\n\r\n      <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n         <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n         <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n      </div>\r\n\r\n   </div>\r\n"

/***/ }),

/***/ 1731:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .action-btn {\r\n        width: 80%;\r\n        height: 80%;\r\n        display: block;\r\n        margin: 0 auto;\r\n        background-color: inherit;\r\n        border: none;\r\n    }\r\n\r\n    .input-text {\r\n        width: 100%;\r\n        /* height: 30px !important; */\r\n        font-weight: bold;\r\n    }\r\n\r\n    .td-class {\r\n        border: none !important;\r\n    }\r\n\r\n    .date-input {\r\n        width: 93%;\r\n        font-size: 12px !important;\r\n        height: 30px !important;\r\n    }\r\n     @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .report-height{\r\n        height:52vh; \r\n        overflow:auto;\r\n    }\r\n    }\r\n         @media screen and (max-width:767px) {\r\n            .smallBoldLabel{\r\n                  width: auto !important;\r\n            }\r\n            \r\n        \r\n    }\r\n</style>\r\n<div class=\"container report-container\">\r\n    <div class=\"row\">\r\n        <!-- Filter Starts -->\r\n        <div class=\"col-12 col-md-12\">\r\n            <div style=\"background-color : #ffffff;  width: 100%;\">\r\n                <div class=\"row\">\r\n                    <div class=\"modal-header\" style=\"border:0px;\">\r\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\"\r\n                            (click)=\"closeReportBox()\">&times;</button>\r\n                        <h4 class=\"modal-title\" style=\"padding-left: 3%;\">Creditors Bill Tracking Report</h4>\r\n                    </div>\r\n                    <div class=\"col-md-12 report-height\" style=\"padding-top: 2%;\">\r\n                        <!-- Left Side-->\r\n                        <div class=\"col-md-6\">\r\n                            <fieldset>\r\n                                <legend>As On Date :</legend>\r\n                                <table>\r\n                                    <!-- <tr>\r\n                                        <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                                        <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                                    </tr> -->\r\n                                    <tr>\r\n                                        <td class=\"td-class\">\r\n                                            <input type=\"date\" class=\"date-input form-control\"\r\n                                                placeholder=\"Year Start Date\"\r\n                                                [(ngModel)]=\"_reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DATE1\"\r\n                                                (change)=\"changeEntryDate($event.target.value,'AD')\">\r\n                                        </td>\r\n                                        <!-- <td class=\"td-class\">\r\n                                            <input type=\"date\" class=\"date-input form-control\"\r\n                                                placeholder=\"Year Start Date\"\r\n                                                [(ngModel)]=\"_reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DATE2\"\r\n                                                (change)=\"changeEndDate($event.target.value,'AD')\">\r\n                                        </td> -->\r\n                                        <td class=\"td-class\">\r\n                                            <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                                                (change)=\"changeEntryDate($event.detail.value,'BS')\" [label]=\"'From'\"\r\n                                                [(ngModel)]=\"_reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_BSDATE1\">\r\n                                            </nepali-date-picker>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <!-- <tr>\r\n                                        <td class=\"td-class\">\r\n                                            <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                                                (change)=\"changeEntryDate($event.detail.value,'BS')\" [label]=\"'From'\"\r\n                                                [(ngModel)]=\"_reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_BSDATE1\">\r\n                                            </nepali-date-picker>\r\n                                        </td>\r\n                                        <td class=\"td-class\">\r\n                                            <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDateTo'\"\r\n                                                (change)=\"changeEndDate($event.detail.value,'BS')\" [label]=\"'To'\"\r\n                                                [(ngModel)]=\"_reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_BSDATE2\">\r\n                                            </nepali-date-picker>\r\n                                        </td>\r\n                                    </tr> -->\r\n                                </table>\r\n                            </fieldset>\r\n\r\n                            <fieldset>\r\n                                <legend>Division Selection:</legend>\r\n                                <select [(ngModel)]=\"_reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_DIV\"\r\n                                    style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                                    <option value=\"%\"\r\n                                        *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">\r\n                                        ALL</option>\r\n                                    <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                                        {{ div.NAME }}\r\n                                    </option>\r\n                                </select>\r\n                            </fieldset>\r\n                            <fieldset>\r\n                                <legend>Cost Center:</legend>\r\n                                <select [(ngModel)]=\"_reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_CostCenter\"\r\n                                    style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                                    <option value=\"%\"> </option>\r\n                                    <option *ngFor=\"let i of CostcenterList\" value={{i.CCID}}>{{i.COSTCENTERNAME}}\r\n                                    </option>\r\n                                </select>\r\n                            </fieldset>\r\n\r\n                            <fieldset>\r\n                                <legend>Report Type:</legend>\r\n                                <label class=\"smallBoldLabel\" style=\"padding-right:15px;\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                                      [(ngModel)]=\"_reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_Detail\" value=0>&nbsp;Summary Report</label>\r\n                                <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                                      [(ngModel)]=\"_reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_Detail\" value=1>&nbsp;Detail Report</label>\r\n                             </fieldset>\r\n\r\n<!-- \r\n                            <fieldset>\r\n                                <legend>Voucher Type:</legend>\r\n                                <select [(ngModel)]=\"_reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_VoucherType\"\r\n                                    style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                                    <option value=\"PV\">Payment Voucher</option>\r\n                                    <option value=\"RV\">Receipt Voucher</option>\r\n                                </select>\r\n                            </fieldset> -->\r\n                        </div>\r\n                        <!-- Left Side-->\r\n\r\n                        <!-- Right Side-->\r\n                        <div class=\"col-md-6 filter-part\">\r\n                            <fieldset>\r\n                                <legend>Party A/C Selection :</legend>\r\n                                <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\"\r\n                                    [(ngModel)]=\"_reportFilterService.CreditorsBillTrackingObj.CreditorsBillTracking_ACCNAME\"\r\n                                    placeholder=\"Press Enter or Tab for Account List\"\r\n                                    (keydown.Tab)=\"AccountEnterClicked($event)\"\r\n                                    (keydown.enter)=\"AccountEnterClicked($event)\"\r\n                                    (keypress)=\"keyPress($event)\">\r\n                            </fieldset>\r\n                        </div>\r\n                        <!-- Right Side-->\r\n\r\n                    </div>\r\n                    <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n                        <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n                        <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\"\r\n                            class=\"btn btn-info\">Close</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <!-- Filter Ends -->\r\n    </div>\r\n</div>\r\n\r\n<div style=\"width:90%\" class=\"reportpopup\">\r\n    <generic-popup-grid #genericGridPartyLedger [popupsettings]=\"gridPopupSettingsForPartyLedgerList\"\r\n        (onItemDoubleClick)=\"dblClickAccountSelect($event)\">\r\n    </generic-popup-grid>\r\n</div>"

/***/ }),

/***/ 1732:
/***/ (function(module, exports) {

module.exports = "<div class=\"container\">\r\n    <div class=\"row\">\r\n        <!-- Filter Starts -->\r\n        <div class=\"col-12 col-md-12 col-lg-6\">\r\n            <div style=\"background-color : #ffffff;\">\r\n                <div class=\"row\">\r\n                    <div class=\"modal-header\" style=\"border:0px;\">\r\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"hide()\">&times;</button>\r\n                        <h4 class=\"modal-title\" style=\"padding-left: 20px;\">Stock Report - Warehouse Wise </h4>\r\n                    </div>\r\n                    <div class=\"_left_section col-md-12\" style=\"padding-left: 25px;padding-right: 25px;\">\r\n                        <fieldset>\r\n                            <legend style=\"font-size:11px;font-weight: bold; width:auto\">Date Range Selection :</legend>\r\n                            <table>\r\n                                <tr>\r\n                                    <td><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                                    <td><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        <label class=\"smallBoldLabel\"><input type=\"date\"\r\n                                                style=\"width:152px; min-width:50%;\" placeholder=\"Year Start Date\"\r\n                                                [(ngModel)]=\" _reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_DATE1\"\r\n                                                (change)=\"changeEntryDate($event.target.value,'AD')\"></label>\r\n                                    </td>\r\n                                    <td>\r\n                                        <label class=\"smallBoldLabel\"><input type=\"date\"\r\n                                                style=\"width:152px; min-width:50%;\" placeholder=\"Year Start Date\"\r\n                                                [(ngModel)]=\"_reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_DATE2\"\r\n                                                (change)=\"changeEndDate($event.target.value,'AD')\"></label>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        <nepali-date-picker name=\"nepaliDatefrom\" [id]=\"'nepaliDatefrom'\"\r\n                                            (change)=\"changeEntryDate($event.detail.value,'BS')\" [label]=\"'From'\"\r\n                                            [(ngModel)]=\"_reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_BSDATE1\">\r\n                                        </nepali-date-picker>\r\n                                    </td>\r\n                                    <td>\r\n                                        <nepali-date-picker name=\"nepaliDateto\" [id]=\"'nepaliDateto'\"\r\n                                            (change)=\"changeEndDate($event.detail.value,'BS')\" [label]=\"'To'\"\r\n                                            [(ngModel)]=\"_reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_BSDATE2\">\r\n                                        </nepali-date-picker>\r\n                                    </td>\r\n                                </tr>\r\n                            </table>\r\n                        </fieldset>\r\n\r\n                        <div class=\"row\" style=\"margin-top: 10px; margin-left: 2px; margin-bottom: 10px;\">\r\n                            <div class=\"col-md-1\">\r\n                                <input type=\"checkbox\"\r\n                                    [(ngModel)]=\"_reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_SHOWBATCHWISE\"\r\n                                    (change)=\"$event.target.checked?(_reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_SHOWBATCHWISE=1):(_reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_SHOWBATCHWISE=0)\"\r\n                                    [checked]=\"_reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_SHOWBATCHWISE==1\">\r\n                            </div>\r\n                            <div calss=\"col\">\r\n                                <label style=\"width: 200px;\" class=\"smallBoldLabel\">Show Batch\r\n                                    Wise Stock Report</label>\r\n                            </div>\r\n                        </div>\r\n                        \r\n\r\n<!-- \r\n\r\n                        <fieldset>\r\n                            <legend style=\"font-size:11px;font-weight: bold; width:auto\">Company:</legend>\r\n                            <select class=\"form-control\" style=\"min-width:50%;\" [(ngModel)]=\"_reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_COMPANY\">\r\n                                <option value=\"%\">All</option>\r\n                                <option value=\"Nestle\">Nestle</option>\r\n                                <option value=\"Non Nestle\">Non-Nestle</option>\r\n                            </select>\r\n                        </fieldset>\r\n\r\n                        <fieldset>\r\n                            <legend style=\"font-size:11px;font-weight: bold; width:auto\">Warehouse Type:</legend>\r\n                            <select class=\"form-control\" style=\"min-width:50%;\" [(ngModel)]=\"_reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_WAREHOUSETYPE\">\r\n                                <option value=\"%\">All</option>\r\n                                <option value=\"sellable\">Saleable</option>\r\n                                <option value=\"nonsellable\">UnSaleable</option>\r\n                            </select>\r\n                        </fieldset>\r\n\r\n                        <fieldset>\r\n                            <legend style=\"font-size:11px;font-weight: bold; width:auto\">Warehouse:</legend>\r\n                            <select class=\"form-control\" style=\"min-width:50%;\" [(ngModel)]=\"_reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_WAREHOUSE\">\r\n                                <option value=\"%\">All</option>\r\n                                <option  *ngIf=\"_reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_WAREHOUSETYPE == 'sellable'\" value=\"Main Warehouse\">Main Warehouse</option>\r\n                                <ng-container *ngIf=\"_reportFilterService.CurrentStockWarehousewiseAccObj.CurrentStockWarehouseWiseAccount_WAREHOUSETYPE == 'nonsellable'\">\r\n                                    <option *ngFor=\"let w of warehouseList\" [value]=\"w.NAME\">{{w.NAME}}</option>\r\n                                </ng-container>\r\n\r\n                            </select>\r\n                        </fieldset> -->\r\n\r\n                        <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n                            <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n                            <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <!-- Filter Ends -->\r\n        <!-- Modal Starts -->\r\n        <div class=\"col-12 col-md-12 col-lg-6\">\r\n\r\n        </div>\r\n        <!-- Modal Ends -->\r\n    </div>\r\n</div>"

/***/ }),

/***/ 1733:
/***/ (function(module, exports) {

module.exports = "<fieldset>\r\n    <legend style=\"font-size:11px;font-weight: bold; width:auto\">Date Range Selection :</legend>\r\n    <table>\r\n        <tr>\r\n            <td><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n            <td><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n        </tr>\r\n        <tr>\r\n            <td>\r\n                <label class=\"smallBoldLabel\"><input type=\"date\"\r\n                        style=\"min-width:50%;\" placeholder=\"Year Start Date\"\r\n                        [(ngModel)]=\"_reportFilterService.ReportFilterObject.DATE1\"\r\n                        [disabled]=\"_reportFilterService.ReportFilterObject.REPORTMODEVR==1\"\r\n                        (change)=\"changeEntryDate($event.target.value,'AD')\"></label>\r\n            </td>\r\n            <td>\r\n                <label class=\"smallBoldLabel\"><input type=\"date\"\r\n                        style=\"min-width:50%;\" placeholder=\"Year Start Date\"\r\n                        [(ngModel)]=\"_reportFilterService.ReportFilterObject.DATE2\"\r\n                        [disabled]=\"_reportFilterService.ReportFilterObject.REPORTMODEVR==1\"\r\n                        (change)=\"changeEndDate($event.target.value,'AD')\"></label>\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td>\r\n                <label class=\"smallBoldLabel\"> <input id=\"nepaliDate\"\r\n                        style=\"height:25px;text-align:center;min-width:50%;\"\r\n                        class=\"nepali-calendar ndp-nepali-calendar\"\r\n                        [disabled]=\"_reportFilterService.ReportFilterObject.REPORTMODEVR==1\"\r\n                        [(ngModel)]=\"_reportFilterService.ReportFilterObject.BSDATE1\" type=\"text\"\r\n                        (change)=\"changeEntryDate($event.target.value,'BS')\"\r\n                        placeholder=\"yyyy-mm-dd\" />\r\n                </label>\r\n\r\n            </td>\r\n            <td>\r\n                <label class=\"smallBoldLabel\">\r\n                    <input id=\"nepaliDate\" style=\"height:25px;text-align:center;min-width:50%;\"\r\n                        class=\"nepali-calendar ndp-nepali-calendar\"\r\n                        [disabled]=\"_reportFilterService.ReportFilterObject.REPORTMODEVR==1\"\r\n                        [(ngModel)]=\"_reportFilterService.ReportFilterObject.BSDATE2\" type=\"text\"\r\n                        (change)=\"changeEndDate($event.target.value,'BS')\"\r\n                        placeholder=\"yyyy-mm-dd\" />\r\n                </label>\r\n            </td>\r\n        </tr>\r\n    </table>\r\n</fieldset>"

/***/ }),

/***/ 1734:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .input-text{\r\n        width : 100%;\r\n        /* height: 30px !important; */\r\n        font-weight: bold;\r\n    }\r\n    .td-class{\r\n        border: none !important;\r\n    }\r\n    .date-input{\r\n        width: 93%;\r\n        font-size: 12px !important;\r\n        height: 30px !important;\r\n    }\r\n\r\n    .row-margin{\r\n        margin: 0px;\r\n    }\r\n\r\n    .label-margin{\r\n        margin: 0px 20px\r\n    }\r\n       @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .report-height{\r\n        height:52vh; \r\n        overflow:auto;\r\n    }\r\n    }\r\n         @media screen and (max-width:767px) {\r\n            .smallBoldLabel{\r\n                  width: auto !important;\r\n            }\r\n            \r\n        \r\n    }\r\n</style>\r\n<div  class=\"container report-container\" style=\"background-color : #ffffff; padding :1%; height : auto;  \">\r\n    <div class=\"row\">\r\n       <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n          <h4 class=\"modal-title\">Day Book Report</h4>\r\n       </div>\r\n       <div class=\"col-md-12 report-height\" style=\"padding-top: 2%;\">\r\n          <!-- Left Column -->\r\n          <div class=\"col-md-6\">\r\n            <fieldset>\r\n                <legend style=\"font-size:11px;font-weight: bold; width:auto;margin-bottom: -4px;\">Date Range Selection :</legend>\r\n                <table>\r\n                    <tr>\r\n                        <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                        <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td class=\"td-class\">\r\n                                <input type=\"date\"\r\n                                class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                    [(ngModel)]=\"_reportFilterService.DayBookObj.DayBook_DATE1\"\r\n                                    (change)=\"changeEntryDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                        </td>\r\n                        <td class=\"td-class\">\r\n                                <input type=\"date\"\r\n                                class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                    [(ngModel)]=\"_reportFilterService.DayBookObj.DayBook_DATE2\"\r\n                                    (change)=\"changeEndDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td class=\"td-class\">\r\n                          <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                              (change)=\"changeEntryDate($event.detail.value,'BS')\"\r\n                              [label]=\"'From'\"\r\n                              [(ngModel)]=\"_reportFilterService.DayBookObj.DayBook_BSDATE1\">\r\n                            </nepali-date-picker>\r\n                                 <!-- <input id=\"nepaliDate\"\r\n                                 style=\"text-align:center;\"\r\n                                 class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                    [(ngModel)]=\"_reportFilterService.DayBookObj.DayBook_BSDATE1\" type=\"text\"\r\n                                    (change)=\"changeEntryDate($event.target.value,'BS')\"\r\n                                    placeholder=\"yyyy-mm-dd\" />             -->\r\n                        </td>\r\n                        <td class=\"td-class\">\r\n                          <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDateTo'\"\r\n                              (change)=\"changeEndDate($event.detail.value,'BS')\"\r\n                              [label]=\"'To'\"\r\n                              [(ngModel)]=\"_reportFilterService.DayBookObj.DayBook_BSDATE2\">\r\n                            </nepali-date-picker>\r\n                                <!-- <input id=\"nepaliDate\" style=\"text-align:center;\"\r\n                                class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                    [(ngModel)]=\"_reportFilterService.DayBookObj.DayBook_BSDATE2\" type=\"text\"\r\n                                    (change)=\"changeEndDate($event.target.value,'BS')\"\r\n                                    placeholder=\"yyyy-mm-dd\" /> -->\r\n                        </td>\r\n                    </tr>\r\n                </table>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Division Selection:</legend>\r\n                <select [(ngModel)]=\"_reportFilterService.DayBookObj.DayBook_DIV\" style=\"height: 30px !important;\"\r\n                class=\"form-control input-text\">\r\n                <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL</option>\r\n                    <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                        {{ div.NAME }}\r\n                    </option>\r\n                </select>\r\n            </fieldset>\r\n\r\n                <fieldset style=\"padding-bottom: 1px;\" >\r\n                <legend  style=\"margin-bottom: -4px;\">Report Filter By</legend>\r\n                    <table>\r\n                        <tr style=\"overflow: hidden;\">\r\n                            <td style=\"border: none;\" class=\"smallBoldLabel\">Entry User </td>\r\n                            <td style=\"border: none;width: 70%;\" >\r\n                                <select [(ngModel)]=\"_reportFilterService.DayBookObj.USER\" style=\"height: 30px !important;\"\r\n                                class=\"form-control input-text\">\r\n                                <option value=\"\"></option>\r\n                                <ng-container *ngFor = \"let it of userList\" >\r\n                                    <option value=\"{{it.username}}\">{{it.username}} </option>\r\n                                </ng-container>\r\n\r\n                             </select>\r\n                            </td>\r\n                        </tr>\r\n\r\n                    </table>\r\n\r\n             </fieldset>\r\n\r\n             <fieldset style=\"padding-bottom: 5px;\">\r\n                <legend>Report Option</legend>\r\n                <div class=\"row row-margin\">\r\n                    <label class=\"smallBoldLabel label-margin\"><input type=\"radio\" name=\"BalViewOpt1\"\r\n                          [(ngModel)]=\"_reportFilterService.DayBookObj.DayBook_DETAILREPORT\" value=\"0\">&nbsp;Summary Report </label>\r\n                    <label class=\"smallBoldLabel label-margin\" style=\"clear : both;\"><input type=\"radio\" name=\"BalViewOpt1\"\r\n                          [(ngModel)]=\"_reportFilterService.DayBookObj.DayBook_DETAILREPORT\" value=\"1\">&nbsp;Detail Report\r\n                      </label>\r\n                </div>\r\n                <div class=\"row row-margin\" *ngIf=\"_reportFilterService.DayBookObj.DayBook_DETAILREPORT == '0'\">\r\n                    <label class=\"smallBoldLabel label-margin\"><input type=\"radio\" name=\"\"\r\n                        [(ngModel)]=\"_reportFilterService.DayBookObj.DayBook_SUMMARYTYPE\" value=\"0\">&nbsp;Day Wise </label>\r\n                  <label class=\"smallBoldLabel label-margin\" style=\"clear : both; margin-left: 60px;\"><input type=\"radio\" name=\"\"\r\n                        [(ngModel)]=\"_reportFilterService.DayBookObj.DayBook_SUMMARYTYPE\" value=\"1\">&nbsp;Voucher Type Wise\r\n                    </label>\r\n                </div>\r\n\r\n             </fieldset>\r\n\r\n             <fieldset style=\"padding-bottom: 1px;\" >\r\n                <legend  style=\"margin-bottom:0px;\">Voucher Range Selection</legend>\r\n                    <table>\r\n                        <tr>\r\n                            <td style=\"border: none;\" class=\"smallBoldLabel\">From </td>\r\n                            <td style=\"border: none;width: 70%;\" >\r\n                                <input type=\"number\" style=\"height: 30px !important;width: 50%;\r\n                                font-weight: bold;\" class=\"form-control\" name=\"fromVno\"\r\n                                    [(ngModel)]=\"_reportFilterService.DayBookObj.Daybook_FROM_VNO\"> \r\n                            </td>\r\n                        </tr>\r\n                        <tr style=\"margin-bottom: 6px;\">\r\n                            <td style=\"border: none;\" class=\"smallBoldLabel\">To </td>\r\n                            <td style=\"border: none;width: 70%;\" >\r\n                                <input type=\"number\" style=\"height: 30px !important;width: 50%;\r\n                                font-weight: bold;\" class=\"form-control\" name=\"toVno\"\r\n                                [(ngModel)]=\"_reportFilterService.DayBookObj.Daybook_TO_VNO\">\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n             </fieldset>\r\n\r\n            \r\n           \r\n          </div>\r\n          <!-- Right Column -->\r\n          <div class=\"col-md-6\">\r\n            <fieldset>\r\n                <legend>Voucher Name:</legend>\r\n                <select [(ngModel)]=\"_reportFilterService.DayBookObj.DayBook_VTYPE\" style=\"height: 30px !important;\"\r\n                class=\"form-control input-text\"(change)=\"OnVoucherSelect()\" >\r\n                    <option value=\"%\">All</option>\r\n                    <option *ngFor=\"let vt of voucherTypeList\" value=\"{{ vt.VOUCHER_ID }}\" >\r\n                        {{ vt.VOUCHER_NAME }}\r\n                    </option>\r\n                </select>\r\n            </fieldset>\r\n            <div *ngIf=\"showVoucherTable\">\r\n                <fieldset>\r\n                    <legend><label class=\"smallBoldLabel\">&nbsp;Voucher Type Selection</label></legend>\r\n                    <div>\r\n                        <div class=\"col-md-2\">\r\n                            <button type=\"button\" class=\"btn btn-info\"\r\n                                (click)=\"addVoucherList()\">Add</button>\r\n                        </div>\r\n                        <div class=\"col-md-12\">\r\n                            <table style=\"height:175px; overflow: scroll;\">\r\n                                <tr class=\"smallBoldLabel\">\r\n                                    <th style=\"width:3px;font-weight: bold;\">S.No.</th>\r\n                                    <th style=\"width:10px;font-weight: bold;\">Voucher Name</th>\r\n                                    <th style=\"width:4px;font-weight: bold;\">Action</th>\r\n                                </tr>\r\n                                <tr *ngFor=\"let data of _reportFilterService.DayBookObj.Daybook_MultipleVoucher;let i = index\"\r\n                                    class=\"smallBoldLabel\">\r\n                                    <td style=\"width:3px;\">{{ i + 1 }}</td>\r\n                                    <td style=\"width:10px;\">{{data.VOUCHER_NAME}}</td>\r\n                                    <td style=\"width:4px;\">\r\n                                        <button type=\"button\" class=\"action-btn\"\r\n                                            (click)=\"deleteVoucher(i)\">Delete</button>\r\n                                    </td>\r\n                                </tr>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </fieldset>\r\n            </div>\r\n\r\n            <label class=\"smallBoldLabel\"><input type=\"checkbox\" name=\"showCred\"\r\n                (change)=\"$event.target.checked?(_reportFilterService.DayBookObj.SHOWCASEOPENINGCLOSINGBL=1):(_reportFilterService.DayBookObj.SHOWCASEOPENINGCLOSINGBL=0)\"\r\n                [checked]=\"_reportFilterService.DayBookObj.SHOWCASEOPENINGCLOSINGBL == 1\">&nbsp;Show Opening/Closing Cash B/L In Report</label><br>\r\n\r\n          </div>\r\n       </div>\r\n\r\n       <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n          <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n          <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n       </div>\r\n\r\n    </div>\r\n"

/***/ }),

/***/ 1735:
/***/ (function(module, exports) {

module.exports = "<div style=\"background-color : #ffffff; padding :1%; height : auto; width:50%; \">\r\n  <div class=\"row\">\r\n    <div class=\"modal-header\">\r\n      <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"hide()\">&times;</button>\r\n      <h4 class=\"modal-title\">Debit Note Register Report</h4>\r\n    </div>\r\n    <div class=\"_left_section col-md-12\">\r\n      <fieldset style=\"width:352px\">\r\n        <legend style=\"font-size:11px;font-weight: bold; width:auto\">Date Range Selection :</legend>\r\n        <table>\r\n          <tr>\r\n            <td><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n            <td><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              <label class=\"smallBoldLabel\"><input type=\"date\" style=\"width:152px; min-width:50%;\"\r\n                  placeholder=\"Year Start Date\" [(ngModel)]=\"DebitNoteRegisterReport.DATE1\"\r\n                  (change)=\"changeEntryDate($event.target.value,'AD')\"></label>\r\n            </td>\r\n            <td>\r\n              <label class=\"smallBoldLabel\"><input type=\"date\" style=\"width:152px; min-width:50%;\"\r\n                  placeholder=\"Year Start Date\" [(ngModel)]=\"DebitNoteRegisterReport.DATE\"\r\n                  (change)=\"changeEndDate($event.target.value,'AD')\"></label>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              <label class=\"smallBoldLabel\"> <input id=\"nepaliDate\" style=\"width:152px;height:25px;text-align:center\"\r\n                  class=\"nepali-calendar ndp-nepali-calendar\" [(ngModel)]=\"DebitNoteRegisterReport.BSDATE1\" type=\"text\"\r\n                  (change)=\"changeEntryDate($event.target.value,'BS')\" placeholder=\"yyyy-mm-dd\" />\r\n              </label>\r\n            </td>\r\n            <td>\r\n              <label class=\"smallBoldLabel\">\r\n                <input id=\"nepaliDate\" style=\"width:152px;height:25px;text-align:center\"\r\n                  class=\"nepali-calendar ndp-nepali-calendar\" [(ngModel)]=\"DebitNoteRegisterReport.BSDATE2\" type=\"text\"\r\n                  (change)=\"changeEndDate($event.target.value,'BS')\" placeholder=\"yyyy-mm-dd\" />\r\n              </label>\r\n            </td>\r\n          </tr>\r\n        </table>\r\n      </fieldset>\r\n\r\n      <!-- Division Selection Start -->\r\n      <fieldset style=\"width:352px;\">\r\n        <legend>Division Selection:</legend>\r\n        <select class=\"form-control\" [(ngModel)]=\"this.DebitNoteRegisterReport.DIV\" #division\r\n          (change)=\"divisionChanged()\">\r\n          <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0\" selected>ALL</option>\r\n          <option *ngFor=\"let divs of divisionList;let i=index\" value=\"{{divs.INITIAL}}\">{{divs.NAME}}</option>\r\n        </select>\r\n      </fieldset>\r\n      <!-- Division Selection End -->\r\n\r\n      <div style='margin-top:20px;'>\r\n        <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n        <button type=\"button\" (click)=\"cancel()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</div>"

/***/ }),

/***/ 1736:
/***/ (function(module, exports) {

module.exports = "<style>\r\n   .input-text {\r\n      width: 100%;\r\n      /* height: 30px !important; */\r\n      font-weight: bold;\r\n   }\r\n\r\n   .td-class {\r\n      border: none !important;\r\n   }\r\n\r\n   .date-input {\r\n      width: 93%;\r\n      font-size: 12px !important;\r\n      height: 30px !important;\r\n   }\r\n        @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .report-height{\r\n        height:52vh; \r\n        overflow:auto;\r\n    }\r\n    }\r\n    @media screen and (max-width:767px) {\r\n        .smallBoldLabel{\r\n            width: auto !important;\r\n        }\r\n      \r\n        \r\n    }\r\n</style>\r\n<div class=\"container report-container\" style=\"background-color : #ffffff; padding :1%; height : auto;  \">\r\n   <div class=\"row\">\r\n      <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n         <h4 class=\"modal-title\">Debtors Report</h4>\r\n      </div>\r\n      <div class=\"col-md-12 report-height\" style=\"padding-top: 2%;\">\r\n         <!-- Left Column -->\r\n         <div class=\"col-md-6\">\r\n            <fieldset>\r\n               <legend style=\"font-size:11px;font-weight: bold; width:auto;margin-bottom: -4px;\">Date Range Selection :\r\n               </legend>\r\n               <table>\r\n                  <tr>\r\n                     <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                     <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                  </tr>\r\n                  <tr>\r\n                     <td class=\"td-class\">\r\n                        <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                           [(ngModel)]=\"_reportFilterService.DebtorsReportObj.Debtors_DATE1\"\r\n                           (change)=\"changeEntryDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                     </td>\r\n                     <td class=\"td-class\">\r\n                        <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                           [(ngModel)]=\"_reportFilterService.DebtorsReportObj.Debtors_DATE2\"\r\n                           (change)=\"changeEndDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                     </td>\r\n                  </tr>\r\n                  <tr>\r\n                     <td class=\"td-class\">\r\n                       <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                        (change)=\"changeEntryDate($event.detail.value,'BS')\"\r\n                        [label]=\"'From'\"\r\n                        [(ngModel)]=\"_reportFilterService.DebtorsReportObj.Debtors_BSDATE1\">\r\n                        </nepali-date-picker>\r\n\r\n                     </td>\r\n                     <td class=\"td-class\">\r\n                      <nepali-date-picker name=\"nepaliDateTo\" [id]=\"'nepaliDateTo'\"\r\n                      (change)=\"changeEndDate($event.detail.value,'BS')\"\r\n                      [label]=\"'To'\"\r\n                      [(ngModel)]=\"_reportFilterService.DebtorsReportObj.Debtors_BSDATE2\">\r\n                      </nepali-date-picker>\r\n                     </td>\r\n                  </tr>\r\n               </table>\r\n            </fieldset>\r\n\r\n            <fieldset>\r\n               <legend>Division Selection:</legend>\r\n               <select [(ngModel)]=\"_reportFilterService.DebtorsReportObj.Debtors_DIV\"\r\n                  style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                  <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL</option>\r\n                  <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                     {{ div.NAME }}\r\n                  </option>\r\n               </select>\r\n            </fieldset>\r\n            <fieldset *ngIf=\"this.masterService.userSetting.enableCostCenter!=0\">\r\n               <legend>Cost Center:</legend>\r\n               <select [(ngModel)]=\"_reportFilterService.DebtorsReportObj.Debtors_CostCenter\"\r\n                  style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                  <option value=\"%\"> </option>\r\n                  <option *ngFor=\"let i of CostcenterList\" value={{i.CCID}}>{{i.COSTCENTERNAME}}\r\n                  </option>\r\n               </select>\r\n            </fieldset>\r\n\r\n            <label class=\"smallBoldLabel\"><input type=\"checkbox\" name=\"showCred\" (change)=\"checkValueForOpeningDebtors()\"\r\n               [(ngModel)]=\"_reportFilterService.DebtorsReportObj.Debtors_OPNINGBLONLY\">&nbsp;Show Opening Debtors\r\n            Only </label><br>\r\n            <label class=\"smallBoldLabel\"><input type=\"checkbox\" name=\"showCred\"\r\n               (change)=\"$event.target.checked?(_reportFilterService.DebtorsReportObj.Debtors_SHOWBRANCHBL=1):(_reportFilterService.DebtorsReportObj.Debtors_SHOWBRANCHBL=0)\"\r\n               [checked]=\"_reportFilterService.DebtorsReportObj.Debtors_SHOWBRANCHBL == 1\">&nbsp;Do Not Show Branch Party B/L in Debtors Report</label><br>\r\n\r\n            <label class=\"smallBoldLabel\"><input type=\"checkbox\" name=\"showCred\"\r\n               (change)=\"$event.target.checked?(_reportFilterService.DebtorsReportObj.SHOWDPARTYDETAIL=1):(_reportFilterService.DebtorsReportObj.SHOWDPARTYDETAIL=0)\"\r\n               [checked]=\"_reportFilterService.DebtorsReportObj.SHOWDPARTYDETAIL == 1\">&nbsp;Show Party Detail\r\n            Info</label><br>\r\n\r\n            <!-- <label class=\"smallBoldLabel\"><input type=\"checkbox\" name=\"showCred\"\r\n               (change)=\"$event.target.checked?(_reportFilterService.DebtorsReportObj.Debtors_INCLUDEPOSTEDTRANSACTION=1):(_reportFilterService.DebtorsReportObj.Debtors_INCLUDEPOSTEDTRANSACTION=0)\"\r\n               [checked]=\"_reportFilterService.DebtorsReportObj.Debtors_INCLUDEPOSTEDTRANSACTION == 1\">&nbsp;INCLUDE POSTED TRANSACTION</label><br> -->\r\n               <label class=\"smallBoldLabel\"><input type=\"checkbox\" name=\"incpostdate\"\r\n                     (change)=\"$event.target.checked?(_reportFilterService.DebtorsReportObj.Debtors_INCLUDEPOSTEDTRANSACTION=1):(_reportFilterService.DebtorsReportObj.Debtors_INCLUDEPOSTEDTRANSACTION=0)\"\r\n                     [checked]=\"_reportFilterService.DebtorsReportObj.Debtors_INCLUDEPOSTEDTRANSACTION == 1\">&nbsp;Include Post Dated\r\n                  Transaction</label><br>\r\n         </div>\r\n         <!-- Right Column -->\r\n         <div class=\"col-md-6\">\r\n            <fieldset>\r\n               <legend>Report Option</legend>\r\n               <div class=\"row\">\r\n                  <div class=\"col-sm-4\">\r\n                     <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                           [(ngModel)]=\"_reportFilterService.DebtorsReportObj.REPORTMODE\" value=0>&nbsp;Show All</label>\r\n                  </div>\r\n               \r\n                  <!-- <div class=\"col-sm-8\">\r\n                     <label class=\"smallBoldLabel\" style=\"margin-left: -33px;\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                           [(ngModel)]=\"_reportFilterService.DebtorsReportObj.REPORTMODE\" value=4>&nbsp;Show Negative Debtors B/L\r\n                        Separately</label>\r\n                  </div> -->\r\n               </div>\r\n               <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                     [(ngModel)]=\"_reportFilterService.DebtorsReportObj.REPORTMODE\" value=1>&nbsp;Exclude Negative\r\n                  Debtors B/L</label>\r\n               <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                     [(ngModel)]=\"_reportFilterService.DebtorsReportObj.REPORTMODE\" value=2>&nbsp;Show Negative\r\n                  Debtors B/L Only</label>\r\n                  <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                     [(ngModel)]=\"_reportFilterService.DebtorsReportObj.REPORTMODE\" value=3>&nbsp;Exclude Zero B/L DEBTORS</label>\r\n               <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                     [(ngModel)]=\"_reportFilterService.DebtorsReportObj.REPORTMODE\" value=4>&nbsp;Show Zero B/L\r\n                  Debtors Only</label>\r\n            </fieldset>\r\n\r\n            <fieldset>\r\n               <legend>Report Filter Option:</legend>\r\n               <div class=\"row\">\r\n                  <div class=\"col-sm-5\"><label class=\"smallBoldLabel\">Area:</label></div>\r\n                  <div class=\"col-sm-7\">\r\n                     <select [(ngModel)]=\"_reportFilterService.DebtorsReportObj.DebtorsReport_AreaWise\"\r\n                     style=\"height: 30px !important;\" class=\"form-control\">\r\n                         <option value=0></option>\r\n                         <option *ngFor=\"let i of AreaList\" value={{i.AREA_ID}}>{{i.AREA_NAME}}</option>\r\n                     </select>\r\n                  </div>\r\n               </div>\r\n\r\n               <div class=\"row\" style=\"margin-top: 10px;\">\r\n                  <div class=\"col-sm-5\"><label class=\"smallBoldLabel\">Party Group:</label></div>\r\n                  <div class=\"col-sm-7\">\r\n                     <select [(ngModel)]=\"_reportFilterService.DebtorsReportObj.DebtorsReport_PartyGroup\"\r\n                     style=\"height: 30px !important;\" class=\"form-control\">\r\n                         <option value='%'></option>\r\n                         <option *ngFor=\"let i of PartyGroupList\" value={{i.ACID}}>{{i.ACNAME}}</option>\r\n                     </select>\r\n                  </div>\r\n               </div>\r\n\r\n               <div class=\"row\" style=\"margin-top: 10px;\">\r\n                  <div class=\"col-sm-5\"><label class=\"smallBoldLabel\">Party Category:</label></div>\r\n                  <div class=\"col-sm-7\">\r\n                     <select [(ngModel)]=\"_reportFilterService.DebtorsReportObj.DebtorsReport_PartyCategory\"\r\n                     style=\"height: 30px !important;\" class=\"form-control\">\r\n                         <option value='%'></option>\r\n                         <option *ngFor=\"let i of PartyCategoryList\" value={{i.CATEGORY_ID}}>{{i.CATEGORYNAME}}</option>\r\n                     </select>\r\n                  </div>\r\n               </div>\r\n                  \r\n            </fieldset>\r\n\r\n            <fieldset>\r\n               <legend>Report Grouping Options :</legend>\r\n               <select [(ngModel)]=\"_reportFilterService.DebtorsReportObj.GROUPBY\" style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                  <option value=0></option>\r\n                  <option value=1>Area Wise</option>\r\n                  <option value=2>Party Group Wise</option>\r\n                  <option value=3>Party Group Wise in Tree Format</option>\r\n                  <option value=4>Party Category Wise</option>\r\n               </select>\r\n\r\n              \r\n            </fieldset>\r\n            <!-- <fieldset>\r\n               <legend>Salesman:</legend>\r\n               <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\" placeholder=\"please enter to select the salesman\" (keydown.Tab)=\"showSalesmanList($event)\" [(ngModel)]=\"_reportFilterService.DebtorsReportObj.Debtors_salesman\"\r\n               (keydown.enter)=\"showSalesmanList($event)\">\r\n                                    \r\n              \r\n            </fieldset> -->\r\n\r\n         </div>\r\n      </div>\r\n\r\n      <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n         <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n         <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n      </div>\r\n\r\n   </div>\r\n   <generic-popup-grid #genericeSalesManList [popupsettings]=\"gridSalesmanListPopupSettings\"\r\n   (onItemDoubleClick)=\"onSalesManSelect($event)\"></generic-popup-grid>"

/***/ }),

/***/ 1737:
/***/ (function(module, exports) {

module.exports = "<div id=\"duevoucherReportId\" style=\"background-color : #ffffff; padding :1%; height : auto; width : 60%; \">\r\n    <div class=\"row\">\r\n        <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n            <h4 class=\"modal-title\">Due Voucher Report</h4>\r\n        </div>\r\n\r\n        <div class=\"col-md-12\">\r\n            <fieldset>\r\n                <label class=\"smallBoldLabel\"><input type=\"radio\" value=\"1\" name=\"optReportType\"\r\n                        [(ngModel)]=\"ReportParameters.ROPTION \">&nbsp;Summary Report</label><br>\r\n                <label class=\"smallBoldLabel\"><input type=\"radio\" value=\"2\" name=\"optReportType\"\r\n                        [(ngModel)]=\"ReportParameters.ROPTION \">&nbsp;Detail Report</label><br>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>As On Dated:</legend>\r\n                <span>\r\n                    <label class=\"smallBoldLabel\"><input type=\"date\" style=\"width:152px; min-width:50%;\"\r\n                            placeholder=\"Year Start Date\" [(ngModel)]=\"ReportParameters.DATE1\"\r\n                            (change)=\"changestartDate($event.target.value,'AD')\"></label>\r\n                    <label class=\"smallBoldLabel\"><input id=\"nepaliDate\"\r\n                            style=\"width:152px;height:25px;text-align:center\"\r\n                            class=\"nepali-calendar ndp-nepali-calendar\" [(ngModel)]=\"ReportParameters.BSDATE1\"\r\n                            type=\"text\" (change)=\"changestartDate($event.target.value,'BS')\" placeholder=\"yyyy-mm-dd\" />\r\n                        (Miti) </label>\r\n                </span>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Customer / Supplier Selection :</legend>\r\n                <table>\r\n                    <tr>\r\n                        <td>\r\n                            <label class=\"smallBoldLabel\">A/C Code:</label>\r\n                        </td>\r\n                        <td>\r\n                            <label class=\"smallBoldLabel\"><input tabindex=\"2\" type=\"text\" class=\"form-control input-sm\"\r\n                                    style=\"height: 26px;\" (keydown.enter)=\"accodeChanged($event.target.value)\"\r\n                                    [(ngModel)]=\"ACCODE\"></label>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            <label class=\"smallBoldLabel\">Account Name:</label>\r\n                        </td>\r\n                        <td>\r\n                            <label class=\"smallBoldLabel\"><input tabindex=\"2\" ngui-auto-complete\r\n                                    class=\"form-control input-sm\" [source]=\"dropListItem.bind(this)\" max-num-list=\"25\"\r\n                                    [(ngModel)]=\"ACCNAME\" list-formatter=\"ACNAME\" style=\"height: 26px;\"\r\n                                    (ngModelChange)=\"itemChanged($event)\" name=\"AcName\"\r\n                                    display-property-name=\"ACNAME\"></label>\r\n\r\n                        </td>\r\n                    </tr>\r\n                </table>\r\n            </fieldset>\r\n            <fieldset>\r\n                <table>\r\n                    <tr>\r\n                        <td>\r\n                            <label class=\"smallBoldLabel\">\r\n                                Voucher Age <br> Between\r\n                            </label>\r\n                        </td>\r\n                        <td>\r\n                            <label class=\"smallBoldLabel\">\r\n                                <input type=\"text\" style=\"width : 92%;\" /> -\r\n                            </label>\r\n                        </td>\r\n                        <td>\r\n                            <label class=\"smallBoldLabel\">\r\n                                <input type=\"text\" style=\"width : 92%;\" />\r\n                            </label>\r\n                        </td>\r\n                    </tr>\r\n                </table>\r\n            </fieldset>\r\n            <label class=\"smallBoldLabel\"><input type=\"checkbox\" style=\"vertical-align: middle;\"\r\n                    (change)=\"$event.target.checked?(ReportParameters.TOPNSORT=1):(ReportParameters.TOPNSORT=0)\"\r\n                    [checked]=\"ReportParameters.TOPNSORT == 1\" name=\"showClerVoucAlso\">&nbsp;Show Cleared/Tracked\r\n                Voucher Also</label>\r\n\r\n\r\n            <div class=\"btn\">\r\n                <!-- <button type=\"button\"  title=\"onSave\" class=\"btn btn-info\">Run</button>    -->\r\n                <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n                <button type=\"button\" title=\"Cancel\" class=\"btn btn-info\" (click)=\"closeReportBox()\">Close</button>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    </div>\r\n</div>"

/***/ }),

/***/ 1738:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .modal-content-main-area {\r\n      width: 100% !important;\r\n\r\n    }\r\n\r\n\r\n  </style>\r\n\r\n  <div style=\"height:500px\">\r\n    <!-- Modal content -->\r\n    <div class=\"modal-content modal-content-main-area\" style=\"width: 50% !important\">\r\n      <div>\r\n        <div class=\"modal-header\" style=\"padding: 0px;background: #8cccfb;\">\r\n          <button class=\"close\" aria-label=\"Close\" (click)=\"closeReportBox()\">\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>\r\n          <h4 class=\"modal-title\" style=\"text-align: center;\">\r\n            Select Date\r\n          </h4>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <div class=\"clearfix\">\r\n            <div class=\"col-md-12\">\r\n\r\n              <div class=\"col-md-6 form-group\">\r\n                <div class=\"report-filter single-calendar\">\r\n                  <label>Date Selection</label>\r\n                  <input class=\"form-control\" type=\"text\" ngxDaterangepickerMd [(ngModel)]=\"selectedDate\"\r\n                  [showDropdowns]=\"true\" [showCustomRangeLabel]=\"true\" [alwaysShowCalendars]=\"true\"\r\n                  [locale]=\"locale\" [ranges]=\"ranges\" [linkedCalendars]=\"true\" [showCancel]=\"true\"\r\n                  placeholder=\"Date Range...\" (ngModelChange)=\"dateChanged($event)\" />\r\n                </div>\r\n\r\n\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <hr style=\"margin-bottom: 0px !important\">\r\n          <div class=\"clearfix\" style=\"padding: 10px;\">\r\n\r\n            <button class=\"btn btn-info pull-right\" style=\"margin-left: 10px;\" (click)=onload()>RUN</button>\r\n            <button class=\"btn btn-info pull-right\" (click)=\"closeReportBox()\">Close</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n"

/***/ }),

/***/ 1739:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .modal-content-main-area {\r\n      width: 100% !important;\r\n\r\n    }\r\n\r\n\r\n  </style>\r\n\r\n  <div style=\"height:500px\">\r\n    <!-- Modal content -->\r\n    <div class=\"modal-content modal-content-main-area\" style=\"width: 50% !important\">\r\n      <div>\r\n        <div class=\"modal-header\" style=\"padding: 0px;background: #8cccfb;\">\r\n          <button class=\"close\" aria-label=\"Close\" (click)=\"closeReportBox()\">\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>\r\n          <h4 class=\"modal-title\" style=\"text-align: center;\">\r\n            Select Date\r\n          </h4>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <div class=\"clearfix\">\r\n            <div class=\"col-md-12\">\r\n\r\n              <div class=\"col-md-6 form-group\">\r\n                <div class=\"report-filter single-calendar\">\r\n                  <label>Date Selection</label>\r\n                  <input class=\"form-control\" type=\"text\" ngxDaterangepickerMd [(ngModel)]=\"selectedDate\"\r\n                  [showDropdowns]=\"true\" [showCustomRangeLabel]=\"true\" [alwaysShowCalendars]=\"true\"\r\n                  [locale]=\"locale\" [ranges]=\"ranges\" [linkedCalendars]=\"true\" [showCancel]=\"true\"\r\n                  placeholder=\"Date Range...\" (ngModelChange)=\"dateChanged($event)\" />\r\n                </div>\r\n\r\n\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <hr style=\"margin-bottom: 0px !important\">\r\n          <div class=\"clearfix\" style=\"padding: 10px;\">\r\n\r\n            <button class=\"btn btn-info pull-right\" style=\"margin-left: 10px;\" (click)=onload()>RUN</button>\r\n            <button class=\"btn btn-info pull-right\" (click)=\"closeReportBox()\">Close</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n"

/***/ }),

/***/ 1740:
/***/ (function(module, exports) {

module.exports = "<style>\r\n   .input-text {\r\n      width: 100%;\r\n      /* height: 30px !important; */\r\n      font-weight: bold;\r\n   }\r\n   label{\r\n       font-size: 12px;\r\n       margin: 0;\r\n   }\r\n\r\n   .td-class {\r\n      border: none !important;\r\n   }\r\n\r\n   .date-input {\r\n      width: 93%;\r\n      font-size: 12px !important;\r\n      height: 30px !important;\r\n   }\r\n     @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .report-height{\r\n        height:52vh; \r\n        overflow:auto;\r\n    }\r\n    }\r\n         @media screen and (max-width:767px) {\r\n            .smallBoldLabel{\r\n                  width: auto !important;\r\n            }\r\n            \r\n        \r\n    }\r\n</style>\r\n<div class=\"container report-container\" style=\"background-color : #ffffff; padding :1%; height : auto;  \">\r\n   <div class=\"row\">\r\n      <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\" >&times;</button>\r\n         <h4 class=\"modal-title\">Depreciation Report (As per Income Tax)</h4>\r\n      </div>\r\n      <div class=\"col-md-12 report-height\" style=\"padding-top: 2%;\">\r\n         <!-- Left Column -->\r\n         <div class=\"col-md-6\">\r\n\r\n            <fieldset>\r\n               <legend>Report Option</legend>\r\n               <select\r\n               style=\"height: 30px !important;\" class=\"form-control input-text\" [(ngModel)]=\"_reportFilterService.IncomeTaxObj.IncomeTax_REPORTOPTION\">\r\n                  <option *ngFor=\"let option of REPORTOPTION\" [value]=\"option.Mode\">{{ option.ReportOptionName }}</option>\r\n            </select>\r\n            </fieldset>\r\n            <fieldset>\r\n               <legend>Pool Selection</legend>\r\n                <select [(ngModel)]=\"_reportFilterService.IncomeTaxObj.IncomeTax_POOLNAME\"\r\n                style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                  <option value=\"%\"></option>\r\n                  <option *ngFor=\"let pool of poolName\" value=\"{{ pool.AssetGroupID }}\">{{ pool.GroupName }}</option>\r\n             </select>\r\n            </fieldset>\r\n\r\n\r\n            \r\n        \r\n         </div>\r\n         <!-- Right Column -->\r\n         <div class=\"col-md-6\">\r\n          \r\n           <!-- <fieldset>\r\n              <legend>Account Selection :</legend>\r\n              <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\" [(ngModel)]=\"_reportFilterService.ActualVsBudgetObj.ActualVsBudget_AccLedger_ACCNAME\"\r\n                  placeholder=\"Press Enter or Tab for Account List\" (keydown.Tab)=\"AccountEnterClicked($event)\"\r\n                  (keydown.enter)=\"AccountEnterClicked($event)\">\r\n          </fieldset> -->\r\n\r\n          <fieldset style=\"padding-bottom: 5px;\">\r\n            <legend>Report Format</legend>\r\n            <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt1\"\r\n                    [(ngModel)]=\"_reportFilterService.IncomeTaxObj.IncomeTax_REPORTTYPE \" value=1>&nbsp;Summary\r\n                 </label>\r\n            <label class=\"smallBoldLabel\" style=\"clear : both;\"><input type=\"radio\" name=\"BalViewOpt1\"\r\n                    style=\"margin-left: 35px;\" [(ngModel)]=\"_reportFilterService.IncomeTaxObj.IncomeTax_REPORTTYPE\"\r\n                    value=0 >&nbsp;Detail\r\n                \r\n            </label>\r\n\r\n        </fieldset>\r\n            <div class=\"col-md-12 checkbox\" style=\"padding-top:5px\">\r\n               <label class=\"smallBoldLabel\"><input type=\"checkbox\" (change)=\"checkValue()\"\r\n                  [(ngModel)]=\"_reportFilterService.IncomeTaxObj.IncomeTax_TAXWISE\"\r\n                  >&nbsp;Show Depreciation Report as per Income Tax Format</label>\r\n           </div>\r\n\r\n         </div>\r\n       \r\n      </div>\r\n\r\n      <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n         <button class=\"btn btn-info confirm-btn\" type=\"button\"  (click)=\"onload()\" >RUN</button>\r\n         <button type=\"button\"  title=\"Cancel\" class=\"btn btn-info\" (click)=\"closeReportBox()\">Close</button>\r\n      </div>\r\n\r\n   </div>\r\n "

/***/ }),

/***/ 1741:
/***/ (function(module, exports) {

module.exports = "<div id=\"journalBookReportId\"   style=\"background-color : #ffffff; height : auto; padding:1%;\">\r\n        <div class=\"row\">\r\n           <div class=\"modal-header\"  style=\"width : 97%; margin : 0px auto;\">\r\n              <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n              <h4 class=\"modal-title\">Journal Book Report</h4>\r\n           </div>\r\n           <div class=\"col-md-12\">\r\n              <table>\r\n                 <tr>\r\n                    <td>\r\n                       <input type=\"radio\" name=\"rangeSelection\" value=\"0\" [(ngModel)]=\"ReportParameters.OPT_REPMODE\"/>&nbsp;Date Range Selection\r\n                    </td>\r\n                    <td>\r\n                       <input type=\"radio\" name=\"rangeSelection\" value=\"1\" [(ngModel)]=\"ReportParameters.OPT_REPMODE\" />&nbsp;Voucher Range Selection\r\n                    </td>\r\n                 </tr>\r\n                 <tr>\r\n                    <td>\r\n                       <fieldset>\r\n                          <legend>Date Range Selection</legend>\r\n                          <table> \r\n                                <tr>\r\n                                   <td><label class=\"smallBoldLabel\">From(AD):</label></td>\r\n                                   <td><label class=\"smallBoldLabel\">To(AD):</label></td>\r\n                                </tr>\r\n                                <tr>\r\n                                   <td>                                                 \r\n                                         <label class=\"smallBoldLabel\"><input  type=\"date\"  style=\"width:152px; min-width:50%;\"  placeholder=\"Year Start Date\" [(ngModel)]=\"ReportParameters.DATE1\"  (change)=\"changestartDate($event.target.value,'AD')\"  ></label>\r\n                                   </td>\r\n                                   <td>                                                 \r\n                                         <label class=\"smallBoldLabel\"><input  type=\"date\" style=\"width:152px; min-width:50%;\"  placeholder=\"Year Start Date\" [(ngModel)]=\"ReportParameters.DATE2\"  (change)=\"changeEndDate($event.target.value,'AD')\"   ></label>\r\n                                   </td>\r\n                                </tr>\r\n                                <tr>\r\n                                   <td>\r\n                                         <label class=\"smallBoldLabel\"><input id=\"nepaliDate\" style=\"width:152px;height:25px;text-align:center\" class=\"nepali-calendar ndp-nepali-calendar\" [(ngModel)]=\"ReportParameters.BSDATE1\"\r\n                                      type=\"text\" (change)=\"changestartDate($event.target.value,'BS')\"\r\n                                      placeholder=\"yyyy-mm-dd\" /> </label>\r\n                                   </td>\r\n                                   <td>\r\n                                         <label class=\"smallBoldLabel\"><input id=\"nepaliDate\" style=\"width:152px;height:25px;text-align:center\" class=\"nepali-calendar ndp-nepali-calendar\" [(ngModel)]=\"ReportParameters.BSDATE2\"\r\n                                      type=\"text\" (change)=\"changeEndDate($event.target.value,'BS')\"\r\n                                      placeholder=\"yyyy-mm-dd\" /> </label>\r\n                                   </td>\r\n                                </tr>\r\n                             </table>\r\n                       </fieldset>\r\n                    </td>\r\n                    <td>\r\n                       <fieldset>\r\n                          <legend>Voucher Range Selection</legend>\r\n                          <table>\r\n                             <tr>\r\n                                <td>From</td>\r\n                                <td style=\"border:1px solid;\">\r\n                                   <span style=\"border-right: 1px solid; \">JV-</span><input style=\"border : none; width : 130px;\" type=\"text\" name=\"fromRV\" [(ngModel)]=\"ReportParameters.VNO1\" />\r\n                                </td>\r\n                             </tr>\r\n                      \r\n                             <tr>\r\n                                <td>To</td>\r\n                                <td style=\"border:1px solid;\">\r\n                                   <span style=\"border-right: 1px solid;\">JV-</span><input style=\"border : none; width:130px; \" type=\"text\" name=\"toRV\" [(ngModel)]=\"ReportParameters.VNO2\" />\r\n                                </td>\r\n                             </tr>\r\n                          </table>\r\n                       </fieldset>\r\n                    </td>\r\n                 </tr>\r\n                 <tr>\r\n                    <td>\r\n                        <fieldset>\r\n                            <legend>Division Selection:</legend>\r\n                                <select [(ngModel)]=\"ReportParameters.DIVISION\" style=\"width : 100%;\">\r\n                                 <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0\">All</option>\r\n                                    <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                                        {{ div.NAME }}\r\n                                    </option>\r\n                                </select>\r\n                        </fieldset>\r\n                    </td>\r\n                    <td>\r\n                       <fieldset>\r\n                          <legend>Journal Voucher Series Selection</legend>\r\n                          <select style=\"width : 100%;\">\r\n                             <option>--Series Selection--</option>\r\n                          </select>\r\n                       </fieldset>\r\n                    </td>\r\n                 </tr>\r\n              </table>\r\n              <fieldset>\r\n                 <legend>Report Filter Option</legend>\r\n                 <div>\r\n                    <span style=\"border : none;\">Account Name: </span>\r\n                    <select style=\"width : 100%;\">\r\n                       <option>All</option>\r\n                       <option *ngFor=\"let ac of aclist\">\r\n                          {{ ac.ACNAME }}\r\n                       </option>\r\n                    </select>\r\n                 </div>\r\n              </fieldset>\r\n           </div>\r\n           <div class=\"btn\">\r\n                <button class=\"btn btn-info confirm-btn\" type=\"button\"  (click)=onload()>RUN</button>\r\n                <button type=\"button\"  title=\"Cancel\" class=\"btn btn-info\">Close</button>  \r\n            </div>\r\n        </div>\r\n     </div>"

/***/ }),

/***/ 1742:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .input-text {\r\n        width: 100%;\r\n        /* height: 30px !important; */\r\n        font-weight: bold;\r\n    }\r\n\r\n    .td-class {\r\n        border: none !important;\r\n    }\r\n\r\n    .date-input {\r\n        width: 93%;\r\n        font-size: 12px !important;\r\n        height: 30px !important;\r\n    }\r\n</style>\r\n<div class=\"container\" style=\"background-color : #ffffff; padding :1%; height : auto;  \">\r\n    <div class=\"row\">\r\n        <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n            <h4 class=\"modal-title\">Local Purchase Cost Allocation Report</h4>\r\n        </div>\r\n        <div class=\"col-md-12\" style=\"margin-top:20px;\">\r\n            <!-- Left Column -->\r\n            <div class=\"col-md-6\">\r\n                <fieldset>\r\n                    <legend>Ref No: </legend>\r\n                    <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\"\r\n                        [(ngModel)]=\"_reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_CAPITALPURCHASE_VCHRNO\"\r\n                        placeholder=\"Press Enter or Tab for Ref Voucher No List\" (keydown.Tab)=\"CPVoucherPopup($event)\"\r\n                        (keydown.enter)=\"CPVoucherPopup($event)\">\r\n                </fieldset>\r\n\r\n                <fieldset>\r\n                    <legend>Report Option</legend>\r\n                    <div class=\"row\">\r\n                       <div class=\"col-sm-4\">\r\n                          <label class=\"smallBoldLabel\" style=\"white-space: nowrap;\"><input type=\"radio\" name=\"locaPurCostAlOp\"\r\n                             [(ngModel)]=\"_reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_REPORTMODE\" [checked]=\"true\" value=0>&nbsp;Show all report</label>\r\n                       </div>\r\n                    \r\n                    </div>\r\n                    <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"locaPurCostAlOp\"\r\n                     [(ngModel)]=\"_reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_REPORTMODE\"  value=1>&nbsp; Show only entries converted to Additional Cost</label>\r\n                    <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"locaPurCostAlOp\"\r\n                     [(ngModel)]=\"_reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_REPORTMODE\"  value=2>&nbsp;Show only entries non-converted to Additional Cost</label>\r\n                    \r\n                 </fieldset>\r\n            </div>\r\n            <!-- Right Column -->\r\n            <div class=\"col-md-6\">\r\n\r\n                <fieldset>\r\n                    <legend>Account Selection: </legend>\r\n                    <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\"\r\n                        [(ngModel)]=\"_reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_ACCNAME\"\r\n                        placeholder=\"Press Enter or Tab for Account List\" (keydown.Tab)=\"AccountEnterClicked($event)\"\r\n                        (keydown.enter)=\"AccountEnterClicked($event)\">\r\n                </fieldset>\r\n\r\n                <!-- PI Voucher -->\r\n                <fieldset>\r\n                    <legend>PI Voucher: </legend>\r\n                    <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\"\r\n                        [(ngModel)]=\"_reportFilterService.LocalPurchaseCostAllocationObj.LocalPurchaseCostAllocation_PI_VOUCHERNO\"\r\n                        placeholder=\"Press Enter or Tab for PI Voucher List\"\r\n                        (keydown.Tab)=\"PiVoucherEnterClicked($event)\" (keydown.enter)=\"PiVoucherEnterClicked($event)\">\r\n                </fieldset>\r\n\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n            <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n            <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n        </div>\r\n\r\n    </div>\r\n</div>\r\n\r\n<generic-popup-grid #genericGridLocalPurchaseCostAccount [popupsettings]=\"gridPopupSettingsForAccountList\"\r\n    (onItemDoubleClick)=\"dblClickAccountSelect($event)\">\r\n</generic-popup-grid>\r\n\r\n<generic-popup-grid #genericGridLocalPurchasePIVoucher [popupsettings]=\"gridPopupSettingsForLocalPurchasePIVoucher\"\r\n    (onItemDoubleClick)=\"dblClickPurchasePIVoucherSelect($event)\">\r\n</generic-popup-grid>\r\n\r\n<generic-popup-grid #genericGridCPVoucher [popupsettings]=\"gridCPVoucherPopupSettings\"\r\n    (onItemDoubleClick)=\"DblClickCPVoucherSelect($event)\"></generic-popup-grid>"

/***/ }),

/***/ 1743:
/***/ (function(module, exports) {

module.exports = "<account-payable-report *ngIf=\"activeurlpath=='accountpayablereport'\" (reportdataEmit)=\"reportdataEmit($event)\">\r\n</account-payable-report>\r\n<account-receivable-report *ngIf=\"activeurlpath=='accountreceivablereport'\" (reportdataEmit)=\"reportdataEmit($event)\">\r\n</account-receivable-report>\r\n<gst-sales-summary *ngIf=\"activeurlpath=='gstsalessummary'\" (reportdataEmit)=\"reportdataEmit($event)\">\r\n</gst-sales-summary>\r\n<result-purchasebookreport-dialog  *ngIf=\"activeurlpath=='purchasebookreport'\" (reportdataEmit)=\"reportdataEmit($event)\"></result-purchasebookreport-dialog>\r\n<result-cashbookreport-dialog (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='cashbookreport'\"></result-cashbookreport-dialog>\r\n<result-salesbookreport-dialog (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='salesbookreport'\"></result-salesbookreport-dialog>\r\n<result-journalbook-dialog (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='journalbook'\"></result-journalbook-dialog>\r\n<result-duevoucherreport-dialog (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='duevoucherreport'\"></result-duevoucherreport-dialog>\r\n<result-debtorsreport-dialog  (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='debtorsreport'\"></result-debtorsreport-dialog>\r\n<result-creditorsreport-dialog  (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='creditorsreport'\"></result-creditorsreport-dialog>\r\n<result-partyledger-dialog  (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='PartyLedger'\"></result-partyledger-dialog>\r\n<result-debtors-aging-report-dialog  (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='debtorsagingreport'\"  ></result-debtors-aging-report-dialog>\r\n<result-creditros-aging-report-dialog (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='creditorsagingreport'\" ></result-creditros-aging-report-dialog>\r\n<result-debtors-outstanding-report-dialog (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='debtorsoutstandingreport'\" ></result-debtors-outstanding-report-dialog>\r\n<result-creditors-outstanding-report-dialog (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='creditorsoutstandingreport'\"  ></result-creditors-outstanding-report-dialog>\r\n<summary-ledger-report  (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='summaryledgerreport'\"></summary-ledger-report>\r\n<account-ledger-report  (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='accountledgerreport'\"></account-ledger-report>\r\n<summary-party-ledger  (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='summarypartyledger'\"></summary-party-ledger>\r\n<party-ledger-report  (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='partyledgerreport'\"></party-ledger-report>\r\n\r\n\r\n<debitnote-register-report *ngIf=\"activeurlpath=='debit-note-register-report'\"\r\n  (reportdataEmit)=\"reportdataEmit($event)\"></debitnote-register-report>\r\n<vat-purchase-register-report *ngIf=\"activeurlpath=='vat-purchase-register-report'\"\r\n  (reportdataEmit)=\"reportdataEmit($event)\"></vat-purchase-register-report>\r\n<one-lakh-above-purchase-report *ngIf=\"activeurlpath=='one-lakh-above-purchase-report'\"\r\n  (reportdataEmit)=\"reportdataEmit($event)\"></one-lakh-above-purchase-report>\r\n<one-lakh-above-SALES-report *ngIf=\"activeurlpath=='one-lakh-above-sales-report'\"\r\n  (reportdataEmit)=\"reportdataEmit($event)\"></one-lakh-above-SALES-report>\r\n <voucher-registor-dialog  *ngIf=\"activeurlpath=='voucher-regeister-report'\"  (reportdataEmit)=\"reportdataEmit($event)\"  >   \r\n </voucher-registor-dialog> \r\n <cash-bank-book  (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='cash-bank-book-report'\"></cash-bank-book>\r\n <day-book-report  (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='day-book-report'\"></day-book-report>\r\n <sub-ledger-report  (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='sub-ledger-report'\"></sub-ledger-report>\r\n <sub-ledger-acbase-report  (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='sub-ledger-report-acbase'\"></sub-ledger-acbase-report>\r\n <trial-balance-report  (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='trial-balance-report'\"></trial-balance-report>\r\n <additionalcost-itemwise-report  (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='additionalcost-itemwise-report'\"></additionalcost-itemwise-report>\r\n <additionalcost-voucherwise-report  (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='additionalcost-voucherwise-report'\"></additionalcost-voucherwise-report>\r\n <salesreturn-summary-report (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='salesreturnsummary-report'\"></salesreturn-summary-report>\r\n <salesreturnsummary-retailerreport (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='salesreturnsummaryretailer-report'\"></salesreturnsummary-retailerreport>\r\n <sales-return-reportdetail (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='salesreturn-reportdetail'\"></sales-return-reportdetail>\r\n <stock-valuation-report (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='stockvaluation-reportdms'\" ></stock-valuation-report>\r\n <stock-ledger-report-account (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='stockledger-reportdms'\"></stock-ledger-report-account>\r\n <stocksummary-reportaccount (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='stocksummary-reportdms'\"></stocksummary-reportaccount>\r\n <currentstock-warehousewise-account (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='currentstock-warehousewise-reportdms'\"></currentstock-warehousewise-account>\r\n <stockabc-analysis-account (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='stockabc-analysis-reportdms'\"></stockabc-analysis-account>\r\n <consolidated-trial-balance-report (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='consolidated-trialbalance-report'\"></consolidated-trial-balance-report>\r\n \r\n <actual-vs-budget-report (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='actual-vs-budget-report'\"></actual-vs-budget-report>\r\n <profitloss-report  (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='profit-loss-report'\"></profitloss-report>\r\n <balancesheet-report  (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='balance-sheet-report'\"></balancesheet-report>\r\n\r\n <tds-report (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='tds-report'\"></tds-report>\r\n <consolidated-balance-sheet-report  (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='consolidated-balance-sheet-report'\"></consolidated-balance-sheet-report>\r\n <consolidated-profit-loss-report  (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='consolidated-profit-loss-report'\"></consolidated-profit-loss-report>\r\n <billtracking-report-selector (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='bill-tracking-report'\"></billtracking-report-selector>\r\n <creditorsbilltracking-report-selector (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='creditorsbill-tracking-report'\"></creditorsbilltracking-report-selector>\r\n <postdated-report-selector (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='postdated-chequevoucher-report'\"></postdated-report-selector>\r\n <monthly-sales-payment (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='monthly-sales-payment-report'\"></monthly-sales-payment>\r\n<localpurchasecost-allocation-report (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='local-purchase-cost-allocation-report'\"></localpurchasecost-allocation-report>\r\n<incometax-depreciation-report (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='incometax-depreciation-report'\"></incometax-depreciation-report>\r\n<companynorms-depreciation-report (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='companynorms-depreciation-report'\"></companynorms-depreciation-report>\r\n<faarasset-depreciation-report (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='faarasset-depreciation-report'\"></faarasset-depreciation-report>\r\n<cash-collection-voucher-report (reportdataEmit)=\"reportdataEmit($event)\" *ngIf=\"activeurlpath=='cash-collection-voucher-report'\"></cash-collection-voucher-report>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"

/***/ }),

/***/ 1744:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .input-text{\r\n        width : 100%;\r\n        /* height: 30px !important; */\r\n        font-weight: bold;\r\n    }\r\n    .td-class{\r\n        border: none !important;\r\n    }\r\n    .date-input{\r\n        width: 93%;\r\n        font-size: 12px !important;\r\n        height: 30px !important;\r\n    }\r\n</style>\r\n<div class=\"container\" style=\"background-color : #ffffff; padding :1%; height : auto;  \">\r\n    <div class=\"row\">\r\n        <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n            <h4 class=\"modal-title\">Monthly Sales Payment Report</h4>\r\n        </div>\r\n        <div class=\"col-md-12\">\r\n            <!-- Left Column -->\r\n            <div class=\"col-md-6\">\r\n                <fieldset>\r\n                    <legend style=\"font-size:11px;font-weight: bold; width:auto\">Date Range Selection :</legend>\r\n                <table>\r\n                        <tr>\r\n                            <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                            <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td class=\"td-class\">\r\n                                    <input type=\"date\"\r\n                                    class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                        [(ngModel)]=\"_reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DATE1\"\r\n                                        (change)=\"changeEntryDate($event.target.value,'AD')\" (focusout)=\"focusOutFromDate($event.target.value)\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                            </td>\r\n                            <td class=\"td-class\">\r\n                                    <input type=\"date\"\r\n                                    class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                        [(ngModel)]=\"_reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DATE2\"\r\n                                        (change)=\"changeEndDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td class=\"td-class\">\r\n                              <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                              (change)=\"changeEntryDate($event.detail.value,'BS')\"\r\n                              [label]=\"'From'\"\r\n                              [(ngModel)]=\"_reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_BSDATE1\">\r\n                            </nepali-date-picker>\r\n                                     <!-- <input id=\"nepaliDate\"\r\n                                     style=\"text-align:center;\"\r\n                                     class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                        [(ngModel)]=\"_reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_BSDATE1\" type=\"text\"\r\n                                        (change)=\"changeEntryDate($event.target.value,'BS')\"\r\n                                        placeholder=\"yyyy-mm-dd\" />                 -->\r\n                            </td>\r\n                            <td class=\"td-class\">\r\n                              <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDateTo'\"\r\n                              (change)=\"changeEndDate($event.detail.value,'BS')\"\r\n                              [label]=\"'To'\"\r\n                              [(ngModel)]=\"_reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_BSDATE2\">\r\n                            </nepali-date-picker>\r\n                                    <!-- <input id=\"nepaliDate\" style=\"text-align:center;\"\r\n                                    class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                        [(ngModel)]=\"_reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_BSDATE2\" type=\"text\"\r\n                                        (change)=\"changeEndDate($event.target.value,'BS')\"\r\n                                        placeholder=\"yyyy-mm-dd\" /> -->\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </fieldset>\r\n\r\n                <fieldset>\r\n                    <legend>Division Selection:</legend>\r\n                    <select [(ngModel)]=\"_reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_DIV\" style=\"height: 30px !important;\"\r\n                    class=\"form-control input-text\">\r\n                    <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL</option>\r\n                        <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                            {{ div.NAME }}\r\n                        </option>\r\n                    </select>\r\n                </fieldset>\r\n            </div>\r\n            <!-- Right Column -->\r\n            <div class=\"col-md-6\">\r\n                <!-- <account-list></account-list> -->\r\n                <fieldset>\r\n                    <legend>Account Selection: </legend>\r\n                    <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\"\r\n                        [(ngModel)]=\"_reportFilterService.MonthlySalesPaymentObj.MonthlySalesPayment_ACCNAME\" placeholder=\"Press Enter or Tab for Account List\"\r\n                        (keydown.Tab)=\"AccountEnterClicked($event)\" (keydown.enter)=\"AccountEnterClicked($event)\">\r\n                </fieldset>\r\n\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n            <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n            <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <generic-popup-grid #genericGridMonthlysalesPayment [popupsettings]=\"gridPopupSettingsForAccountList\"\r\n    (onItemDoubleClick)=\"dblClickAccountSelect($event)\">\r\n</generic-popup-grid>\r\n"

/***/ }),

/***/ 1745:
/***/ (function(module, exports) {

module.exports = "<div style=\"background-color : #ffffff; padding :1%; height : auto; width:50%; \">\r\n  <div class=\"row\">\r\n    <div class=\"modal-header\">\r\n      <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"hide()\">&times;</button>\r\n      <h4 class=\"modal-title\">One Lakh Above Sales Report</h4>\r\n    </div>\r\n    <div class=\"_left_section col-md-12\">\r\n      <fieldset style=\"width:352px\">\r\n        <legend style=\"font-size:11px;font-weight: bold; width:auto\">Date Range Selection :</legend>\r\n        <table>\r\n          <tr>\r\n            <td><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n            <td><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              <label class=\"smallBoldLabel\"><input type=\"date\" style=\"width:152px; min-width:50%;\"\r\n                  placeholder=\"Year Start Date\" [(ngModel)]=\"OneLakhAboveSalesReport.DATE1\"\r\n                  (change)=\"changeEntryDate($event.target.value,'AD')\"></label>\r\n            </td>\r\n            <td>\r\n              <label class=\"smallBoldLabel\"><input type=\"date\" style=\"width:152px; min-width:50%;\"\r\n                  placeholder=\"Year Start Date\" [(ngModel)]=\"OneLakhAboveSalesReport.DATE\"\r\n                  (change)=\"changeEndDate($event.target.value,'AD')\"></label>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              <label class=\"smallBoldLabel\"> <input id=\"nepaliDate\" style=\"width:152px;height:25px;text-align:center\"\r\n                  class=\"nepali-calendar ndp-nepali-calendar\" [(ngModel)]=\"OneLakhAboveSalesReport.BSDATE1\" type=\"text\"\r\n                  (change)=\"changeEntryDate($event.target.value,'BS')\" placeholder=\"yyyy-mm-dd\" />\r\n              </label>\r\n            </td>\r\n            <td>\r\n              <label class=\"smallBoldLabel\">\r\n                <input id=\"nepaliDate\" style=\"width:152px;height:25px;text-align:center\"\r\n                  class=\"nepali-calendar ndp-nepali-calendar\" [(ngModel)]=\"OneLakhAboveSalesReport.BSDATE2\" type=\"text\"\r\n                  (change)=\"changeEndDate($event.target.value,'BS')\" placeholder=\"yyyy-mm-dd\" />\r\n              </label>\r\n            </td>\r\n          </tr>\r\n        </table>\r\n      </fieldset>\r\n\r\n      <!-- Division Selection Start -->\r\n      <fieldset style=\"width:352px;\">\r\n        <legend>Division Selection:</legend>\r\n        <select class=\"form-control\" [(ngModel)]=\"this.OneLakhAboveSalesReport.DIV\" #division\r\n          (change)=\"divisionChanged()\">\r\n          <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0\" selected>ALL</option>\r\n          <option *ngFor=\"let divs of divisionList;let i=index\" value=\"{{divs.INITIAL}}\">{{divs.NAME}}\r\n          </option>\r\n        </select>\r\n      </fieldset>\r\n      <!-- Division Selection End -->\r\n\r\n      <!-- R1,R2,R3 start-->\r\n      <fieldset>\r\n        <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n          <label class=\"smallBoldLabel\">\r\n            <input type=\"checkbox\" [(ngModel)]=\"this.OneLakhAboveSalesReport.isR1\">\r\n            Credit Sales Only\r\n          </label>\r\n        </div>\r\n        <div class=\"checkbox\" style=\"padding-top:1px;width:200px;\">\r\n          <label class=\"smallBoldLabel\">\r\n            <input type=\"checkbox\" [(ngModel)]=\"this.OneLakhAboveSalesReport.isR2\">\r\n            Non Credit Sales With Pan No Only\r\n          </label>\r\n        </div>\r\n        <div class=\"checkbox\" style=\"padding-top:1px;width:300px;\">\r\n          <label class=\"smallBoldLabel\">\r\n            <input type=\"checkbox\" [(ngModel)]=\"this.OneLakhAboveSalesReport.isR3\">\r\n            Non Credit Sales Without Pan No Only\r\n          </label>\r\n        </div>\r\n      </fieldset>\r\n      <!-- R1,R2,R3 end-->\r\n\r\n      <div style='margin-top:20px;'>\r\n        <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n        <button type=\"button\" (click)=\"cancel()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</div>\r\n"

/***/ }),

/***/ 1746:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .action-btn {\r\n        width: 80%;\r\n        height: 80%;\r\n        display: block;\r\n        margin: 0 auto;\r\n        background-color: inherit;\r\n        border: none;\r\n    }\r\n    .input-text{\r\n        width : 100%;\r\n        /* height: 30px !important; */\r\n        font-weight: bold;\r\n    }\r\n    .td-class{\r\n        border: none !important;\r\n    }\r\n    .date-input{\r\n        width: 93%;\r\n        font-size: 12px !important;\r\n        height: 30px !important;\r\n    }\r\n     @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .reportForm{\r\n        height: 50vh !important;\r\n       \r\n    }\r\n    }\r\n     @media screen and (max-width:767px) {\r\n        .smallBoldLabel{\r\n            width: auto !important;\r\n        }\r\n          .report-container{\r\n           width: 85% !important;\r\n    }\r\n        \r\n    }\r\n   \r\n</style>\r\n<div class=\"container report-container\">\r\n    <div class=\"row \">\r\n        <!-- Filter Starts -->\r\n        <div class=\"col-12 col-md-12\">\r\n            <div  style=\"background-color : #ffffff;  width: 100%;\">\r\n                <div class=\"row\">\r\n                    <div class=\"modal-header\" style=\"border:0px;\">\r\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\"\r\n                            (click)=\"closeReportBox()\">&times;</button>\r\n                        <h4 class=\"modal-title\"  style=\"padding-left: 3%;\">Party Ledger Report</h4>\r\n                    </div>\r\n                    <div class=\"col-md-12 reportForm\" style=\"padding-top: 2%; height:71vh; overflow:auto;\">\r\n                        <div class=\"col-md-6\">\r\n                            <fieldset>\r\n                                <legend style=\"font-size:11px;font-weight: bold; width:auto;margin-bottom: -4px;\">Date Range Selection :</legend>\r\n                                <table>\r\n                                    <tr>\r\n                                        <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                                        <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td class=\"td-class\">\r\n                                                <input type=\"date\"\r\n                                                class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                                    [(ngModel)]=\"_reportFilterService.PartyLedgerObj.PartyLedger_DATE1\"\r\n                                                    (change)=\"changeEntryDate($event.target.value,'AD')\">\r\n                                        </td>\r\n                                        <td class=\"td-class\">\r\n                                                <input type=\"date\"\r\n                                                class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                                    [(ngModel)]=\"_reportFilterService.PartyLedgerObj.PartyLedger_DATE2\"\r\n                                                    (change)=\"changeEndDate($event.target.value,'AD')\">\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td class=\"td-class\">\r\n                                          <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                                            (change)=\"changeEntryDate($event.detail.value,'BS')\"\r\n                                            [label]=\"'From'\"\r\n                                            [(ngModel)]=\"_reportFilterService.PartyLedgerObj.PartyLedger_BSDATE1\">\r\n                                          </nepali-date-picker>\r\n                                                <!-- <input id=\"nepaliDate\"\r\n                                                    style=\"text-align:center;\"\r\n                                                    class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                                    [(ngModel)]=\"_reportFilterService.PartyLedgerObj.PartyLedger_BSDATE1\" type=\"text\"\r\n                                                    (change)=\"changeEntryDate($event.target.value,'BS')\"\r\n                                                    placeholder=\"yyyy-mm-dd\" />                             -->\r\n                                        </td>\r\n                                        <td class=\"td-class\">\r\n                                          <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDateTo'\"\r\n                                            (change)=\"changeEndDate($event.detail.value,'BS')\"\r\n                                            [label]=\"'To'\"\r\n                                            [(ngModel)]=\"_reportFilterService.PartyLedgerObj.PartyLedger_BSDATE2\">\r\n                                          </nepali-date-picker>\r\n                                                <!-- <input id=\"nepaliDate\" style=\"text-align:center;\"\r\n                                                    class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                                    [(ngModel)]=\"_reportFilterService.PartyLedgerObj.PartyLedger_BSDATE2\" type=\"text\"\r\n                                                    (change)=\"changeEndDate($event.target.value,'BS')\"\r\n                                                    placeholder=\"yyyy-mm-dd\" /> -->\r\n                                        </td>\r\n                                    </tr>\r\n                                </table>\r\n                            </fieldset>\r\n\r\n                            <fieldset>\r\n                                <legend>Division Selection:</legend>\r\n                                <select [(ngModel)]=\"_reportFilterService.PartyLedgerObj.PartyLedger_DIV\" style=\"height: 30px !important;\"\r\n                                class=\"form-control input-text\">\r\n                                    <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL</option>\r\n                                    <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                                        {{ div.NAME }}\r\n                                    </option>\r\n                                </select>\r\n                            </fieldset>\r\n                            <fieldset *ngIf=\"_reportFilterService.PartyLedgerObj. PartyLedger_HIDECOSTCENTER == 0\">\r\n                                <legend>Cost Center:</legend>\r\n                                <select [(ngModel)]=\"_reportFilterService.PartyLedgerObj.PartyLedger_CostCenter\"\r\n                                style=\"height: 30px !important;\"\r\n                                class=\"form-control input-text\">\r\n                                    <option value=\"%\"> </option>\r\n                                    <option *ngFor=\"let i of CostcenterList\" value={{i.CCID}}>{{i.COSTCENTERNAME}}\r\n                                    </option>\r\n                                </select>\r\n                            </fieldset>\r\n\r\n                            <fieldset>\r\n                                <legend>Report Type:</legend>\r\n                                <label class=\"smallBoldLabel\" style=\"padding-right:15px;\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                                      [(ngModel)]=\"_reportFilterService.PartyLedgerObj.PartyLedger_SUMMARYREPORT\" value=0 >&nbsp;Detail Ledger\r\n                                   Report</label>\r\n                                <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                                      [(ngModel)]=\"_reportFilterService.PartyLedgerObj.PartyLedger_SUMMARYREPORT\" value=1 >&nbsp;Summary Ledger Report</label>\r\n                             </fieldset>\r\n\r\n                            <!-- <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n                                <label class=\"smallBoldLabel\">\r\n                                    <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.PartyLedgerObj.SHOWNDATE\">\r\n                                    Show BS Date In Report\r\n                                </label>\r\n                            </div> -->\r\n\r\n                            <!-- <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n                                <label class=\"smallBoldLabel\">\r\n                                    <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.PartyLedgerObj.IGNOREOPPOSITAC\">\r\n                                    Show Ledger Report in Summary\r\n                                </label>\r\n                            </div> -->\r\n                            <div style=\"display: flex; flex-wrap: wrap;\">\r\n                                <div class=\"checkbox\"  style=\"padding-top:5px;width:200px;\" *ngIf=\"_reportFilterService.PartyLedgerObj.PartyLedger_SUMMARYREPORT== 0\" >\r\n                                    <label class=\"smallBoldLabel\" style=\"width: 213px; margin-left: 4px;\">\r\n                                        <input type=\"checkbox\"  [(ngModel)]=\"_reportFilterService.PartyLedgerObj.IGNOREOPPOSITAC\">\r\n                                        Hide Opposite A/C in Ledger Report\r\n                                    </label>\r\n                                </div>\r\n\r\n                                <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\" *ngIf=\"_reportFilterService.PartyLedgerObj.PartyLedger_SUMMARYREPORT== 0\">\r\n                                    <label class=\"smallBoldLabel\" style=\"width: 210px;\">\r\n                                        <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.PartyLedgerObj.PartyLedger_HIDENARATION\" style=\"margin-left: 5px;\"\r\n                                        (change)=\"$event.target.checked?(_reportFilterService.PartyLedgerObj.PartyLedger_HIDENARATION=1):(_reportFilterService.PartyLedgerObj.PartyLedger_HIDENARATION=0)\"\r\n                                        [checked]=\"_reportFilterService.PartyLedgerObj.PartyLedger_HIDENARATION == 1\">\r\n                                        Hide Narration In Ledger Report\r\n                                    </label>\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                            <div style=\"display: flex;flex-wrap: wrap;\">\r\n                                <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\" *ngIf=\"_reportFilterService.PartyLedgerObj.PartyLedger_SUMMARYREPORT== 1\">\r\n                                    <label class=\"smallBoldLabel\" style=\"width: 210px;\">\r\n                                        <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.PartyLedgerObj.PartyLedger_HIDEVOUCHERTYPE\" style=\"margin-left: 5px\"\r\n                                        (change)=\"$event.target.checked?(_reportFilterService.PartyLedgerObj.PartyLedger_HIDEVOUCHERTYPE=1):(_reportFilterService.PartyLedgerObj.PartyLedger_HIDEVOUCHERTYPE=0)\"\r\n                                [checked]=\"_reportFilterService.PartyLedgerObj.PartyLedger_HIDEVOUCHERTYPE == 1\" >\r\n                                        Hide Voucher Type in Ledger Report\r\n                                    </label>\r\n                                </div>\r\n\r\n                                <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\"  *ngIf=\"_reportFilterService.PartyLedgerObj.PartyLedger_SUMMARYREPORT== 0\">\r\n                                    <label class=\"smallBoldLabel\" style=\"width: 203px; margin-left: 4px;\">\r\n                                        <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.PartyLedgerObj.PartyLedger_SHOWITEMDETAIL\"\r\n                                        (change)=\"$event.target.checked?(_reportFilterService.PartyLedgerObj.PartyLedger_SHOWITEMDETAIL=1):(_reportFilterService.PartyLedgerObj.PartyLedger_SHOWITEMDETAIL=0)\"\r\n                                [checked]=\"_reportFilterService.PartyLedgerObj.PartyLedger_SHOWITEMDETAIL == 1\">\r\n                                        Show Item Detail Also\r\n                                    </label>\r\n                                </div>\r\n\r\n                                <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n                                    <label class=\"smallBoldLabel\" style=\"width:225px;\">\r\n                                        <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.PartyLedgerObj.PartyLedger_INCLUDEPOSTDATE\" style=\"margin-left: 5px;\"\r\n                                        (change)=\"$event.target.checked?(_reportFilterService.PartyLedgerObj.PartyLedger_INCLUDEPOSTDATE=1):(_reportFilterService.PartyLedgerObj.PartyLedger_INCLUDEPOSTDATE=0)\"\r\n                                [checked]=\"_reportFilterService.PartyLedgerObj.PartyLedger_INCLUDEPOSTDATE == 1\" >\r\n                                        Include Post Dated Transaction Also\r\n                                    </label>\r\n                                </div> \r\n                            </div>\r\n                            <div>\r\n                                <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n                                    <label class=\"smallBoldLabel\" style=\"width:225px;margin-left: -18px;\">\r\n                                        <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.PartyLedgerObj.PartyLedger_HIDECOSTCENTER\" style=\"margin-left: 21px;\"\r\n                                        (change)=\"$event.target.checked?(_reportFilterService.PartyLedgerObj.PartyLedger_HIDECOSTCENTER=1):(_reportFilterService.PartyLedgerObj.PartyLedger_HIDECOSTCENTER=0)\"\r\n                                [checked]=\"_reportFilterService.PartyLedgerObj.PartyLedger_HIDECOSTCENTER == 1\" >\r\n                                        Hide Cost Center\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n\r\n                        </div>\r\n                        <!-- The One With Tree Part-->\r\n                        <div class=\"col-md-6 filter-part\">\r\n                            <fieldset>\r\n                                <legend>Party A/C Selection :</legend>\r\n                                <input #partyAccountSelection type=\"text\" style=\"font-weight: bold;\" class=\"form-control\" [(ngModel)]=\"_reportFilterService.PartyLedgerObj.PartyLedger_ACCNAME\"\r\n                                    placeholder=\"Press Enter or Tab for Party List\" (keydown.Tab)=\"AccountEnterClicked($event)\"\r\n                                    (keydown.enter)=\"AccountEnterClicked($event)\">\r\n                            </fieldset>\r\n\r\n                            <fieldset>\r\n                                <legend><label class=\"smallBoldLabel\">\r\n                                        <input type=\"checkbox\"\r\n                                            [(ngModel)]=\"_reportFilterService.PartyLedgerObj.EnableCombineLedger\"\r\n                                            (change)=\"checkValueForCombine()\">\r\n                                        Show Combined Ledger</label></legend>\r\n                                <select [(ngModel)]=\"_reportFilterService.PartyLedgerObj.PartyLedger_ReportType\"\r\n                                    (change)=\"checkValue()\" style=\"height: 30px !important;\"\r\n                                    class=\"form-control input-text\" [disabled]=\"_reportFilterService.PartyLedgerObj.EnableCombineLedger == false || _reportFilterService.PartyLedgerObj.EnableCombineLedger ===undefined\">\r\n                                    <option value=7>All</option>\r\n                                    <option value=2>Multi Ledger Wise</option>\r\n                                    <option value=1>Area Wise</option>\r\n                                    <option value=4>Cost Center Wise</option>\r\n                                    <option value=5>Party Group Wise</option>\r\n                                </select>\r\n                            </fieldset>\r\n\r\n                            <div *ngIf=\"showLedgerTable\">\r\n                                <fieldset>\r\n                                    <legend><label class=\"smallBoldLabel\">&nbsp;Ledger Wise</label></legend>\r\n                                    <div>\r\n                                        <div class=\"col-md-10\">\r\n                                            <input type=\"text\" class=\"form-control\" [disabled]=\"_reportFilterService.PartyLedgerObj.EnableCombineLedger == false || _reportFilterService.PartyLedgerObj.EnableCombineLedger ===undefined\" [(ngModel)]=\"_reportFilterService.PartyLedgerObj.multipleACNAME\"\r\n                                        placeholder=\"Press Enter or Tab for Party List\" (keydown.Tab)=\"MultipleAccountEnterClicked($event)\"\r\n                                        (keydown.enter)=\"MultipleAccountEnterClicked($event)\" (keydown)=\"preventInput($event)\">\r\n\r\n                                        </div>\r\n                                        <div class=\"col-md-2\">\r\n                                            <button type=\"button\" class=\"btn btn-info\"\r\n                                                (click)=\"addAccountToList()\" [disabled]=\"_reportFilterService.PartyLedgerObj.EnableCombineLedger == false || _reportFilterService.PartyLedgerObj.EnableCombineLedger ===undefined\">Add</button>\r\n                                        </div>\r\n                                        <div class=\"col-md-12\">\r\n                                            <table style=\"height:175px;\">\r\n                                                <tr class=\"smallBoldLabel\">\r\n                                                    <th style=\"width:3px;font-weight: bold;\">S.No.</th>\r\n                                                    <th style=\"width:10px;font-weight: bold;\">PartyName</th>\r\n                                                    <th style=\"width:4px;font-weight: bold;\">Action</th>\r\n                                                </tr>\r\n                                                <tr *ngFor=\"let data of _reportFilterService.PartyLedgerObj.PartyLedger_multipleAccounts;let i = index\"\r\n                                                    class=\"smallBoldLabel\">\r\n                                                    <td style=\"width:3px;\">{{ i + 1 }}</td>\r\n                                                    <td style=\"width:10px;\">{{data.ACNAME}}</td>\r\n                                                    <td style=\"width:4px;\">\r\n                                                        <button type=\"button\" class=\"action-btn\"\r\n                                                            (click)=\"deleteAccount(i)\">Delete</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n                                        <label class=\"smallBoldLabel\">\r\n                                            <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.PartyLedgerObj.MERGEREPORT\" [disabled]=\"_reportFilterService.PartyLedgerObj.EnableCombineLedger == false || _reportFilterService.PartyLedgerObj.EnableCombineLedger ===undefined\">\r\n                                            Merge Combined Ledger\r\n                                        </label>\r\n                                    </div>\r\n                                </fieldset>\r\n                            </div>\r\n\r\n                            <div *ngIf=\"showAreaTable\">\r\n                                <fieldset>\r\n                                <legend>Area:</legend>\r\n                                    <select [(ngModel)]=\"_reportFilterService.PartyLedgerObj.PartyLedger_AreaWise\"\r\n                                    style=\"height: 30px !important;\" class=\"form-control\" [disabled]=\"_reportFilterService.PartyLedgerObj.EnableCombineLedger == false || _reportFilterService.PartyLedgerObj.EnableCombineLedger ===undefined\">\r\n                                        <option value=0></option>\r\n                                        <option *ngFor=\"let i of AreaList\" value={{i.AREA_ID}}>{{i.AREA_NAME}}</option>\r\n                                    </select>\r\n\r\n                                    <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n                                        <label class=\"smallBoldLabel\">\r\n                                            <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.PartyLedgerObj.MERGEREPORT\" [disabled]=\"_reportFilterService.PartyLedgerObj.EnableCombineLedger == false || _reportFilterService.PartyLedgerObj.EnableCombineLedger ===undefined\">\r\n                                            Merge Combined Ledger\r\n                                        </label>\r\n                                    </div>\r\n                                </fieldset>\r\n                            </div>\r\n\r\n                            <div *ngIf=\"showCCtable\">\r\n                                <fieldset>\r\n                                    <legend><label class=\"smallBoldLabel\">&nbsp;Cost Center Wise</label></legend>\r\n                                    <div>\r\n                                        <div class=\"col-md-10\">\r\n                                            <select [(ngModel)]=\"_reportFilterService.PartyLedgerObj.CCENTER\"\r\n                                                style=\"height: 30px !important;\" class=\"form-control input-text\" [disabled]=\"_reportFilterService.PartyLedgerObj.EnableCombineLedger == false || _reportFilterService.PartyLedgerObj.EnableCombineLedger ===undefined\">\r\n                                                <option *ngFor=\"let i of CostcenterList\" [ngValue]=\"i\">\r\n                                                    {{i.COSTCENTERNAME}}\r\n                                                </option>\r\n                                            </select>\r\n                                        </div>\r\n                                        <div class=\"col-md-2\">\r\n                                            <button type=\"button\" class=\"btn btn-info\" *ngIf=\"showMultipleCC\"\r\n                                                (click)=\"addCostcenterToList()\" [disabled]=\"_reportFilterService.PartyLedgerObj.EnableCombineLedger == false || _reportFilterService.PartyLedgerObj.EnableCombineLedger ===undefined\">Add</button>\r\n                                        </div>\r\n                                        <div class=\"col-md-12\" *ngIf=\"showMultipleCC\">\r\n                                            <table style=\"height:150px;\">\r\n                                                <tr class=\"smallBoldLabel\">\r\n                                                    <th style=\"width:3px;font-weight: bold;\">S.No.</th>\r\n                                                    <th style=\"width:10px;font-weight: bold;\">Cost Center</th>\r\n                                                    <th style=\"width:4px;font-weight: bold;\">Action</th>\r\n                                                </tr>\r\n                                                <tr *ngFor=\"let data of _reportFilterService.PartyLedgerObj.PartyLedger_multipleCostcenter;let i = index\"\r\n                                                    class=\"smallBoldLabel\">\r\n                                                    <td style=\"width:3px;\">{{ i + 1 }}</td>\r\n                                                    <td style=\"width:10px;\">{{data.COSTCENTERNAME}}</td>\r\n                                                    <td style=\"width:4px;\">\r\n                                                        <button type=\"button\" class=\"action-btn\"\r\n                                                            (click)=\"deleteCostcenter(i)\">Delete</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div *ngIf=\"_reportFilterService.showAllcontactsInCC\" class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n                                        <label class=\"smallBoldLabel\">\r\n                                            <input type=\"checkbox\"\r\n                                                [(ngModel)]=\"_reportFilterService.PartyLedgerObj.PartyLedger_showAllContacts\"\r\n                                                (change)=\"checkCostCenterValue()\" [disabled]=\"_reportFilterService.PartyLedgerObj.EnableCombineLedger == false || _reportFilterService.PartyLedgerObj.EnableCombineLedger ===undefined\">\r\n                                            Show All Cost Center\r\n                                        </label>\r\n                                    </div>\r\n\r\n                                    <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n                                        <label class=\"smallBoldLabel\">\r\n                                            <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.PartyLedgerObj.MERGEREPORT\" [disabled]=\"_reportFilterService.PartyLedgerObj.EnableCombineLedger == false || _reportFilterService.PartyLedgerObj.EnableCombineLedger ===undefined\">\r\n                                            Merge Combined Ledger\r\n                                        </label>\r\n                                    </div>\r\n                                </fieldset>\r\n                            </div>\r\n\r\n                            <div *ngIf=\"showAccGrpTable\">\r\n                                <fieldset>\r\n                                    <legend><label class=\"smallBoldLabel\">&nbsp;Group Wise</label></legend>\r\n                                    <div>\r\n                                        <div class=\"col-md-10\">\r\n                                            <input type=\"text\" class=\"form-control\" [disabled]=\"_reportFilterService.PartyLedgerObj.EnableCombineLedger == false || _reportFilterService.PartyLedgerObj.EnableCombineLedger ===undefined\" \r\n                                            [(ngModel)]=\"_reportFilterService.PartyLedgerObj.Multiple_GROUP_ACNAME\"\r\n                                        placeholder=\"Press Enter or Tab for Party List\" (keydown.Tab)=\"GroupAccountclick($event)\"\r\n                                        (keydown.enter)=\"GroupAccountclick($event)\">\r\n\r\n                                        </div>\r\n                                        <div class=\"col-md-2\">\r\n                                            <button type=\"button\" class=\"btn btn-info\"\r\n                                                (click)=\"addGroupAccountToList()\" [disabled]=\"_reportFilterService.PartyLedgerObj.EnableCombineLedger == false || _reportFilterService.PartyLedgerObj.EnableCombineLedger ===undefined\">Add</button>\r\n                                        </div>\r\n                                        <div class=\"col-md-12\">\r\n                                            <table style=\"height:175px;\">\r\n                                                <tr class=\"smallBoldLabel\">\r\n                                                    <th style=\"width:3px;font-weight: bold;\">S.No.</th>\r\n                                                    <th style=\"width:10px;font-weight: bold;\">Account</th>\r\n                                                    <th style=\"width:4px;font-weight: bold;\">Action</th>\r\n                                                </tr>\r\n                                                <tr *ngFor=\"let data of _reportFilterService.PartyLedgerObj.PartyLedger_multipleGroupAccounts;let i = index\"\r\n                                                    class=\"smallBoldLabel\">\r\n                                                    <td style=\"width:3px;\">{{ i + 1 }}</td>\r\n                                                    <td style=\"width:10px;\">{{data.ACNAME}}</td>\r\n                                                    <td style=\"width:4px;\">\r\n                                                        <button type=\"button\" class=\"action-btn\"\r\n                                                            (click)=\"deleteGroupAccount(i)\">Delete</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n                                        <label class=\"smallBoldLabel\">\r\n                                            <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.PartyLedgerObj.MERGEREPORT\" [disabled]=\"_reportFilterService.PartyLedgerObj.EnableCombineLedger == false || _reportFilterService.PartyLedgerObj.EnableCombineLedger ===undefined\">\r\n                                            Merge Combined Ledger\r\n                                        </label>\r\n                                    </div>\r\n                                </fieldset>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n                        <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n                        <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\"\r\n                            class=\"btn btn-info\">Close</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <!-- Filter Ends -->\r\n    </div>\r\n</div>\r\n\r\n<div style=\"width:90%\" class=\"reportpopup\">\r\n    <generic-popup-grid #genericGridPartyLedger [popupsettings]=\"gridPopupSettingsForPartyLedgerList\"\r\n    (onItemDoubleClick)=\"dblClickAccountSelect($event)\">\r\n</generic-popup-grid>\r\n</div>\r\n\r\n\r\n<div style=\"width:90%\" class=\"reportpopup\">\r\n    <generic-popup-grid #genericGridMultiplePartyLedger [popupsettings]=\"gridPopupSettingsForMultiplePartyLedgerList\"\r\n    (onItemDoubleClick)=\"dblClickMultipleAccountSelect($event)\">\r\n</generic-popup-grid>\r\n</div>\r\n\r\n<div style=\"width:90%\" class=\"reportpopup\">\r\n    <generic-popup-grid #genericGridMultipleGroupAccount [popupsettings]=\"gridPopupSettingsForMultipleGroupAccountList\"\r\n    (onItemDoubleClick)=\"dblClickGroupAccountSelect($event)\">\r\n</generic-popup-grid>\r\n</div>\r\n"

/***/ }),

/***/ 1747:
/***/ (function(module, exports) {

module.exports = "<div id=\"partyLedgerReportId\" style=\"background-color : #ffffff; padding :1%; height : auto; width : 60%; \">\r\n        <div class=\"row\">\r\n           <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n              <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n              <h4 class=\"modal-title\">Party Ledger Report</h4>\r\n           </div>\r\n           <!-- Left Column -->\r\n           <div class=\"col-md-12\">\r\n              <fieldset>\r\n                 <legend>Report Type:</legend>\r\n                 <label class=\"smallBoldLabel\"><input type=\"radio\" value=\"1\" name=\"showDetReport\" [(ngModel)]=\"ReportParameters.OPT_SHOWSUMMARY_REPORT\">&nbsp;Summary Report</label>\r\n                 <label class=\"smallBoldLabel\"><input type=\"radio\" value=\"0\" name=\"showDetReport\" [(ngModel)]=\"ReportParameters.OPT_SHOWSUMMARY_REPORT\">&nbsp;Detail Report</label>\r\n              </fieldset>\r\n              <fieldset style=\"width : 99%;\">\r\n                 <legend>Date Range Selection :</legend>\r\n                 <div class=\"_date_range\">\r\n                    <a (click)=\"changeDateByRange('1')\" value=\"week\" style=\"color : white;\" class=\"btn btn-info\">This Week</a>\r\n                    <a (click)=\"changeDateByRange('2')\" value=\"month\" style=\"color : white;\" class=\"btn btn-info\">This Month</a>\r\n                    <a (click)=\"changeDateByRange('3')\" value=\"year\" style=\"color : white;\" class=\"btn btn-info\">This Year</a>\r\n                 </div>\r\n                 <table>\r\n                    <tr>\r\n                       <td><label class=\"smallBoldLabel\">From(AD):</label></td>\r\n                       <td><label class=\"smallBoldLabel\">To(AD):</label></td>\r\n                    </tr>\r\n                    <tr>\r\n                       <td>                                                 \r\n                          <label class=\"smallBoldLabel\"><input  type=\"date\"  style=\"width:152px; min-width:50%;\"  placeholder=\"Year Start Date\" [(ngModel)]=\"ReportParameters.DATE1\"  (change)=\"changestartDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\"></label>\r\n                       </td>\r\n                       <td>                                                 \r\n                          <label class=\"smallBoldLabel\"><input  type=\"date\" style=\"width:152px; min-width:50%;\"  placeholder=\"Year Start Date\" [(ngModel)]=\"ReportParameters.DATE2\"  (change)=\"changeEndDate($event.target.value,'AD')\"  max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\" ></label>\r\n                       </td>\r\n                    </tr>\r\n                    <tr>\r\n                       <td>\r\n                          <label class=\"smallBoldLabel\"><input id=\"nepaliDate\" style=\"width:152px;height:25px;text-align:center\" class=\"nepali-calendar ndp-nepali-calendar\" [(ngModel)]=\"ReportParameters.BSDATE1\"\r\n                          type=\"text\" (change)=\"changestartDate($event.target.value,'BS')\"\r\n                          placeholder=\"yyyy-mm-dd\" /> </label>\r\n                       </td>\r\n                       <td>\r\n                          <label class=\"smallBoldLabel\"><input id=\"nepaliDate\" style=\"width:152px;height:25px;text-align:center\" class=\"nepali-calendar ndp-nepali-calendar\" [(ngModel)]=\"ReportParameters.BSDATE2\"\r\n                          type=\"text\" (change)=\"changeEndDate($event.target.value,'BS')\"\r\n                          placeholder=\"yyyy-mm-dd\" /> </label>\r\n                       </td>\r\n                    </tr>\r\n                 </table>\r\n              </fieldset>\r\n              <fieldset>\r\n                 <legend> Account : </legend>\r\n                 <table>\r\n                    <tr>\r\n                       <td><label class=\"smallBoldLabel\">ACCODE</label></td>\r\n                       <td><label class=\"smallBoldLabel\">ACNAME</label></td>\r\n                    </tr>\r\n                    <tr>\r\n                       <td>\r\n                          <label class=\"smallBoldLabel\"><input tabindex=\"2\" type=\"text\" style=\"height:26px;\" (keydown.enter)=\"accodeChanged($event.target.value)\" [(ngModel)]=\"ACCODE\"></label>\r\n                       </td>\r\n                       <td>\r\n                          <div style=\"position: absolute; top: 260px; width: 150px;\">\r\n                             <label class=\"smallBoldLabel\"><input tabindex=\"2\" ngui-auto-complete [source]=\"dropListItem.bind(this)\" max-num-list=\"25\" [(ngModel)]=\"ACCNAME\" list-formatter=\"ACNAME\" style=\"height:26px;\" (ngModelChange)=\"itemChanged($event)\" name=\"AcName\" display-property-name=\"ACNAME\"></label>\r\n                          </div>\r\n                       </td>\r\n                    </tr>\r\n                 </table>\r\n              </fieldset>\r\n              <fieldset>\r\n                  <legend>Division Selection:</legend>\r\n                  <select [(ngModel)]=\"ReportParameters.DIVISION\" style=\"width : 100%;\">\r\n                     <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 || masterService.showAll\">ALL</option>\r\n                     <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                        {{ div.NAME }}\r\n                     </option>\r\n                  </select>\r\n               </fieldset>\r\n              <label class=\"smallBoldLabel\"> <input type=\"checkbox\" (change)=\"$event.target.checked?(ReportParameters.REPORTBYCOSTCENTER=1):(ReportParameters.REPORTBYCOSTCENTER=0)\" name=\"costCentersel\" [checked]=\"ReportParameters.REPORTBYCOSTCENTER == 1\" >&nbsp;Cost Center Selection</label><br>\r\n              <label class=\"smallBoldLabel\"> <input type=\"checkbox\" (change)=\"$event.target.checked?(ReportParameters.SHOWPRODUCTDETAIL=1):(ReportParameters.SHOWPRODUCTDETAIL=0)\" name=\"prodDet\" [checked]=\"ReportParameters.SHOWPRODUCTDETAIL == 1\" >&nbsp;Show Item Details Also</label><br>\r\n              <label class=\"smallBoldLabel\"> <input type=\"checkbox\" (change)=\"$event.target.checked?(ReportParameters.showNdate=1):(ReportParameters.showNdate=0)\" name=\"showDate\" [checked]=\"ReportParameters.showNdate == 1\" >&nbsp;Show BS Date in Report</label><br>\r\n              <label class=\"smallBoldLabel\"> <input type=\"checkbox\" (change)=\"$event.target.checked?(ReportParameters.FCURRENCY=1):(ReportParameters.FCURRENCY=0)\" name=\"fCurr\" [checked]=\"ReportParameters.FCURRENCY == 1\">&nbsp;Show Ledger in Foreign Currency</label><br>\r\n              <div class=\"btn\">\r\n                 <!-- <button type=\"button\"  title=\"onSave\" class=\"btn btn-info\">Run</button>    -->\r\n                 <button class=\"btn btn-info confirm-btn\" type=\"button\"  (click)=onload()>RUN</button>\r\n                 <button type=\"button\"  title=\"Cancel\" class=\"btn btn-info\" (click)=\"closeReportBox()\">Close</button>  \r\n              </div>\r\n           </div>\r\n           <!-- <div class=\"modal-footer\">\r\n              <button class=\"btn btn-info confirm-btn\" type=\"button\"  (click)=onload()>RUN</button>\r\n              </div> -->\r\n</div>\r\n</div>\r\n\r\n"

/***/ }),

/***/ 1748:
/***/ (function(module, exports) {

module.exports = "<style>\r\n   .input-text {\r\n      width: 100%;\r\n      /* height: 30px !important; */\r\n      font-weight: bold;\r\n   }\r\n\r\n   .td-class {\r\n      border: none !important;\r\n   }\r\n\r\n   .date-input {\r\n      width: 93%;\r\n      font-size: 12px !important;\r\n      height: 30px !important;\r\n   }\r\n</style>\r\n<div class=\"container\" style=\"background-color : #ffffff; padding :1%; height : auto;  \">\r\n   <div class=\"row\">\r\n      <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n         <h4 class=\"modal-title\">Post-Dated Cheque Voucher Report</h4>\r\n      </div>\r\n      <div class=\"col-md-12\" style=\"padding-top: 2%;\">\r\n         <!-- Left Column -->\r\n         <div class=\"col-md-6\">\r\n            <div>\r\n               <label class=\"smallBoldLabel\" style=\"padding-right:15px;\"><input type=\"radio\" name=\"datewise\"\r\n                     [(ngModel)]=\"_reportFilterService.PostDatedChequeObj.PostDatedCheque_CHEQUEDATEWISEREPORT\"\r\n                     value=0 (change)=\"ChangeDate()\">&nbsp;Date Range Wise</label>\r\n               <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"datewise\"\r\n                     [(ngModel)]=\"_reportFilterService.PostDatedChequeObj.PostDatedCheque_CHEQUEDATEWISEREPORT\"\r\n                     value=1 (change)=\"ChangeDate()\">&nbsp;Cheque Date Wise</label>\r\n            </div>\r\n            <fieldset style=\"margin-top: 10px;\">\r\n               <legend style=\"font-size:11px;font-weight: bold; width:auto;margin-bottom: -4px;\">Date Range Selection :\r\n               </legend>\r\n               <table>\r\n                  <tr>\r\n                     <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                     <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                  </tr>\r\n                  <tr>\r\n                     <td class=\"td-class\">\r\n                        <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                           [(ngModel)]=\"_reportFilterService.PostDatedChequeObj.PostDatedCheque_DATE1\"\r\n                           (change)=\"changeEntryDate($event.target.value,'AD')\"\r\n                           [max]=\"max1()\"\r\n                           min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                     </td>\r\n                     <td class=\"td-class\">\r\n                        <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                           [(ngModel)]=\"_reportFilterService.PostDatedChequeObj.PostDatedCheque_DATE2\"\r\n                           (change)=\"changeEndDate($event.target.value,'AD')\"\r\n                           min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                     </td>\r\n                  </tr>\r\n                  <tr>\r\n                     <td class=\"td-class\">\r\n                        <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                           (change)=\"changeEntryDate($event.detail.value,'BS')\" [label]=\"'From'\"\r\n                           [(ngModel)]=\"_reportFilterService.PostDatedChequeObj.PostDatedCheque_BSDATE1\">\r\n                        </nepali-date-picker>\r\n\r\n                     </td>\r\n                     <td class=\"td-class\">\r\n                        <nepali-date-picker name=\"nepaliDateTo\" [id]=\"'nepaliDateTo'\"\r\n                           (change)=\"changeEndDate($event.detail.value,'BS')\" [label]=\"'To'\"\r\n                           [(ngModel)]=\"_reportFilterService.PostDatedChequeObj.PostDatedCheque_BSDATE2\">\r\n                        </nepali-date-picker>\r\n                     </td>\r\n                  </tr>\r\n               </table>\r\n            </fieldset>\r\n\r\n            <fieldset>\r\n               <legend>Division Selection:</legend>\r\n               <select [(ngModel)]=\"_reportFilterService.PostDatedChequeObj.PostDatedCheque_DIV\"\r\n                  style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                  <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL\r\n                  </option>\r\n                  <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                     {{ div.NAME }}\r\n                  </option>\r\n               </select>\r\n            </fieldset>\r\n            <fieldset>\r\n               <legend>Cost Center:</legend>\r\n               <select [(ngModel)]=\"_reportFilterService.PostDatedChequeObj.PostDatedCheque_CostCenter\"\r\n                  style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                  <option value=\"%\"> </option>\r\n                  <option *ngFor=\"let i of CostcenterList\" value={{i.CCID}}>{{i.COSTCENTERNAME}}\r\n                  </option>\r\n               </select>\r\n            </fieldset>\r\n         </div>\r\n         <!-- Right Column -->\r\n         <div class=\"col-md-6\">\r\n            <fieldset>\r\n               <legend>Post-Dated Cheque Voucher Transaction Type:</legend>\r\n               <label class=\"smallBoldLabel\" style=\"padding-right:15px;\"><input type=\"radio\" name=\"txntype\"\r\n                     [(ngModel)]=\"_reportFilterService.PostDatedChequeObj.PostDatedCheque_TRANTYPE\"\r\n                     value='Party Receipt'>&nbsp;Party Receipt</label>\r\n               <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"txntype\"\r\n                     [(ngModel)]=\"_reportFilterService.PostDatedChequeObj.PostDatedCheque_TRANTYPE\"\r\n                     value='Party Payment'>&nbsp;Party Payment</label>\r\n               <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"txntype\"\r\n                     [(ngModel)]=\"_reportFilterService.PostDatedChequeObj.PostDatedCheque_TRANTYPE\"\r\n                     value='Expense Voucher'>&nbsp;Expense Voucher</label>\r\n               <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"txntype\"\r\n                     [(ngModel)]=\"_reportFilterService.PostDatedChequeObj.PostDatedCheque_TRANTYPE\"\r\n                     value='Mixed Payment'>&nbsp;Mixed Payment</label>\r\n            </fieldset>\r\n            <fieldset>\r\n               <legend>Report Type:</legend>\r\n               <label class=\"smallBoldLabel\" style=\"padding-right:15px;\"><input type=\"radio\" name=\"reporttype\"\r\n                     [(ngModel)]=\"_reportFilterService.PostDatedChequeObj.PostDatedCheque_DETAILSREPORT\"\r\n                     value=0>&nbsp;Summary Report</label>\r\n               <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"reporttype\"\r\n                     [(ngModel)]=\"_reportFilterService.PostDatedChequeObj.PostDatedCheque_DETAILSREPORT\"\r\n                     value=1>&nbsp;Detail Report</label>\r\n            </fieldset>\r\n            <fieldset>\r\n               <legend>Voucher Status:</legend>\r\n               <label class=\"smallBoldLabel\" style=\"padding-right:15px;\"><input type=\"radio\" name=\"vstatus\"\r\n                     [(ngModel)]=\"_reportFilterService.PostDatedChequeObj.PostDatedCheque_TRANSACTIONMODE\"\r\n                     value=0>&nbsp;All</label>\r\n               <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"vstatus\"\r\n                     [(ngModel)]=\"_reportFilterService.PostDatedChequeObj.PostDatedCheque_TRANSACTIONMODE\"\r\n                     value=1>&nbsp;Non-Cashed</label>\r\n               <label class=\"smallBoldLabel\" style=\"margin-left: 3%;\"><input type=\"radio\" name=\"vstatus\"\r\n                     [(ngModel)]=\"_reportFilterService.PostDatedChequeObj.PostDatedCheque_TRANSACTIONMODE\"\r\n                     value=2>&nbsp;Cashed</label>\r\n            </fieldset>\r\n            <fieldset style=\"padding-bottom: 1px;\">\r\n               <legend style=\"margin-bottom: -4px;\">Filter Option</legend>\r\n               <table>\r\n                   <tr>\r\n                       <td style=\"border: none;\" class=\"smallBoldLabel\">Bank Name: </td>\r\n                       <td style=\"border: none;width: 70%;\">\r\n                           <input type=\"text\" name=\"bankname\" class=\"form-control\"\r\n                               [(ngModel)]=\"_reportFilterService.PostDatedChequeObj.PostDatedCheque_BANKNAME\"\r\n                               (Keydown.Enter)=\"BankEntercommand()\" (Keydown.Tab)=\"BankEntercommand()\" autocomplete=\"off\"\r\n                               placeholder=\"Press Tab or Enter for the List\">\r\n\r\n                       </td>\r\n                   </tr>\r\n\r\n                   <tr style=\"margin-top: 5px; margin-bottom: 6px;\">\r\n                       <td style=\"border: none;\" class=\"smallBoldLabel\">Party Name: </td>\r\n                       <td style=\"border: none;width: 70%;\">\r\n                           <input type=\"text\" name=\"partyname\" class=\"form-control\"\r\n                               [(ngModel)]=\"_reportFilterService.PostDatedChequeObj.PostDatedCheque_PARTYNAME\"\r\n                               (Keydown.Enter)=\"PartyEnterCommand()\" (Keydown.Tab)=\"PartyEnterCommand()\" autocomplete=\"off\"\r\n                               placeholder=\"Press Tab or Enter for the List\">\r\n\r\n                       </td>\r\n                   </tr>\r\n\r\n               </table>\r\n\r\n           </fieldset>\r\n         </div>\r\n      </div>\r\n\r\n      <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n         <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n         <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n      </div>\r\n\r\n   </div>\r\n   <generic-popup-grid #genericGridPartyLedger [popupsettings]=\"gridPopupSettingsForPartyLedgerList\"\r\n   (onItemDoubleClick)=\"onPartySelect($event)\">\r\n</generic-popup-grid>\r\n\r\n<generic-popup-grid #genericGridACListParty [popupsettings]=\"gridACListPartyPopupSettings\"\r\n  (onItemDoubleClick)=\"onBankNameSelect($event)\"></generic-popup-grid>\r\n "

/***/ }),

/***/ 1749:
/***/ (function(module, exports) {

module.exports = "<style>\r\n   .input-text {\r\n      width: 100%;\r\n      /* height: 30px !important; */\r\n      font-weight: bold;\r\n   }\r\n\r\n   .td-class {\r\n      border: none !important;\r\n   }\r\n\r\n   .date-input {\r\n      width: 93%;\r\n      font-size: 12px !important;\r\n      height: 30px !important;\r\n   }\r\n    @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .report-height{\r\n        height:52vh; \r\n        overflow:auto;\r\n    }\r\n    }\r\n         @media screen and (max-width:767px) {\r\n            .smallBoldLabel{\r\n                  width: auto !important;\r\n            }\r\n            \r\n        \r\n    }\r\n</style>\r\n<div class=\"container report-container\" style=\"background-color : #ffffff; padding :1%; height : auto;  \">\r\n   <div class=\"row\">\r\n      <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n         <h4 class=\"modal-title\">Profit & Loss Report</h4>\r\n      </div>\r\n      <div class=\"col-md-12 report-height\" style=\"padding-top: 2%;\">\r\n         <!-- Left Column -->\r\n         <div class=\"col-md-6\">\r\n            <fieldset>\r\n               <legend style=\"font-size:11px;font-weight: bold; width:auto;margin-bottom: -4px;\">Date Range Selection :\r\n               </legend>\r\n               <table>\r\n                  <tr>\r\n                     <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                     <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                  </tr>\r\n                  <tr>\r\n                     <td class=\"td-class\">\r\n                        <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                           [(ngModel)]=\"_reportFilterService.ProfitLossObj.ProfitLoss_DATE1\"\r\n                           (change)=\"changeEntryDate($event.target.value,'AD')\"\r\n                           max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\"\r\n                           min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                     </td>\r\n                     <td class=\"td-class\">\r\n                        <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                           [(ngModel)]=\"_reportFilterService.ProfitLossObj.ProfitLoss_DATE2\"\r\n                           (change)=\"changeEndDate($event.target.value,'AD')\"\r\n                           max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\"\r\n                           min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                     </td>\r\n                  </tr>\r\n                  <tr>\r\n                     <td class=\"td-class\">\r\n                        <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                           (change)=\"changeEntryDate($event.detail.value,'BS')\" [label]=\"'From'\"\r\n                           [(ngModel)]=\"_reportFilterService.ProfitLossObj.ProfitLoss_BSDATE1\">\r\n                        </nepali-date-picker>\r\n                     </td>\r\n                     <td class=\"td-class\">\r\n                        <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDateTo'\"\r\n                           (change)=\"changeEndDate($event.detail.value,'BS')\" [label]=\"'To'\"\r\n                           [(ngModel)]=\"_reportFilterService.ProfitLossObj.ProfitLoss_BSDATE2\">\r\n                        </nepali-date-picker>\r\n                     </td>\r\n                  </tr>\r\n               </table>\r\n            </fieldset>\r\n\r\n            <fieldset *ngIf=\"masterService.userSetting.EnableManualStockValuation==1\" style=\"margin-top: 10px;\">\r\n               <legend style=\"font-size:11px;font-weight: bold; width:auto\">Stock\r\n                 Valuation :</legend>\r\n               <div class=\"col-md-12\" style=\"margin-top:5px;\">\r\n                  <div class=\"opening\">\r\n                     <div class=\"col-md-4\" style=\"padding: 0px;\">\r\n                        <label class=\"smallBoldLabel\"\r\n                           style=\"margin-left: 0px;padding-top:5px;margin-top: -10px;\">Opening Stock:</label>\r\n                     </div>\r\n                     <div class=\"col-md-8\" style=\"padding: 0px;\">\r\n                        <input type=\"number\" class=\"form-control\" style=\"height: 25px;margin-top: -10px;\"\r\n                           [(ngModel)]=_reportFilterService.ProfitLossObj.ProfitLoss_OSTOCK>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"col-md-12\" style=\"margin-top:5px;\">\r\n                  <div class=\"closing\">\r\n                     <div class=\"col-md-4\" style=\"padding: 0px;\">\r\n                        <label class=\"smallBoldLabel\" style=\"margin-left: 0px; padding-top:5px;\">Closing Stock:</label>\r\n                     </div>\r\n                     <div class=\"col-md-8\" style=\"padding: 0px;\">\r\n                        <input type=\"number\" class=\"form-control\" style=\"height: 25px;\"\r\n                           [(ngModel)]=_reportFilterService.ProfitLossObj.ProfitLoss_CSTOCK>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div *ngIf=\"userSetting.ENABLECCENTER_INFINALREPORT==1\" class=\"col-md-12\" style=\"margin-top:10px; \">\r\n                  <div class=\"pl-action\">\r\n                     <div class=\"cal-btn col-md-4\" style=\"padding: 0px; float:right;\">\r\n                        <button class=\"btn btn-info\" style=\" float:right;\" (click)=\"calcStock()\">Calculate</button>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </fieldset>\r\n\r\n\r\n\r\n         </div>\r\n         <!-- Right Column -->\r\n         <div class=\"col-md-6\">\r\n            <fieldset *ngIf=\"userSetting.IS_NESTLE==1\">\r\n               <legend style=\"font-size:11px;font-weight: bold; width:auto\">Company Selection:</legend>\r\n               <select [(ngModel)]=\"_reportFilterService.ProfitLossObj.ProfitLoss_COMPANYTYPE\"\r\n                  style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                  <option value=\"DMS\">DMS</option>\r\n                  <option value=\"NONDMS\">NON DMS</option>\r\n               </select>\r\n            </fieldset>\r\n\r\n            <fieldset>\r\n               <legend style=\"font-size:11px;font-weight: bold; width:auto\">Division Selection:</legend>\r\n               <select [(ngModel)]=\"_reportFilterService.ProfitLossObj.ProfitLoss_DIV\" style=\"height: 30px !important;\"\r\n                  class=\"form-control input-text\" (change)=\"changeDivision()\">\r\n                  <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL\r\n                  </option>\r\n                  <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                     {{ div.NAME }}\r\n                  </option>\r\n               </select>\r\n            </fieldset>\r\n            <fieldset *ngIf=\"userSetting.ENABLECCENTER_INFINALREPORT==1\">\r\n               <legend>Cost Center:</legend>\r\n               <select [(ngModel)]=\"_reportFilterService.ProfitLossObj.ProfitLoss_CostCenter\"\r\n                   style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                   <option value=\"%\"> </option>\r\n                   <option *ngFor=\"let i of CostcenterList\" value={{i.CCID}}>{{i.COSTCENTERNAME}}\r\n                   </option>\r\n               </select>\r\n           </fieldset>\r\n            <fieldset style=\"padding-bottom: 5px;\">\r\n               <legend style=\"font-size:11px;font-weight: bold; width:auto\">Report Format :</legend>\r\n               <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"reportmode\"\r\n                     [(ngModel)]=\"_reportFilterService.ProfitLossObj.ProfitLoss_VERTICALFORMAT\" value=1>&nbsp;Vertical\r\n                  Format </label>&nbsp;&nbsp;&nbsp;\r\n               <label class=\"smallBoldLabel\" style=\"clear : both;\"><input type=\"radio\" name=\"reportmode\"\r\n                     [(ngModel)]=\"_reportFilterService.ProfitLossObj.ProfitLoss_VERTICALFORMAT\" value=0>&nbsp;Horizontal\r\n                  Format\r\n               </label>\r\n            </fieldset>\r\n\r\n            <label class=\"smallBoldLabel\"><input type=\"checkbox\"\r\n                  [(ngModel)]=\"_reportFilterService.ProfitLossObj.ProfitLoss_SHOWSUBLEDGER\">&nbsp;Show Sub Ledger In\r\n               Profit & Loss A/C</label>\r\n\r\n         </div>\r\n      </div>\r\n\r\n      <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n         <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=\"onload()\">RUN</button>\r\n         <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n      </div>\r\n\r\n   </div>"

/***/ }),

/***/ 1750:
/***/ (function(module, exports) {

module.exports = "<!-- <style type=\"text/css\">\r\n._left_section{\r\n    float : left;\r\n    width : 50%;\r\n    \r\n\r\n}\r\n\r\n._right_section{\r\n    float : left;\r\n    width : 50%;\r\n    padding-left : 0.7%\r\n}\r\n\r\n.horizontal_line{\r\n    height : 1px;\r\n    width : 100%;\r\n    float : none;\r\n    clear : both;\r\n}\r\n\r\nlegend{\r\n    font-size: 12px;\r\n    width: auto;\r\n    padding : 0;\r\n    margin : 0;\r\n    color : black;\r\n}\r\n\r\nfieldset{\r\n    margin-bottom: 3%;\r\n    line-height: 22px;\r\n}\r\n\r\nselect{\r\n    width : 100%;\r\n}\r\n\r\n._date_range{\r\n    /* width : 80%;\r\n    margin : 0px auto; */\r\n    padding-left : 2%;\r\n}\r\n\r\n.dateRangeLink{\r\n    text-decoration: none;\r\n    color : black;\r\n    height : 35px;\r\n    line-height: 35px;\r\n    width : 30%;\r\n    margin-right: 2%;\r\n    background-color : #ffffff;\r\n    padding : 5px;\r\n    border : 1px solid;\r\n}\r\n\r\n._salesModeSelection{\r\n    width : 100%;\r\n}\r\n\r\n._mode_left{\r\n    width : 50%;\r\n    float : left;\r\n}\r\n\r\n._mode_right{\r\n    width : 50%;\r\n    float : left;\r\n}\r\n\r\n._actionButtons{\r\n    float : right;\r\n}\r\n\r\n._dateCss{\r\n    width: 73%;\r\n    border-radius: 4px 4px;\r\n    border: 1px solid;\r\n    /* padding: 4px; */\r\n    font-size: 75%;\r\n}\r\n\r\n\r\n</style> -->\r\n\r\n\r\n<div id=\"purchaseBookReportId\" style=\"background-color : #ffffff; padding :1%; height : auto; \">\r\n   <div class=\"row\">\r\n      <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n         <h4 class=\"modal-title\">Purchase Book Report</h4>\r\n      </div>\r\n      <!-- Left Column -->\r\n      <div class=\"col-md-6\">\r\n         <fieldset>\r\n            <legend>Report Option : </legend>\r\n            <label class=\"smallBoldLabel\"><input type=\"radio\" value=1 name=\"optReportType\"\r\n                  [(ngModel)]=\"ReportParameters.OPT_REPORT_TYPE\">&nbsp;Voucher Wise</label>\r\n            <label class=\"smallBoldLabel\"><input type=\"radio\" value=2 name=\"optReportType\"\r\n                  [(ngModel)]=\"ReportParameters.OPT_REPORT_TYPE\">&nbsp;Day Wise</label>\r\n            <label class=\"smallBoldLabel\"><input type=\"radio\" value=3 name=\"optReportType\"\r\n                  [(ngModel)]=\"ReportParameters.OPT_REPORT_TYPE\">&nbsp;Month Wise</label>\r\n\r\n\r\n         </fieldset>\r\n\r\n         <fieldset style=\"width : 99%;\">\r\n            <legend>Date Range Selection :</legend>\r\n            <div class=\"_date_range\">\r\n               <a (click)=\"changeDateByRange('1')\" value=\"week\" style=\"color : white;\" class=\"btn btn-info\">This\r\n                  Week</a>\r\n               <a (click)=\"changeDateByRange('2')\" value=\"month\" style=\"color : white;\" class=\"btn btn-info\">This\r\n                  Month</a>\r\n               <a (click)=\"changeDateByRange('3')\" value=\"year\" style=\"color : white;\" class=\"btn btn-info\">This\r\n                  Year</a>\r\n            </div>\r\n            <table>\r\n               <tr>\r\n                  <td><label class=\"smallBoldLabel\">From(AD):</label></td>\r\n                  <td><label class=\"smallBoldLabel\">To(AD):</label></td>\r\n               </tr>\r\n               <tr>\r\n                  <td>\r\n                     <label class=\"smallBoldLabel\"><input type=\"date\" style=\"width:152px; min-width:50%;\"\r\n                           placeholder=\"Year Start Date\" [(ngModel)]=\"ReportParameters.DATE1\"\r\n                           (change)=\"changestartDate($event.target.value,'AD')\"></label>\r\n                  </td>\r\n                  <td>\r\n                     <label class=\"smallBoldLabel\"><input type=\"date\" style=\"width:152px; min-width:50%;\"\r\n                           placeholder=\"Year Start Date\" [(ngModel)]=\"ReportParameters.DATE2\"\r\n                           (change)=\"changeEndDate($event.target.value,'AD')\"></label>\r\n                  </td>\r\n               </tr>\r\n               <tr>\r\n                  <td>\r\n                     <label class=\"smallBoldLabel\"><input id=\"nepaliDate\"\r\n                           style=\"width:152px;height:25px;text-align:center\" class=\"nepali-calendar ndp-nepali-calendar\"\r\n                           [(ngModel)]=\"ReportParameters.BSDATE1\" type=\"text\"\r\n                           (change)=\"changestartDate($event.target.value,'BS')\" placeholder=\"yyyy-mm-dd\" /> </label>\r\n                  </td>\r\n                  <td>\r\n                     <label class=\"smallBoldLabel\"><input id=\"nepaliDate\"\r\n                           style=\"width:152px;height:25px;text-align:center\" class=\"nepali-calendar ndp-nepali-calendar\"\r\n                           [(ngModel)]=\"ReportParameters.BSDATE2\" type=\"text\"\r\n                           (change)=\"changeEndDate($event.target.value,'BS')\" placeholder=\"yyyy-mm-dd\" /> </label>\r\n                  </td>\r\n               </tr>\r\n            </table>\r\n         </fieldset>\r\n\r\n         <fieldset>\r\n            <label class=\"smallBoldLabel\"><input type=\"radio\" value=0 name=\"showDetReport\"\r\n                  [(ngModel)]=\"ReportParameters.OPT_SHOWDETAL_REPORT\">&nbsp;Summary Report</label>\r\n            <label class=\"smallBoldLabel\"><input type=\"radio\" value=1 name=\"showDetReport\"\r\n                  [(ngModel)]=\"ReportParameters.OPT_SHOWDETAL_REPORT\">&nbsp;Detail Report</label>\r\n         </fieldset>\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n      <!-- Another column -->\r\n      <div class=\"col-md-6\">\r\n\r\n         <fieldset>\r\n            <legend>Supplier Selection:</legend>\r\n            <select style=\"width : 100%;\" [(ngModel)]=\"ReportParameters.SUPPLIER_ACID\">\r\n               <option value=\"%\">ALL</option>\r\n               <option *ngFor=\"let suplist of supplierList\" value=\"{{suplist.ACID}}\">\r\n                  {{ suplist.ACNAME }}\r\n               </option>\r\n\r\n            </select>\r\n         </fieldset>\r\n\r\n         <fieldset>\r\n            <legend>Division Selection:</legend>\r\n            <select [(ngModel)]=\"ReportParameters.DIVISION\" style=\"width : 100%;\">\r\n               <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0\">ALL</option>\r\n               <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                  {{ div.NAME }}\r\n               </option>\r\n            </select>\r\n         </fieldset>\r\n\r\n\r\n\r\n         <label class=\"smallBoldLabel\"> <input type=\"checkbox\"\r\n               (change)=\"$event.target.checked?(ReportParameters.CHK_INCLUDE_RETURN=1):(ReportParameters.CHK_INCLUDE_RETURN=0)\"\r\n               name=\"showSalesSum\" [checked]=\"ReportParameters.CHK_INCLUDE_RETURN == 1\"\r\n               name=\"includePurchaseReturn\">&nbsp;Include Purchase Return Transaction Also</label><br>\r\n\r\n\r\n         <div class=\"btn\">\r\n            <!-- <button type=\"button\"  title=\"onSave\" class=\"btn btn-info\">Run</button>    -->\r\n            <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n            <button type=\"button\" title=\"Cancel\" class=\"btn btn-info\" (click)=\"closeReportBox()\">Close</button>\r\n         </div>\r\n      </div>\r\n   </div>\r\n   <!-- <div class=\"modal-footer\">\r\n         <button class=\"btn btn-info confirm-btn\" type=\"button\"  (click)=onload()>RUN</button>\r\n         </div> -->\r\n\r\n</div>"

/***/ }),

/***/ 1751:
/***/ (function(module, exports) {

module.exports = "\r\n\r\n       <div id=\"salesBookReportId\" style=\"background-color : #ffffff; padding :1%; height : auto; \">\r\n            <div class=\"row\">\r\n               <div class=\"modal-header\"  style=\"width : 97%; margin : 0px auto;\">\r\n                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n                  <h4 class=\"modal-title\">Sales Book Report</h4>\r\n               </div>\r\n               <!-- Left Column -->\r\n               <div class=\"col-md-6\">\r\n                  <fieldset>\r\n                     <legend>Report Option : </legend>                                \r\n                     <label class=\"smallBoldLabel\"><input type=\"radio\" value=1 name=\"optReportType\" [(ngModel)]=\"ReportParameters.OPT_REPORT_TYPE\">&nbsp;Voucher Wise</label>\r\n                     <label class=\"smallBoldLabel\"><input type=\"radio\" value=2 name=\"optReportType\" [(ngModel)]=\"ReportParameters.OPT_REPORT_TYPE\">&nbsp;Day Wise</label>\r\n                     <label class=\"smallBoldLabel\"><input type=\"radio\" value=3 name=\"optReportType\" [(ngModel)]=\"ReportParameters.OPT_REPORT_TYPE\">&nbsp;Month Wise</label>\r\n                  \r\n                  </fieldset>\r\n\r\n                  <fieldset style=\"width : 99%;\">\r\n                     <legend>Date Range Selection :</legend>\r\n                     <div class=\"_date_range\">\r\n                        <a (click)=\"changeDateByRange('1')\" value=\"week\" style=\"color : white;\" class=\"btn btn-info\">This Week</a>\r\n                        <a (click)=\"changeDateByRange('2')\" value=\"month\" style=\"color : white;\" class=\"btn btn-info\">This Month</a>\r\n                        <a (click)=\"changeDateByRange('3')\" value=\"year\" style=\"color : white;\" class=\"btn btn-info\">This Year</a>\r\n                     </div>\r\n                     <table>\r\n                        <tr>\r\n                           <td><label class=\"smallBoldLabel\">From(AD):</label></td>\r\n                           <td><label class=\"smallBoldLabel\">To(AD):</label></td>\r\n                        </tr>\r\n                        <tr>\r\n                           <td>                                                 \r\n                                 <label class=\"smallBoldLabel\"><input  type=\"date\"  style=\"width:152px; min-width:50%;\"  placeholder=\"Year Start Date\" [(ngModel)]=\"ReportParameters.DATE1\"  (change)=\"changestartDate($event.target.value,'AD')\"  ></label>\r\n                           </td>\r\n                           <td>                                                 \r\n                                 <label class=\"smallBoldLabel\"><input  type=\"date\" style=\"width:152px; min-width:50%;\"  placeholder=\"Year Start Date\" [(ngModel)]=\"ReportParameters.DATE2\"  (change)=\"changeEndDate($event.target.value,'AD')\"   ></label>\r\n                           </td>\r\n                        </tr>\r\n                        <tr>\r\n                           <td>\r\n                                 <label class=\"smallBoldLabel\"><input id=\"nepaliDate\" style=\"width:152px;height:25px;text-align:center\" class=\"nepali-calendar ndp-nepali-calendar\" [(ngModel)]=\"ReportParameters.BSDATE1\"\r\n                              type=\"text\" (change)=\"changestartDate($event.target.value,'BS')\"\r\n                              placeholder=\"yyyy-mm-dd\" /> </label>\r\n                           </td>\r\n                           <td>\r\n                                 <label class=\"smallBoldLabel\"><input id=\"nepaliDate\" style=\"width:152px;height:25px;text-align:center\" class=\"nepali-calendar ndp-nepali-calendar\" [(ngModel)]=\"ReportParameters.BSDATE2\"\r\n                              type=\"text\" (change)=\"changeEndDate($event.target.value,'BS')\"\r\n                              placeholder=\"yyyy-mm-dd\" /> </label>\r\n                           </td>\r\n                        </tr>\r\n                     </table>\r\n                  </fieldset>\r\n\r\n                  <fieldset>\r\n                     <label class=\"smallBoldLabel\"><input type=\"radio\" value=0 name=\"showDetReport\" [(ngModel)]=\"ReportParameters.OPT_SHOWDETAL_REPORT\">&nbsp;Summary Report</label>\r\n                     <label class=\"smallBoldLabel\"><input type=\"radio\" value=1 name=\"showDetReport\" [(ngModel)]=\"ReportParameters.OPT_SHOWDETAL_REPORT\">&nbsp;Detail Report</label>\r\n                  </fieldset>\r\n\r\n                  <fieldset>\r\n                     <legend>Customer Account : </legend>\r\n                        <table>\r\n                              <tr>\r\n                                 <td><label class=\"smallBoldLabel\">ACCODE</label></td>\r\n                                 <td><label class=\"smallBoldLabel\">ACNAME</label></td>\r\n                                 \r\n                              </tr>\r\n                              <tr>\r\n                                 <td>\r\n                                    <label class=\"smallBoldLabel\"><input tabindex=\"2\" type=\"text\" class=\"form-control input-sm\" style=\"height: 26px;\" (keydown.enter)=\"accodeChanged($event.target.value)\" [(ngModel)]=\"ACCODE\" ></label>\r\n                                 </td>\r\n                                 <td>\r\n                                    <div style=\"position: absolute; top: 297px; width: 150px;\">\r\n                                       <label class=\"smallBoldLabel\"><input tabindex=\"2\" ngui-auto-complete class=\"form-control input-sm\" [source]=\"dropListItem.bind(this)\" max-num-list=\"25\" [(ngModel)]=\"ACCNAME\" list-formatter=\"ACNAME\" style=\"height: 26px;\" (ngModelChange)=\"itemChanged($event)\" name=\"AcName\" display-property-name=\"ACNAME\"></label>\r\n                                    </div>      \r\n                                 </td>\r\n                              </tr>\r\n                           </table>\r\n                  </fieldset>\r\n                     \r\n                 \r\n                  <fieldset>\r\n                        <legend>Division Selection:</legend>\r\n                        <select [(ngModel)]=\"ReportParameters.DIVISION\" style=\"width : 100%;\">\r\n                           <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0\">ALL</option>\r\n                           <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                              {{ div.NAME }}\r\n                           </option>\r\n                        </select>\r\n                     </fieldset>\r\n               \r\n                  <label class=\"smallBoldLabel\"><input type=\"checkbox\" style=\"vertical-align: middle;\" (change)=\"$event.target.checked?(ReportParameters.CHK_SALESMANWISESUMMARY=1):(ReportParameters.CHK_SALESMANWISESUMMARY=0)\" [checked]=\"ReportParameters.CHK_SALESMANWISESUMMARY == 1\"  name=\"showSalesSum\" >Show salesman wise Sales summary report</label>\r\n\r\n\r\n               </div>\r\n               <!-- Another column -->\r\n               <div class=\"col-md-6\">\r\n                <label class=\"smallBoldLabel\"><input type=\"checkbox\" style=\"vertical-align: middle;\" (change)=\"$event.target.checked?(ReportParameters.CHK_INCLUDE_RETURN=1):(ReportParameters.CHK_INCLUDE_RETURN=0)\" name=\"showSalesSum\" [checked]=\"ReportParameters.CHK_INCLUDE_RETURN == 1\" >Show salesman wise Sales summary report</label>\r\n                \r\n                <br>\r\n                  <fieldset>                   \r\n                        <legend><input type=\"checkbox\" name=\"showDiscountSalesOnlyCheck\" value=\"showDiscountSalesOnlyCheck\">Show Discount Sales only</legend>\r\n                        <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"showDiscountSalesOnly\" [(ngModel)]=\"ReportParameters.OPT_DISCOUNTEDSALES\" value=\"0\">Show All Discount Sales</label><br>\r\n                        <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"showDiscountSalesOnly\" [(ngModel)]=\"ReportParameters.OPT_DISCOUNTEDSALES\" value=\"1\" >Show All Discount Sales </label>\r\n                        <label class=\"smallBoldLabel\">Greater than Discount Rate (%)>= <input type=\"text\" name=\"disPer\" [(ngModel)]=\"ReportParameters.DISRATE\" style=\"width : 16%;\"></label>\r\n                        <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"showDiscountSalesOnly\" [(ngModel)]=\"ReportParameters.OPT_DISCOUNTEDSALES\" value=\"2\" >Show Credit Card Discount Sales only</label>\r\n                        <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"showDiscountSalesOnly\"  [(ngModel)]=\"ReportParameters.OPT_DISCOUNTEDSALES\" value=\"3\" >Show Complimentary Sales only</label>\r\n                  </fieldset>\r\n\r\n                  <fieldset>\r\n                     <legend>Salesman Selection</legend>\r\n                     <select style=\"width : 275px;\">\r\n                        <option value=\"%\">All</option>\r\n                     </select>\r\n                  </fieldset>\r\n\r\n                  <label class=\"smallBoldLabel\"><input type=\"checkbox\" style=\"vertical-align: middle;\" name=\"showBLOnly\" >Show Opening B/L Only</label><br>\r\n\r\n                  <fieldset>\r\n                     <legend>Sales Mode Selection</legend>\r\n                     <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"counterSales\"  [(ngModel)]=\"ReportParameters.OPT_COUNTERSALES\" value=\"0\">&nbsp; Both</label>\r\n                     <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"counterSales\" [(ngModel)]=\"ReportParameters.OPT_COUNTERSALES\" value=\"1\">&nbsp; Counter Sales Only</label>\r\n                     <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"counterSales\" [(ngModel)]=\"ReportParameters.OPT_COUNTERSALES\" value=\"2\">&nbsp; Table Sales Only</label>\r\n                  </fieldset>\r\n\r\n                  <fieldset>\r\n                     <legend>Sales Mode Selection</legend>\r\n                     <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"optInad\"  [(ngModel)]=\"ReportParameters.OPT_INAD\" value=0>&nbsp; As Per AD Date</label>\r\n                     <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"optInad\" [(ngModel)]=\"ReportParameters.OPT_INAD\" value=1>&nbsp; As Per BS Date</label>\r\n                  </fieldset>\r\n                  <div class=\"btn\">\r\n                     <!-- <button type=\"button\"  title=\"onSave\" class=\"btn btn-info\">Run</button>    -->\r\n                     <button class=\"btn btn-info confirm-btn\" type=\"button\"  (click)=onload()>RUN</button>\r\n                     <button type=\"button\"  title=\"Cancel\" class=\"btn btn-info\">Close</button>  \r\n                  </div>\r\n               </div>\r\n            </div>\r\n            <!-- <div class=\"modal-footer\">\r\n               <button class=\"btn btn-info confirm-btn\" type=\"button\"  (click)=onload()>RUN</button>\r\n               </div> -->\r\n         \r\n       </div>"

/***/ }),

/***/ 1752:
/***/ (function(module, exports) {

module.exports = "<style>\r\n   .input-text {\r\n      width: 100%;\r\n      /* height: 30px !important; */\r\n      font-weight: bold;\r\n   }\r\n\r\n   .td-class {\r\n      border: none !important;\r\n   }\r\n\r\n   .date-input {\r\n      width: 93%;\r\n      font-size: 12px !important;\r\n      height: 30px !important;\r\n   }\r\n   .report-container{ width: 30% !important; } @media screen and (max-width: 991px){ .report-container{ width: 100% !important; } }\r\n</style>\r\n<div class=\"container report-container\" style=\"background-color : #ffffff; padding :1%; height : auto; \">\r\n   <div class=\"row\">\r\n      <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n         <h4 class=\"modal-title\">Sales Return Report Detail</h4>\r\n      </div>\r\n      <!-- Left Column -->\r\n      <div class=\"col-md-12\" style=\"padding-top: 2%;\">\r\n         <fieldset>\r\n            <legend style=\"font-size:11px;font-weight: bold; width:auto;margin-bottom: -4px;\">Date Range Selection :\r\n            </legend>\r\n            <table>\r\n               <tr>\r\n                  <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                  <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n               </tr>\r\n               <tr>\r\n                  <td class=\"td-class\">\r\n                     <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                        [(ngModel)]=\"_reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_DATE1\"\r\n                        (change)=\"changestartDate($event.target.value,'AD')\"\r\n                        max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\"\r\n                        min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                  </td>\r\n                  <td class=\"td-class\">\r\n                     <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                        [(ngModel)]=\"_reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_DATE2\"\r\n                        (change)=\"changeEndDate($event.target.value,'AD')\"\r\n                        max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\"\r\n                        min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                  </td>\r\n               </tr>\r\n               <tr>\r\n                  <td class=\"td-class\">\r\n                     <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                        (change)=\"changestartDate($event.detail.value,'BS')\" [label]=\"'From'\"\r\n                        [(ngModel)]=\"_reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_BSDATE1\">\r\n                     </nepali-date-picker>\r\n                  </td>\r\n                  <td class=\"td-class\">\r\n                     <nepali-date-picker name=\"nepaliDateTo\" [id]=\"'nepaliDateTo'\"\r\n                        (change)=\"changeEndDate($event.detail.value,'BS')\" [label]=\"'To'\"\r\n                        [(ngModel)]=\"_reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_BSDATE2\">\r\n                     </nepali-date-picker>\r\n                  </td>\r\n               </tr>\r\n            </table>\r\n         </fieldset>\r\n          \r\n          <fieldset>\r\n             <legend>Division Selection:</legend>\r\n             <select [(ngModel)]=\"_reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_DIV\"\r\n                style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL</option>\r\n                <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                   {{ div.NAME }}\r\n                </option>\r\n             </select>\r\n          </fieldset>\r\n \r\n\r\n         <fieldset>\r\n            <legend>Product:</legend>\r\n            <input type=\"text\" class=\"form-control\"\r\n               [(ngModel)]=\"_reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_ProductName\"\r\n               placeholder=\"Press Enter or Tab for Product\" (keydown.Tab)=\"ProductEnterClicked($event)\"\r\n               (keydown.enter)=\"ProductEnterClicked($event)\">\r\n\r\n         </fieldset>\r\n\r\n         <fieldset>\r\n            <legend>Brand:</legend>\r\n            <input type=\"text\" class=\"form-control\"\r\n               [(ngModel)]=\"_reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_BrandName\"\r\n               placeholder=\"Press Enter or Tab for Brand\" (keydown.Tab)=\"BrandEnterClicked($event)\"\r\n               (keydown.enter)=\"BrandEnterClicked($event)\">\r\n         </fieldset>\r\n\r\n         <fieldset>\r\n            <legend>Retailer :</legend>\r\n            <input type=\"text\" class=\"form-control\"\r\n               [(ngModel)]=\"_reportFilterService.SalesReturnReportDetailObj.SalesReturnReportDetail_RetailerName\"\r\n               placeholder=\"Press Enter or Tab for Retailer\" (keydown.Tab)=\"RetailerEnterClicked($event)\"\r\n               (keydown.enter)=\"RetailerEnterClicked($event)\">\r\n         </fieldset>\r\n\r\n\r\n      </div>\r\n\r\n      <div class=\"btn\" style=\"float : right;\">\r\n         <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n         <button type=\"button\" title=\"Cancel\" class=\"btn btn-info\" (click)=\"closeReportBox()\">Close</button>\r\n      </div>\r\n\r\n   </div>\r\n\r\n   \r\n<generic-popup-grid #genericGridProduct [popupsettings]=\"gridPopupSettingsForProduct\"\r\n(onItemDoubleClick)=\"dblClickProductSelect($event)\">\r\n</generic-popup-grid>\r\n\r\n<generic-popup-grid #genericGridBrand [popupsettings]=\"gridPopupSettingsForBrand\"\r\n(onItemDoubleClick)=\"dblClickBrandSelect($event)\">\r\n</generic-popup-grid>\r\n\r\n<generic-popup-grid #genericGridRetailer [popupsettings]=\"gridPopupSettingsForRetailer\"\r\n(onItemDoubleClick)=\"dblClickRetailerSelect($event)\">\r\n</generic-popup-grid>"

/***/ }),

/***/ 1753:
/***/ (function(module, exports) {

module.exports = "<style>\r\n   .input-text {\r\n      width: 100%;\r\n      /* height: 30px !important; */\r\n      font-weight: bold;\r\n   }\r\n\r\n   .td-class {\r\n      border: none !important;\r\n   }\r\n\r\n   .date-input {\r\n      width: 93%;\r\n      font-size: 12px !important;\r\n      height: 30px !important;\r\n   }\r\n   .report-container{\r\n         width: 30% !important;\r\n      }\r\n   @media screen and (max-width: 991px){\r\n\r\n      .report-container{\r\n         width: 100% !important;\r\n      }\r\n   }\r\n</style>\r\n<div class=\"container report-container\" style=\"background-color : #ffffff; padding :1%; height : auto;  \">\r\n   <div class=\"row\">\r\n      <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n         <h4 class=\"modal-title\">Sales Return Summary Report</h4>\r\n      </div>\r\n      <!-- Left Column -->\r\n      <div class=\"col-md-12\" style=\"padding-top: 2%;\">\r\n         <fieldset>\r\n            <legend style=\"font-size:11px;font-weight: bold; width:auto;margin-bottom: -4px;\">Date Range Selection :\r\n            </legend>\r\n            <table>\r\n               <tr>\r\n                  <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                  <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n               </tr>\r\n               <tr>\r\n                  <td class=\"td-class\">\r\n                     <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                        [(ngModel)]=\"_reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_DATE1\"\r\n                        (change)=\"changestartDate($event.target.value,'AD')\"\r\n                        max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\"\r\n                        min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                  </td>\r\n                  <td class=\"td-class\">\r\n                     <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                        [(ngModel)]=\"_reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_DATE2\"\r\n                        (change)=\"changeEndDate($event.target.value,'AD')\"\r\n                        max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\"\r\n                        min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                  </td>\r\n               </tr>\r\n               <tr>\r\n                  <td class=\"td-class\">\r\n                     <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                        (change)=\"changestartDate($event.detail.value,'BS')\" [label]=\"'From'\"\r\n                        [(ngModel)]=\"_reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_BSDATE1\">\r\n                     </nepali-date-picker>\r\n                  </td>\r\n                  <td class=\"td-class\">\r\n                     <nepali-date-picker name=\"nepaliDateTo\" [id]=\"'nepaliDateTo'\"\r\n                        (change)=\"changeEndDate($event.detail.value,'BS')\" [label]=\"'To'\"\r\n                        [(ngModel)]=\"_reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_BSDATE2\">\r\n                     </nepali-date-picker>\r\n                  </td>\r\n               </tr>\r\n            </table>\r\n         </fieldset>\r\n          \r\n          <fieldset>\r\n             <legend>Division Selection:</legend>\r\n             <select [(ngModel)]=\"_reportFilterService.SalesReturnSummaryObj.SalesReturnSummary_DIV\"\r\n                style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL</option>\r\n                <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                   {{ div.NAME }}\r\n                </option>\r\n             </select>\r\n          </fieldset>\r\n \r\n\r\n\r\n      </div>\r\n\r\n      <div class=\"btn\" style=\"float : right;\">\r\n         <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n         <button type=\"button\" title=\"Cancel\" class=\"btn btn-info\" (click)=\"closeReportBox()\">Close</button>\r\n      </div>\r\n\r\n   </div>"

/***/ }),

/***/ 1754:
/***/ (function(module, exports) {

module.exports = "<style>\r\n   .input-text {\r\n      width: 100%;\r\n      /* height: 30px !important; */\r\n      font-weight: bold;\r\n   }\r\n\r\n   .td-class {\r\n      border: none !important;\r\n   }\r\n\r\n   .date-input {\r\n      width: 93%;\r\n      font-size: 12px !important;\r\n      height: 30px !important;\r\n   }\r\n\r\n   .modal-part {\r\n      overflow-y: scroll;\r\n      height: 500px;\r\n      padding-top: 25px;\r\n   }\r\n    @media screen and (max-width: 991px){ .report-container{ width: 100% !important; } }\r\n</style>\r\n<div class=\"container report-container\">\r\n   <div class=\"row\">\r\n      <!-- Filter Starts -->\r\n      <div class=\"col-12 col-md-12 col-lg-6\">\r\n         <div style=\"background-color : #ffffff; padding :1%; height : auto;\">\r\n            <div class=\"row\">\r\n               <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n                  <h4 class=\"modal-title\">Sales Return Summary Retailer Report</h4>\r\n               </div>\r\n               <!-- Left Column -->\r\n               <div class=\"col-md-12\" style=\"padding-top: 2%;\">\r\n                  <fieldset>\r\n                     <legend style=\"font-size:11px;font-weight: bold; width:auto;margin-bottom: -4px;\">Date Range\r\n                        Selection :\r\n                     </legend>\r\n                     <table>\r\n                        <tr>\r\n                           <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                           <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                        </tr>\r\n                        <tr>\r\n                           <td class=\"td-class\">\r\n                              <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                 [(ngModel)]=\"_reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DATE1\"\r\n                                 (change)=\"changestartDate($event.target.value,'AD')\"\r\n                                 max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\"\r\n                                 min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                           </td>\r\n                           <td class=\"td-class\">\r\n                              <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                 [(ngModel)]=\"_reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DATE2\"\r\n                                 (change)=\"changeEndDate($event.target.value,'AD')\"\r\n                                 max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\"\r\n                                 min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                           </td>\r\n                        </tr>\r\n                        <tr>\r\n                           <td class=\"td-class\">\r\n                              <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                                 (change)=\"changestartDate($event.detail.value,'BS')\" [label]=\"'From'\"\r\n                                 [(ngModel)]=\"_reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_BSDATE1\">\r\n                              </nepali-date-picker>\r\n                           </td>\r\n                           <td class=\"td-class\">\r\n                              <nepali-date-picker name=\"nepaliDateTo\" [id]=\"'nepaliDateTo'\"\r\n                                 (change)=\"changeEndDate($event.detail.value,'BS')\" [label]=\"'To'\"\r\n                                 [(ngModel)]=\"_reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_BSDATE2\">\r\n                              </nepali-date-picker>\r\n                           </td>\r\n                        </tr>\r\n                     </table>\r\n                  </fieldset>\r\n                   \r\n           <fieldset>\r\n              <legend>Division Selection:</legend>\r\n              <select [(ngModel)]=\"_reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_DIV\"\r\n                 style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                 <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL</option>\r\n                 <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                    {{ div.NAME }}\r\n                 </option>\r\n              </select>\r\n           </fieldset>\r\n  \r\n\r\n                  <fieldset>\r\n                     <legend>Salesman:</legend>\r\n                     <!-- <div class=\"checkbox\" style=\"width:200px;\">\r\n                        <label class=\"smallBoldLabel\">\r\n                           <input type=\"checkbox\"\r\n                              [(ngModel)]=\"_reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_EnableSalesman\"\r\n                              (change)=\"checkValue()\">\r\n                           Choose Multiple Salesman</label>\r\n                     </div> -->\r\n                     <input type=\"text\" class=\"form-control\"\r\n                        [(ngModel)]=\"_reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_Salesman\"\r\n                        placeholder=\"Press Enter or Tab for Salesman\" (keydown.Tab)=\"SalesmanEnterClicked($event)\"\r\n                        (keydown.enter)=\"SalesmanEnterClicked($event)\">\r\n                     <!-- <button type=\"button\" *ngIf=\"_reportFilterService.showMultipleSalesman\"\r\n                        (click)=\"addSalesmanToList()\" class=\"btn btn-info\" style=\"float: right;\">Add</button> -->\r\n                  </fieldset>\r\n\r\n                  <fieldset>\r\n                     <legend>Retailer :</legend>\r\n                     <!-- <div class=\"checkbox\" style=\"width:200px;\">\r\n                        <label class=\"smallBoldLabel\">\r\n                           <input type=\"checkbox\"\r\n                              [(ngModel)]=\"_reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_EnableRetailer\"\r\n                              (change)=\"checkValue()\">\r\n                           Choose Multiple Retailer</label>\r\n                     </div> -->\r\n                     <input type=\"text\" class=\"form-control\"\r\n                        [(ngModel)]=\"_reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_RetailerName\"\r\n                        placeholder=\"Press Enter or Tab for Retailer\" (keydown.Tab)=\"RetailerEnterClicked($event)\"\r\n                        (keydown.enter)=\"RetailerEnterClicked($event)\">\r\n                     <!-- <button type=\"button\" *ngIf=\"_reportFilterService.showMultipleRetailer\"\r\n                        (click)=\"addRetailerToList()\" class=\"btn btn-info\" style=\"float: right;\">Add</button> -->\r\n                  </fieldset>\r\n\r\n\r\n               </div>\r\n\r\n               <div class=\"btn\" style=\"float : right;\">\r\n                  <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n                  <button type=\"button\" title=\"Cancel\" class=\"btn btn-info\" (click)=\"closeReportBox()\">Close</button>\r\n               </div>\r\n\r\n            </div>\r\n         </div>\r\n      </div>\r\n\r\n      <!-- Modal Starts -->\r\n      <div class=\"col-12 col-md-12 col-lg-6\">\r\n         <div class=\"modal-part\"\r\n            *ngIf=\"_reportFilterService.showMultipleSalesman || _reportFilterService.showMultipleRetailer\">\r\n\r\n            <div *ngIf=\"_reportFilterService.showMultipleSalesman\">\r\n               <div class=\"modal-content modal-content-main-area\">\r\n                  <div class=\"modal-header\" style=\"padding: 5px;\">\r\n                     <button type=\"button\" class=\"close\" data-dismiss=\"modal\"\r\n                        (click)=\"hideSalesmanTable()\">&times;</button>\r\n                     <h4 class=\"modal-title\" id=\"myModalLabel\">Selected Salesmen</h4>\r\n                  </div>\r\n                  <table style=\"height:200px;\">\r\n                     <tr>\r\n                        <th style=\"width:3px;\">S.No.</th>\r\n                        <th style=\"width:15px;\">Salesman</th>\r\n                        <th style=\"width:4px;\">Action</th>\r\n                     </tr>\r\n                     <tr\r\n                        *ngFor=\"let data of _reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_MultipleSalesman;let i = index\">\r\n                        <td style=\"width:3px;\">{{ i + 1 }}</td>\r\n                        <td style=\"width:15px;\">{{data.SalesmanName}}</td>\r\n                        <td style=\"width:4px;\"> <button type=\"button\" class=\"btn btn-info\" style=\"float: right;\"\r\n                              (click)=\"deleteSalesman(i)\">Delete</button></td>\r\n                     </tr>\r\n                  </table>\r\n               </div>\r\n            </div>\r\n\r\n            <div *ngIf=\"_reportFilterService.showMultipleRetailer\">\r\n               <div class=\"modal-content modal-content-main-area\">\r\n                  <div class=\"modal-header\" style=\"padding: 5px;\">\r\n                     <button type=\"button\" class=\"close\" data-dismiss=\"modal\"\r\n                        (click)=\"hideRetailerTable()\">&times;</button>\r\n                     <h4 class=\"modal-title\" id=\"myModalLabel\">Selected Retailers</h4>\r\n                  </div>\r\n                  <table style=\"height:200px;\">\r\n                     <tr>\r\n                        <th style=\"width:3px;\">S.No.</th>\r\n                        <th style=\"width:15px;\">Retailer</th>\r\n                        <th style=\"width:4px;\">Action</th>\r\n                     </tr>\r\n                     <tr\r\n                        *ngFor=\"let data of _reportFilterService.SalesReturnSummaryRetailerObj.SalesReturnSummaryRetailer_MultipleRetailer;let i = index\">\r\n                        <td style=\"width:3px;\">{{ i + 1 }}</td>\r\n                        <td style=\"width:15px;\">{{data.RETAILER}}</td>\r\n                        <td style=\"width:4px;\"> <button type=\"button\" class=\"btn btn-info\" style=\"float: right;\"\r\n                              (click)=\"deleteRetailer(i)\">Delete</button></td>\r\n                     </tr>\r\n                  </table>\r\n               </div>\r\n            </div>\r\n\r\n         </div>\r\n      </div>\r\n   </div>\r\n</div>\r\n<!-- Modal Ends -->\r\n\r\n<generic-popup-grid #genericGridSalesman [popupsettings]=\"gridPopupSettingsForSalesman\"\r\n   (onItemDoubleClick)=\"dblClickSalesmanSelect($event)\">\r\n</generic-popup-grid>\r\n\r\n<generic-popup-grid #genericGridRetailer [popupsettings]=\"gridPopupSettingsForRetailerListBySalesman\"\r\n   (onItemDoubleClick)=\"dblClickRetailerPopup($event)\">\r\n</generic-popup-grid>"

/***/ }),

/***/ 1755:
/***/ (function(module, exports) {

module.exports = "<div class=\"container\">\r\n    <div class=\"row\">\r\n        <!-- Filter Starts -->\r\n        <div class=\"col-12 col-md-12\">\r\n            <div style=\"background-color : #ffffff;width: 105%;\">\r\n\r\n                <div class=\"row\">\r\n                    <div class=\"modal-header\" style=\"border:0px;\">\r\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"hide()\">&times;</button>\r\n                        <h4 class=\"modal-title\" style=\"padding-left: 20px;\">Stock ABC Analysis Report</h4>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"row\" style=\"margin-top: -2%;\">\r\n                    <div class=\"row col-md-12\" style=\"padding-top: 2%;\">\r\n                        <!-- Left Column -->\r\n                        <div class=\"col-md-6\" style=\"padding-left: 30px;\">\r\n                            <fieldset>\r\n                                <legend style=\"font-size:11px;font-weight: bold; width:auto\">Date Range Selection :\r\n                                </legend>\r\n                                <table>\r\n                                    <tr>\r\n                                        <td><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                                        <td><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>\r\n                                            <label class=\"smallBoldLabel\"><input type=\"date\"\r\n                                                    style=\"width:152px; min-width:50%;\" placeholder=\"Year Start Date\"\r\n                                                    [(ngModel)]=\"_reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_DATE1\"\r\n                                                    (change)=\"changeEntryDate($event.target.value,'AD')\"></label>\r\n                                        </td>\r\n                                        <td>\r\n                                            <label class=\"smallBoldLabel\"><input type=\"date\"\r\n                                                    style=\"width:152px; min-width:50%;\" placeholder=\"Year Start Date\"\r\n                                                    [(ngModel)]=\"_reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_DATE2\"\r\n                                                    (change)=\"changeEndDate($event.target.value,'AD')\"></label>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>\r\n                                            <nepali-date-picker name=\"nepaliDatefrom\" [id]=\"'nepaliDatefrom'\"\r\n                                                (change)=\"changeEntryDate($event.detail.value,'BS')\" [label]=\"'From'\"\r\n                                                [(ngModel)]=\"_reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_BSDATE1\">\r\n                                            </nepali-date-picker>\r\n                                        </td>\r\n                                        <td>\r\n                                            <nepali-date-picker name=\"nepaliDateto\" [id]=\"'nepaliDateto'\"\r\n                                                (change)=\"changeEndDate($event.detail.value,'BS')\" [label]=\"'To'\"\r\n                                                [(ngModel)]=\"_reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_BSDATE2\">\r\n                                            </nepali-date-picker>\r\n                                        </td>\r\n                                    </tr>\r\n                                </table>\r\n                            </fieldset>\r\n\r\n                            <fieldset>\r\n                                <legend class=\"legend-class\">Report Type Selection :</legend>\r\n                                <div>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col-md-1\">\r\n                                            <input type=\"radio\" name=\"reportType\"\r\n                                                [(ngModel)]=\"_reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_REPORTTYPE\"\r\n                                                value=0>\r\n                                        </div>\r\n                                        <div calss=\"col\">\r\n                                            <label style=\"width: 178px;\" class=\"smallBoldLabel\">Item Wise Stock\r\n                                                Report</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col-md-1\">\r\n                                            <input type=\"radio\" name=\"reportType\"\r\n                                                [(ngModel)]=\"_reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_REPORTTYPE\"\r\n                                                value=1>\r\n                                        </div>\r\n                                        <div calss=\"col\">\r\n                                            <label style=\"width: 178px;\" class=\"smallBoldLabel\">Item Group Wise Stock\r\n                                                Report</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col-md-1\">\r\n                                            <input type=\"radio\" name=\"reportType\"\r\n                                                [(ngModel)]=\"_reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_REPORTTYPE\"\r\n                                                value=2>\r\n                                        </div>\r\n                                        <div calss=\"col\">\r\n                                            <label style=\"width: 178px;\" class=\"smallBoldLabel\">Item Category Wise Stock\r\n                                                Report</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\"\r\n                                        *ngIf=\"_reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_REPORTTYPE!=0\">\r\n                                        <div class=\"col-md-1\">\r\n                                            <input type=\"checkbox\"\r\n                                                [(ngModel)]=\"_reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_ShowItemInGroupWiseReport \"\r\n                                                (change)=\"$event.target.checked?(_reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_ShowItemInGroupWiseReport =1):(_reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_ShowItemInGroupWiseReport =0)\"\r\n                                                [checked]=\"_reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_ShowItemInGroupWiseReport ==1\">\r\n                                        </div>\r\n                                        <div calss=\"col\">\r\n                                            <label style=\"width: 220px;\" class=\"smallBoldLabel\"\r\n                                                *ngIf=\"_reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_REPORTTYPE == 1\">Show\r\n                                                Item In Group Wise Stock Report</label>\r\n                                            <label style=\"width: 220px;\" class=\"smallBoldLabel\"\r\n                                                *ngIf=\"_reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_REPORTTYPE == 2\">Show\r\n                                                Item In Category Wise Stock Report</label>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </fieldset>\r\n\r\n                        </div>\r\n                        <!-- Left column-->\r\n\r\n                        <!-- Right column-->\r\n                        <div class=\"col-md-6\">\r\n                            <fieldset>\r\n                                <legend>Product:</legend>\r\n                                <input type=\"text\" class=\"form-control\"\r\n                                    [(ngModel)]=\"_reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_ITEM\"\r\n                                    placeholder=\"Press Enter or Tab for Product\"\r\n                                    (keydown.Tab)=\"ProductEnterClicked($event)\"\r\n                                    (keydown.enter)=\"ProductEnterClicked($event)\">\r\n\r\n                            </fieldset>\r\n\r\n                            <!-- <fieldset>\r\n                                <legend>Brand:</legend>\r\n                                <input type=\"text\" class=\"form-control\"\r\n                                    [(ngModel)]=\"_reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_BRANDNAME\"\r\n                                    placeholder=\"Press Enter or Tab for Brand\" (keydown.Tab)=\"BrandEnterClicked($event)\"\r\n                                    (keydown.enter)=\"BrandEnterClicked($event)\">\r\n                            </fieldset> -->\r\n\r\n                            <fieldset>\r\n                                <legend>Supplier :</legend>\r\n                                <input type=\"text\" class=\"form-control\"\r\n                                    [(ngModel)]=\"_reportFilterService.StockAbcAnalysisAccountObj.StockAbcAnalysisAccount_SUPPLIER\"\r\n                                    placeholder=\"Press Enter or Tab for Supplier\"\r\n                                    (keydown.Tab)=\"SupplierEnterClicked($event)\"\r\n                                    (keydown.enter)=\"SupplierEnterClicked($event)\">\r\n                            </fieldset>\r\n                        </div>\r\n                        <!-- Right column-->\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n                    <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n                    <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n                </div>\r\n            </div>\r\n            <!-- Filter Ends -->\r\n            <!-- Modal Ends -->\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<generic-popup-grid #genericGridProduct [popupsettings]=\"gridPopupSettingsForProduct\"\r\n    (onItemDoubleClick)=\"dblClickProductSelect($event)\">\r\n</generic-popup-grid>\r\n\r\n<generic-popup-grid #genericGridSupplier [popupsettings]=\"gridPopupSettingsForSupplier\"\r\n    (onItemDoubleClick)=\"dblClickSupplierSelect($event)\">\r\n</generic-popup-grid>"

/***/ }),

/***/ 1756:
/***/ (function(module, exports) {

module.exports = "<div class=\"container\">\r\n    <div class=\"row\">\r\n        <!-- Filter Starts -->\r\n        <div class=\"col-12 col-md-12\">\r\n            <div style=\"background-color : #ffffff;width: 105%;height: 19rem;\">\r\n\r\n                <div class=\"row\">\r\n                    <div class=\"modal-header\" style=\"border:0px;\">\r\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n                        <h4 class=\"modal-title\" style=\"padding-left: 20px;\">Stock Ledger Report</h4>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"row\" style=\"margin-top: -2%;\">\r\n                    <div class=\"row col-md-12\" style=\"padding-top: 2%;\">\r\n                        <!-- Left Column -->\r\n                        <div class=\"col-md-6\" style=\"padding-left: 30px;\">\r\n                            <fieldset>\r\n                                <legend style=\"font-size:11px;font-weight: bold; width:auto\">Date Range Selection :\r\n                                </legend>\r\n                                <table>\r\n                                    <tr>\r\n                                        <td><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                                        <td><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>\r\n                                            <label class=\"smallBoldLabel\"><input type=\"date\"\r\n                                                    style=\"width:152px; min-width:50%;\" placeholder=\"Year Start Date\"\r\n                                                    [(ngModel)]=\"_reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_DATE1\"\r\n                                                    (change)=\"changeEntryDate($event.target.value,'AD')\"></label>\r\n                                        </td>\r\n                                        <td>\r\n                                            <label class=\"smallBoldLabel\"><input type=\"date\"\r\n                                                    style=\"width:152px; min-width:50%;\" placeholder=\"Year Start Date\"\r\n                                                    [(ngModel)]=\"_reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_DATE2\"\r\n                                                    (change)=\"changeEndDate($event.target.value,'AD')\"></label>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>\r\n                                            <nepali-date-picker name=\"nepaliDatefrom\" [id]=\"'nepaliDatefrom'\"\r\n                                                (change)=\"changeEntryDate($event.detail.value,'BS')\" [label]=\"'From'\"\r\n                                                [(ngModel)]=\"_reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_BSDATE1\">\r\n                                            </nepali-date-picker>\r\n                                        </td>\r\n                                        <td>\r\n                                            <nepali-date-picker name=\"nepaliDateto\" [id]=\"'nepaliDateto'\"\r\n                                                (change)=\"changeEndDate($event.detail.value,'BS')\" [label]=\"'To'\"\r\n                                                [(ngModel)]=\"_reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_BSDATE2\">\r\n                                            </nepali-date-picker>\r\n                                        </td>\r\n                                    </tr>\r\n                                </table>\r\n                            </fieldset>\r\n\r\n                        </div>\r\n                        <!-- Left column-->\r\n\r\n                        <!-- Right column-->\r\n                        <div class=\"col-md-6\">\r\n\r\n\r\n                            <fieldset>\r\n                                <legend>Warehouse:</legend>\r\n                                <input type=\"text\" class=\"form-control\"\r\n                                    [(ngModel)]=\"_reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_WAREHOUSE\"\r\n                                    placeholder=\"Press Enter or Tab for Warehouse\"\r\n                                    (keydown.Tab)=\"WarehouseEnterClicked($event)\"\r\n                                    (keydown.enter)=\"WarehouseEnterClicked($event)\">\r\n                                <button type=\"button\" *ngIf=\"_reportFilterService.showMultipleWarehouse\"\r\n                                    (click)=\"addWarehouseToList()\" class=\"btn btn-info\"\r\n                                    style=\"float: right;\">Add</button>\r\n                            </fieldset>\r\n                            <fieldset>\r\n                                <legend>Product:</legend>\r\n                                <input type=\"text\" class=\"form-control\"\r\n                                    [(ngModel)]=\"_reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_ITEM\"\r\n                                    placeholder=\"Press Enter or Tab for Product\"\r\n                                    (keydown.Tab)=\"ProductEnterClicked($event)\"\r\n                                    (keydown.enter)=\"ProductEnterClicked($event)\">\r\n\r\n                            </fieldset>\r\n\r\n\r\n                            <div class=\"row\">\r\n                                <div class=\"col-md-1\">\r\n                                    <input type=\"checkbox\"\r\n                                        [(ngModel)]=\"_reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_SHOWBATCHWISE\"\r\n                                        (change)=\"$event.target.checked?(_reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_SHOWBATCHWISE=1):(_reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_SHOWBATCHWISE=0)\"\r\n                                        [checked]=\"_reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_SHOWBATCHWISE==1\">\r\n                                </div>\r\n                                <div calss=\"col\">\r\n                                    <label style=\"width: 200px;\" class=\"smallBoldLabel\">Show Batch\r\n                                        Wise Stock Report</label>\r\n                                </div>\r\n                            </div>\r\n<!-- \r\n                            <div class=\"row\">\r\n                                <div class=\"col-md-1\">\r\n                                    <input type=\"checkbox\"\r\n                                        [(ngModel)]=\"_reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_SHOWDETAIL\"\r\n                                        (change)=\"$event.target.checked?(_reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_SHOWDETAIL=1):(_reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_SHOWDETAIL=0)\"\r\n                                        [checked]=\"_reportFilterService.StockLedgerAccountObj.StockLedgerReportAcc_SHOWDETAIL==1\"\r\n                                        >\r\n                                </div>\r\n                                <div calss=\"col\">\r\n                                    <label style=\"width: 200px;\" class=\"smallBoldLabel\">Show Item\r\n                                        Detail In Report</label>\r\n                                </div>\r\n                            </div> -->\r\n                        </div>\r\n\r\n\r\n                        <!-- Right column-->\r\n\r\n                    </div>\r\n                </div>\r\n                <div class=\"btn\" style=\"float: right;\">\r\n                    <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n                    <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n                </div>\r\n\r\n               \r\n            </div>\r\n            <!-- Filter Ends -->\r\n            <!-- Modal Ends -->\r\n        </div>\r\n        \r\n    </div>\r\n</div>\r\n\r\n<!-- \r\n<popup-reports #genericGridProduct [popupsettings]=\"gridPopupSettingsForProduct\"\r\n    (onItemDoubleClick)=\"dblClickProductSelect($event)\">\r\n</popup-reports>\r\n\r\n<popup-reports #genericGridWarehouse [popupsettings]=\"gridPopupSettingsForWarehouse\"\r\n    (onItemDoubleClick)=\"dblClickWarehouseSelect($event)\">\r\n</popup-reports> -->\r\n\r\n\r\n<generic-popup-grid #genericGridWarehouse [popupsettings]=\"gridPopupSettingsForWarehouse\"\r\n    (onItemDoubleClick)=\"dblClickWarehouseSelect($event)\">\r\n</generic-popup-grid>\r\n\r\n<generic-popup-grid #genericGridProduct [popupsettings]=\"gridPopupSettingsForProduct\"\r\n    (onItemDoubleClick)=\"dblClickProductSelect($event)\">\r\n</generic-popup-grid>"

/***/ }),

/***/ 1757:
/***/ (function(module, exports) {

module.exports = "<div class=\"container\">\r\n    <div class=\"row\">\r\n        <!-- Filter Starts -->\r\n        <div class=\"col-12 col-md-12\">\r\n            <div style=\"background-color : #ffffff;width: 105%;\">\r\n\r\n                <div class=\"row\">\r\n                    <div class=\"modal-header\" style=\"border:0px;\">\r\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"hide()\">&times;</button>\r\n                        <h4 class=\"modal-title\" style=\"padding-left: 20px;\">Stock Summary Report</h4>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"row\" style=\"margin-top: -2%;\">\r\n                    <div class=\"row col-md-12\" style=\"padding-top: 2%;\">\r\n                        <!-- Left Column -->\r\n                        <div class=\"col-md-6\" style=\"padding-left: 30px;\">\r\n                            <fieldset>\r\n                                <legend style=\"font-size:11px;font-weight: bold; width:auto\">Date Range Selection :\r\n                                </legend>\r\n                                <table>\r\n                                    <tr>\r\n                                        <td><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                                        <td><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>\r\n                                            <label class=\"smallBoldLabel\"><input type=\"date\"\r\n                                                    style=\"width:152px; min-width:50%;\" placeholder=\"Year Start Date\"\r\n                                                    [(ngModel)]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_DATE1\"\r\n                                                    (change)=\"changeEntryDate($event.target.value,'AD')\"></label>\r\n                                        </td>\r\n                                        <td>\r\n                                            <label class=\"smallBoldLabel\"><input type=\"date\"\r\n                                                    style=\"width:152px; min-width:50%;\" placeholder=\"Year Start Date\"\r\n                                                    [(ngModel)]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_DATE2\"\r\n                                                    (change)=\"changeEndDate($event.target.value,'AD')\"></label>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>\r\n                                            <nepali-date-picker name=\"nepaliDatefrom\" [id]=\"'nepaliDatefrom'\"\r\n                                                (change)=\"changeEntryDate($event.detail.value,'BS')\" [label]=\"'From'\"\r\n                                                [(ngModel)]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_BSDATE1\">\r\n                                            </nepali-date-picker>\r\n                                        </td>\r\n                                        <td>\r\n                                            <nepali-date-picker name=\"nepaliDateto\" [id]=\"'nepaliDateto'\"\r\n                                                (change)=\"changeEndDate($event.detail.value,'BS')\" [label]=\"'To'\"\r\n                                                [(ngModel)]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_BSDATE2\">\r\n                                            </nepali-date-picker>\r\n                                        </td>\r\n                                    </tr>\r\n                                </table>\r\n                            </fieldset>\r\n\r\n                            <fieldset>\r\n                                <legend class=\"legend-class\">Report Type Selection :</legend>\r\n                                <div style=\"margin-top:1px;\">\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col-md-1\">\r\n                                            <input type=\"radio\" name=\"reportType\"\r\n                                                [(ngModel)]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_REPORTTYPE\"\r\n                                                value=0>\r\n                                        </div>\r\n                                        <div calss=\"col\">\r\n                                            <label style=\"width: 200px;\" class=\"smallBoldLabel\">Item Wise Stock\r\n                                                Report</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col-md-1\">\r\n                                            <input type=\"radio\" name=\"reportType\"\r\n                                                [(ngModel)]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_REPORTTYPE\"\r\n                                                value=1>\r\n                                        </div>\r\n                                        <div calss=\"col\">\r\n                                            <label style=\"width: 200px;\" class=\"smallBoldLabel\">Item Group Wise Stock\r\n                                                Report</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col-md-1\">\r\n                                            <input type=\"radio\" name=\"reportType\"\r\n                                                [(ngModel)]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_REPORTTYPE\"\r\n                                                value=2>\r\n                                        </div>\r\n                                        <div calss=\"col\">\r\n                                            <label style=\"width: 200px;\" class=\"smallBoldLabel\">Item Category Wise Stock\r\n                                                Report</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\"\r\n                                        *ngIf=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_REPORTTYPE!=0\">\r\n                                        <div class=\"col-md-1\">\r\n                                            <input type=\"checkbox\"\r\n                                                [(ngModel)]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_ShowItemInGroupWiseReport \"\r\n                                                (change)=\"$event.target.checked?(_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_ShowItemInGroupWiseReport =1):(_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_ShowItemInGroupWiseReport =0)\"\r\n                                                [checked]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_ShowItemInGroupWiseReport ==1\">\r\n                                        </div>\r\n                                        <div calss=\"col\">\r\n                                            <label style=\"width: 230px;\" class=\"smallBoldLabel\"\r\n                                                *ngIf=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_REPORTTYPE == 1\">Show\r\n                                                Item In Group Wise Stock Report</label>\r\n                                            <label style=\"width: 230px;\" class=\"smallBoldLabel\"\r\n                                                *ngIf=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_REPORTTYPE == 2\">Show\r\n                                                Item In Category Wise Stock Report</label>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </fieldset>\r\n\r\n                            <fieldset>\r\n                                <legend class=\"legend-class\">Report Option :</legend>\r\n                                <div style=\"margin-top:1px;\">\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col-md-1\">\r\n                                            <input type=\"radio\" name=\"reportOption\"\r\n                                                [(ngModel)]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_ReportMode\"\r\n                                                value=0>\r\n                                        </div>\r\n                                        <div calss=\"col\">\r\n                                            <label style=\"width: 200px;\" class=\"smallBoldLabel\">Show All Item Stock\r\n                                                Report</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col-md-1\">\r\n                                            <input type=\"radio\" name=\"reportOption\"\r\n                                                [(ngModel)]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_ReportMode\"\r\n                                                value=1>\r\n                                        </div>\r\n                                        <div calss=\"col\">\r\n                                            <label style=\"width: 200px;\" class=\"smallBoldLabel\">Show Stock Report\r\n                                                Excluding Zero B/L</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col-md-1\">\r\n                                            <input type=\"radio\" name=\"reportOption\"\r\n                                                [(ngModel)]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_ReportMode\"\r\n                                                value=2>\r\n                                        </div>\r\n                                        <div calss=\"col\">\r\n                                            <label style=\"width: 200px;\" class=\"smallBoldLabel\">Show Negative Stock B/L\r\n                                                Item Only</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col-md-1\">\r\n                                            <input type=\"radio\" name=\"reportOption\"\r\n                                                [(ngModel)]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_ReportMode\"\r\n                                                value=3>\r\n                                        </div>\r\n                                        <div calss=\"col\">\r\n                                            <label style=\"width: 200px;\" class=\"smallBoldLabel\">Show Zero Stock B/L Item\r\n                                                Only</label>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </fieldset>\r\n\r\n                        </div>\r\n                        <!-- Left column-->\r\n\r\n                        <!-- Right column-->\r\n                        <div class=\"col-md-6\">\r\n\r\n                            <fieldset>\r\n                                <legend>Warehouse:</legend>\r\n                                <input type=\"text\" class=\"form-control\"\r\n                                    [(ngModel)]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_WAREHOUSE\"\r\n                                    placeholder=\"Press Enter or Tab for Warehouse\"\r\n                                    (keydown.Tab)=\"WarehouseEnterClicked($event)\"\r\n                                    (keydown.enter)=\"WarehouseEnterClicked($event)\">\r\n                            </fieldset>\r\n\r\n                            <fieldset>\r\n                                <legend>Product:</legend>\r\n                                <input type=\"text\" class=\"form-control\"\r\n                                    [(ngModel)]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_ITEM\"\r\n                                    placeholder=\"Press Enter or Tab for Product\"\r\n                                    (keydown.Tab)=\"ProductEnterClicked($event)\"\r\n                                    (keydown.enter)=\"ProductEnterClicked($event)\">\r\n\r\n                            </fieldset>\r\n\r\n                            <!-- <fieldset>\r\n                                <legend>Brand:</legend>\r\n                                <input type=\"text\" class=\"form-control\"\r\n                                    [(ngModel)]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_BRANDNAME\"\r\n                                    placeholder=\"Press Enter or Tab for Brand\" (keydown.Tab)=\"BrandEnterClicked($event)\"\r\n                                    (keydown.enter)=\"BrandEnterClicked($event)\">\r\n                            </fieldset> -->\r\n\r\n                            <fieldset>\r\n                                <legend>Supplier :</legend>\r\n                                <input type=\"text\" class=\"form-control\"\r\n                                    [(ngModel)]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SUPPLIER\"\r\n                                    placeholder=\"Press Enter or Tab for Supplier\"\r\n                                    (keydown.Tab)=\"SupplierEnterClicked($event)\"\r\n                                    (keydown.enter)=\"SupplierEnterClicked($event)\">\r\n                            </fieldset>\r\n\r\n                            <fieldset>\r\n                                <legend class=\"legend-class\">Report Format :</legend>\r\n                                <div class=\"row\">\r\n                                    <div class=\"col-md-1\">\r\n                                        <input type=\"radio\" name=\"reportFormat\"\r\n                                            [(ngModel)]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_DETAILFORMAT\"\r\n                                            value=0>\r\n                                    </div>\r\n                                    <div calss=\"col\">\r\n                                        <label style=\"width: 200px;\" class=\"smallBoldLabel\">Summary Report</label>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <div class=\"col-md-1\">\r\n                                        <input type=\"radio\" name=\"reportFormat\"\r\n                                            [(ngModel)]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_DETAILFORMAT\"\r\n                                            value=1>\r\n                                    </div>\r\n                                    <div calss=\"col\">\r\n                                        <label style=\"width: 200px;\" class=\"smallBoldLabel\">Detail Report</label>\r\n                                    </div>\r\n                                </div>\r\n                            </fieldset>\r\n\r\n\r\n                            <div class=\"row\">\r\n                                <div class=\"col-md-1\">\r\n                                    <input type=\"checkbox\"\r\n                                        [(ngModel)]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWBATCHWISE\"\r\n                                        (change)=\"$event.target.checked?(_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWBATCHWISE=1):(_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWBATCHWISE=0)\"\r\n                                        [checked]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWBATCHWISE==1\">\r\n                                </div>\r\n                                <div calss=\"col\">\r\n                                    <label style=\"width: 200px;\" class=\"smallBoldLabel\">Show Batch\r\n                                        Wise Stock Report</label>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <!-- <div class=\"row\">\r\n                                <div class=\"col-md-1\">\r\n                                    <input type=\"checkbox\"\r\n                                        [(ngModel)]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWALTUNIT\"\r\n                                        (change)=\"$event.target.checked?(_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWALTUNIT=1):(_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWALTUNIT=0)\"\r\n                                        [checked]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWALTUNIT==1\">\r\n                                </div>\r\n                                <div class=\"col\"><label style=\"width: 200px;\" class=\"smallBoldLabel\">Show Alt\r\n                                        Unit Stock Report</label>\r\n                                </div>\r\n                            </div> -->\r\n\r\n                            <!-- <div class=\"row\">\r\n                                <div class=\"col-md-1\">\r\n                                    <input type=\"checkbox\"\r\n                                        [(ngModel)]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWDETAIL\"\r\n                                        (change)=\"$event.target.checked?(_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWDETAIL=1):(_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWDETAIL=0)\"\r\n                                        [checked]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWDETAIL==1\">\r\n                                </div>\r\n                                <div calss=\"col\">\r\n                                    <label style=\"width: 200px;\" class=\"smallBoldLabel\">Show Item\r\n                                        Detail In Report</label>\r\n                                </div>\r\n\r\n\r\n                                <div class=\"col-sm-1\"><input type=\"checkbox\"\r\n                                        [(ngModel)]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWGROUPING\"\r\n                                        (change)=\"$event.target.checked?(_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWGROUPING=1):(_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWGROUPING=0)\"\r\n                                        [checked]=\"_reportFilterService.StockSummaryAccountObj.StockSummaryAccount_SHOWGROUPING==1\">\r\n                                </div>\r\n                                <div class=\"col\"><label style=\"width: 200px;\" class=\"smallBoldLabel\">Show Item\r\n                                        Grouping Hierarchy</label>\r\n                                </div>\r\n                            </div> -->\r\n                        </div>\r\n\r\n\r\n                        <!-- Right column-->\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n                    <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n                    <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n                </div>\r\n            </div>\r\n            <!-- Filter Ends -->\r\n            <!-- Modal Ends -->\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n<generic-popup-grid #genericGridWarehouse [popupsettings]=\"gridPopupSettingsForWarehouse\"\r\n    (onItemDoubleClick)=\"dblClickWarehouseSelect($event)\">\r\n</generic-popup-grid>\r\n\r\n<generic-popup-grid #genericGridProduct [popupsettings]=\"gridPopupSettingsForProduct\"\r\n    (onItemDoubleClick)=\"dblClickProductSelect($event)\">\r\n</generic-popup-grid>\r\n\r\n<generic-popup-grid #genericGridBrand [popupsettings]=\"gridPopupSettingsForBrand\"\r\n    (onItemDoubleClick)=\"dblClickBrandSelect($event)\">\r\n</generic-popup-grid>\r\n\r\n<generic-popup-grid #genericGridSupplier [popupsettings]=\"gridPopupSettingsForSupplier\"\r\n    (onItemDoubleClick)=\"dblClickSupplierSelect($event)\">\r\n</generic-popup-grid>"

/***/ }),

/***/ 1758:
/***/ (function(module, exports) {

module.exports = "<div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-12 col-md-12\">\r\n            <div style=\"background-color : #ffffff;width: 105%;\">\r\n\r\n                <div class=\"row\">\r\n                    <div class=\"modal-header\" style=\"border:0px;\">\r\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n                        <h4 class=\"modal-title\" style=\"padding-left: 20px;\">Sales Valuation Report</h4>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"row\" style=\"margin-top: -2%;\">\r\n                    <div class=\"row col-md-12\" style=\"padding-top: 2%;\">\r\n                        <div class=\"col-md-6\" style=\"padding-left: 30px;\">\r\n                            <fieldset>\r\n                                <legend style=\"font-size:11px;font-weight: bold; width:auto\">Date Range Selection :\r\n                                </legend>\r\n                                <table>\r\n                                    <tr>\r\n                                        <td><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>\r\n                                            <label class=\"smallBoldLabel\"><input type=\"date\"\r\n                                                    style=\"width:152px; min-width:50%;\" placeholder=\"Year Start Date\"\r\n                                                    [(ngModel)]=\"_reportFilterService.StockValuationAccountObj.StockValuationAccount_DATE1\"\r\n                                                    (change)=\"changeEntryDate($event.target.value,'AD')\"></label>\r\n                                        </td>\r\n                                        <td>\r\n                                            <nepali-date-picker name=\"nepaliDatefrom\" [id]=\"'nepaliDatefrom'\"\r\n                                                (change)=\"changeEntryDate($event.detail.value,'BS')\" [label]=\"'From'\"\r\n                                                [(ngModel)]=\"_reportFilterService.StockValuationAccountObj.StockValuationAccount_BSDATE1\">\r\n                                            </nepali-date-picker>\r\n                                        </td>\r\n                                    </tr>\r\n                                </table>\r\n                            </fieldset>\r\n\r\n                            <fieldset>\r\n                                <legend class=\"legend-class\">Report Type :</legend>\r\n                                <div class=\"row\">\r\n                                    <div class=\"col-md-1\">\r\n                                        <input type=\"radio\" value=0\r\n                                            [(ngModel)]=\"_reportFilterService.StockValuationAccountObj.StockValuationAccount_SHOWDETAIL\">\r\n                                    </div>\r\n                                    <div calss=\"col\">\r\n                                        <label style=\"width: 200px;\" class=\"smallBoldLabel\">Summary Report</label>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <div class=\"col-md-1\">\r\n                                        <input type=\"radio\" value=1\r\n                                            [(ngModel)]=\"_reportFilterService.StockValuationAccountObj.StockValuationAccount_SHOWDETAIL\">\r\n                                    </div>\r\n                                    <div calss=\"col\">\r\n                                        <label style=\"width: 200px;\" class=\"smallBoldLabel\">Detail Report</label>\r\n                                    </div>\r\n                                </div>\r\n                            </fieldset>\r\n\r\n                        </div>\r\n                        <div class=\"col-md-6\">\r\n                            <fieldset>\r\n                                <legend>Product:</legend>\r\n                                <input type=\"text\" class=\"form-control\"\r\n                                    [(ngModel)]=\"_reportFilterService.StockValuationAccountObj.StockValuationAccount_ITEM\"\r\n                                    placeholder=\"Press Enter or Tab for Product\"\r\n                                    (keydown.Tab)=\"ProductEnterClicked($event)\"\r\n                                    (keydown.enter)=\"ProductEnterClicked($event)\">\r\n\r\n                            </fieldset>\r\n\r\n                        </div>\r\n\r\n\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n                    <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n                    <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n                </div>\r\n            </div>\r\n            <!-- Filter Ends -->\r\n            <!-- Modal Ends -->\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<generic-popup-grid #genericGridProduct [popupsettings]=\"gridPopupSettingsForProduct\"\r\n    (onItemDoubleClick)=\"dblClickProductSelect($event)\">\r\n</generic-popup-grid>\r\n"

/***/ }),

/***/ 1759:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .input-text{\r\n        width : 100%;\r\n        /* height: 30px !important; */\r\n        font-weight: bold;\r\n    }\r\n    .td-class{\r\n        border: none !important;\r\n    }\r\n    .date-input{\r\n        width: 93%;\r\n        font-size: 12px !important;\r\n        height: 30px !important;\r\n    }\r\n      @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .report-height{\r\n        height:52vh; \r\n        overflow:auto;\r\n    }\r\n    }\r\n    @media screen and (max-width:767px) {\r\n        .smallBoldLabel{\r\n            width: auto !important;\r\n        }\r\n         \r\n        \r\n    }\r\n</style>\r\n<div  class=\"container report-container\" style=\"background-color : #ffffff; padding :1%; height : auto;  \">\r\n    <div class=\"row\">\r\n        <div class=\"modal-header\" style=\"width : 100%; margin : 0px auto;\">\r\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n            <h4 class=\"modal-title\">Sub Ledger - Summary Report</h4>\r\n        </div>\r\n        <div class=\"col-md-12\" style=\"padding-top: 2%; height:52vh; overflow:auto;\">\r\n            <!-- Left Column -->\r\n            <div class=\"col-md-6\">\r\n\r\n                <fieldset>\r\n                    <legend style=\"font-size:11px;font-weight: bold; width:auto;margin-bottom: -4px;\">Date Range Selection :</legend>\r\n                    <table>\r\n                        <tr>\r\n                            <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                            <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td class=\"td-class\">\r\n                                    <input type=\"date\" class=\"date-input form-control\"\r\n                                        placeholder=\"Year Start Date\"\r\n                                        [(ngModel)]=\"_reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DATE1\"\r\n                                        (change)=\"changeEntryDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                            </td>\r\n                            <td class=\"td-class\">\r\n                                    <input type=\"date\" class=\"date-input form-control\"\r\n                                        placeholder=\"Year Start Date\"\r\n                                        [(ngModel)]=\"_reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DATE2\"\r\n                                        (change)=\"changeEndDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td class=\"td-class\">\r\n                              <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                                            (change)=\"changeEntryDate($event.detail.value,'BS')\"\r\n                                            [label]=\"'From'\"\r\n                                            [(ngModel)]=\"_reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_BSDATE1\">\r\n                                          </nepali-date-picker>\r\n                                     <!-- <input id=\"nepaliDate\"\r\n                                    style=\"text-align:center;\"\r\n                                    class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                        [(ngModel)]=\"_reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_BSDATE1\"\r\n                                        type=\"text\" (change)=\"changeEntryDate($event.target.value,'BS')\"\r\n                                        placeholder=\"yyyy-mm-dd\" /> -->\r\n\r\n                            </td>\r\n                            <td class=\"td-class\">\r\n                              <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDateTo'\"\r\n                              (change)=\"changeEndDate($event.detail.value,'BS')\"\r\n                              [label]=\"'To'\"\r\n                              [(ngModel)]=\"_reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_BSDATE2\">\r\n                            </nepali-date-picker>\r\n                                    <!-- <input id=\"nepaliDate\" style=\"text-align:center;\"\r\n                                    class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                        [(ngModel)]=\"_reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_BSDATE2\"\r\n                                        type=\"text\" (change)=\"changeEndDate($event.target.value,'BS')\"\r\n                                        placeholder=\"yyyy-mm-dd\" /> -->\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </fieldset>\r\n\r\n                <fieldset>\r\n                    <legend>Division Selection:</legend>\r\n                    <select [(ngModel)]=\"_reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_DIV\" style=\"height: 30px !important;\"\r\n                    class=\"form-control input-text\">\r\n                    <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL</option>\r\n                        <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                            {{ div.NAME }}\r\n                        </option>\r\n                    </select>\r\n                </fieldset>\r\n\r\n                <fieldset>\r\n                    <legend>Cost Center:</legend>\r\n                    <select [(ngModel)]=\"_reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_CostCenter\"\r\n                    style=\"height: 30px !important;\"\r\n                    class=\"form-control input-text\">\r\n                        <option value=\"%\"> </option>\r\n                        <option *ngFor=\"let i of CostcenterList\" value={{i.CCID}}>{{i.COSTCENTERNAME}}\r\n                        </option>\r\n                    </select>\r\n                </fieldset>\r\n\r\n            </div>\r\n            <!-- Right Column -->\r\n            <div class=\"col-md-6\">\r\n                <fieldset>\r\n                    <legend>Main Ledger Selection :</legend>\r\n                    <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\" [(ngModel)]=\"_reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_ACCNAME\"\r\n                        placeholder=\"Press Enter or Tab for Account List\" (keydown.Tab)=\"AccountEnterClicked($event)\"\r\n                        (keydown.enter)=\"AccountEnterClicked($event)\">\r\n                </fieldset>\r\n\r\n                <!-- <fieldset>\r\n                    <legend>Sub Ledger Selection :</legend>\r\n                    <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\" [(ngModel)]=\"_reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_SL_ACNAME\"\r\n                        placeholder=\"Press Enter or Tab for Account List\" (keydown.Tab)=\"SubLedgerEnterClicked($event)\"\r\n                        (keydown.enter)=\"SubLedgerEnterClicked($event)\">\r\n                </fieldset> -->\r\n\r\n                <!-- <fieldset style=\"padding-bottom: 5px;\">\r\n                    <legend>Report Option</legend>\r\n                    <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt1\"\r\n                            [(ngModel)]=\"_reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_REPORTTYPE\" value=0\r\n                            (change)=\"checkValue()\">&nbsp;Summary Ledger Report </label>\r\n                    <div *ngIf=\"userSetting.ENABLESUBLEDGER==2\" style=\"padding-left:20px;\">\r\n                        <label *ngIf=\"showSummaryTree\" class=\"smallBoldLabel\"><input type=\"checkbox\"\r\n                                [(ngModel)]=\"_reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_SHOWSUMMARYINTREE\">&nbsp;\r\n                            Show Summary Report In Tree Format</label>\r\n                    </div>\r\n\r\n                    <label class=\"smallBoldLabel\" style=\"clear : both;\"><input type=\"radio\" name=\"BalViewOpt1\"\r\n                            [(ngModel)]=\"_reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_REPORTTYPE\" value=1\r\n                            (change)=\"checkValue()\">&nbsp;Detail Ledger Report\r\n                    </label>\r\n                    <div style=\"padding-left:20px;\">\r\n                        <label *ngIf=\"showLedgerSegregation\" class=\"smallBoldLabel\"><input type=\"checkbox\"\r\n                                [(ngModel)]=\"_reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_LEDGERSEGREGATION\">&nbsp;\r\n                            Show Sub Ledger Wise Segragated Ledger Report</label>\r\n                        </div>\r\n\r\n                </fieldset> -->\r\n                <!-- <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n                    <label class=\"smallBoldLabel\">\r\n                        <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.SubLedgerAcbaseObj.SubLedgerAcbase_SHOWNDATE\">\r\n                        Show BS Date In Report\r\n                    </label>\r\n                </div> -->\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n            <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n            <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <generic-popup-grid #genericGridSubLedger [popupsettings]=\"gridPopupSettingsForSubLedgerList\"\r\n    (onItemDoubleClick)=\"dblClickAccountSelect($event)\">\r\n</generic-popup-grid>\r\n\r\n<generic-popup-grid #genericGridSubLedgerOnly [popupsettings]=\"gridPopupSettingsForSubLedgerListOnly\"\r\n(onItemDoubleClick)=\"dblClickSubLedgerSelect($event)\">\r\n</generic-popup-grid>\r\n"

/***/ }),

/***/ 1760:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .input-text{\r\n        width : 100%;\r\n        /* height: 30px !important; */\r\n        font-weight: bold;\r\n    }\r\n    .td-class{\r\n        border: none !important;\r\n    }\r\n    .date-input{\r\n        width: 93%;\r\n        font-size: 12px !important;\r\n        height: 30px !important;\r\n    }\r\n     @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 90% !important;\r\n    }\r\n    }\r\n     @media screen and (max-width:767px) {\r\n        .smallBoldLabel{\r\n            width: auto !important;\r\n        }\r\n          /* .report-container{\r\n           width: 85% !important;\r\n    } */\r\n        \r\n    }\r\n   \r\n</style>\r\n<div  class=\"container report-container\" style=\"background-color : #ffffff; padding :1%; height : auto;  \">\r\n    <div class=\"row\">\r\n        <div class=\"modal-header\" style=\"width : 100%; margin : 0px auto;\">\r\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n            <h4 class=\"modal-title\">Sub Ledger - Ledger Report</h4>\r\n        </div>\r\n        <div class=\"col-md-12\" style=\"padding-top: 2%;height:52vh; overflow:auto;\">\r\n            <!-- Left Column -->\r\n            <div class=\"col-md-6\">\r\n\r\n                <fieldset>\r\n                    <legend style=\"font-size:11px;font-weight: bold; width:auto;margin-bottom: -4px;\">Date Range Selection :</legend>\r\n                    <table>\r\n                        <tr>\r\n                            <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                            <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td class=\"td-class\">\r\n                                    <input type=\"date\" class=\"date-input form-control\"\r\n                                        placeholder=\"Year Start Date\"\r\n                                        [(ngModel)]=\"_reportFilterService.SubLedgerObj.SubLedger_DATE1\"\r\n                                        (change)=\"changeEntryDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                            </td>\r\n                            <td class=\"td-class\">\r\n                                    <input type=\"date\" class=\"date-input form-control\"\r\n                                        placeholder=\"Year Start Date\"\r\n                                        [(ngModel)]=\"_reportFilterService.SubLedgerObj.SubLedger_DATE2\"\r\n                                        (change)=\"changeEndDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td class=\"td-class\">\r\n                              <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                              (change)=\"changeEntryDate($event.detail.value,'BS')\"\r\n                              [label]=\"'From'\"\r\n                              [(ngModel)]=\"_reportFilterService.SubLedgerObj.SubLedger_BSDATE1\">\r\n                            </nepali-date-picker>\r\n                                     <!-- <input id=\"nepaliDate\"\r\n                                    style=\"text-align:center;\"\r\n                                    class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                        [(ngModel)]=\"_reportFilterService.SubLedgerObj.SubLedger_BSDATE1\"\r\n                                        type=\"text\" (change)=\"changeEntryDate($event.target.value,'BS')\"\r\n                                        placeholder=\"yyyy-mm-dd\" /> -->\r\n\r\n                            </td>\r\n                            <td class=\"td-class\">\r\n                              <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDateTo'\"\r\n                              (change)=\"changeEndDate($event.detail.value,'BS')\"\r\n                              [label]=\"'To'\"\r\n                              [(ngModel)]=\"_reportFilterService.SubLedgerObj.SubLedger_BSDATE2\">\r\n                            </nepali-date-picker>\r\n                                    <!-- <input id=\"nepaliDate\" style=\"text-align:center;\"\r\n                                    class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                        [(ngModel)]=\"_reportFilterService.SubLedgerObj.SubLedger_BSDATE2\"\r\n                                        type=\"text\" (change)=\"changeEndDate($event.target.value,'BS')\"\r\n                                        placeholder=\"yyyy-mm-dd\" /> -->\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </fieldset>\r\n\r\n                <fieldset>\r\n                    <legend>Division Selection:</legend>\r\n                    <select [(ngModel)]=\"_reportFilterService.SubLedgerObj.SubLedger_DIV\" style=\"height: 30px !important;\"\r\n                    class=\"form-control input-text\">\r\n                    <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL</option>\r\n                        <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                            {{ div.NAME }}\r\n                        </option>\r\n                    </select>\r\n                </fieldset>\r\n\r\n                <fieldset *ngIf=\"_reportFilterService.SubLedgerObj.SubLedger_HIDECOSTCENTER == 0\">\r\n                    <legend>Cost Center:</legend>\r\n                    <select [(ngModel)]=\"_reportFilterService.SubLedgerObj.SubLedger_CostCenter\"\r\n                    style=\"height: 30px !important;\"\r\n                    class=\"form-control input-text\">\r\n                        <option value=\"%\"> </option>\r\n                        <option *ngFor=\"let i of CostcenterList\" value={{i.CCID}}>{{i.COSTCENTERNAME}}\r\n                        </option>\r\n                    </select>\r\n                </fieldset>\r\n\r\n            </div>\r\n            <!-- Right Column -->\r\n            <div class=\"col-md-6\">\r\n                <fieldset>\r\n                    <legend>Sub Ledger Selection :</legend>\r\n                    <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\" [(ngModel)]=\"_reportFilterService.SubLedgerObj.SubLedger_SL_ACNAME\"\r\n                        placeholder=\"Press Enter or Tab for Account List\" (keydown.Tab)=\"SubLedgerEnterClicked($event)\"\r\n                        (keydown.enter)=\"SubLedgerEnterClicked($event)\">\r\n                </fieldset>\r\n\r\n                <fieldset>\r\n                    <legend>Main Ledger Selection :</legend>\r\n                    <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\" [(ngModel)]=\"_reportFilterService.SubLedgerObj.SubLedger_ACCNAME\"\r\n                        placeholder=\"Press Enter or Tab for Account List\" (keydown.Tab)=\"AccountEnterClicked($event)\"\r\n                        (keydown.enter)=\"AccountEnterClicked($event)\">\r\n                </fieldset>\r\n\r\n\r\n\r\n                <!-- <fieldset style=\"padding-bottom: 5px;\">\r\n                    <legend>Report Option</legend>\r\n                    <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt1\"\r\n                            [(ngModel)]=\"_reportFilterService.SubLedgerObj.SubLedger_REPORTTYPE\" value=0\r\n                            (change)=\"checkValue()\">&nbsp;Summary Ledger Report </label>\r\n                    <div *ngIf=\"userSetting.ENABLESUBLEDGER==2\" style=\"padding-left:20px;\">\r\n                        <label *ngIf=\"showSummaryTree\" class=\"smallBoldLabel\"><input type=\"checkbox\"\r\n                                [(ngModel)]=\"_reportFilterService.SubLedgerObj.SubLedger_SHOWSUMMARYINTREE\">&nbsp;\r\n                            Show Summary Report In Tree Format</label>\r\n                    </div>\r\n\r\n                    <label class=\"smallBoldLabel\" style=\"clear : both;\"><input type=\"radio\" name=\"BalViewOpt1\"\r\n                            [(ngModel)]=\"_reportFilterService.SubLedgerObj.SubLedger_REPORTTYPE\" value=1\r\n                            (change)=\"checkValue()\">&nbsp;Detail Ledger Report\r\n                    </label>\r\n                    <div style=\"padding-left:20px;\">\r\n                        <label *ngIf=\"showLedgerSegregation\" class=\"smallBoldLabel\"><input type=\"checkbox\"\r\n                                [(ngModel)]=\"_reportFilterService.SubLedgerObj.SubLedger_LEDGERSEGREGATION\">&nbsp;\r\n                            Show Sub Ledger Wise Segragated Ledger Report</label>\r\n                        </div>\r\n\r\n                </fieldset> -->\r\n                <div style=\"display:flex;\">\r\n                        <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n                            <label class=\"smallBoldLabel\">\r\n                                <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.SubLedgerObj.SubLedger_SHOWNDATE\">\r\n                                Show BS Date In Report\r\n                            </label>\r\n                        </div>\r\n                        <div>\r\n                            <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n                                <label class=\"smallBoldLabel\" style=\"width:225px; margin-left:4px;\">\r\n                                    <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.SubLedgerObj.SubLedger_HIDECOSTCENTER\"\r\n                                    (change)=\"$event.target.checked?(_reportFilterService.SubLedgerObj.SubLedger_HIDECOSTCENTER=1):(_reportFilterService.SubLedgerObj.SubLedger_HIDECOSTCENTER=0)\"\r\n                            [checked]=\"_reportFilterService.SubLedgerObj.SubLedger_HIDECOSTCENTER == 1\" >\r\n                                Hide Cost Center\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n                <div style=\"display:flex;\">\r\n                        <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n                            <label class=\"smallBoldLabel\" style=\"width: 210px;\">\r\n                                <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.SubLedgerObj.SubLedger_HIDENARATION\" \r\n                                (change)=\"$event.target.checked?(_reportFilterService.SubLedgerObj.SubLedger_HIDENARATION=1):(_reportFilterService.SubLedgerObj.SubLedger_HIDENARATION=0)\"\r\n                                [checked]=\"_reportFilterService.SubLedgerObj.SubLedger_HIDENARATION == 1\">\r\n                                Hide Narration In Ledger Report\r\n                            </label>\r\n                        </div>\r\n\r\n                        \r\n                </div>\r\n                <div style=\"display:flex;\">\r\n                <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\" >\r\n                    <label class=\"smallBoldLabel\" style=\"width: 203px;\">\r\n                        <input type=\"checkbox\" [(ngModel)]=\"_reportFilterService.SubLedgerObj.IGNOREOPPOSITAC\"\r\n                        (change)=\"$event.target.checked?(_reportFilterService.SubLedgerObj.IGNOREOPPOSITAC=1):(_reportFilterService.SubLedgerObj.IGNOREOPPOSITAC=0)\"\r\n                        [checked]=\"_reportFilterService.SubLedgerObj.IGNOREOPPOSITAC == 1\">\r\n                        Hide Opposite A/C in Ledger Report\r\n                    </label>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n            <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n            <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <generic-popup-grid #genericGridSubLedger [popupsettings]=\"gridPopupSettingsForSubLedgerList\"\r\n    (onItemDoubleClick)=\"dblClickAccountSelect($event)\">\r\n</generic-popup-grid>\r\n\r\n<generic-popup-grid #genericGridSubLedgerOnly [popupsettings]=\"gridPopupSettingsForSubLedgerListOnly\"\r\n(onItemDoubleClick)=\"dblClickSubLedgerSelect($event)\">\r\n</generic-popup-grid>\r\n"

/***/ }),

/***/ 1761:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    #treediv {\r\n        overflow-y: scroll;\r\n        height: 190px;\r\n    }\r\n\r\n    .action-btn {\r\n        width: 80%;\r\n        height: 80%;\r\n        display: block;\r\n        margin: 0 auto;\r\n        background-color: inherit;\r\n        border: none;\r\n    }\r\n    .input-text{\r\n        width : 100%;\r\n        /* height: 30px !important; */\r\n        font-weight: bold;\r\n    }\r\n    .td-class{\r\n        border: none !important;\r\n    }\r\n    .date-input{\r\n        width: 93%;\r\n        font-size: 12px !important;\r\n        height: 30px !important;\r\n    }\r\n      @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    }\r\n</style>\r\n\r\n<div class=\"container report-container\">\r\n    <div class=\"row\">\r\n        <!-- Filter Starts -->\r\n        <div class=\"col-12 col-md-12\">\r\n            <div style=\"background-color : #ffffff;\">\r\n                <div class=\"row\">\r\n                    <div class=\"modal-header\" style=\"border:0px;\">\r\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\"\r\n                            (click)=\"closeReportBox()\">&times;</button>\r\n                        <h4 class=\"modal-title\" style=\"padding-left: 3%;\">Account Group Ledger Report</h4>\r\n                    </div>\r\n                    <div class=\"col-md-12\" style=\"padding-top: 2%;  height:52vh; overflow:auto;\">\r\n                        <div class=\"col-md-6\">\r\n                            <!-- <date-filters></date-filters> -->\r\n                            <fieldset>\r\n                                <legend style=\"font-size:11px;font-weight: bold; width:auto; margin-bottom: -4px;\">Date Range Selection :</legend>\r\n                                <table>\r\n                                    <tr>\r\n                                        <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                                        <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td class=\"td-class\">\r\n                                                <input type=\"date\"\r\n                                                class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                                    [(ngModel)]=\"_reportFilterService.SummaryLedgerObj.SummaryLedger_DATE1\"\r\n                                                    (change)=\"changeEntryDate($event.target.value,'AD')\"\r\n                                                    max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\"\r\n                                                    >\r\n                                        </td>\r\n                                        <td class=\"td-class\">\r\n                                                <input type=\"date\"\r\n                                                class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                                    [(ngModel)]=\"_reportFilterService.SummaryLedgerObj.SummaryLedger_DATE2\"\r\n                                                    (change)=\"changeEndDate($event.target.value,'AD')\"\r\n                                                    max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\"\r\n                                                    >\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td class=\"td-class\">\r\n                                          <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                                            (change)=\"changeEntryDate($event.detail.value,'BS')\"\r\n                                            [label]=\"'From'\"\r\n                                            [(ngModel)]=\"_reportFilterService.SummaryLedgerObj.SummaryLedger_BSDATE1\">\r\n                                          </nepali-date-picker>\r\n                                                <!-- <input id=\"nepaliDate\"\r\n                                                    style=\"text-align:center;\"\r\n                                                    class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                                    [(ngModel)]=\"_reportFilterService.SummaryLedgerObj.SummaryLedger_BSDATE1\" type=\"text\"\r\n                                                    (change)=\"changeEntryDate($event.target.value,'BS')\"\r\n                                                    placeholder=\"yyyy-mm-dd\" />                             -->\r\n                                        </td>\r\n                                        <td class=\"td-class\">\r\n                                          <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDateTo'\"\r\n                                            (change)=\"changeEndDate($event.detail.value,'BS')\"\r\n                                            [label]=\"'To'\"\r\n                                            [(ngModel)]=\"_reportFilterService.SummaryLedgerObj.SummaryLedger_BSDATE2\">\r\n                                          </nepali-date-picker>\r\n                                                <!-- <input id=\"nepaliDate\" style=\"text-align:center;\"\r\n                                                    class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                                    [(ngModel)]=\"_reportFilterService.SummaryLedgerObj.SummaryLedger_BSDATE2\" type=\"text\"\r\n                                                    (change)=\"changeEndDate($event.target.value,'BS')\"\r\n                                                    placeholder=\"yyyy-mm-dd\" /> -->\r\n                                        </td>\r\n                                    </tr>\r\n                                </table>\r\n                            </fieldset>\r\n\r\n                            <fieldset>\r\n                                <legend>Division Selection:</legend>\r\n                                <select [(ngModel)]=\"_reportFilterService.SummaryLedgerObj.SummaryLedger_DIV\" style=\"height: 30px !important;\"\r\n                                class=\"form-control input-text\" >\r\n                                    <option value=\"%\"  *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL</option>\r\n                                    <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                                        {{ div.NAME }}\r\n                                    </option>\r\n                                </select>\r\n                            </fieldset>\r\n                            <fieldset>\r\n                                <legend>Cost Center:</legend>\r\n                                <select [(ngModel)]=\"_reportFilterService.SummaryLedgerObj.SummaryLedger_CostCenter\"\r\n                                style=\"height: 30px !important;\"\r\n                                class=\"form-control input-text\" >\r\n                                    <option value=\"%\"> </option>\r\n                                    <option *ngFor=\"let i of CostcenterList\" value={{i.CCID}}>{{i.COSTCENTERNAME}}\r\n                                    </option>\r\n                                </select>\r\n                            </fieldset>\r\n                        </div>\r\n                        <!-- The One With Tree Part-->\r\n                        <div class=\"col-md-6 filter-part\">\r\n                            <div class=\"col-md-12\">\r\n                                <label class=\"smallBoldLabel\" style=\"padding-right:15px;\">Summary Report By:</label>\r\n                                <select [(ngModel)]=\"_reportFilterService.SummaryLedgerObj.SummaryLedger_ReportType\"\r\n                                    (change)=\"checkValue()\" style=\"height: 30px !important;\"\r\n                                    class=\"form-control input-text\" >\r\n                                    <option value=0>A/C Group Wise</option>\r\n                                    <option value=2>Cost Center Wise</option>\r\n                                </select>\r\n                            </div>\r\n                            <fieldset *ngIf=\"showTree\">\r\n                                <legend><label class=\"smallBoldLabel\">&nbsp;A/C Group Wise</label>\r\n                                </legend>\r\n                                <div id=treediv>\r\n                                    <div>\r\n                                        <div class=\"col-md-6\">\r\n                                            <label class=\"smallBoldLabel\">Account Ledger</label>\r\n                                        </div>\r\n                                        <div class=\"col-md-6\">\r\n                                            <input name=\"filter\" #filter (keyup)=\"filterNodes(filter.value, tree)\"\r\n                                                placeholder=\"&nbsp;Search Account\" class=\"filterclass form-control\" style=\"font-weight: bold;\"/>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"col-md-12\"\r\n                                        style=\" overflow: auto; border: black;border-width: 2px;margin:10px;font-size:10px;\">\r\n                                        <Tree #tree [nodes]=\"nodes \" [focused]=\"true \"\r\n                                            [options]=\"customTemplateStringOptions\" (onEvent)=\"onEvent($event) \"\r\n                                            (onActivate)=\"onselect(tree,$event)\">\r\n                                            <ng-template #treeNodeTemplate let-node>\r\n                                                <span *ngIf=\"node.data.TYPE=='G' && node.children.length>0\"\r\n                                                    title=\"{{node.data.subTitle}} \" [contextMenu]=\"myContextMenu\r\n                                                                      \" [contextMenuSubject]=\"node.data \"\r\n                                                    style=\"margin-left:24px\"><img src=\"../../../assets/img/Folder.jpg\"\r\n                                                        alt=\"Group\" height=\"20\" width=\"20\" style=\"margin-top:-2px\">\r\n                                                    {{ node.data.ACNAME }}{{ childrenCount(node) }}</span>\r\n                                                <span *ngIf=\"node.data.TYPE=='G' && node.children.length==0\"\r\n                                                    title=\"{{node.data.subTitle}} \" [contextMenu]=\"myContextMenu\r\n                                                                      \" [contextMenuSubject]=\"node.data \"><img\r\n                                                        src=\"../../../assets/img/Folder.jpg\" alt=\"Group\" height=\"20\"\r\n                                                        width=\"20\" style=\"margin-top:-2px\">\r\n                                                    {{ node.data.ACNAME }}{{ childrenCount(node) }}</span>\r\n                                                <span *ngIf=\"node.data.TYPE=='A'\" title=\"{{node.data.subTitle}} \"\r\n                                                    [contextMenu]=\"myContextMenu\r\n                                                                      \" [contextMenuSubject]=\"node.data \"><img\r\n                                                        src=\"../../../assets/img/File.png\" alt=\"ListItem\" height=\"20\"\r\n                                                        width=\"15\" style=\"margin-top:-2px\">\r\n                                                    {{ node.data.ACNAME }}</span>\r\n                                            </ng-template>\r\n                                            <ng-template #loadingTemplate>Loading, please hold....</ng-template>\r\n                                        </Tree>\r\n                                    </div>\r\n                                </div>\r\n                            </fieldset>\r\n                            <!-- The One With Tree Part End-->\r\n\r\n                            <div *ngIf=\"showCCtable\">\r\n                                <!-- <costcenter-filters></costcenter-filters> -->\r\n                                <fieldset>\r\n                                    <legend><label class=\"smallBoldLabel\">&nbsp;Cost Center Wise</label></legend>\r\n                                    <div>\r\n                                        <div class=\"col-md-10\">\r\n                                            <select [(ngModel)]=\"_reportFilterService.SummaryLedgerObj.CCENTER\"\r\n                                            style=\"height: 30px !important;\"\r\n                                            class=\"form-control input-text\">\r\n                                                <option *ngFor=\"let i of CostcenterList\" [ngValue]=\"i\">\r\n                                                    {{i.COSTCENTERNAME}}\r\n                                                </option>\r\n                                            </select>\r\n                                        </div>\r\n                                        <div class=\"col-md-2\">\r\n                                            <button type=\"button\" class=\"btn btn-info\" *ngIf=\"showMultipleCC\"\r\n                                                (click)=\"addCostcenterToList()\">Add</button>\r\n                                        </div>\r\n                                        <div class=\"col-md-12\" *ngIf=\"showMultipleCC\">\r\n                                            <table style=\"height:150px;\">\r\n                                                <tr class=\"smallBoldLabel\">\r\n                                                    <th style=\"width:3px;font-weight: bold;\">S.No.</th>\r\n                                                    <th style=\"width:10px;font-weight: bold;\">Cost Center</th>\r\n                                                    <th style=\"width:4px;font-weight: bold;\">Action</th>\r\n                                                </tr>\r\n                                                <tr *ngFor=\"let data of _reportFilterService.SummaryLedgerObj.SummaryLedger_multipleCostcenter;let i = index\"\r\n                                                    class=\"smallBoldLabel\">\r\n                                                    <td style=\"width:3px;\">{{ i + 1 }}</td>\r\n                                                    <td style=\"width:10px;\">{{data.COSTCENTERNAME}}</td>\r\n                                                    <td style=\"width:4px;\">\r\n                                                        <button type=\"button\" class=\"action-btn\"\r\n                                                            (click)=\"deleteCostcenter(i)\">Delete</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div *ngIf=\"_reportFilterService.showAllcontactsInCC\" class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n                                        <label class=\"smallBoldLabel\">\r\n                                            <input type=\"checkbox\"\r\n                                                [(ngModel)]=\"_reportFilterService.SummaryLedgerObj.SummaryLedger_showAllContacts\"\r\n                                                (change)=\"checkCostCnterValue()\">\r\n                                            Show All Cost Center\r\n                                        </label>\r\n                                    </div>\r\n                                </fieldset>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n                        <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n                        <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\"\r\n                            class=\"btn btn-info\">Close</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <!-- Filter Ends -->\r\n    </div>\r\n</div>\r\n"

/***/ }),

/***/ 1762:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    #treediv {\r\n        overflow-y: scroll;\r\n        height: 190px;\r\n    }\r\n\r\n    .action-btn {\r\n        width: 80%;\r\n        height: 80%;\r\n        display: block;\r\n        margin: 0 auto;\r\n        background-color: inherit;\r\n        border: none;\r\n    }\r\n    .input-text{\r\n        width : 100%;\r\n        /* height: 30px !important; */\r\n        font-weight: bold;\r\n    }\r\n    .td-class{\r\n        border: none !important;\r\n    }\r\n    .date-input{\r\n        width: 93%;\r\n        font-size: 12px !important;\r\n        height: 30px !important;\r\n    }\r\n\r\n    @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    }\r\n     @media screen and (max-width:767px) {\r\n        .smallBoldLabel{\r\n            width: auto !important;\r\n        }\r\n          /* .report-container{\r\n           width: 85% !important;\r\n    } */\r\n        \r\n    }\r\n   \r\n</style>\r\n\r\n<div class=\"container report-container\">\r\n    <div class=\"row\">\r\n        <!-- Filter Starts -->\r\n        <div class=\"col-12 col-md-12\">\r\n            <div style=\"background-color : #ffffff;\">\r\n                <div class=\"row\">\r\n                    <div class=\"modal-header\" style=\"border:0px;\">\r\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\"\r\n                            (click)=\"closeReportBox()\">&times;</button>\r\n                        <h4 class=\"modal-title\" style=\"padding-left: 3%;\">Party Group Ledger Report</h4>\r\n                    </div>\r\n                    <div class=\"col-md-12\" style=\"padding-top: 2%; height:52vh; overflow:auto;\">\r\n                        <div class=\"col-md-6\">\r\n                            <!-- <date-filters></date-filters> -->\r\n                            <fieldset>\r\n                                <legend style=\"font-size:11px;font-weight: bold; width:auto; margin-bottom: -4px;\">Date Range Selection :</legend>\r\n                                <table>\r\n                                    <tr>\r\n                                        <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                                        <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td class=\"td-class\">\r\n                                            <!-- <label class=\"smallBoldLabel\"> -->\r\n                                                <input type=\"date\"\r\n                                                class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                                    [(ngModel)]=\"_reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DATE1\"\r\n                                                    (change)=\"changeEntryDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                                                <!-- </label> -->\r\n                                        </td>\r\n                                        <td class=\"td-class\">\r\n                                            <!-- <label class=\"smallBoldLabel\"> -->\r\n                                                <input type=\"date\"\r\n                                                class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                                    [(ngModel)]=\"_reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DATE2\"\r\n                                                    (change)=\"changeEndDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                                                <!-- </label> -->\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td class=\"td-class\">\r\n                                            <!-- <label class=\"smallBoldLabel\"> -->\r\n                                            <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                                            (change)=\"changeEntryDate($event.detail.value,'BS')\"\r\n                                            [label]=\"'From'\"\r\n                                            [(ngModel)]=\"_reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_BSDATE1\">\r\n                                          </nepali-date-picker>\r\n                                                 <!-- <input id=\"nepaliDate\"\r\n                                                 style=\"text-align:center;\"\r\n                                                 class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                                    [(ngModel)]=\"_reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_BSDATE1\" type=\"text\"\r\n                                                    (change)=\"changeEntryDate($event.target.value,'BS')\"\r\n                                                    placeholder=\"yyyy-mm-dd\" /> -->\r\n                                            <!-- </label> -->\r\n\r\n                                        </td>\r\n                                        <td class=\"td-class\">\r\n                                            <!-- <label class=\"smallBoldLabel\"> -->\r\n                                              <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDateTo'\"\r\n                                              (change)=\"changeEndDate($event.detail.value,'BS')\"\r\n                                              [label]=\"'To'\"\r\n                                              [(ngModel)]=\"_reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_BSDATE2\">\r\n                                            </nepali-date-picker>\r\n                                                <!-- <input id=\"nepaliDate\" style=\"text-align:center;\"\r\n                                                class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                                    [(ngModel)]=\"_reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_BSDATE2\" type=\"text\"\r\n                                                    (change)=\"changeEndDate($event.target.value,'BS')\"\r\n                                                    placeholder=\"yyyy-mm-dd\" /> -->\r\n                                            <!-- </label> -->\r\n                                        </td>\r\n                                    </tr>\r\n                                </table>\r\n                            </fieldset>\r\n                            <!-- <division-list></division-list> -->\r\n                            <fieldset>\r\n                                <legend>Division Selection:</legend>\r\n                                <select [(ngModel)]=\"_reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_DIV\" style=\"height: 30px !important;\"\r\n                                class=\"form-control input-text\" [disabled]=\"isUserwiseDivision == 1\">\r\n                                    <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL</option>\r\n                                    <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                                        {{ div.NAME }}\r\n                                    </option>\r\n                                </select>\r\n                            </fieldset>\r\n                            <!-- <costcenter-list></costcenter-list> -->\r\n                            <fieldset>\r\n                                <legend>Cost Center:</legend>\r\n                                <select [(ngModel)]=\"_reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_CostCenter\"\r\n                                style=\"height: 30px !important;\"\r\n                                class=\"form-control input-text\">\r\n                                    <option value=\"%\"> </option>\r\n                                    <option *ngFor=\"let i of CostcenterList\" value={{i.CCID}}>{{i.COSTCENTERNAME}}\r\n                                    </option>\r\n                                </select>\r\n                            </fieldset>\r\n                        </div>\r\n                        <!-- The One With Tree Part-->\r\n                        <div class=\"col-md-6 filter-part\">\r\n                            <div class=\"col-md-12\">\r\n                                <label class=\"smallBoldLabel\" style=\"padding-right:15px;\">Summary Report By:</label>\r\n                                <select [(ngModel)]=\"_reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_ReportType\"\r\n                                    (change)=\"checkValue()\" style=\"height: 30px !important;\"\r\n                                    class=\"form-control input-text\">\r\n                                    <option value=0>Party Group Wise</option>\r\n                                    <option value=1>Area Wise</option>\r\n                                    <option value=2>Cost Center Wise</option>\r\n                                </select>\r\n                            </div>\r\n                            <fieldset *ngIf=\"showTree\">\r\n                                <legend><label class=\"smallBoldLabel\">&nbsp;Party Group Wise</label>\r\n                                </legend>\r\n                                <div id=treediv>\r\n                                    <div>\r\n                                        <div class=\"col-md-6\">\r\n                                            <label class=\"smallBoldLabel\">Party Ledger</label>\r\n                                        </div>\r\n                                        <div class=\"col-md-6\">\r\n                                            <input name=\"filter\" #filter (keyup)=\"filterNodes(filter.value, tree)\"\r\n                                                placeholder=\"&nbsp; Search Party\" class=\"filterclass form-control\" style=\"font-weight: bold;\">\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"col-md-12\"\r\n                                        style=\" overflow: auto; border: black;border-width: 2px;margin:10px;font-size:10px;\">\r\n                                        <Tree #tree [nodes]=\"nodes\" [focused]=\"true\"\r\n                                            [options]=\"customTemplateStringOptions\" (onEvent)=\"onEvent($event)\"\r\n                                            (onActivate)=\"onselect(tree,$event)\">\r\n                                            <ng-template #treeNodeTemplate let-node>\r\n                                                <!-- <span title=\"{{node.data.subTitle}}\" [contextMenu]=\"myContextMenu\" [contextMenuSubject]=\"node.data\">{{ node.data.ACNAME }}{{ childrenCount(node) }}</span> -->\r\n                                                <span title=\"{{node.data.subTitle}} \" [contextMenu]=\"myContextMenu\"\r\n                                                    [contextMenuSubject]=\"node.data \" style=\"margin-left:24px\"><img\r\n                                                        src=\"../../../assets/img/Folder.jpg\" alt=\"Group\" height=\"20\"\r\n                                                        width=\"20\" style=\"margin-top:-2px\">\r\n                                                    {{ node.data.ACNAME }}{{ childrenCount(node) }}\r\n                                                </span>\r\n                                            </ng-template>\r\n                                            <ng-template #loadingTemplate>Loading, please hold....</ng-template>\r\n                                        </Tree>\r\n                                    </div>\r\n                                </div>\r\n                            </fieldset>\r\n                            <!-- The One With Tree Part End-->\r\n\r\n                            <div *ngIf=\"showAreaTable\">\r\n                                <fieldset>\r\n                                    <legend><label class=\"smallBoldLabel\">&nbsp;Area Wise</label></legend>\r\n                                    <div>\r\n                                        <div class=\"col-md-10\">\r\n                                            <select [(ngModel)]=\"_reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_AreaWise\"\r\n                                            style=\"height: 30px !important;\"\r\n                                            class=\"form-control input-text\">\r\n                                                <!-- <option value=\"%\">ALL</option> -->\r\n                                                <option *ngFor=\"let i of AreaList\" [ngValue]=\"i\">\r\n                                                    {{i.AREA_NAME}}\r\n                                                </option>\r\n                                            </select>\r\n                                        </div>\r\n                                        <div class=\"col-md-2\">\r\n                                            <button type=\"button\" class=\"btn btn-info\"\r\n                                                (click)=\"addAreaToList()\">Add</button>\r\n                                        </div>\r\n                                        <div class=\"col-md-12\">\r\n                                            <table style=\"height:170px;\">\r\n                                                <tr class=\"smallBoldLabel\">\r\n                                                    <th style=\"width:3px;font-weight: bold;\">S.No.</th>\r\n                                                    <th style=\"width:10px;font-weight: bold;\">Area</th>\r\n                                                    <th style=\"width:4px;font-weight: bold;\">Action</th>\r\n                                                </tr>\r\n                                                <tr *ngFor=\"let data of _reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_multipleAreas;let i = index\"\r\n                                                    class=\"smallBoldLabel\">\r\n                                                    <td style=\"width:3px;\">{{ i + 1 }}</td>\r\n                                                    <td style=\"width:10px;\">{{data.AREA_NAME}}</td>\r\n                                                    <td style=\"width:4px;\"> <button type=\"button\"\r\n                                                            class=\"action-btn\"\r\n                                                            (click)=\"deleteArea(i)\">Delete</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </div>\r\n                                </fieldset>\r\n                            </div>\r\n\r\n                            <div *ngIf=\"showCCtable\">\r\n                                <fieldset>\r\n                                    <legend><label class=\"smallBoldLabel\">&nbsp;Cost Center Wise</label></legend>\r\n                                    <div>\r\n                                        <div class=\"col-md-10\">\r\n                                            <select [(ngModel)]=\"_reportFilterService.SummaryPartyLedgerObj.CCENTER\"\r\n                                            style=\"height: 30px !important;\"\r\n                                            class=\"form-control input-text\">\r\n                                                <option *ngFor=\"let i of CostcenterList\" [ngValue]=\"i\">\r\n                                                    {{i.COSTCENTERNAME}}\r\n                                                </option>\r\n                                            </select>\r\n                                        </div>\r\n                                        <div class=\"col-md-2\">\r\n                                            <button type=\"button\" class=\"btn btn-info\" *ngIf=\"showMultipleCC\"\r\n                                                (click)=\"addCostcenterToList()\">Add</button>\r\n                                        </div>\r\n                                        <div class=\"col-md-12\" *ngIf=\"showMultipleCC\">\r\n                                            <table style=\"height:150px;\">\r\n                                                <tr class=\"smallBoldLabel\">\r\n                                                    <th style=\"width:3px;font-weight: bold;\">S.No.</th>\r\n                                                    <th style=\"width:10px;font-weight: bold;\">Cost Center</th>\r\n                                                    <th style=\"width:4px;font-weight: bold;\">Action</th>\r\n                                                </tr>\r\n                                                <tr *ngFor=\"let data of _reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_multipleCostcenter;let i = index\"\r\n                                                    class=\"smallBoldLabel\">\r\n                                                    <td style=\"width:3px;\">{{ i + 1 }}</td>\r\n                                                    <td style=\"width:10px;\">{{data.COSTCENTERNAME}}</td>\r\n                                                    <td style=\"width:4px;\">\r\n                                                        <button type=\"button\" class=\"action-btn\"\r\n                                                            (click)=\"deleteCostcenter(i)\">Delete</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div *ngIf=\"_reportFilterService.showAllcontactsInCC\" class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n                                        <label class=\"smallBoldLabel\">\r\n                                            <input type=\"checkbox\"\r\n                                                [(ngModel)]=\"_reportFilterService.SummaryPartyLedgerObj.SummaryPartyLedger_showAllContacts\"\r\n                                                (change)=\"checkCostCenterValue()\">\r\n                                            Show All Cost Center\r\n                                        </label>\r\n                                    </div>\r\n                                </fieldset>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n                        <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n                        <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\"\r\n                            class=\"btn btn-info\">Close</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <!-- Filter Ends -->\r\n    </div>\r\n</div>\r\n"

/***/ }),

/***/ 1763:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .input-text {\r\n        width: 100%;\r\n        /* height: 30px !important; */\r\n        font-weight: bold;\r\n    }\r\n\r\n    .td-class {\r\n        border: none !important;\r\n    }\r\n\r\n    .date-input {\r\n        width: 93%;\r\n        font-size: 12px !important;\r\n        height: 30px !important;\r\n    }\r\n      @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .report-height{\r\n        height:52vh; \r\n        overflow:auto;\r\n    }\r\n    }\r\n         @media screen and (max-width:767px) {\r\n            .smallBoldLabel{\r\n                  width: auto !important;\r\n            }\r\n            \r\n        \r\n    }\r\n</style>\r\n<div class=\"container report-container\" style=\"background-color : #ffffff; padding :1%; height : auto;  \">\r\n    <div class=\"row\">\r\n        <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n            <h4 class=\"modal-title\">TDS Report</h4>\r\n        </div>\r\n        <div class=\"col-md-12 report-height\" style=\"padding-top: 2%;\">\r\n            <!-- Left Column -->\r\n            <div class=\"col-md-6\">\r\n                <fieldset>\r\n                    <legend style=\"font-size:11px;font-weight: bold; width:auto;margin-bottom: -4px;\">Date Range\r\n                        Selection :</legend>\r\n                    <table>\r\n                        <tr>\r\n                            <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                            <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td class=\"td-class\">\r\n                                <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                    [(ngModel)]=\"_reportFilterService.TDSObj.TDS_DATE1\"\r\n                                    (change)=\"changeEntryDate($event.target.value,'AD')\"\r\n                                    max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\"\r\n                                    min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                            </td>\r\n                            <td class=\"td-class\">\r\n                                <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                    [(ngModel)]=\"_reportFilterService.TDSObj.TDS_DATE2\"\r\n                                    (change)=\"changeEndDate($event.target.value,'AD')\"\r\n                                    max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\"\r\n                                    min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td class=\"td-class\">\r\n                                <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                                    (change)=\"changeEntryDate($event.detail.value,'BS')\" [label]=\"'From'\"\r\n                                    [(ngModel)]=\"_reportFilterService.TDSObj.TDS_BSDATE1\">\r\n                                </nepali-date-picker>\r\n                            </td>\r\n                            <td class=\"td-class\">\r\n                                <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDateTo'\"\r\n                                    (change)=\"changeEndDate($event.detail.value,'BS')\" [label]=\"'To'\"\r\n                                    [(ngModel)]=\"_reportFilterService.TDSObj.TDS_BSDATE2\">\r\n                                </nepali-date-picker>\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </fieldset>\r\n\r\n                <fieldset>\r\n                    <legend>Division Selection:</legend>\r\n                    <select [(ngModel)]=\"_reportFilterService.TDSObj.TDS_DIV\" style=\"height: 30px !important;\"\r\n                        class=\"form-control input-text\">\r\n                        <option value=\"%\"\r\n                            *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL</option>\r\n                        <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                            {{ div.NAME }}\r\n                        </option>\r\n                    </select>\r\n                </fieldset>\r\n            </div>\r\n            <!-- Right Column -->\r\n            <div class=\"col-md-6\">\r\n                <!-- <division-list></division-list> -->\r\n\r\n                <fieldset style=\"padding-bottom: 1px;\">\r\n                    <legend style=\"margin-bottom: -4px;\">Filter Option</legend>\r\n                    <table>\r\n                        <tr>\r\n                            <td style=\"border: none;\" class=\"smallBoldLabel\">TDS A/C: </td>\r\n                            <td style=\"border: none;width: 70%;\">\r\n                                <input type=\"text\" name=\"tdsname\" class=\"form-control\"\r\n                                    [(ngModel)]=\"_reportFilterService.TDSObj.TDS_TDSNAME\"\r\n                                    (Keydown.Enter)=\"TDSEnterCommand()\" (Keydown.Tab)=\"TDSEnterCommand()\" autocomplete=\"off\"\r\n                                    placeholder=\"Press Tab or Enter for the List\">\r\n\r\n                            </td>\r\n                        </tr>\r\n\r\n                        <tr style=\"margin-top: 5px; margin-bottom: 6px;\">\r\n                            <td style=\"border: none;\" class=\"smallBoldLabel\">Account Selection: </td>\r\n                            <td style=\"border: none;width: 70%;\">\r\n                                <input type=\"text\" name=\"tdsname\" class=\"form-control\"\r\n                                    [(ngModel)]=\"_reportFilterService.TDSObj.TDS_PARTYNAME\"\r\n                                    (Keydown.Enter)=\"PartyEnterCommand()\" (Keydown.Tab)=\"PartyEnterCommand()\" autocomplete=\"off\"\r\n                                    placeholder=\"Press Tab or Enter for the List\">\r\n\r\n                            </td>\r\n                        </tr>\r\n                        <tr style=\"margin-top: 5px; margin-bottom: 6px;\">\r\n                            <td style=\"border: none;\" class=\"smallBoldLabel\">Sub Ledger A/C: </td>\r\n                            <td style=\"border: none;width: 70%;\">\r\n                                <input type=\"text\" name=\"tdsname\" class=\"form-control\"\r\n                                    [(ngModel)]=\"_reportFilterService.TDSObj.TDS_SL_ACNAME\"\r\n                                    (Keydown.Enter)=\"SubLedgerEnterCommand()\" (Keydown.Tab)=\"PartyEnterCSubLedgerEnterCommandommand()\" autocomplete=\"off\"\r\n                                    placeholder=\"Press Tab or Enter for the List\">\r\n\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                </fieldset>\r\n\r\n                <fieldset style=\"padding-bottom: 5px;\">\r\n                    <legend>Report Type</legend>\r\n                    <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt1\"\r\n                            [(ngModel)]=\"_reportFilterService.TDSObj.TDS_REPORTTYPE \" value=0>&nbsp;Summary\r\n                        Report </label>\r\n                    <label class=\"smallBoldLabel\" style=\"clear : both;\"><input type=\"radio\" name=\"BalViewOpt1\"\r\n                            style=\"margin-left: 35px;\" [(ngModel)]=\"_reportFilterService.TDSObj.TDS_REPORTTYPE\"\r\n                            value=1 (change)=\"changeCheckboxValue($event)\">&nbsp;Detail\r\n                        Report\r\n                    </label>\r\n\r\n                </fieldset>\r\n\r\n                <!-- <label class=\"smallBoldLabel\"><input type=\"checkbox\" (change)=\"checkValue()\"\r\n                        [(ngModel)]=\"_reportFilterService.TDSObj.TDS_ISIRDFORMAT\"\r\n                        [disabled]=\"_reportFilterService.TDSObj.TDS_REPORTTYPE==1\"\r\n                        >&nbsp;Show TDS Report in IRD upload format</label> -->\r\n\r\n                        <label class=\"smallBoldLabel\"><input type=\"checkbox\" (change)=\"checkValue()\"\r\n                            [(ngModel)]=\"_reportFilterService.TDSObj.TDS_ISIRDFORMAT\"\r\n                            >&nbsp;Show TDS Report in IRD upload format</label> \r\n\r\n\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n            <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n            <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <generic-popup-grid #genericGridACList [popupsettings]=\"gridACListPopupSettings\"\r\n        (onItemDoubleClick)=\"onAcSelect($event)\"></generic-popup-grid>\r\n\r\n    <generic-popup-grid #genericGridPartyList [popupsettings]=\"gridPartyListPopupSettings\"\r\n        (onItemDoubleClick)=\"onPartySelect($event)\"></generic-popup-grid>\r\n\r\n        <generic-popup-grid #gridSubLedgerSettingList [popupsettings]=\"gridSubLedgerSetting\"\r\n  (onItemDoubleClick)=\"onSubLedgerSelect($event)\"></generic-popup-grid>"

/***/ }),

/***/ 1764:
/***/ (function(module, exports) {

module.exports = "<style>\r\n   .input-text {\r\n      width: 100%;\r\n      /* height: 30px !important; */\r\n      font-weight: bold;\r\n   }\r\n\r\n   .td-class {\r\n      border: none !important;\r\n   }\r\n\r\n   .date-input {\r\n      width: 93%;\r\n      font-size: 12px !important;\r\n      height: 30px !important;\r\n   }\r\n     @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .report-height{\r\n        height:52vh; \r\n        overflow:auto;\r\n    }\r\n    }\r\n         @media screen and (max-width:767px) {\r\n            .smallBoldLabel{\r\n                  width: auto !important;\r\n            }\r\n            \r\n        \r\n    }\r\n</style>\r\n<div class=\"container report-container\" style=\"background-color : #ffffff; padding :1%; height : auto;  \">\r\n   <div class=\"row\">\r\n      <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n         <h4 class=\"modal-title\">Trial Balance Report</h4>\r\n      </div>\r\n      <div class=\"col-md-12 report-height\" style=\"padding-top: 2%;\">\r\n         <!-- Left Column -->\r\n         <div class=\"col-md-6\">\r\n            <fieldset>\r\n               <legend style=\"font-size:11px;font-weight: bold; width:auto;margin-bottom: -4px;\">Date Range Selection :\r\n               </legend>\r\n               <table>\r\n                  <tr>\r\n                     <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                     <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                  </tr>\r\n                  <tr>\r\n                     <td class=\"td-class\">\r\n                        <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                           [(ngModel)]=\"_reportFilterService.TrialBalanceObj.TrialBalance_DATE1\"\r\n                           (change)=\"changeEntryDate($event.target.value,'AD')\"\r\n                           max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\"\r\n                           min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                     </td>\r\n                     <td class=\"td-class\">\r\n                        <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                           [(ngModel)]=\"_reportFilterService.TrialBalanceObj.TrialBalance_DATE2\"\r\n                           (change)=\"changeEndDate($event.target.value,'AD')\"\r\n                           max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\"\r\n                           min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                     </td>\r\n                  </tr>\r\n                  <tr>\r\n                     <td class=\"td-class\">\r\n                      <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                      (change)=\"changeEntryDate($event.detail.value,'BS')\"\r\n                      [label]=\"'From'\"\r\n                      [(ngModel)]=\"_reportFilterService.TrialBalanceObj.TrialBalance_BSDATE1\">\r\n                    </nepali-date-picker>\r\n                        <!-- <input id=\"nepaliDate\" style=\"text-align:center;\"\r\n                           class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                           [(ngModel)]=\"_reportFilterService.TrialBalanceObj.TrialBalance_BSDATE1\" type=\"text\"\r\n                           (change)=\"changeEntryDate($event.target.value,'BS')\" placeholder=\"yyyy-mm-dd\" /> -->\r\n\r\n                     </td>\r\n                     <td class=\"td-class\">\r\n                      <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDateTo'\"\r\n                      (change)=\"changeEndDate($event.detail.value,'BS')\"\r\n                      [label]=\"'To'\"\r\n                      [(ngModel)]=\"_reportFilterService.TrialBalanceObj.TrialBalance_BSDATE2\">\r\n                    </nepali-date-picker>\r\n                        <!-- <input id=\"nepaliDate\" style=\"text-align:center;\"\r\n                           class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                           [(ngModel)]=\"_reportFilterService.TrialBalanceObj.TrialBalance_BSDATE2\" type=\"text\"\r\n                           (change)=\"changeEndDate($event.target.value,'BS')\" placeholder=\"yyyy-mm-dd\" /> -->\r\n                     </td>\r\n                  </tr>\r\n               </table>\r\n            </fieldset>\r\n\r\n<!--             \r\n            <fieldset *ngIf=\"userSetting.IS_NESTLE==1\">\r\n               <legend>Company Selection:</legend>\r\n               <select [(ngModel)]=\"_reportFilterService.TrialBalanceObj.TrialBalance_COMPANYTYPE\"\r\n                  style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                  <option value=\"DMS\">DMS</option>\r\n                  <option value=\"NONDMS\">NON DMS</option>\r\n               </select>\r\n            </fieldset> -->\r\n\r\n            <fieldset>\r\n               <legend>Division Selection:</legend>\r\n               <select [(ngModel)]=\"_reportFilterService.TrialBalanceObj.TrialBalance_DIV\"\r\n                  style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                  <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL</option>\r\n                  <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                     {{ div.NAME }}\r\n                  </option>\r\n               </select>\r\n            </fieldset>\r\n            <fieldset>\r\n               <legend>Cost Center:</legend>\r\n               <select [(ngModel)]=\"_reportFilterService.TrialBalanceObj.TrialBalance_CostCenter\"\r\n                  style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                  <option value=\"%\"> </option>\r\n                  <option *ngFor=\"let i of CostcenterList\" value={{i.CCID}}>{{i.COSTCENTERNAME}}\r\n                  </option>\r\n               </select>\r\n            </fieldset>\r\n         </div>\r\n         <!-- Right Column -->\r\n         <div class=\"col-md-6\">\r\n            <fieldset style=\"padding-bottom: 5px;\">\r\n               <legend>Report Mode :</legend>\r\n               <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"reportmode\"\r\n                     [(ngModel)]=\"_reportFilterService.TrialBalanceObj.TrialBalance_SUMMARYREPORT\" value=0>&nbsp;Detail\r\n                  Report </label>&nbsp;&nbsp;&nbsp;\r\n               <label class=\"smallBoldLabel\" style=\"clear : both;\"><input type=\"radio\" name=\"reportmode\"\r\n                     [(ngModel)]=\"_reportFilterService.TrialBalanceObj.TrialBalance_SUMMARYREPORT\" value=1>&nbsp;Summary\r\n                  Report\r\n               </label>\r\n               <label *ngIf=\"_reportFilterService.TrialBalanceObj.TrialBalance_SUMMARYREPORT==1\" class=\"smallBoldLabel\"\r\n                  style=\"margin-left: 5%;\">Levels :</label>&nbsp;&nbsp;&nbsp;\r\n               <input *ngIf=\"_reportFilterService.TrialBalanceObj.TrialBalance_SUMMARYREPORT==1\" type=\"number\"\r\n                  [(ngModel)]=\"_reportFilterService.TrialBalanceObj.TrialBalance_LEVELS\"\r\n                  style=\"width: 16%;height: 23px;margin-left: 2%;\">\r\n            </fieldset>\r\n            <fieldset style=\"padding-bottom: 5px;\">\r\n               <legend>Report Format :</legend>\r\n               <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"reportformat\"\r\n                     [(ngModel)]=\"_reportFilterService.TrialBalanceObj.TrialBalance_LEDGERWISE\" value=0>&nbsp;A/C Group\r\n                  Wise Format</label>&nbsp;&nbsp;&nbsp;\r\n               <label class=\"smallBoldLabel\" style=\"clear : both;\"><input type=\"radio\" name=\"reportformat\"\r\n                     [(ngModel)]=\"_reportFilterService.TrialBalanceObj.TrialBalance_LEDGERWISE\" value=1>&nbsp;A/C Ledger\r\n                  Wise Format\r\n               </label>\r\n            </fieldset>\r\n\r\n            <fieldset>\r\n               <legend>Report Options :</legend>\r\n               <label class=\"smallBoldLabel\"><input type=\"checkbox\" (change)=\"checkValue()\"\r\n                     [(ngModel)]=\"_reportFilterService.TrialBalanceObj.TrialBalance_SHOWOPENINGTRIALONLY\">&nbsp;Show\r\n                  Opening Trial Balance Report Only</label><br>\r\n               <label class=\"smallBoldLabel\"><input type=\"checkbox\"\r\n                     [(ngModel)]=\"_reportFilterService.TrialBalanceObj.TrialBalance_SHOWSUBLEDGER\">&nbsp;Show Sub\r\n                  Ledger In Trial Balance</label><br>\r\n               <label class=\"smallBoldLabel\"><input type=\"checkbox\"\r\n                     [(ngModel)]=\"_reportFilterService.TrialBalanceObj.TrialBalance_SHOWDEBTORSCREDITORSDETAILS\">&nbsp;Show\r\n                  Debtors/Creditors Party List</label><br>\r\n                  <label class=\"smallBoldLabel\"><input type=\"checkbox\"\r\n                     [(ngModel)]=\"_reportFilterService.TrialBalanceObj.TrialBalance_SHOWSTOCKVALUE\">&nbsp;Show\r\n                  Closing\r\n                  Stock Value In Trial Balance</label><br>\r\n                  <label class=\"smallBoldLabel\"><input type=\"checkbox\"\r\n                     [(ngModel)]=\"_reportFilterService.TrialBalanceObj.TrialBalance_SHOWCLOSINGONPY\"\r\n                     [disabled]=\"_reportFilterService.TrialBalanceObj.TrialBalance_SHOWOPENINGTRIALONLY == 1\">&nbsp;Show\r\n                  Only\r\n                  Closing Balance In Report</label><br>\r\n               <!-- <label class=\"smallBoldLabel\"><input type=\"checkbox\"\r\n                     [(ngModel)]=\"_reportFilterService.TrialBalanceObj.TrialBalance_SHOWZEROBL\">&nbsp;Show Zero\r\n                  B/L A/C In Report</label> -->\r\n                  <label class=\"smallBoldLabel\"><input type=\"checkbox\" [checked]=\"_reportFilterService.TrialBalanceObj.TrialBalance_SHOWNETCLOSING == 1\"\r\n                     [(ngModel)]=\"_reportFilterService.TrialBalanceObj.TrialBalance_SHOWNETCLOSING\">&nbsp;Show Net Value in Opening/Closing Balance</label>\r\n            </fieldset>\r\n\r\n         </div>\r\n      </div>\r\n\r\n      <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n         <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n         <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n      </div>\r\n\r\n   </div>\r\n"

/***/ }),

/***/ 1765:
/***/ (function(module, exports) {

module.exports = "<div style=\"background-color : #ffffff; padding :1%; height : auto; width:50%; \">\r\n  <div class=\"row\">\r\n    <div class=\"modal-header\">\r\n      <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"hide()\">&times;</button>\r\n      <h4 class=\"modal-title\">VAT Purchase Register Report</h4>\r\n    </div>\r\n    <div class=\"_left_section col-md-12\">\r\n      <fieldset style=\"width:352px\">\r\n        <legend style=\"font-size:11px;font-weight: bold; width:auto\">Date Range Selection :</legend>\r\n        <table>\r\n          <tr>\r\n            <td><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n            <td><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              <label class=\"smallBoldLabel\"><input type=\"date\" style=\"width:152px; min-width:50%;\"\r\n                  placeholder=\"Year Start Date\" [(ngModel)]=\"VATpurchaseRegisterReport.DATE1\"\r\n                  (change)=\"changeEntryDate($event.target.value,'AD')\"></label>\r\n            </td>\r\n            <td>\r\n              <label class=\"smallBoldLabel\"><input type=\"date\" style=\"width:152px; min-width:50%;\"\r\n                  placeholder=\"Year Start Date\" [(ngModel)]=\"VATpurchaseRegisterReport.DATE\"\r\n                  (change)=\"changeEndDate($event.target.value,'AD')\"></label>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              <label class=\"smallBoldLabel\"> <input id=\"nepaliDate\" style=\"width:152px;height:25px;text-align:center\"\r\n                  class=\"nepali-calendar ndp-nepali-calendar\" [(ngModel)]=\"VATpurchaseRegisterReport.BSDATE1\"\r\n                  type=\"text\" (change)=\"changeEntryDate($event.target.value,'BS')\" placeholder=\"yyyy-mm-dd\" />\r\n              </label>\r\n            </td>\r\n            <td>\r\n              <label class=\"smallBoldLabel\">\r\n                <input id=\"nepaliDate\" style=\"width:152px;height:25px;text-align:center\"\r\n                  class=\"nepali-calendar ndp-nepali-calendar\" [(ngModel)]=\"VATpurchaseRegisterReport.BSDATE2\"\r\n                  type=\"text\" (change)=\"changeEndDate($event.target.value,'BS')\" placeholder=\"yyyy-mm-dd\" />\r\n              </label>\r\n            </td>\r\n          </tr>\r\n        </table>\r\n      </fieldset>\r\n\r\n      <!-- Division Selection Start -->\r\n      <fieldset style=\"width:352px;\">\r\n        <legend>Division Selection:</legend>\r\n        <select class=\"form-control\" [(ngModel)]=\"this.VATpurchaseRegisterReport.DIV\" #division\r\n          (change)=\"divisionChanged()\">\r\n          <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0\" selected>ALL</option>\r\n          <option *ngFor=\"let divs of divisionList;let i=index\" value=\"{{divs.INITIAL}}\">{{divs.NAME}}\r\n          </option>\r\n        </select>\r\n      </fieldset>\r\n      <!-- Division Selection End -->\r\n\r\n      <!-- V1,V2,V3 start-->\r\n      <fieldset>\r\n        <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n          <label class=\"smallBoldLabel\">\r\n            <input type=\"checkbox\" [(ngModel)]=\"this.VATpurchaseRegisterReport.isPI\">\r\n            Trading Purchase Transaction\r\n          </label>\r\n        </div>\r\n        <div class=\"checkbox\" style=\"padding-top:1px;width:200px;\">\r\n          <label class=\"smallBoldLabel\">\r\n            <input type=\"checkbox\" [(ngModel)]=\"this.VATpurchaseRegisterReport.isCP\">\r\n            Capital Purchase Transaction\r\n          </label>\r\n        </div>\r\n        <div class=\"checkbox\" style=\"padding-top:1px;width:200px;\">\r\n          <label class=\"smallBoldLabel\">\r\n            <input type=\"checkbox\" [(ngModel)]=\"this.VATpurchaseRegisterReport.isDN\">\r\n            Debit Note Transaction\r\n          </label>\r\n        </div>\r\n        <div class=\"checkbox\" style=\"padding-top:1px;width:200px;\">\r\n          <label class=\"smallBoldLabel\">\r\n            <input type=\"checkbox\" [(ngModel)]=\"this.VATpurchaseRegisterReport.isCN\">\r\n            Credit Note Transaction\r\n          </label>\r\n        </div>\r\n      </fieldset>\r\n      <!-- V1,V2,V3 end-->\r\n\r\n\r\n      <div style='margin-top:20px;'>\r\n        <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n        <button type=\"button\" (click)=\"cancel()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</div>\r\n"

/***/ }),

/***/ 1766:
/***/ (function(module, exports) {

module.exports = "<fieldset>\r\n    <legend><label class=\"smallBoldLabel\">&nbsp;Ledger Wise</label></legend>\r\n    <div>\r\n        <div class=\"col-md-10\">\r\n            <table>\r\n                <tr>\r\n                    <td colspan='2'><label class=\"smallBoldLabel\">ACCODE</label></td>\r\n                    <td colspan='5'><label class=\"smallBoldLabel\">ACNAME</label></td>\r\n                </tr>\r\n                <tr>\r\n                    <td colspan='2'>\r\n                        <label class=\"smallBoldLabel\">\r\n                            <input tabindex=\"2\" type=\"text\" class=\"form-control input-sm\"\r\n                                style=\"height: 26px;\"\r\n                                \r\n                                (keydown.enter)=\"accodeMultipleChanged($event.target.value)\"\r\n                                [(ngModel)]=\"_reportFilterService.ReportFilterObject.multipleACCODE\"\r\n                                max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                        </label>\r\n                    </td>\r\n                    <td colspan='5'>\r\n                        <div style=\"position: absolute; top: 34px;width: 152px;\">\r\n                            <label class=\"smallBoldLabel\">\r\n                                <input autocomplete=\"off\" tabindex=\"2\" ngui-auto-complete\r\n                                    class=\"form-control input-sm\"\r\n                                    \r\n                                    [source]=\"dropListItem.bind(this)\" max-num-list=\"25\"\r\n                                    [(ngModel)]=\"_reportFilterService.ReportFilterObject.multipleACNAME\" list-formatter=\"ACNAME\"\r\n                                    style=\"height: 26px;\"\r\n                                    (keydown.enter)=\"onEnterMulAcnameChange($event)\"\r\n                                    (ngModelChange)=\"itemMultipleChanged($event)\"\r\n                                    name=\"AcName\" display-property-name=\"ACNAME\"\r\n                                    max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                            </label>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n        </div>\r\n        <div class=\"col-md-2\">\r\n            <button type=\"button\" class=\"btn btn-info\"\r\n                (click)=\"addAccountToList()\">Add</button>\r\n        </div>\r\n        <div class=\"col-md-12\">\r\n            <table style=\"height:175px;\">\r\n                <tr class=\"smallBoldLabel\">\r\n                    <th style=\"width:3px;\">S.No.</th>\r\n                    <th style=\"width:10px;\">Account</th>\r\n                    <th style=\"width:4px;\">Action</th>\r\n                </tr>\r\n                <tr *ngFor=\"let data of _reportFilterService.ReportFilterObject.multipleAccounts;let i = index\"\r\n                    class=\"smallBoldLabel\">\r\n                    <td style=\"width:3px;\">{{ i + 1 }}</td>\r\n                    <td style=\"width:10px;\">{{data.ACNAME}}</td>\r\n                    <td style=\"width:4px;\">\r\n                        <button type=\"button\" class=\"btn btn-info action-btn\"\r\n                            (click)=\"deleteAccount(i)\">Delete</button>\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n        </div>\r\n    </div>\r\n</fieldset>"

/***/ }),

/***/ 1767:
/***/ (function(module, exports) {

module.exports = "<fieldset>\r\n    <legend>Account Selection: </legend>\r\n    <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\"\r\n        [disabled]=\"_reportFilterService.CashAndBankBookObj.CashBankBook_DETAILREPORT==0\"\r\n        [(ngModel)]=\"_reportFilterService.CashAndBankBookObj.ACCNAME\" placeholder=\"Press Enter or Tab for Account List\"\r\n        (keydown.Tab)=\"AccountEnterClicked($event)\" (keydown.enter)=\"AccountEnterClicked($event)\">\r\n</fieldset>\r\n\r\n<generic-popup-grid #genericGridCashBankBook [popupsettings]=\"gridPopupSettingsForAccountList\"\r\n    (onItemDoubleClick)=\"dblClickAccountSelect($event)\">\r\n</generic-popup-grid>"

/***/ }),

/***/ 1768:
/***/ (function(module, exports) {

module.exports = "<style>\r\n  .modal-content-main-area {\r\n    width: 100% !important;\r\n  }\r\n\r\n</style>\r\n\r\n<div>\r\n  <div class=\"modal-content modal-content-main-area\" style=\"width: 50% !important\">\r\n    <div>\r\n      <div class=\"modal-header\" style=\"padding: 0px;background: #8cccfb;\">\r\n        <button class=\"close\" aria-label=\"Close\" (click)=\"closeReportBox()\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n        <h4 class=\"modal-title\" style=\"text-align: center;\">\r\n          Select Date\r\n        </h4>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <div class=\"clearfix\">\r\n          <div class=\"col-md-12\">\r\n            <div class=\"col-md-6 form-group\">\r\n              <div class=\"report-filter single-calendar\">\r\n                <label>Date Selection</label>\r\n                <input class=\"form-control\" type=\"text\" ngxDaterangepickerMd [(ngModel)]=\"selectedDate\"\r\n                  [showDropdowns]=\"true\" [showCustomRangeLabel]=\"true\" [alwaysShowCalendars]=\"true\" [locale]=\"locale\"\r\n                  [ranges]=\"ranges\" [linkedCalendars]=\"true\" [showCancel]=\"true\" placeholder=\"Date Range...\"\r\n                  (ngModelChange)=\"dateChanged($event)\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\"/>\r\n              </div>\r\n              <div class=\"cell-with-comment report-filter\">\r\n                <label>Supplier</label>\r\n                <input id=\"customerselectid\" type=\"text\"\r\n                autocomplete=\"off\" title=\"Enter or Tab to select\"\r\n                [(ngModel)]=\"ACNAME\" (keydown.tab)=\"customerEnterCommand($event)\"\r\n                (keydown.enter)=\"customerEnterCommand($event)\" (keydown)=\"preventInput($event)\"\r\n                class=\"form-control\" />\r\n\r\n                <span class=\"cell-comment\" style=\"margin-left: 27%\">\r\n                  press ENTER or TAB to Select Supplier\r\n                </span>\r\n              </div>\r\n              <div class=\"checkbox\">\r\n                <label>\r\n                  <input type=\"checkbox\" name=\"zerobl\" [(ngModel)]=\"accountpayable.reportparam.SHOWZEROBL\">\r\n                  Show Zero Balance?\r\n                </label>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <hr style=\"margin-bottom: 0px !important\">\r\n        <div class=\"clearfix\" style=\"padding: 10px;\">\r\n\r\n          <button class=\"btn btn-info pull-right\" style=\"margin-left: 10px;\" (click)=onload()>RUN</button>\r\n          <button class=\"btn btn-info pull-right\" (click)=\"closeReportBox()\">Close</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"custom-genericGrid\" style=\"height: 200px;\">\r\n    <generic-popup-grid #genericGridCustomer [popupsettings]=\"gridPopupSettingsForCustomer\"\r\n      (onItemDoubleClick)=\"onCustomerSelected($event)\">\r\n    </generic-popup-grid>\r\n  </div>\r\n"

/***/ }),

/***/ 1769:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .modal-content-main-area {\r\n      width: 100% !important;\r\n    }\r\n\r\n  </style>\r\n\r\n  <div>\r\n    <!-- Modal content -->\r\n    <div class=\"modal-content modal-content-main-area\" style=\"width: 50% !important\">\r\n      <div>\r\n        <div class=\"modal-header\" style=\"padding: 0px;background: #8cccfb;\">\r\n          <button class=\"close\" aria-label=\"Close\" (click)=\"closeReportBox()\">\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>\r\n          <h4 class=\"modal-title\" style=\"text-align: center;\">\r\n            Select Date\r\n          </h4>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <div class=\"clearfix\">\r\n            <div class=\"col-md-12\">\r\n              <div class=\"col-md-6 form-group\">\r\n                <div class=\"report-filter single-calendar\">\r\n                  <label>Date Selection</label>\r\n                  <input class=\"form-control\" type=\"text\" ngxDaterangepickerMd [(ngModel)]=\"selectedDate\"\r\n                  [showDropdowns]=\"true\" [showCustomRangeLabel]=\"true\" [alwaysShowCalendars]=\"true\"\r\n                  [locale]=\"locale\" [ranges]=\"ranges\" [linkedCalendars]=\"true\" [showCancel]=\"true\"\r\n                  placeholder=\"Date Range...\" (ngModelChange)=\"dateChanged($event)\" />\r\n                </div>\r\n                <div class=\"cell-with-comment report-filter\">\r\n                  <label>Customer</label>\r\n                  <input id=\"customerselectid\" type=\"text\"\r\n                    autocomplete=\"off\" title=\"Enter or Tab to select\"\r\n                    [(ngModel)]=\"ACNAME\" (keydown.tab)=\"customerEnterCommand($event)\"\r\n                    (keydown.enter)=\"customerEnterCommand($event)\" (keydown)=\"preventInput($event)\"\r\n                    class=\"form-control\" />\r\n\r\n                  <span class=\"cell-comment\" style=\"margin-left: 27%\">\r\n                    press ENTER or TAB to Select Customer\r\n                  </span>\r\n                </div>\r\n                <div></div>\r\n                <div class=\"checkbox\">\r\n                  <label>\r\n                    <input type=\"checkbox\" name=\"zerobl\" [(ngModel)]=\"accountreceivable.reportparam.SHOWZEROBL\">\r\n                    Show Zero Balance?\r\n                  </label>\r\n                </div>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n\r\n          <hr style=\"margin-bottom: 0px !important\">\r\n          <div class=\"clearfix\" style=\"padding: 10px;\">\r\n\r\n            <button class=\"btn btn-info pull-right\" style=\"margin-left: 10px;\" (click)=onload()>RUN</button>\r\n            <button class=\"btn btn-info pull-right\" (click)=\"closeReportBox()\">Close</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"custom-genericGrid\" style=\"height: 200px;\">\r\n      <generic-popup-grid #genericGridCustomer [popupsettings]=\"gridPopupSettingsForSupplier\"\r\n        (onItemDoubleClick)=\"onCustomerSelected($event)\">\r\n      </generic-popup-grid>\r\n    </div>\r\n"

/***/ }),

/***/ 1770:
/***/ (function(module, exports) {

module.exports = "<style>\r\n  .modal-content-main-area {\r\n    width: 100% !important;\r\n  }\r\n\r\n</style>\r\n\r\n<div>\r\n  <!-- Modal content -->\r\n  <div class=\"modal-content modal-content-main-area\" style=\"width: 100% !important\">\r\n    <div>\r\n      <div class=\"modal-header\" style=\"padding: 0px;background: #8cccfb;\">\r\n        <button class=\"close\" aria-label=\"Close\" (click)=\"closeReportBox()\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n        <h4 class=\"modal-title\" style=\"text-align: center;\">\r\n          Select Date\r\n        </h4>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <div class=\"clearfix\">\r\n          <div class=\"col-md-12\">\r\n            <div class=\"col-md-4 form-group\">\r\n              <div class=\"report-filter single-calendar\">\r\n                <label>Date Selection</label>\r\n                <input class=\"form-control\" type=\"text\" ngxDaterangepickerMd [(ngModel)]=\"selectedDate\"\r\n                [alwaysShowCalendars]=\"true\"\r\n                [singleDatePicker]=\"true\"\r\n                [autoApply]=\"true\"\r\n                placeholder=\"Date Range...\" (ngModelChange)=\"dateChanged($event)\" />\r\n              </div>\r\n              <div class=\"cell-with-comment report-filter\">\r\n                <label>Supplier</label>\r\n                <input id=\"customerselectid\" autocomplete=\"off\" title=\"Enter or Tab to select\"\r\n                  [(ngModel)]=\"ACNAME\" (keydown.tab)=\"customerEnterCommand($event)\"\r\n                  (keydown.enter)=\"customerEnterCommand($event)\" (keydown)=\"preventInput($event)\"\r\n                  class=\"form-control\" />\r\n\r\n                <span class=\"cell-comment\" style=\"margin-left: 27%\">\r\n                  press ENTER or TAB to Select Supplier\r\n                </span>\r\n              </div>\r\n              <div></div>\r\n\r\n              <div class=\"checkbox\">\r\n                <label>\r\n                  <input type=\"checkbox\" name=\"tc\" [(ngModel)]=\"agingpayable.reportparam.summaryreport\">\r\n                    Is Summary?\r\n                </label>\r\n              </div>\r\n\r\n            </div>\r\n            <div class=\"col-md-8\">\r\n              <h4 class=\"text-align\">Selected Accounts</h4>\r\n              <div class=\"clearfix\" style=\"height: 165px;overflow-y: scroll;\">\r\n                <table>\r\n                  <thead style=\"width: 98%;\">\r\n                    <th style=\"background-color: #e3e1df !important;\">ACNAME</th>\r\n                    <th style=\"background-color: #e3e1df !important;\">ACID</th>\r\n                    <th style=\"background-color: #e3e1df !important;\">ACTION</th>\r\n                  </thead>\r\n                  <tbody>\r\n                    <ng-container *ngIf=\"selectedVoucherList.length\">\r\n                      <tr *ngFor=\"let itm of selectedVoucherList;let i=index\">\r\n                        <td>\r\n                          {{itm?.ACNAME}}\r\n                        </td>\r\n                        <td>\r\n                          {{itm?.ACID}}\r\n                        </td>\r\n                        <td><i class=\"fa fa-trash\" (click)=\"removeFromSelectedList(i)\"></i></td>\r\n                      </tr>\r\n                    </ng-container>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <hr style=\"margin-bottom: 0px !important\">\r\n        <div class=\"clearfix\" style=\"padding: 10px;\">\r\n\r\n          <button class=\"btn btn-info pull-right\" style=\"margin-left: 10px;\" (click)=onload()>RUN</button>\r\n          <button class=\"btn btn-info pull-right\" (click)=\"closeReportBox()\">Close</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"custom-genericGrid\" style=\"height: 200px;\">\r\n    <generic-popup-grid #genericGridSupplier [popupsettings]=\"gridPopupSettingsForCustomer\"\r\n      (onItemDoubleClick)=\"onCustomerSelected($event)\">\r\n    </generic-popup-grid>\r\n  </div>\r\n"

/***/ }),

/***/ 1771:
/***/ (function(module, exports) {

module.exports = "<style>\r\n  .modal-content-main-area {\r\n    width: 100% !important;\r\n  }\r\n\r\n</style>\r\n\r\n<div>\r\n  <!-- Modal content -->\r\n  <div class=\"modal-content modal-content-main-area\" style=\"width: 100% !important\">\r\n    <div>\r\n      <div class=\"modal-header\" style=\"padding: 0px;background: #8cccfb;\">\r\n        <button class=\"close\" aria-label=\"Close\" (click)=\"closeReportBox()\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n        <h4 class=\"modal-title\" style=\"text-align: center;\">\r\n          Select Date\r\n        </h4>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <div class=\"clearfix\">\r\n          <div class=\"col-md-12\">\r\n            <div class=\"col-md-4 form-group\">\r\n              <div class=\"report-filter single-calendar\">\r\n                <label>Date Selection</label>\r\n                <input class=\"form-control\" type=\"text\" ngxDaterangepickerMd [(ngModel)]=\"selectedDate\"\r\n                [alwaysShowCalendars]=\"true\"\r\n                [singleDatePicker]=\"true\"\r\n                [autoApply]=\"true\"\r\n                placeholder=\"Date Range...\" (ngModelChange)=\"dateChanged($event)\" />\r\n              </div>\r\n              <div class=\"cell-with-comment report-filter\">\r\n                <label>Customer</label>\r\n                <input id=\"customerselectid\" autocomplete=\"off\" title=\"Enter or Tab to select\"\r\n                [(ngModel)]=\"ACNAME\" (keydown.tab)=\"customerEnterCommand($event)\"\r\n                (keydown.enter)=\"customerEnterCommand($event)\" (keydown)=\"preventInput($event)\"\r\n                class=\"form-control\" />\r\n\r\n                <span class=\"cell-comment\" style=\"margin-left: 27%\">\r\n                  press ENTER or TAB to Select Customer\r\n                </span>\r\n              </div>\r\n              <div></div>\r\n\r\n              <div class=\"checkbox\">\r\n                <label>\r\n                  <input type=\"checkbox\" name=\"tc\" [(ngModel)]=\"agingreceivable.reportparam.summaryreport\">\r\n                    Is Summary?\r\n                </label>\r\n              </div>\r\n\r\n            </div>\r\n            <div class=\"col-md-8\">\r\n              <h4 class=\"text-align\">Selected Accounts</h4>\r\n              <div class=\"clearfix\" style=\"height: 165px;overflow-y: scroll;\">\r\n                <table>\r\n                  <thead style=\"width: 98%;\">\r\n                    <th style=\"background-color: #e3e1df !important;\">ACNAME</th>\r\n                    <th style=\"background-color: #e3e1df !important;\">ACID</th>\r\n                    <th style=\"background-color: #e3e1df !important;\">ACTION</th>\r\n                  </thead>\r\n                  <tbody>\r\n                    <ng-container *ngIf=\"selectedVoucherList.length\">\r\n                      <tr *ngFor=\"let itm of selectedVoucherList;let i=index\">\r\n                        <td>\r\n                          {{itm?.ACNAME}}\r\n                        </td>\r\n                        <td>\r\n                          {{itm?.ACID}}\r\n                        </td>\r\n                        <td><i class=\"fa fa-trash\" (click)=\"removeFromSelectedList(i)\"></i></td>\r\n                      </tr>\r\n                    </ng-container>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <hr style=\"margin-bottom: 0px !important\">\r\n        <div class=\"clearfix\" style=\"padding: 10px;\">\r\n\r\n          <button class=\"btn btn-info pull-right\" style=\"margin-left: 10px;\" (click)=onload()>RUN</button>\r\n          <button class=\"btn btn-info pull-right\" (click)=\"closeReportBox()\">Close</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"custom-genericGrid\" style=\"height: 200px;\">\r\n    <generic-popup-grid #genericGridCustomer [popupsettings]=\"gridPopupSettingsForCustomer\"\r\n      (onItemDoubleClick)=\"onCustomerSelected($event)\">\r\n    </generic-popup-grid>\r\n  </div>\r\n"

/***/ }),

/***/ 1772:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .action-btn {\r\n        width: 80%;\r\n        height: 80%;\r\n        display: block;\r\n        margin: 0 auto;\r\n        background-color: inherit;\r\n        border: none;\r\n    }\r\n    .input-text{\r\n        width : 100%; \r\n        /* height: 30px !important; */\r\n        font-weight: bold;\r\n    }\r\n</style>\r\n\r\n<fieldset>\r\n    <legend><label class=\"smallBoldLabel\">&nbsp;Area Wise</label></legend>\r\n    <div>\r\n        <div class=\"col-md-10\">\r\n            <select [(ngModel)]=\"_reportFilterService.ReportFilterObject.AreaWise\"\r\n            style=\"height: 30px !important;\" \r\n            class=\"form-control input-text\">\r\n                <!-- <option value=\"%\">ALL</option> -->\r\n                <option *ngFor=\"let i of AreaList\" [ngValue]=\"i\">\r\n                    {{i.AREA_NAME}}\r\n                </option>\r\n            </select>\r\n        </div>\r\n        <div class=\"col-md-2\">\r\n            <button type=\"button\" class=\"btn btn-info\"\r\n                (click)=\"addAreaToList()\">Add</button>\r\n        </div>\r\n        <div class=\"col-md-12\">\r\n            <table style=\"height:170px;\">\r\n                <tr class=\"smallBoldLabel\">\r\n                    <th style=\"width:3px;font-weight: bold;\">S.No.</th>\r\n                    <th style=\"width:10px;font-weight: bold;\">Area</th>\r\n                    <th style=\"width:4px;font-weight: bold;\">Action</th>\r\n                </tr>\r\n                <tr *ngFor=\"let data of _reportFilterService.ReportFilterObject.multipleAreas;let i = index\"\r\n                    class=\"smallBoldLabel\">\r\n                    <td style=\"width:3px;\">{{ i + 1 }}</td>\r\n                    <td style=\"width:10px;\">{{data.AREA_NAME}}</td>\r\n                    <td style=\"width:4px;\"> <button type=\"button\"\r\n                            class=\"action-btn\"\r\n                            (click)=\"deleteArea(i)\">Delete</button>\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n        </div>\r\n    </div>\r\n</fieldset>"

/***/ }),

/***/ 1773:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .input-text{\r\n        width : 100%; \r\n        /* height: 30px !important; */\r\n        font-weight: bold;\r\n    }\r\n</style>\r\n\r\n<fieldset>\r\n    <legend>Area:</legend>\r\n    <select [(ngModel)]=\"_reportFilterService.ReportFilterObject.AreaWise\"\r\n    style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n        <option value=0></option>\r\n        <option *ngFor=\"let i of AreaList\" value={{i.AREA_ID}}>{{i.AREA_NAME}}</option>\r\n    </select>\r\n</fieldset>"

/***/ }),

/***/ 1774:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .input-text {\r\n        width: 100%;\r\n        /* height: 30px !important; */\r\n        font-weight: bold;\r\n    }\r\n\r\n    label {\r\n        font-size: 12px;\r\n        margin: 0;\r\n    }\r\n\r\n    .td-class {\r\n        border: none !important;\r\n    }\r\n\r\n    .date-input {\r\n        width: 93%;\r\n        font-size: 12px !important;\r\n        height: 30px !important;\r\n    }\r\n\r\n    @media screen and (max-width:991px) {\r\n        .report-container {\r\n            width: 100% !important;\r\n        }\r\n\r\n        .report-height {\r\n            height: 52vh;\r\n            overflow: auto;\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width:767px) {\r\n        .smallBoldLabel {\r\n            width: auto !important;\r\n        }\r\n    }\r\n</style>\r\n\r\n<div class=\"container report-container\" style=\"background-color: #ffffff; padding: 1%; height: auto;\">\r\n    <div class=\"row\">\r\n        <div class=\"modal-header\" style=\"width: 97%; margin: 0px auto;\">\r\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n            <h4 class=\"modal-title\">Depreciation Report (As per Company Norms)</h4>\r\n        </div>\r\n        <div class=\"col-md-12 report-height\" style=\"padding-top: 2%;\">\r\n            <!-- Left Column -->\r\n            <div class=\"col-md-6\">\r\n                <fieldset>\r\n                    <legend>Report Option</legend>\r\n                    <select style=\"height: 30px !important;\" class=\"form-control input-text\" [(ngModel)]=\"_reportFilterService.CompanyNormsObj.CompanyNorms_REPORTOPTION\">\r\n                        <option *ngFor=\"let option of REPORTOPTION\" [value]=\"option.Mode\">{{ option.ReportOptionName }}</option>\r\n                    </select>\r\n                </fieldset>\r\n                <!-- <div class=\"col-md-12 checkbox\" style=\"padding-top: 5px\">\r\n                    <label class=\"smallBoldLabel\" style=\"margin-left: 0px;\">\r\n                        <input type=\"checkbox\"  [(ngModel)]=\"_reportFilterService.CompanyNormsObj.CompanyNorms_INCLUDEOPENINGVALUE\">&nbsp;&nbsp;Include Opening Value\r\n                    </label>\r\n                </div> -->\r\n            </div>\r\n            <!-- Right Column -->\r\n            <div class=\"col-md-6\">\r\n                <fieldset style=\"padding-bottom: 1px;\">\r\n                    <legend style=\"margin-bottom: -4px;\">Pool Selection</legend>\r\n                    <table>\r\n                        <tr style=\"overflow: hidden;\">\r\n                            <td style=\"border: none;\" class=\"smallBoldLabel\">Pool Name: </td>\r\n                            <td style=\"border: none; width: 70%;\">\r\n                                <select [(ngModel)]=\"_reportFilterService.CompanyNormsObj.CompanyNorms_POOLNAME\" (ngModelChange)=\"onPoolNameChange($event)\" style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                                    <option value=\"%\"></option>\r\n                                    <option *ngFor=\"let pool of poolName\" value=\"{{ pool.AssetGroupID }}\">{{ pool.GroupName }}</option>\r\n                                </select>\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </fieldset>\r\n\r\n                <fieldset style=\"padding-bottom: 1px;\">\r\n                    <legend style=\"margin-bottom: -4px;\">Block Selection</legend>\r\n                    <table>\r\n                        <tr>\r\n                            <td style=\"border: none;\" class=\"smallBoldLabel\">Ledger Name: </td>\r\n                            <td style=\"border: none; width: 70%;\">\r\n                                <input  type=\"text\" class=\"form-control\" \r\n                                [(ngModel)]=\"_reportFilterService.CompanyNormsObj.CompanyNorms_LEDGERNAME\" \r\n                                (keydown.Enter)=\"LedgerNameEnterCommand()\" \r\n                                (keydown.Tab)=\"LedgerNameEnterCommand()\" \r\n                                autocomplete=\"off\" placeholder=\"Press Enter or Tab for Ledger List\">\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </fieldset>\r\n                <fieldset style=\"padding-bottom: 1px;\">\r\n                    <legend style=\"margin-bottom: -4px;\">Item Selection</legend>\r\n                    <table>\r\n                        <tr>\r\n                            <td style=\"border: none;\" class=\"smallBoldLabel\">Asset Name: </td>\r\n                            <td style=\"border: none; width: 70%;\">\r\n                                <input type=\"text\" name=\"companynorms\" class=\"form-control\" \r\n                                [(ngModel)]=\"_reportFilterService.CompanyNormsObj.CompanyNorms_ASSETNAME\" \r\n                                (keydown.Enter)=\"AssetNameEnterCommand()\" \r\n                                (keydown.Tab)=\"AssetNameEnterCommand()\" \r\n                                (input)=\"clearAssetMcode()\"\r\n                                autocomplete=\"off\" placeholder=\"Press Enter or Tab for Asset List\">\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </fieldset>\r\n                <fieldset style=\"padding-bottom: 1px;\">\r\n                    <legend style=\"margin-bottom: -4px;\">Asset Code Selection</legend>\r\n                    <table>\r\n                        <tr>\r\n                            <td style=\"border: none;\" class=\"smallBoldLabel\">Asset ID: </td>\r\n                            <td style=\"border: none; width: 70%;\">\r\n                                <input type=\"text\" name=\"companynorms\" class=\"form-control\" [(ngModel)]=\"_reportFilterService.CompanyNormsObj.CompanyNorms_ASSETID\" (keydown.Enter)=\"AssetIdEnterCommand()\" (keydown.Tab)=\"AssetIdEnterCommand()\" autocomplete=\"off\" placeholder=\"Press Enter or Tab for ID List\">\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </fieldset>\r\n            </div>\r\n        </div>\r\n        <div class=\"modal-footer\" style=\"width: 97%; margin: 0px auto;\">\r\n            <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=\"onload()\">RUN</button>\r\n            <button type=\"button\" title=\"Cancel\" class=\"btn btn-info\" (click)=\"closeReportBox()\">Close</button>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<generic-popup-grid #genericGridLedgerList [popupsettings]=\"gridLedgerListPopupSettings\"\r\n        (onItemDoubleClick)=\"onLedgerSelect($event)\"></generic-popup-grid>\r\n\r\n    <generic-popup-grid #genericGridAssetNameList [popupsettings]=\"gridAssetNameListPopupSettings\"\r\n        (onItemDoubleClick)=\"onAssetNameSelect($event)\"></generic-popup-grid>\r\n\r\n        <generic-popup-grid #genericGridAssetIDList [popupsettings]=\"gridAssetIDListPopupSettings\"\r\n  (onItemDoubleClick)=\"onAssetIDSelect($event)\"></generic-popup-grid>\r\n"

/***/ }),

/***/ 1775:
/***/ (function(module, exports) {

module.exports = "\r\n<style>\r\n    .action-btn {\r\n        width: 80%;\r\n        height: 80%;\r\n        display: block;\r\n        margin: 0 auto;\r\n        background-color: inherit;\r\n        border: none;\r\n    }\r\n    .input-text{\r\n        width : 100%; \r\n        /* height: 30px !important; */\r\n        font-weight: bold;\r\n    }\r\n</style>\r\n\r\n <fieldset>\r\n    <legend><label class=\"smallBoldLabel\">&nbsp;Cost Center Wise</label></legend>\r\n    <div *ngIf=\"_reportFilterService.showAllcontactsInCC\" class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n        <label class=\"smallBoldLabel\">\r\n            <input type=\"checkbox\"\r\n                [(ngModel)]=\"_reportFilterService.ReportFilterObject.showAllContacts\"\r\n                (change)=\"checkValue()\">\r\n            Show All Cost Center\r\n        </label>\r\n    </div>\r\n    <div>\r\n        <div class=\"col-md-10\">\r\n            <select [(ngModel)]=\"_reportFilterService.ReportFilterObject.CCENTER\"\r\n            style=\"height: 30px !important;\" \r\n            class=\"form-control input-text\">\r\n                <option *ngFor=\"let i of CostcenterList\" [ngValue]=\"i\">\r\n                    {{i.COSTCENTERNAME}}\r\n                </option>\r\n            </select>\r\n        </div>\r\n        <div class=\"col-md-2\">\r\n            <button type=\"button\" class=\"btn btn-info\" *ngIf=\"showMultipleCC\"\r\n                (click)=\"addCostcenterToList()\">Add</button>\r\n        </div>\r\n        <div class=\"col-md-12\" *ngIf=\"showMultipleCC\">\r\n            <table style=\"height:150px;\">\r\n                <tr class=\"smallBoldLabel\">\r\n                    <th style=\"width:3px;font-weight: bold;\">S.No.</th>\r\n                    <th style=\"width:10px;font-weight: bold;\">Cost Center</th>\r\n                    <th style=\"width:4px;font-weight: bold;\">Action</th>\r\n                </tr>\r\n                <tr *ngFor=\"let data of _reportFilterService.ReportFilterObject.multipleCostcenter;let i = index\"\r\n                    class=\"smallBoldLabel\">\r\n                    <td style=\"width:3px;\">{{ i + 1 }}</td>\r\n                    <td style=\"width:10px;\">{{data.COSTCENTERNAME}}</td>\r\n                    <td style=\"width:4px;\">\r\n                        <button type=\"button\" class=\"action-btn\"\r\n                            (click)=\"deleteCostcenter(i)\">Delete</button>\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n        </div>\r\n    </div>\r\n</fieldset>"

/***/ }),

/***/ 1776:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .input-text{\r\n         width : 100%; \r\n         /* height: 30px !important; */\r\n         font-weight: bold;\r\n     }\r\n </style>\r\n <fieldset>\r\n    <legend>Cost Center:</legend>\r\n    <select [(ngModel)]=\"_reportFilterService.ReportFilterObject.CostCenter\"\r\n    style=\"height: 30px !important;\" \r\n    class=\"form-control input-text\">\r\n        <option value=\"%\"> </option>\r\n        <option *ngFor=\"let i of CostcenterList\" value={{i.CCID}}>{{i.COSTCENTERNAME}}\r\n        </option>\r\n    </select>\r\n</fieldset>"

/***/ }),

/***/ 1777:
/***/ (function(module, exports) {

module.exports = "<style>\r\n   .input-text {\r\n      width: 100%;\r\n      /* height: 30px !important; */\r\n      font-weight: bold;\r\n   }\r\n\r\n   .td-class {\r\n      border: none !important;\r\n   }\r\n\r\n   .date-input {\r\n      width: 93%;\r\n      font-size: 12px !important;\r\n      height: 30px !important;\r\n   }\r\n\r\n   .ageing {\r\n      width: 15%;\r\n      float: left;\r\n      margin-right: 5%;\r\n      font-weight: bold;\r\n      font-size: 14px !important;\r\n   }\r\n      @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .report-height{\r\n        height:71vh; \r\n        overflow:auto;\r\n    }\r\n    }\r\n         @media screen and (max-width:767px) {\r\n            .smallBoldLabel{\r\n                  width: auto !important;\r\n            }\r\n            \r\n        \r\n    }\r\n</style>\r\n<div class=\"container report-container\" style=\"background-color : #ffffff; padding :1%; height : auto;  \">\r\n   <div class=\"row report-height\">\r\n      <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n         <h4 class=\"modal-title\">Creditors Ageing Report</h4>\r\n      </div>\r\n      <!-- Left Column -->\r\n      <div class=\"col-md-6\" style=\"padding-top: 2%;\">\r\n         <fieldset style=\"width : 99%;\">\r\n            <legend>As on Date :</legend>\r\n\r\n            <table>\r\n               <tr>\r\n                  <td class=\"td-class\">\r\n                     <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                        [(ngModel)]=\"_reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DATE1\"\r\n                        (change)=\"changestartDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                  </td>\r\n                  <td class=\"td-class\">\r\n                    <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                        (change)=\"changestartDate($event.detail.value,'BS')\"\r\n                        [label]=\"'From'\"\r\n                        [(ngModel)]=\"_reportFilterService.CreditorsAgeingObj.CreditorsAgeing_BSDATE1\">\r\n                        </nepali-date-picker>\r\n                     <!-- <input id=\"nepaliDate\" style=\"text-align:center;\"\r\n                        class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                        [(ngModel)]=\"_reportFilterService.CreditorsAgeingObj.CreditorsAgeing_BSDATE1\" type=\"text\"\r\n                        (change)=\"changestartDate($event.target.value,'BS')\" placeholder=\"yyyy-mm-dd\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\" /> -->\r\n                  </td>\r\n               </tr>\r\n            </table>\r\n         </fieldset>\r\n\r\n         <fieldset>\r\n            <legend>Division Selection:</legend>\r\n            <select [(ngModel)]=\"_reportFilterService.CreditorsAgeingObj.CreditorsAgeing_DIV\"\r\n               style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n               <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL</option>\r\n               <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                  {{ div.NAME }}\r\n               </option>\r\n            </select>\r\n         </fieldset>\r\n\r\n         <fieldset *ngIf=\"this.masterService.userSetting.enableCostCenter!=0\">\r\n            <legend>Cost Center:</legend>\r\n            <select [(ngModel)]=\"_reportFilterService.CreditorsAgeingObj.CreditorsAgeing_CostCenter\"\r\n               style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n               <option value=\"%\"> </option>\r\n               <option *ngFor=\"let i of CostcenterList\" value={{i.CCID}}>{{i.COSTCENTERNAME}}\r\n               </option>\r\n            </select>\r\n         </fieldset>\r\n         <label class=\"smallBoldLabel\"><input type=\"checkbox\" name=\"showCred\"\r\n               (change)=\"$event.target.checked?(_reportFilterService.CreditorsAgeingObj.DOAGEINGOFOPENINGBL=1):(_reportFilterService.CreditorsAgeingObj.DOAGEINGOFOPENINGBL=0)\"\r\n               [checked]=\"_reportFilterService.CreditorsAgeingObj.DOAGEINGOFOPENINGBL == 1\">&nbsp;Ignore Aging of\r\n            Opening B/L </label><br>\r\n\r\n         <label class=\"smallBoldLabel\"><input type=\"checkbox\" name=\"showCred\"\r\n               (change)=\"$event.target.checked?(_reportFilterService.CreditorsAgeingObj.SHOWDPARTYDETAIL=1):(_reportFilterService.CreditorsAgeingObj.SHOWDPARTYDETAIL=0)\"\r\n               [checked]=\"_reportFilterService.CreditorsAgeingObj.SHOWDPARTYDETAIL == 1\">&nbsp;Show Party Detail\r\n            Info</label><br>\r\n         <label class=\"smallBoldLabel\"><input type=\"checkbox\" name=\"showCred\"\r\n               (change)=\"$event.target.checked?(_reportFilterService.CreditorsAgeing_SHOWBRANCHBL=1):(_reportFilterService.CreditorsAgeing_SHOWBRANCHBL=0)\"\r\n               [checked]=\"_reportFilterService.CreditorsAgeing_SHOWBRANCHBL == 1\">&nbsp;Do Not Show Branch Party B/L \r\n               in Debtors Report</label><br>\r\n\r\n      </div>\r\n      <!-- Right Column -->\r\n      <div class=\"col-md-6\" style=\"padding-top: 2%;\">\r\n         <fieldset>\r\n            <legend>\r\n               Ageing Paramter :\r\n            </legend>\r\n            <input type=\"text\" class=\"ageing form-control\" [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE1\">\r\n            <input type=\"text\" class=\"ageing form-control\" [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE2\">\r\n            <input type=\"text\" class=\"ageing form-control\" [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE3\">\r\n            <input type=\"text\" class=\"ageing form-control\" [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE4\">\r\n            <input  *ngIf=\"AgingValue>=5\" type=\"text\" class=\"ageing form-control\" [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE5\">\r\n            <input  *ngIf=\"AgingValue>=6\" type=\"text\" class=\"ageing form-control\" [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE6\">\r\n            <input  *ngIf=\"AgingValue>=7\" type=\"text\" class=\"ageing form-control\" [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE7\">\r\n            <input  *ngIf=\"AgingValue>=8\" type=\"text\" class=\"ageing form-control\" [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE8\">\r\n            <input *ngIf=\"AgingValue>=9\" type=\"text\" class=\"ageing form-control\" [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE9\">\r\n            <input *ngIf=\"AgingValue>=10\" type=\"text\" class=\"ageing form-control\" [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE10\">\r\n         </fieldset>\r\n         <fieldset>\r\n            <legend>Report Option</legend>\r\n            <div class=\"row\">\r\n               <div class=\"col-lg-4\">\r\n                  <label class=\"smallBoldLabel\" style=\"width: 256px;\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                        [(ngModel)]=\"_reportFilterService.CreditorsAgeingObj.REPORTMODE\" value=0>&nbsp;Show All</label>\r\n\r\n               </div>\r\n            </div>\r\n            <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                  [(ngModel)]=\"_reportFilterService.CreditorsAgeingObj.REPORTMODE\" value=1>&nbsp;Exclude Negative\r\n               Creditors B/L</label>\r\n            <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                  [(ngModel)]=\"_reportFilterService.CreditorsAgeingObj.REPORTMODE\" value=2>&nbsp;Show Negative Creditors\r\n               B/L Only</label>\r\n               <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                  [(ngModel)]=\"_reportFilterService.CreditorsAgeingObj.REPORTMODE\" value=3>&nbsp;Exclude Zero B/L Creditors</label>\r\n                  <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                     [(ngModel)]=\"_reportFilterService.CreditorsAgeingObj.REPORTMODE\" value=4>&nbsp;Show Zero B/L Creditors</label>\r\n         </fieldset>\r\n\r\n         <fieldset>\r\n            <legend>Report Filter Option:</legend>\r\n            <div class=\"row\">\r\n               <div class=\"col-sm-5\"><label class=\"smallBoldLabel\">Area:</label></div>\r\n               <div class=\"col-sm-7\">\r\n                  <select [(ngModel)]=\"_reportFilterService.CreditorsAgeingObj.CreditorsAgeing_AreaWise\"\r\n                  style=\"height: 30px !important;\" class=\"form-control\">\r\n                      <option value=0></option>\r\n                      <option *ngFor=\"let i of AreaList\" value={{i.AREA_ID}}>{{i.AREA_NAME}}</option>\r\n                  </select>\r\n               </div>\r\n            </div>\r\n\r\n            <div class=\"row\" style=\"margin-top: 10px;\">\r\n               <div class=\"col-sm-5\"><label class=\"smallBoldLabel\">Party Group:</label></div>\r\n               <div class=\"col-sm-7\">\r\n                  <select [(ngModel)]=\"_reportFilterService.CreditorsAgeingObj.CreditorsAgeing_PartyGroup\"\r\n                  style=\"height: 30px !important;\" class=\"form-control\">\r\n                      <option value='%'></option>\r\n                      <option *ngFor=\"let i of PartyGroupList\" value={{i.ACID}}>{{i.ACNAME}}</option>\r\n                  </select>\r\n               </div>\r\n            </div>\r\n\r\n            <div class=\"row\" style=\"margin-top: 10px;\">\r\n               <div class=\"col-sm-5\"><label class=\"smallBoldLabel\">Party Category:</label></div>\r\n               <div class=\"col-sm-7\">\r\n                  <select [(ngModel)]=\"_reportFilterService.CreditorsAgeingObj.CreditorsAgeing_PartyCategory\"\r\n                  style=\"height: 30px !important;\" class=\"form-control\">\r\n                  <option value='%'></option>\r\n                  <option *ngFor=\"let i of PartyCategoryList\" value={{i.CATEGORY_ID}}>{{i.CATEGORYNAME}}</option>\r\n                  </select>\r\n               </div>\r\n            </div>\r\n               \r\n         </fieldset>\r\n\r\n         <fieldset>\r\n            <legend>Report Grouping Options :</legend>\r\n            <select [(ngModel)]=\"_reportFilterService.CreditorsAgeingObj.GROUPBY\" style=\"height: 30px !important;\"\r\n               class=\"form-control input-text\">\r\n               <option value=0></option>\r\n               <option value=1>Area Wise</option>\r\n               <option value=2>Party Group Wise</option>\r\n               <option value=3>Party Group Wise in Tree Format</option>\r\n               <option value=4>Party Category Wise</option>\r\n            </select>\r\n         </fieldset>\r\n\r\n\r\n         <label class=\"smallBoldLabel\"><input type=\"checkbox\" name=\"incpostdate\"\r\n            (change)=\"$event.target.checked?(_reportFilterService.CreditorsAgeingObj.CreditorsAgeingObj_INCLUDEPOSTEDTRANSACTION=1):(_reportFilterService.CreditorsAgeingObj.CreditorsAgeingObj_INCLUDEPOSTEDTRANSACTION=0)\"\r\n            [checked]=\"_reportFilterService.CreditorsAgeingObj.CreditorsAgeingObj_INCLUDEPOSTEDTRANSACTION == 1\">&nbsp;Include Post Dated\r\n         Transaction</label><br>\r\n      </div>\r\n      <div class=\"btn\" style=\"float : right;\">\r\n         <!-- <button type=\"button\"  title=\"onSave\" class=\"btn btn-info\">Run</button>    -->\r\n         <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n         <button type=\"button\" title=\"Cancel\" class=\"btn btn-info\" (click)=\"closeReportBox()\">Close</button>\r\n      </div>\r\n\r\n   </div>\r\n"

/***/ }),

/***/ 1778:
/***/ (function(module, exports) {

module.exports = "<style>\r\n   .action-btn {\r\n      width: 80%;\r\n      height: 80%;\r\n      display: block;\r\n      margin: 0 auto;\r\n      background-color: inherit;\r\n      border: none;\r\n   }\r\n     .input-text{\r\n        width : 100%;\r\n        /* height: 30px !important; */\r\n        font-weight: bold;\r\n    }\r\n    .td-class{\r\n        border: none !important;\r\n    }\r\n    .date-input{\r\n        width: 93%;\r\n        font-size: 12px !important;\r\n        height: 30px !important;\r\n    }\r\n      @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .report-height{\r\n        height:52vh; \r\n        overflow:auto;\r\n    }\r\n    }\r\n         @media screen and (max-width:767px) {\r\n            .smallBoldLabel{\r\n                  width: auto !important;\r\n            }\r\n            \r\n        \r\n    }\r\n</style>\r\n\r\n<div class=\"container report-container\" style=\"background-color : #ffffff; padding :1%; height : auto;  \">\r\n   <div class=\"row report-height\">\r\n      <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n         <h4 class=\"modal-title\">Creditors OutStanding Report</h4>\r\n      </div>\r\n      <div class=\"col-md-12\">\r\n         <!-- Left Column -->\r\n         <div class=\"col-md-6\">\r\n            <fieldset style=\"width : 99%;\">\r\n               <legend>As on Date :</legend>\r\n               <table>\r\n                  <tr>\r\n                  </tr>\r\n                  <tr>\r\n                     <td class=\"td-class\">\r\n                           <input type=\"date\" class=\"date-input form-control\"\r\n                              placeholder=\"Year Start Date\" [(ngModel)]=\"_reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DATE1\"\r\n                              (change)=\"changestartDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                     </td>\r\n                     <td class=\"td-class\">\r\n                      <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                      (change)=\"changestartDate($event.detail.value,'BS')\"\r\n                      [label]=\"'From'\"\r\n                      [(ngModel)]=\"_reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_BSDATE1\">\r\n                      </nepali-date-picker>\r\n                           <!-- <input id=\"nepaliDate\"\r\n                           style=\"text-align:center;\"\r\n                           class=\"nepali-calendar ndp-nepali-calendar date-input form-control\" [(ngModel)]=\"_reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_BSDATE1\"\r\n                              type=\"text\" (change)=\"changestartDate($event.target.value,'BS')\"\r\n                              placeholder=\"yyyy-mm-dd\" /> -->\r\n                     </td>\r\n                  </tr>\r\n               </table>\r\n            </fieldset>\r\n\r\n            <!-- <division-list></division-list> -->\r\n            <fieldset>\r\n               <legend>Division Selection:</legend>\r\n               <select [(ngModel)]=\"_reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_DIV\" style=\"height: 30px !important;\"\r\n               class=\"form-control input-text\">\r\n               <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL</option>\r\n                   <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                       {{ div.NAME }}\r\n                   </option>\r\n               </select>\r\n           </fieldset>\r\n\r\n           <fieldset>\r\n            <legend>Cost Center:</legend>\r\n            <select [(ngModel)]=\"_reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_CostCenter\"\r\n            style=\"height: 30px !important;\"\r\n            class=\"form-control input-text\">\r\n                <option value=\"%\"> </option>\r\n                <option *ngFor=\"let i of CostcenterList\" value={{i.CCID}}>{{i.COSTCENTERNAME}}\r\n                </option>\r\n            </select>\r\n        </fieldset>\r\n\r\n            <fieldset>\r\n               <legend>Report Style:</legend>\r\n               <label class=\"smallBoldLabel\" style=\"padding-right:15px;\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                     [(ngModel)]=\"_reportFilterService.CreditorsOutstandingObj.ISSUMMARY\" value=1>&nbsp;Summary\r\n                  Report</label>\r\n               <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                     [(ngModel)]=\"_reportFilterService.CreditorsOutstandingObj.ISSUMMARY\" value=0>&nbsp;Detail Report</label>\r\n            </fieldset>\r\n         </div>\r\n         <!-- Right Column -->\r\n         <div class=\"col-md-6\">\r\n            <fieldset *ngIf=\"_reportFilterService.CreditorsOutstandingObj.ISSUMMARY == 1\">\r\n               <legend>Report Grouping Options :</legend>\r\n               <select [(ngModel)]=\"_reportFilterService.CreditorsOutstandingObj.GROUPBY\" style=\"height: 30px !important;\"\r\n               class=\"form-control input-text\">\r\n                  <option value=0></option>\r\n                  <option value=1>Area Wise</option>\r\n                  <option value=2>Party Group Wise</option>\r\n                  <option value=3>Party Group Wise in Tree Format</option>\r\n               </select>\r\n               <label class=\"smallBoldLabel\" style=\"padding-top:10px;\">\r\n                  <input type=\"checkbox\" name=\"showCred\"\r\n                  (change)=\"$event.target.checked?(_reportFilterService.CreditorsOutstandingObj.DOAGEINGOFOPENINGBL=1):(_reportFilterService.CreditorsOutstandingObj.DOAGEINGOFOPENINGBL=0)\"\r\n                     [(ngModel)]=\"_reportFilterService.CreditorsOutstandingObj.DOAGEINGOFOPENINGBL\">&nbsp;Ignore\r\n                  Aging of Opening B/L </label><br>\r\n\r\n                  \r\n               <fieldset>\r\n                  <legend>Report Filter Option:</legend>\r\n                  <div class=\"row\">\r\n                     <div class=\"col-sm-5\"><label class=\"smallBoldLabel\">Area:</label></div>\r\n                     <div class=\"col-sm-7\">\r\n                        <select [(ngModel)]=\"_reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_AreaWiseInSummary\"\r\n                        style=\"height: 30px !important;\" class=\"form-control\">\r\n                            <option value=0></option>\r\n                            <option *ngFor=\"let i of AreaList\" value={{i.AREA_ID}}>{{i.AREA_NAME}}</option>\r\n                        </select>\r\n                     </div>\r\n                  </div>\r\n\r\n                  <div class=\"row\" style=\"margin-top: 10px;\">\r\n                     <div class=\"col-sm-5\"><label class=\"smallBoldLabel\">Party Group:</label></div>\r\n                     <div class=\"col-sm-7\">\r\n                        <select [(ngModel)]=\"_reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_PartyGroup\"\r\n                        style=\"height: 30px !important;\" class=\"form-control\">\r\n                            <option value='%'></option>\r\n                            <option *ngFor=\"let i of PartyGroupList\" value={{i.ACID}}>{{i.ACNAME}}</option>\r\n                        </select>\r\n                     </div>\r\n                  </div>\r\n                     \r\n                  </fieldset>\r\n            </fieldset>\r\n\r\n            <fieldset *ngIf=\"_reportFilterService.CreditorsOutstandingObj.ISSUMMARY == 0\">\r\n               <legend>Report Options :</legend>\r\n               <select [(ngModel)]=\"_reportFilterService.CreditorsOutstandingObj.ReportType\" style=\"height: 30px !important;\"\r\n               class=\"form-control input-text\" (change)=\"checkValue()\">\r\n                  <option value=1>Supplier Wise</option>\r\n                  <option value=2>Area Wise</option>\r\n               </select>\r\n            </fieldset>\r\n\r\n            <div *ngIf=\"showCustomer && _reportFilterService.CreditorsOutstandingObj.ISSUMMARY=='0'\">\r\n               <fieldset>\r\n                  <legend><label class=\"smallBoldLabel\">&nbsp;Ledger Wise</label></legend>\r\n                  <div>\r\n                      <div class=\"col-md-10\">\r\n                          <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\" [(ngModel)]=\"_reportFilterService.CreditorsOutstandingObj.multipleACNAME\"\r\n                      placeholder=\"Press Enter or Tab for Account List\" (keydown.Tab)=\"MultipleAccountEnterClicked($event)\"\r\n                      (keydown.enter)=\"MultipleAccountEnterClicked($event)\">\r\n\r\n                      </div>\r\n                      <div class=\"col-md-2\">\r\n                          <button type=\"button\" class=\"btn btn-info\"\r\n                              (click)=\"addAccountToList()\">Add</button>\r\n                      </div>\r\n                      <div class=\"col-md-12\">\r\n                          <table style=\"height:175px;\">\r\n                              <tr class=\"smallBoldLabel\">\r\n                                  <th style=\"width:3px;font-weight: bold;\">S.No.</th>\r\n                                  <th style=\"width:10px;font-weight: bold;\">Account</th>\r\n                                  <th style=\"width:4px;font-weight: bold;\">Action</th>\r\n                              </tr>\r\n                              <tr *ngFor=\"let data of _reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_multipleAccounts;let i = index\"\r\n                                  class=\"smallBoldLabel\">\r\n                                  <td style=\"width:3px;\">{{ i + 1 }}</td>\r\n                                  <td style=\"width:10px;\">{{data.ACNAME}}</td>\r\n                                  <td style=\"width:4px;\">\r\n                                      <button type=\"button\" class=\"action-btn\"\r\n                                          (click)=\"deleteAccount(i)\">Delete</button>\r\n                                  </td>\r\n                              </tr>\r\n                          </table>\r\n                      </div>\r\n                    </div>\r\n              </fieldset>\r\n            </div>\r\n\r\n            <div *ngIf=\"showArea && _reportFilterService.CreditorsOutstandingObj.ISSUMMARY==0\">\r\n               <fieldset>\r\n                  <legend>Area:</legend>\r\n                  <select [(ngModel)]=\"_reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_AreaWise\"\r\n                  style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                      <option value=0></option>\r\n                      <option *ngFor=\"let i of AreaList\" value={{i.AREA_ID}}>{{i.AREA_NAME}}</option>\r\n                  </select>\r\n              </fieldset>\r\n            </div>\r\n\r\n            <label class=\"smallBoldLabel\"><input type=\"checkbox\" name=\"incpostdate\"\r\n               (change)=\"$event.target.checked?(_reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_INCLUDEPOSTEDTRANSACTION=1):(_reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_INCLUDEPOSTEDTRANSACTION=0)\"\r\n               [checked]=\"_reportFilterService.CreditorsOutstandingObj.CreditorsOutstanding_INCLUDEPOSTEDTRANSACTION == 1\">&nbsp;Include Post Dated\r\n            Transaction</label><br>\r\n\r\n         </div>\r\n      </div>\r\n\r\n      <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n         <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n         <button type=\"button\" title=\"Cancel\" class=\"btn btn-info\" (click)=\"closeReportBox()\">Close</button>\r\n      </div>\r\n\r\n   </div>\r\n\r\n   <generic-popup-grid #genericGridMultipleAccountLedger [popupsettings]=\"gridPopupSettingsForMultipleAccountLedgerList\"\r\n   (onItemDoubleClick)=\"dblClickMultipleAccountSelect($event)\">\r\n</generic-popup-grid>\r\n"

/***/ }),

/***/ 1779:
/***/ (function(module, exports) {

module.exports = "<style>\r\n   .input-text {\r\n      width: 100%;\r\n      /* height: 30px !important; */\r\n      font-weight: bold;\r\n   }\r\n\r\n   .td-class {\r\n      border: none !important;\r\n   }\r\n\r\n   .date-input {\r\n      width: 93%;\r\n      font-size: 12px !important;\r\n      height: 30px !important;\r\n   }\r\n   .ageing{\r\n   width: 15%;\r\n    float: left;\r\n    margin-right: 5%;\r\n    font-weight: bold;\r\n    font-size: 14px !important;\r\n   }\r\n       @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .report-height{\r\n        height:71vh; \r\n        overflow:auto;\r\n    }\r\n    }\r\n         @media screen and (max-width:767px) {\r\n            .smallBoldLabel{\r\n                  width: auto !important;\r\n            }\r\n            \r\n        \r\n    }\r\n</style>\r\n<div class=\"container report-container\" style=\"background-color : #ffffff; padding :1%; height : auto;\">\r\n   <div class=\"row report-height\">\r\n      <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n         <h4 class=\"modal-title\">Debtors Ageing Report</h4>\r\n      </div>\r\n      <!-- Left Column -->\r\n      <div class=\"col-md-6 \" style=\"padding-top: 2%;\">\r\n         <fieldset style=\"width : 99%;\">\r\n            <legend>As on Date :</legend>\r\n            <table>\r\n               <tr>\r\n                  <td class=\"td-class\">\r\n                        <input type=\"date\" class=\"date-input form-control\"\r\n                           placeholder=\"Year Start Date\" [(ngModel)]=\"_reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DATE1\"\r\n                           (change)=\"changestartDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                  </td>\r\n                  <td class=\"td-class\">\r\n                    <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                        (change)=\"changestartDate($event.detail.value,'BS')\"\r\n                        [label]=\"'From'\"\r\n                        [(ngModel)]=\"_reportFilterService.DebtorsAgeingObj.DebtorsAgeing_BSDATE1\">\r\n                        </nepali-date-picker>\r\n                        <!-- <input id=\"nepaliDate\"\r\n                        style=\"text-align:center;\"\r\n                        class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                           [(ngModel)]=\"_reportFilterService.DebtorsAgeingObj.DebtorsAgeing_BSDATE1\" type=\"text\"\r\n                           (change)=\"changestartDate($event.target.value,'BS')\" placeholder=\"yyyy-mm-dd\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" />  -->\r\n                  </td>\r\n               </tr>\r\n            </table>\r\n         </fieldset>\r\n\r\n         <fieldset>\r\n            <legend>Division Selection:</legend>\r\n            <select [(ngModel)]=\"_reportFilterService.DebtorsAgeingObj.DebtorsAgeing_DIV\" style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n               <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL</option>\r\n                <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                    {{ div.NAME }}\r\n                </option>\r\n            </select>\r\n        </fieldset>\r\n\r\n        <fieldset *ngIf=\"this.masterService.userSetting.enableCostCenter!=0\">\r\n            <legend>Cost Center:</legend>\r\n            <select [(ngModel)]=\"_reportFilterService.DebtorsAgeingObj.DebtorsAgeing_CostCenter\"\r\n            style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                <option value=\"%\"> </option>\r\n                <option *ngFor=\"let i of CostcenterList\" value={{i.CCID}}>{{i.COSTCENTERNAME}}\r\n                </option>\r\n            </select>\r\n        </fieldset>\r\n\r\n        <label class=\"smallBoldLabel\"><input type=\"checkbox\" name=\"showCred\"\r\n         (change)=\"$event.target.checked?(_reportFilterService.DebtorsAgeingObj.DOAGEINGOFOPENINGBL=1):(_reportFilterService.DebtorsAgeingObj.DOAGEINGOFOPENINGBL=0)\"\r\n         [checked]=\"_reportFilterService.DebtorsAgeingObj.DOAGEINGOFOPENINGBL == 1\">&nbsp;Ignore Ageing of\r\n         Opening B/L </label><br>\r\n\r\n         <label class=\"smallBoldLabel\" ><input type=\"checkbox\" name=\"showCred\"\r\n               (change)=\"$event.target.checked?(_reportFilterService.DebtorsAgeingObj.SHOWDPARTYDETAIL=1):(_reportFilterService.DebtorsAgeingObj.SHOWDPARTYDETAIL=0)\"\r\n               [checked]=\"_reportFilterService.DebtorsAgeingObj.SHOWDPARTYDETAIL == 1\">&nbsp;Show Party Detail\r\n            Info</label><br>\r\n         \r\n         <label class=\"smallBoldLabel\"><input type=\"checkbox\" name=\"showCred\"\r\n               (change)=\"$event.target.checked?(_reportFilterService.DebtorsAgeing_SHOWBRANCHBL=1):(_reportFilterService.DebtorsAgeing_SHOWBRANCHBL=0)\"\r\n               [checked]=\"_reportFilterService.DebtorsAgeing_SHOWBRANCHBL == 1\">&nbsp;Do Not Show Branch Party B/L \r\n               in Debtors Report</label><br>      \r\n\r\n      </div>\r\n      <!-- Right Column -->\r\n      <div class=\"col-md-6\" style=\"padding-top: 2%;\">\r\n         <fieldset>\r\n            <legend>Ageing Parameter :</legend>\r\n            <input type=\"text\" class=\"ageing form-control\" [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE1\">\r\n            <input type=\"text\" class=\"ageing form-control\" [(ngModel)]=\" _reportFilterService.StockAgeingObj.StockAgeing_AGE2\">\r\n            <input type=\"text\" class=\"ageing form-control\" [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE3\">\r\n            <input type=\"text\" class=\"ageing form-control\" [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE4\">\r\n            <input *ngIf=\"AgingValue>=5\" type=\"text\" class=\"ageing form-control\" [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE5\">\r\n            <input *ngIf=\"AgingValue>=6\" type=\"text\" class=\"ageing form-control\" [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE6\">\r\n            <input *ngIf=\"AgingValue>=7\" type=\"text\" class=\"ageing form-control\" [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE7\">\r\n            <input *ngIf=\"AgingValue>=8\" type=\"text\" class=\"ageing form-control\" [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE8\">\r\n            <input *ngIf=\"AgingValue>=9\" type=\"text\" class=\"ageing form-control\" [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE9\">\r\n            <input *ngIf=\"AgingValue>=10\" type=\"text\" class=\"ageing form-control\" [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE10\">\r\n            <!-- <input type=\"text\" class=\"ageing form-control\"\r\n            [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE1\">\r\n        <input type=\"text\" class=\"ageing form-control\"\r\n            [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE2\">\r\n        <input type=\"text\" class=\"ageing form-control\"\r\n            [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE3\">\r\n        <input type=\"text\" class=\"ageing form-control\"\r\n            [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE4\">\r\n        <input *ngIf=\"AgingValue>=5\" type=\"text\" class=\"ageing form-control\" \r\n            [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE5\">\r\n        <input *ngIf=\"AgingValue>=6\" type=\"text\" class=\"ageing form-control\"\r\n            [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE6\">\r\n        <input *ngIf=\"AgingValue>=7\" type=\"text\" class=\"ageing form-control\"\r\n            [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE7\">\r\n        <input *ngIf=\"AgingValue>=8\" type=\"text\" class=\"ageing form-control\"\r\n            [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE8\">\r\n        <input *ngIf=\"AgingValue>=9\" type=\"text\" class=\"ageing form-control\"\r\n            [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE9\">\r\n        <input *ngIf=\"AgingValue>=10\" type=\"text\" class=\"ageing form-control\"\r\n            [(ngModel)]=\"_reportFilterService.StockAgeingObj.StockAgeing_AGE10\"> -->\r\n\r\n         </fieldset>\r\n         \r\n         <fieldset>\r\n            <legend>Report Option</legend>\r\n            <div style=\"display: flex; flex-direction: row; justify-content: space-between;\">\r\n               <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                  [(ngModel)]=\"_reportFilterService.DebtorsAgeingObj.REPORTMODE\" value=0>&nbsp;Show All</label><br>\r\n               <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                     [(ngModel)]=\"_reportFilterService.DebtorsAgeingObj.REPORTMODE\" value=1>&nbsp;Exclude Negative\r\n                  Debtors B/L</label>\r\n            </div>\r\n            <div style=\"display: flex; flex-direction: row; justify-content: space-between;\">\r\n               <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                     [(ngModel)]=\"_reportFilterService.DebtorsAgeingObj.REPORTMODE\" value=2>&nbsp;Show Negative Debtors\r\n                  B/L Only</label>\r\n                  <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                     [(ngModel)]=\"_reportFilterService.DebtorsAgeingObj.REPORTMODE\" value=3>&nbsp;Exclude Zero B/L Creditors</label><br>\r\n            </div>\r\n                  <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                     [(ngModel)]=\"_reportFilterService.DebtorsAgeingObj.REPORTMODE\" value=4>&nbsp;Show Zero B/L Creditors</label>\r\n         </fieldset>\r\n\r\n         <fieldset>\r\n            <legend>Report Filter Option:</legend>\r\n            <div class=\"row\">\r\n               <div class=\"col-sm-5\"><label class=\"smallBoldLabel\">Area:</label></div>\r\n               <div class=\"col-sm-7\">\r\n                  <select [(ngModel)]=\"_reportFilterService.DebtorsAgeingObj.DebtorsAgeing_AreaWise\"\r\n                  style=\"height: 30px !important;\" class=\"form-control\">\r\n                      <option value=0></option>\r\n                      <option *ngFor=\"let i of AreaList\" value={{i.AREA_ID}}>{{i.AREA_NAME}}</option>\r\n                  </select>\r\n               </div>\r\n            </div>\r\n\r\n            <div class=\"row\" style=\"margin-top: 10px;\">\r\n               <div class=\"col-sm-5\"><label class=\"smallBoldLabel\">Party Group:</label></div>\r\n               <div class=\"col-sm-7\">\r\n                  <select [(ngModel)]=\"_reportFilterService.DebtorsAgeingObj.DebtorsAgeing_PartyGroup\"\r\n                  style=\"height: 30px !important;\" class=\"form-control\">\r\n                      <option value='%'></option>\r\n                      <option *ngFor=\"let i of PartyGroupList\" value={{i.ACID}}>{{i.ACNAME}}</option>\r\n                  </select>\r\n               </div>\r\n            </div>\r\n\r\n            <div class=\"row\" style=\"margin-top: 10px;\">\r\n               <div class=\"col-sm-5\"><label class=\"smallBoldLabel\">Party Category:</label></div>\r\n               <div class=\"col-sm-7\">\r\n                  <select [(ngModel)]=\"_reportFilterService.DebtorsAgeingObj.DebtorsAgeing_PartyCategory\"\r\n                  style=\"height: 30px !important;\" class=\"form-control\">\r\n                  <option value='%'></option>\r\n                  <option *ngFor=\"let i of PartyCategoryList\" value={{i.CATEGORY_ID}}>{{i.CATEGORYNAME}}</option>\r\n                  </select>\r\n               </div>\r\n            </div>\r\n               \r\n            </fieldset>\r\n         <fieldset>\r\n            <legend>Report Grouping Options :</legend>\r\n            <select [(ngModel)]=\"_reportFilterService.DebtorsAgeingObj.GROUPBY\" style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n               <option value=0></option>\r\n               <option value=1>Area Wise</option>\r\n               <option value=2>Party Group Wise</option>\r\n               <option value=3>Party Group Wise in Tree Format</option>\r\n               <option value=4>Party Category Wise</option>\r\n            </select>\r\n         </fieldset>\r\n\r\n         \r\n         <label class=\"smallBoldLabel\"><input type=\"checkbox\" name=\"incpostdate\"\r\n            (change)=\"$event.target.checked?(_reportFilterService.DebtorsAgeingObj.DebtorsAgeingObj_INCLUDEPOSTEDTRANSACTION=1):(_reportFilterService.DebtorsAgeingObj.DebtorsAgeingObj_INCLUDEPOSTEDTRANSACTION=0)\"\r\n            [checked]=\"_reportFilterService.DebtorsAgeingObj.DebtorsAgeingObj_INCLUDEPOSTEDTRANSACTION == 1\">&nbsp;Include Post Dated\r\n         Transaction</label><br>\r\n\r\n      </div>\r\n      <div class=\"btn\" style=\"float : right;\">\r\n         <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n         <button type=\"button\" title=\"Cancel\" class=\"btn btn-info\" (click)=\"closeReportBox()\">Close</button>\r\n      </div>\r\n\r\n   </div>\r\n"

/***/ }),

/***/ 1780:
/***/ (function(module, exports) {

module.exports = "<style>\r\n   .action-btn {\r\n      width: 80%;\r\n      height: 80%;\r\n      display: block;\r\n      margin: 0 auto;\r\n      background-color: inherit;\r\n      border: none;\r\n   }\r\n   .input-text{\r\n        width : 100%;\r\n        /* height: 30px !important; */\r\n        font-weight: bold;\r\n    }\r\n    .td-class{\r\n        border: none !important;\r\n    }\r\n    .date-input{\r\n        width: 93%;\r\n        font-size: 12px !important;\r\n        height: 30px !important;\r\n    }\r\n      @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .report-height{\r\n        height:52vh; \r\n        overflow:auto;\r\n    }\r\n    }\r\n         @media screen and (max-width:767px) {\r\n            .smallBoldLabel{\r\n                  width: auto !important;\r\n            }\r\n            \r\n        \r\n    }\r\n</style>\r\n\r\n<div class=\"container report-container \" style=\"background-color : #ffffff; padding :1%; height : auto;  \">\r\n   <div class=\"row\">\r\n      <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n         <h4 class=\"modal-title\">Debtors Outstanding Report</h4>\r\n      </div>\r\n      <div class=\"col-md-12 report-height\" style=\"padding-top: 2%;\">\r\n         <!-- Left Column -->\r\n         <div class=\"col-md-6\">\r\n            <fieldset style=\"width : 99%;\">\r\n               <legend>As on Date :</legend>\r\n\r\n               <table>\r\n                  <tr>\r\n                     <td class=\"td-class\">\r\n                           <input type=\"date\" class=\"date-input form-control\"\r\n                              placeholder=\"Year Start Date\" [(ngModel)]=\"_reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DATE1\"\r\n                              (change)=\"changestartDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                     </td>\r\n                     <td class=\"td-class\">\r\n                      <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                      (change)=\"changestartDate($event.detail.value,'BS')\"\r\n                      [label]=\"'From'\"\r\n                      [(ngModel)]=\"_reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_BSDATE1\">\r\n                      </nepali-date-picker>\r\n                           <!-- <input id=\"nepaliDate\"\r\n                           style=\"text-align:center;\"\r\n                           class=\"nepali-calendar ndp-nepali-calendar date-input form-control\" [(ngModel)]=\"_reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_BSDATE1\"\r\n                              type=\"text\" (change)=\"changestartDate($event.target.value,'BS')\"\r\n                              placeholder=\"yyyy-mm-dd\" />  -->\r\n                     </td>\r\n                  </tr>\r\n               </table>\r\n            </fieldset>\r\n\r\n            <fieldset>\r\n               <legend>Division Selection:</legend>\r\n               <select [(ngModel)]=\"_reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_DIV\" style=\"height: 30px !important;\"\r\n               class=\"form-control input-text\">\r\n               <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL</option>\r\n                   <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                       {{ div.NAME }}\r\n                   </option>\r\n               </select>\r\n           </fieldset>\r\n\r\n           <fieldset>\r\n            <legend>Cost Center:</legend>\r\n            <select [(ngModel)]=\"_reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_CostCenter\"\r\n            style=\"height: 30px !important;\"\r\n            class=\"form-control input-text\">\r\n                <option value=\"%\"> </option>\r\n                <option *ngFor=\"let i of CostcenterList\" value={{i.CCID}}>{{i.COSTCENTERNAME}}\r\n                </option>\r\n            </select>\r\n        </fieldset>\r\n            <fieldset>\r\n               <legend>Report Style:</legend>\r\n               <label class=\"smallBoldLabel\" style=\"padding-right:15px;\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                     [(ngModel)]=\"_reportFilterService.DebtorsOutstandingObj.ISSUMMARY\" value=1>&nbsp;Summary Report</label>\r\n               <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                     [(ngModel)]=\"_reportFilterService.DebtorsOutstandingObj.ISSUMMARY\" value=0>&nbsp;Detail Report</label>\r\n            </fieldset>\r\n\r\n         </div>\r\n         <!-- Right Column -->\r\n         <div class=\"col-md-6\">\r\n            <fieldset *ngIf=\"_reportFilterService.DebtorsOutstandingObj.ISSUMMARY == 1\">\r\n               <legend>Report Grouping Options :</legend>\r\n               <select [(ngModel)]=\"_reportFilterService.DebtorsOutstandingObj.GROUPBY\" style=\"height: 30px !important;\"\r\n               class=\"form-control input-text\">\r\n                  <option value=0></option>\r\n                  <option value=1>Area Wise</option>\r\n                  <option value=2>Party Group Wise</option>\r\n                  <option value=3>Party Group Wise in Tree Format</option>\r\n               </select>\r\n\r\n               <label class=\"smallBoldLabel\" style=\"padding-top:10px;\"><input type=\"checkbox\" name=\"showCred\"\r\n                  (change)=\"$event.target.checked?(_reportFilterService.DebtorsOutstandingObj.DOAGEINGOFOPENINGBL=1):(_reportFilterService.DebtorsOutstandingObj.DOAGEINGOFOPENINGBL=0)\"\r\n                     [(ngModel)]=\"_reportFilterService.DebtorsOutstandingObj.DOAGEINGOFOPENINGBL\">&nbsp;Ignore Aging of Opening B/L </label><br>\r\n\r\n                     <fieldset>\r\n                        <legend>Report Filter Option:</legend>\r\n                        <div class=\"row\">\r\n                           <div class=\"col-sm-5\"><label class=\"smallBoldLabel\">Area:</label></div>\r\n                           <div class=\"col-sm-7\">\r\n                              <select [(ngModel)]=\"_reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_AreaWiseInSummary\"\r\n                              style=\"height: 30px !important;\" class=\"form-control\">\r\n                                  <option value=0></option>\r\n                                  <option *ngFor=\"let i of AreaList\" value={{i.AREA_ID}}>{{i.AREA_NAME}}</option>\r\n                              </select>\r\n                           </div>\r\n                        </div>\r\n      \r\n                        <div class=\"row\" style=\"margin-top: 10px;\">\r\n                           <div class=\"col-sm-5\"><label class=\"smallBoldLabel\">Party Group:</label></div>\r\n                           <div class=\"col-sm-7\">\r\n                              <select [(ngModel)]=\"_reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_PartyGroup\"\r\n                              style=\"height: 30px !important;\" class=\"form-control\">\r\n                                  <option value='%'></option>\r\n                                  <option *ngFor=\"let i of PartyGroupList\" value={{i.ACID}}>{{i.ACNAME}}</option>\r\n                              </select>\r\n                           </div>\r\n                        </div>\r\n                           \r\n                        </fieldset>\r\n            </fieldset>\r\n\r\n            <fieldset *ngIf=\"_reportFilterService.DebtorsOutstandingObj.ISSUMMARY == 0\">\r\n               <legend>Report Options :</legend>\r\n               <select [(ngModel)]=\"_reportFilterService.DebtorsOutstandingObj.ReportType\" style=\"height: 30px !important;\"\r\n               class=\"form-control input-text\"\r\n                  (change)=\"checkValue()\">\r\n                  <option value=1>Customer Wise</option>\r\n                  <option value=2>Area Wise</option>\r\n                  <!-- <option value=3>Cost Center Wise</option> -->\r\n               </select>\r\n            </fieldset>\r\n\r\n            <div *ngIf=\"showCustomer && _reportFilterService.DebtorsOutstandingObj.ISSUMMARY=='0'\">\r\n                  <fieldset>\r\n                      <legend><label class=\"smallBoldLabel\">&nbsp;Ledger Wise</label></legend>\r\n                      <div>\r\n                          <div class=\"col-md-10\">\r\n                              <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\" [(ngModel)]=\"_reportFilterService.DebtorsOutstandingObj.multipleACNAME\"\r\n                          placeholder=\"Press Enter or Tab for Account List\" (keydown.Tab)=\"MultipleAccountEnterClicked($event)\"\r\n                          (keydown.enter)=\"MultipleAccountEnterClicked($event)\">\r\n\r\n                          </div>\r\n                          <div class=\"col-md-2\">\r\n                              <button type=\"button\" class=\"btn btn-info\"\r\n                                  (click)=\"addAccountToList()\">Add</button>\r\n                          </div>\r\n                          <div class=\"col-md-12\">\r\n                              <table style=\"height:175px;\">\r\n                                  <tr class=\"smallBoldLabel\">\r\n                                      <th style=\"width:3px;font-weight: bold;\">S.No.</th>\r\n                                      <th style=\"width:10px;font-weight: bold;\">Account</th>\r\n                                      <th style=\"width:4px;font-weight: bold;\">Action</th>\r\n                                  </tr>\r\n                                  <tr *ngFor=\"let data of _reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_multipleAccounts;let i = index\"\r\n                                      class=\"smallBoldLabel\">\r\n                                      <td style=\"width:3px;\">{{ i + 1 }}</td>\r\n                                      <td style=\"width:10px;\">{{data.ACNAME}}</td>\r\n                                      <td style=\"width:4px;\">\r\n                                          <button type=\"button\" class=\"action-btn\"\r\n                                              (click)=\"deleteAccount(i)\">Delete</button>\r\n                                      </td>\r\n                                  </tr>\r\n                              </table>\r\n                          </div>\r\n                        </div>\r\n                  </fieldset>\r\n            </div>\r\n\r\n            <div *ngIf=\"showArea && _reportFilterService.DebtorsOutstandingObj.ISSUMMARY==0\">\r\n               <fieldset>\r\n                  <legend>Area:</legend>\r\n                  <select [(ngModel)]=\"_reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_AreaWise\"\r\n                  style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                      <option value=0></option>\r\n                      <option *ngFor=\"let i of AreaList\" value={{i.AREA_ID}}>{{i.AREA_NAME}}</option>\r\n                  </select>\r\n              </fieldset>\r\n            </div>\r\n\r\n            <label class=\"smallBoldLabel\"><input type=\"checkbox\" name=\"incpostdate\"\r\n               (change)=\"$event.target.checked?(_reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_INCLUDEPOSTEDTRANSACTION=1):(_reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_INCLUDEPOSTEDTRANSACTION=0)\"\r\n               [checked]=\"_reportFilterService.DebtorsOutstandingObj.DebtorsOutstanding_INCLUDEPOSTEDTRANSACTION == 1\">&nbsp;Include Post Dated\r\n            Transaction</label><br>\r\n         </div>\r\n      </div>\r\n\r\n      <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n         <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n         <button type=\"button\" title=\"Cancel\" class=\"btn btn-info\" (click)=\"closeReportBox()\">Close</button>\r\n      </div>\r\n\r\n   </div>\r\n\r\n   <generic-popup-grid #genericGridMultipleAccountLedger [popupsettings]=\"gridPopupSettingsForMultipleAccountLedgerList\"\r\n    (onItemDoubleClick)=\"dblClickMultipleAccountSelect($event)\">\r\n</generic-popup-grid>\r\n"

/***/ }),

/***/ 1781:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .input-text{\r\n         width : 100%; \r\n         /* height: 30px !important; */\r\n         font-weight: bold;\r\n     }\r\n </style>\r\n<fieldset>\r\n    <legend>Division Selection:</legend>\r\n    <select [(ngModel)]=\"_reportFilterService.ReportFilterObject.DIV\" style=\"height: 30px !important;\" \r\n    class=\"form-control input-text\">\r\n        <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0\">ALL</option>\r\n        <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n            {{ div.NAME }}\r\n        </option>\r\n    </select>\r\n</fieldset>"

/***/ }),

/***/ 1782:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .input-text {\r\n        width: 100%;\r\n        /* height: 30px !important; */\r\n        font-weight: bold;\r\n    }\r\n\r\n    label {\r\n        font-size: 12px;\r\n        margin: 0;\r\n    }\r\n\r\n    .td-class {\r\n        border: none !important;\r\n    }\r\n\r\n    .date-input {\r\n        width: 93%;\r\n        font-size: 12px !important;\r\n        height: 30px !important;\r\n    }\r\n\r\n    @media screen and (max-width:991px) {\r\n        .report-container {\r\n            width: 100% !important;\r\n        }\r\n\r\n        .report-height {\r\n            height: 52vh;\r\n            overflow: auto;\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width:767px) {\r\n        .smallBoldLabel {\r\n            width: auto !important;\r\n        }\r\n    }\r\n</style>\r\n\r\n<div class=\"container report-container\" style=\"background-color: #ffffff; padding: 1%; height: auto;\">\r\n    <div class=\"row\">\r\n        <div class=\"modal-header\" style=\"width: 97%; margin: 0px auto;\">\r\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n            <h4 class=\"modal-title\">Fixed Assets Register Report</h4>\r\n        </div>\r\n        <div class=\"col-md-12 report-height\" style=\"padding-top: 2%;\">\r\n            <!-- Left Column -->\r\n            <div class=\"col-md-6\">\r\n                <fieldset>\r\n                    <legend>Report Option</legend>\r\n                    <select style=\"height: 30px !important;\" class=\"form-control input-text\" [(ngModel)]=\"_reportFilterService.FaarAssetObj.FaarAsset_REPORTOPTION\">\r\n                        <option *ngFor=\"let option of REPORTOPTION\" [value]=\"option.Mode\">{{ option.ReportOptionName }}</option>\r\n                    </select>\r\n                </fieldset>\r\n                <!-- <div class=\"col-md-12 checkbox\" style=\"padding-top: 5px\">\r\n                    <label class=\"smallBoldLabel\" style=\"margin-left: 0px;\">\r\n                        <input type=\"checkbox\"  [(ngModel)]=\"_reportFilterService.FaarAssetObj.FaarAsset_INCLUDEOPENINGVALUE\">&nbsp;&nbsp;Include Opening Value\r\n                    </label>\r\n                </div> -->\r\n            </div>\r\n            <!-- Right Column -->\r\n            <div class=\"col-md-6\">\r\n                <fieldset style=\"padding-bottom: 1px;\">\r\n                    <legend style=\"margin-bottom: -4px;\">Pool Selection</legend>\r\n                    <table>\r\n                        <tr style=\"overflow: hidden;\">\r\n                            <td style=\"border: none;\" class=\"smallBoldLabel\">Pool Name: </td>\r\n                            <td style=\"border: none; width: 70%;\">\r\n                                <select [(ngModel)]=\"_reportFilterService.FaarAssetObj.FaarAsset_POOLNAME\" (ngModelChange)=\"onPoolNameChange($event)\" style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                                    <option value=\"%\"></option>\r\n                                    <option *ngFor=\"let pool of poolName\" value=\"{{ pool.AssetGroupID }}\">{{ pool.GroupName }}</option>\r\n                                </select>\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </fieldset>\r\n\r\n                <fieldset style=\"padding-bottom: 1px;\">\r\n                    <legend style=\"margin-bottom: -4px;\">Block Selection</legend>\r\n                    <table>\r\n                        <tr>\r\n                            <td style=\"border: none;\" class=\"smallBoldLabel\">Ledger Name: </td>\r\n                            <td style=\"border: none; width: 70%;\">\r\n                                <input  type=\"text\" class=\"form-control\" [(ngModel)]=\"_reportFilterService.FaarAssetObj.FaarAsset_LEDGERNAME\" (keydown.Enter)=\"LedgerNameEnterCommand()\" (keydown.Tab)=\"LedgerNameEnterCommand()\" autocomplete=\"off\" placeholder=\"Press Enter or Tab for Ledger List\">\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </fieldset>\r\n                <fieldset style=\"padding-bottom: 1px;\">\r\n                    <legend style=\"margin-bottom: -4px;\">Item Selection</legend>\r\n                    <table>\r\n                        <tr>\r\n                            <td style=\"border: none;\" class=\"smallBoldLabel\">Asset Name: </td>\r\n                            <td style=\"border: none; width: 70%;\">\r\n                                <input type=\"text\" name=\"companynorms\" class=\"form-control\" [(ngModel)]=\"_reportFilterService.FaarAssetObj.FaarAsset_ASSETNAME\" (keydown.Enter)=\"AssetNameEnterCommand()\" (keydown.Tab)=\"AssetNameEnterCommand()\" (input)=\"clearAssetMcode()\" autocomplete=\"off\" placeholder=\"Press Enter or Tab for Asset List\">\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </fieldset>\r\n                <fieldset style=\"padding-bottom: 1px;\">\r\n                    <legend style=\"margin-bottom: -4px;\">Asset Code Selection</legend>\r\n                    <table>\r\n                        <tr>\r\n                            <td style=\"border: none;\" class=\"smallBoldLabel\">Asset ID: </td>\r\n                            <td style=\"border: none; width: 70%;\">\r\n                                <input type=\"text\" name=\"companynorms\" class=\"form-control\" [(ngModel)]=\"_reportFilterService.FaarAssetObj.FaarAsset_ASSETID\" (keydown.Enter)=\"AssetIdEnterCommand()\" (keydown.Tab)=\"AssetIdEnterCommand()\" autocomplete=\"off\" placeholder=\"Press Enter or Tab for ID List\">\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </fieldset>\r\n            </div>\r\n        </div>\r\n        <div class=\"modal-footer\" style=\"width: 97%; margin: 0px auto;\">\r\n            <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=\"onload()\">RUN</button>\r\n            <button type=\"button\" title=\"Cancel\" class=\"btn btn-info\" (click)=\"closeReportBox()\">Close</button>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<generic-popup-grid #genericGridLedgerList [popupsettings]=\"gridLedgerListPopupSettings\"\r\n        (onItemDoubleClick)=\"onLedgerSelect($event)\"></generic-popup-grid>\r\n\r\n    <generic-popup-grid #genericGridAssetNameList [popupsettings]=\"gridAssetNameListPopupSettings\"\r\n        (onItemDoubleClick)=\"onAssetNameSelect($event)\"></generic-popup-grid>\r\n\r\n        <generic-popup-grid #genericGridAssetIDList [popupsettings]=\"gridAssetIDListPopupSettings\"\r\n  (onItemDoubleClick)=\"onAssetIDSelect($event)\"></generic-popup-grid>\r\n"

/***/ }),

/***/ 1783:
/***/ (function(module, exports) {

module.exports = "<div style=\"background-color : #ffffff; padding :1%; height : auto; width:50%; \">\r\n  <div class=\"row\">\r\n    <div class=\"modal-header\">\r\n      <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"hide()\">&times;</button>\r\n      <h4 class=\"modal-title\">One Lakh Above Purchase Report</h4>\r\n    </div>\r\n    <div class=\"_left_section col-md-12\">\r\n      <fieldset style=\"width:352px\">\r\n        <legend style=\"font-size:11px;font-weight: bold; width:auto\">Date Range Selection :</legend>\r\n        <table>\r\n          <tr>\r\n            <td><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n            <td><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              <label class=\"smallBoldLabel\"><input type=\"date\" style=\"width:152px; min-width:50%;\"\r\n                  placeholder=\"Year Start Date\" [(ngModel)]=\"OneLakhAbovePurchaseReport.DATE1\"\r\n                  (change)=\"changeEntryDate($event.target.value,'AD')\"></label>\r\n            </td>\r\n            <td>\r\n              <label class=\"smallBoldLabel\"><input type=\"date\" style=\"width:152px; min-width:50%;\"\r\n                  placeholder=\"Year Start Date\" [(ngModel)]=\"OneLakhAbovePurchaseReport.DATE\"\r\n                  (change)=\"changeEndDate($event.target.value,'AD')\"></label>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              <label class=\"smallBoldLabel\"> <input id=\"nepaliDate\" style=\"width:152px;height:25px;text-align:center\"\r\n                  class=\"nepali-calendar ndp-nepali-calendar\" [(ngModel)]=\"OneLakhAbovePurchaseReport.BSDATE1\"\r\n                  type=\"text\" (change)=\"changeEntryDate($event.target.value,'BS')\" placeholder=\"yyyy-mm-dd\" />\r\n              </label>\r\n            </td>\r\n            <td>\r\n              <label class=\"smallBoldLabel\">\r\n                <input id=\"nepaliDate\" style=\"width:152px;height:25px;text-align:center\"\r\n                  class=\"nepali-calendar ndp-nepali-calendar\" [(ngModel)]=\"OneLakhAbovePurchaseReport.BSDATE2\"\r\n                  type=\"text\" (change)=\"changeEndDate($event.target.value,'BS')\" placeholder=\"yyyy-mm-dd\" />\r\n              </label>\r\n            </td>\r\n          </tr>\r\n        </table>\r\n      </fieldset>\r\n\r\n      <!-- Division Selection Start -->\r\n      <fieldset style=\"width:352px;\">\r\n        <legend>Division Selection:</legend>\r\n        <select class=\"form-control\" [(ngModel)]=\"this.OneLakhAbovePurchaseReport.DIV\" #division\r\n          (change)=\"divisionChanged()\">\r\n          <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0\" selected>ALL</option>\r\n          <option *ngFor=\"let divs of divisionList;let i=index\" value=\"{{divs.INITIAL}}\">{{divs.NAME}}\r\n          </option>\r\n        </select>\r\n      </fieldset>\r\n      <!-- Division Selection End -->\r\n\r\n      <!-- R1,R2,R3 start-->\r\n      <fieldset>\r\n        <div class=\"checkbox\" style=\"padding-top:5px;width:200px;\">\r\n          <label class=\"smallBoldLabel\">\r\n            <input type=\"checkbox\" [(ngModel)]=\"this.OneLakhAbovePurchaseReport.isR1\">\r\n            Credit Sales Only\r\n          </label>\r\n        </div>\r\n        <div class=\"checkbox\" style=\"padding-top:1px;width:200px;\">\r\n          <label class=\"smallBoldLabel\">\r\n            <input type=\"checkbox\" [(ngModel)]=\"this.OneLakhAbovePurchaseReport.isR2\">\r\n            Non Credit Sales With Pan No Only\r\n          </label>\r\n        </div>\r\n        <div class=\"checkbox\" style=\"padding-top:1px;width:300px;\">\r\n          <label class=\"smallBoldLabel\">\r\n            <input type=\"checkbox\" [(ngModel)]=\"this.OneLakhAbovePurchaseReport.isR3\">\r\n            Non Credit Sales Without Pan No Only\r\n          </label>\r\n        </div>\r\n      </fieldset>\r\n      <!-- R1,R2,R3 end-->\r\n\r\n      <div style='margin-top:20px;'>\r\n        <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n        <button type=\"button\" (click)=\"cancel()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</div>\r\n"

/***/ }),

/***/ 1784:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .input-text {\r\n        width: 100%;\r\n        /* height: 30px !important; */\r\n        font-weight: bold;\r\n    }\r\n\r\n    .td-class {\r\n        border: none !important;\r\n    }\r\n\r\n    .date-input {\r\n        width: 93%;\r\n        font-size: 12px !important;\r\n        height: 30px !important;\r\n    }\r\n      @media screen and (max-width:991px) {\r\n         .report-container{\r\n           width: 100% !important;\r\n    }\r\n    .report-height{\r\n        height:52vh; \r\n        overflow:auto;\r\n    }\r\n    }\r\n         @media screen and (max-width:767px) {\r\n            .smallBoldLabel{\r\n                  width: auto !important;\r\n            }\r\n            \r\n        \r\n    }\r\n</style>\r\n<div class=\"container report-container\" style=\"background-color : #ffffff; padding :1%; height : auto;  \">\r\n    <div class=\"row\">\r\n        <div class=\"modal-header\" style=\"width : 97%; margin : 0px auto;\">\r\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeReportBox()\">&times;</button>\r\n            <h4 class=\"modal-title\">Voucher Register Report</h4>\r\n        </div>\r\n        <div class=\"col-md-12 report-height\">\r\n            <!-- Left Column -->\r\n            <div class=\"col-md-6\">\r\n                <fieldset>\r\n                    <legend>Voucher Name:</legend>\r\n                    <select [(ngModel)]=\"_reportFilterService.VoucherRegisterObj.VTYPE\" style=\"height: 30px !important;\"\r\n                        class=\"form-control input-text\" (change)=\"OnVoucherSelect()\">\r\n                        <option value=\"%\">All</option>\r\n                        <option *ngFor=\"let vt of voucherTypeList\" value=\"{{ vt.VOUCHER_ID }}\">\r\n                            {{ vt.VOUCHER_NAME }}\r\n                        </option>\r\n                    </select>\r\n                </fieldset>\r\n\r\n                <div *ngIf=\"showVoucherTable\">\r\n                    <fieldset>\r\n                        <legend><label class=\"smallBoldLabel\">&nbsp;Voucher Type Selection</label></legend>\r\n                        <div>\r\n                            <div class=\"col-md-2\">\r\n                                <button type=\"button\" class=\"btn btn-info\"\r\n                                    (click)=\"addVoucherList()\">Add</button>\r\n                            </div>\r\n                            <div class=\"col-md-12\">\r\n                                <table style=\"height:175px; overflow: scroll;\">\r\n                                    <tr class=\"smallBoldLabel\">\r\n                                        <th style=\"width:3px;font-weight: bold;\">S.No.</th>\r\n                                        <th style=\"width:10px;font-weight: bold;\">Voucher Name</th>\r\n                                        <th style=\"width:4px;font-weight: bold;\">Action</th>\r\n                                    </tr>\r\n                                    <tr *ngFor=\"let data of this._reportFilterService.VoucherRegisterObj.VoucherRegister_MultipleVoucher;let i = index\"\r\n                                        class=\"smallBoldLabel\">\r\n                                        <td style=\"width:3px;\">{{ i + 1 }}</td>\r\n                                        <td style=\"width:10px;\">{{data.VOUCHER_NAME}}</td>\r\n                                        <td style=\"width:4px;\">\r\n                                            <button type=\"button\" class=\"action-btn\"\r\n                                                (click)=\"deleteVoucher(i)\">Delete</button>\r\n                                        </td>\r\n                                    </tr>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                    </fieldset>\r\n                </div>\r\n\r\n\r\n                <div class=\"row\" style=\"margin-left: 5px;padding-bottom: 3px;padding-top: 3px;\">\r\n                    <label class=\"smallBoldLabel\" style=\"clear : both;\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                            [(ngModel)]=\"_reportFilterService.VoucherRegisterObj.REPORTMODEVR\" value=0>&nbsp;Report on\r\n                        Date Range </label>\r\n                </div>\r\n\r\n                <fieldset>\r\n                    <legend style=\"font-size:11px;font-weight: bold; width:auto;margin-bottom: -4px;\">Date Range\r\n                        Selection :</legend>\r\n                    <table>\r\n                        <tr>\r\n                            <td class=\"td-class\"><label class=\"smallBoldLabel\">From:(AD)</label></td>\r\n                            <td class=\"td-class\"><label class=\"smallBoldLabel\">To:(AD)</label></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td class=\"td-class\">\r\n                                <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                    [(ngModel)]=\"_reportFilterService.VoucherRegisterObj.VoucherRegister_DATE1\"\r\n                                    (change)=\"changeEntryDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                            </td>\r\n                            <td class=\"td-class\">\r\n                                <input type=\"date\" class=\"date-input form-control\" placeholder=\"Year Start Date\"\r\n                                    [(ngModel)]=\"_reportFilterService.VoucherRegisterObj.VoucherRegister_DATE2\"\r\n                                    (change)=\"changeEndDate($event.target.value,'AD')\" max=\"{{masterService.date1 | date:'yyyy-MM-dd'}}\" min=\"{{masterService.date2 | date:'yyyy-MM-dd'}}\">\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td class=\"td-class\">\r\n                              <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDatefrom'\"\r\n                              (change)=\"changeEntryDate($event.detail.value,'BS')\"\r\n                              [label]=\"'From'\"\r\n                              [(ngModel)]=\"_reportFilterService.VoucherRegisterObj.VoucherRegister_BSDATE1\">\r\n                            </nepali-date-picker>\r\n                                <!-- <input id=\"nepaliDate\" style=\"text-align:center;\"\r\n                                    class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                    [(ngModel)]=\"_reportFilterService.VoucherRegisterObj.VoucherRegister_BSDATE1\"\r\n                                    type=\"text\" (change)=\"changeEntryDate($event.target.value,'BS')\"\r\n                                    placeholder=\"yyyy-mm-dd\" /> -->\r\n                            </td>\r\n                            <td class=\"td-class\">\r\n                              <nepali-date-picker name=\"nepaliDateFrom\" [id]=\"'nepaliDateTo'\"\r\n                              (change)=\"changeEndDate($event.detail.value,'BS')\"\r\n                              [label]=\"'To'\"\r\n                              [(ngModel)]=\"_reportFilterService.VoucherRegisterObj.VoucherRegister_BSDATE2\">\r\n                            </nepali-date-picker>\r\n                                <!-- <input id=\"nepaliDate\" style=\"text-align:center;\"\r\n                                    class=\"nepali-calendar ndp-nepali-calendar date-input form-control\"\r\n                                    [(ngModel)]=\"_reportFilterService.VoucherRegisterObj.VoucherRegister_BSDATE2\"\r\n                                    type=\"text\" (change)=\"changeEndDate($event.target.value,'BS')\"\r\n                                    placeholder=\"yyyy-mm-dd\" /> -->\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </fieldset>\r\n                <fieldset style=\"padding-bottom: 5px;\">\r\n                    <legend>Report Option</legend>\r\n                    <label class=\"smallBoldLabel\"><input type=\"radio\" name=\"BalViewOpt1\"\r\n                            [(ngModel)]=\"_reportFilterService.VoucherRegisterObj.REPORT_TYPE\" value=0>&nbsp;Summary\r\n                        Report </label>&nbsp;&nbsp;&nbsp;\r\n                    <label class=\"smallBoldLabel\" style=\"clear : both;\"><input type=\"radio\" name=\"BalViewOpt1\"\r\n                            [(ngModel)]=\"_reportFilterService.VoucherRegisterObj.REPORT_TYPE\" value=1>&nbsp;Detail\r\n                        Report\r\n                    </label>\r\n\r\n                </fieldset>\r\n                <!-- <costcenter-list></costcenter-list> -->\r\n            </div>\r\n            <!-- Right Column -->\r\n            <div class=\"col-md-6\">\r\n                <!-- <division-list></division-list> -->\r\n\r\n                <fieldset>\r\n                    <legend>Division Selection:</legend>\r\n                    <select [(ngModel)]=\"_reportFilterService.VoucherRegisterObj.VoucherRegister_DIV\"\r\n                        style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                        <option value=\"%\" *ngIf=\"masterService.userSetting.userwisedivision==0 ||  masterService.showAll\">ALL</option>\r\n                        <option *ngFor=\"let div of division\" value=\"{{ div.INITIAL }}\">\r\n                            {{ div.NAME }}\r\n                        </option>\r\n                    </select>\r\n                </fieldset>\r\n\r\n                <div class=\"row\" style=\"margin-left: 5px;padding-bottom: 3px;padding-top: 3px;\">\r\n                    <label class=\"smallBoldLabel\" style=\"clear : both;\"><input type=\"radio\" name=\"BalViewOpt\"\r\n                            [(ngModel)]=\"_reportFilterService.VoucherRegisterObj.REPORTMODEVR\" value=1>&nbsp;Report on\r\n                        Voucher no Range </label>\r\n                </div>\r\n                <fieldset>\r\n                    <table>\r\n                        <tr>\r\n                            <td style=\"border: none;\" class=\"smallBoldLabel\">From</td>\r\n                            <td style=\"border: none;width: 70%;\"><input type=\"text\" style=\"height: 30px !important;width: 50%;\r\n                            font-weight: bold;\" class=\"form-control\" name=\"fromVno\"\r\n                                    [disabled]=\"_reportFilterService.VoucherRegisterObj.REPORTMODEVR == 0\"\r\n                                    [(ngModel)]=\"_reportFilterService.VoucherRegisterObj.FROM_VNO\"> </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td style=\"border: none;\" class=\"smallBoldLabel\">To</td>\r\n                            <td style=\"border: none;width: 70%;\"><input type=\"text\" style=\"height: 30px !important;width: 50%;\r\n                            font-weight: bold;\" class=\"form-control\" name=\"toVno\"\r\n                                    [disabled]=\"_reportFilterService.VoucherRegisterObj.REPORTMODEVR == 0\"\r\n                                    [(ngModel)]=\"_reportFilterService.VoucherRegisterObj.TO_VNO\"></td>\r\n                        </tr>\r\n                    </table>\r\n                </fieldset>\r\n\r\n\r\n                <fieldset style=\"padding-bottom: 1px;\">\r\n                    <legend>Report Filter By</legend>\r\n                    <table>\r\n                        <tr>\r\n                            <td style=\"border: none;\" class=\"smallBoldLabel\">Account Name</td>\r\n                            <td style=\"border: none;width: 70%;\">\r\n                                <!-- <select [(ngModel)]=\"_reportFilterService.VoucherRegisterObj.VoucherRegister_ACID\" class=\"smallBoldLabel\"\r\n                            style=\"width : 100%;\">\r\n                            <option value=\"\"></option>\r\n                            <ng-container *ngFor = \"let it of allAccountList\" >\r\n                                <option value=\"it.ACID\" >{{it.ACNAME}} </option>\r\n                            </ng-container>\r\n                          </select>\r\n                        -->\r\n                                <!-- <div style=\"position: absolute;\">\r\n                               <label class=\"smallBoldLabel\">\r\n                                <input tabindex=\"2\" ngui-auto-complete\r\n                                class=\"form-control input-lg\"\r\n                                [source]=\"dropListItem.bind(this)\"\r\n                                autocomplete=\"off\"\r\n                                 max-num-list=\"25\"\r\n                                [(ngModel)]=\"_reportFilterService.VoucherRegisterObj.VoucherRegister_ACCNAME\" list-formatter=\"ACNAME\"\r\n                                style=\"height: 26px;width: 210px;\"\r\n                                (keydown.enter)=\"onEnterAcnameChange($event)\"\r\n                                (ngModelChange)=\"itemChanged($event)\" name=\"AcName\"\r\n                                display-property-name=\"ACNAME\">\r\n                               </label>\r\n                           </div>  -->\r\n                                <input type=\"text\" style=\"font-weight: bold;\" class=\"form-control\"\r\n                                    [(ngModel)]=\"_reportFilterService.VoucherRegisterObj.VoucherRegister_ACCNAME\"\r\n                                    placeholder=\"Press Enter or Tab for Account List\"\r\n                                    (keydown.Tab)=\"AccountEnterClicked($event)\"\r\n                                    (keydown.enter)=\"AccountEnterClicked($event)\">\r\n\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td style=\"border: none;\" class=\"smallBoldLabel\">Entry User </td>\r\n                            <td style=\"border: none;width: 70%;\">\r\n                                <select [(ngModel)]=\"_reportFilterService.VoucherRegisterObj.USER\"\r\n                                    style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                                    <option value=\"\"></option>\r\n                                    <ng-container *ngFor=\"let it of userList\">\r\n                                        <option value=\"{{it.username}}\">{{it.username}} </option>\r\n                                    </ng-container>\r\n\r\n                                </select>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td style=\"border: none;\" class=\"smallBoldLabel\">Cost Center </td>\r\n                            <td style=\"border: none;width: 70%;\">\r\n                                <select [(ngModel)]=\"_reportFilterService.VoucherRegisterObj.CCENTER\"\r\n                                    style=\"height: 30px !important;\" class=\"form-control input-text\">\r\n                                    <option value=\"%\"> </option>\r\n                                    <ng-container *ngFor=\"let item of costlists\">\r\n                                        <option value=\"{{item.CCID}}\">{{item.COSTCENTERNAME}}</option>\r\n                                    </ng-container>\r\n\r\n                                </select>\r\n                            </td>\r\n                        </tr>\r\n\r\n                    </table>\r\n\r\n                </fieldset>\r\n\r\n\r\n\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"modal-footer\" style=\"width : 97%; margin : 0px auto;\">\r\n            <button class=\"btn btn-info confirm-btn\" type=\"button\" (click)=onload()>RUN</button>\r\n            <button type=\"button\" (click)=\"closeReportBox()\" title=\"Cancel\" class=\"btn btn-info\">Close</button>\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <generic-popup-grid #genericGridACListParty [popupsettings]=\"gridACListPartyPopupSettings\"\r\n        (onItemDoubleClick)=\"onAcPartySelect($event)\"></generic-popup-grid>\r\n\r\n    <generic-popup-grid #genericGridAccountList [popupsettings]=\"gridPopupSettingsForAccountList\"\r\n        (onItemDoubleClick)=\"dblClickAccountSelect($event)\">\r\n    </generic-popup-grid>\r\n"

/***/ }),

/***/ 1785:
/***/ (function(module, exports) {

module.exports = "<style>\r\n  .Regular {\r\n    font-weight: inherit;\r\n    font-size: inherit;\r\n    height: 20px !important;\r\n    color: inherit;\r\n  }\r\n\r\n  .Bold {\r\n    font-weight: bold;\r\n    font-size: inherit;\r\n    height: 23px !important;\r\n    color: inherit;\r\n  }\r\n\r\n  .Regulartd {\r\n    white-space: inherit;\r\n    /* height: 17px; */\r\n    line-height: 10px;\r\n    overflow: hidden;\r\n    padding-left: 5px;\r\n    padding-right: 3px\r\n  }\r\n\r\n  .Boldtd {\r\n    white-space: inherit;\r\n    /* height: 35px; */\r\n    overflow: hidden;\r\n    padding-left: 5px;\r\n    padding-right: 3px;\r\n    line-height: 10px;\r\n  }\r\n\r\n  .toggable-sidebar {\r\n    position: absolute;\r\n    right: -280px;\r\n    transition: 0.3s;\r\n    padding: 10px;\r\n    width: 260px;\r\n    text-decoration: none;\r\n    font-size: 20px;\r\n    border-radius: 0 5px 5px 0;\r\n    background: #c0c0c0;\r\n    color: #000000;\r\n    height: 8%;\r\n    /* width: 20%; */\r\n    margin: 0px;\r\n    border: 1px solid #f1ebeb;\r\n  }\r\n\r\n  .mySidenav-show {\r\n    right: 0 !important;\r\n  }\r\n\r\n  .btn-toggler {\r\n    position: absolute;\r\n    left: -45px;\r\n    top: 3px;\r\n    background: #8cccfb !important;\r\n    border-color: #8cccfb !important;\r\n    padding: 5px 12px 5px 5px !important;\r\n    font-size: 10px !important;\r\n    width: 45px !important;\r\n  }\r\n\r\n  .toggler-btn-icon-reverse {\r\n    transform: rotate(180deg);\r\n  }\r\n.reportFormsFields input{\r\nheight: 23px !important;\r\n}\r\n.reportFormsFields select{\r\nheight: 32px !important;\r\n}\r\n  .bold_text {\r\n    font-weight: bold;\r\n  }\r\n\r\n  .highlighted {\r\n    background: silver;\r\n    color: black;\r\n  }\r\n\r\n  .notdisplay {\r\n    display:none;\r\n  }\r\n\r\n  .label_size {\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .BoldLarge {\r\n    font-weight: bold;\r\n    font-size: inherit;\r\n    height: 40px !important;\r\n    color: inherit;\r\n  }\r\n\r\n  .FinalBoldLarge {\r\n    font-weight: bold;\r\n    font-size: inherit;\r\n    line-height: 40px !important;\r\n    color: inherit;\r\n  }\r\n\r\n  .FinalBoldtd {\r\n    white-space: inherit;\r\n    /* height: 35px; */\r\n    overflow: hidden;\r\n    padding-left: 5px;\r\n    padding-right: 3px;\r\n    line-height: 10px;\r\n    font-weight: bold;\r\n  }\r\n\r\n  .BoldLargeRed {\r\n    font-weight: bold;\r\n    font-size: inherit;\r\n    height: 40px !important;\r\n    color: red !important;\r\n  }\r\n\r\n  .FinalBoldLargeRed {\r\n    font-weight: bold;\r\n    font-size: inherit;\r\n    line-height: 40px !important;\r\n    color: red !important;\r\n  }\r\n\r\n  pre{\r\n    color: inherit;\r\n  }\r\n\r\n  .noRightBorder {\r\n    border-right:none !important;\r\n  }\r\n\r\n  .noLeftBorder {\r\n    border-left:none !important;\r\n  }\r\n  .form-input{\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: 7px;\r\n  }\r\n  .form-input label{\r\n    width: 45%;\r\n  }\r\n  .format-btn{\r\n    margin-right: 7px;\r\n  }\r\n  @media screen and (max-width:991px) {\r\n    .LoadSheetMenus tbody{\r\n      display: flex !important;\r\n      overflow-y: inherit !important;\r\n\r\n    }\r\n    .LoadSheetMenus tbody tr{\r\n     \r\n      table-layout: initial !important;\r\n\r\n    }\r\n    .table-containerHeight{\r\n      height: 58vh;\r\n    }\r\n    \r\n  }\r\n</style>\r\n\r\n<div class=\"clearfix\" style=\"background: #fff;\">\r\n  <div class=\"col-md-12\" style=\"margin-top: 12px;\">\r\n    <label style=\"font-size:18px;margin-left: 19px; font-family:Roboto, Arial, sans-serif;\" class=\"modal-title bold_text\">{{reportDisplayName | titlecase}}&nbsp;&nbsp;</label>\r\n    <ng-container *ngIf=\"reportparam && reportname\">\r\n      <b><label *ngIf=\"labelDisplayName\" class=\"label_size\">{{labelDisplayName}}:&nbsp;</label>\r\n        <label *ngIf=\"ledgerDisplayName\" class=\"label_size\">{{ledgerDisplayName}}&nbsp;&nbsp;</label>\r\n        <label *ngIf=\"subledgerlabelDisplayName\" class=\"label_size\">{{subledgerlabelDisplayName}}:&nbsp;</label>\r\n        <label *ngIf=\"subledgerDisplayName\" class=\"label_size\">{{subledgerDisplayName}}&nbsp;&nbsp;</label>\r\n        <label class=\"label_size\" style=\"font-family:Roboto, Arial, sans-serif;\"\r\n          *ngIf=\"(reportparam.DATE1 || reportparam.DATE2 || reportparam.DATE) && (reportname!='vat register report' && reportname!='vat register report_1')\">@As\r\n          On Dated:&nbsp;</label>\r\n        <label class=\"label_size\" style=\"font-family:Roboto, Arial, sans-serif;\"\r\n          *ngIf=\"reportparam.DATE1 && (reportname!='vat register report' && reportname!='vat register report_1')\">{{reportparam.DATE1}}&nbsp;&nbsp;</label>\r\n        <label class=\"label_size\" style=\"font-family:Roboto, Arial, sans-serif;\"\r\n          *ngIf=\"reportparam.DATE && (reportname!='vat register report' && reportname!='vat register report_1')\">{{reportparam.DATE}}&nbsp;&nbsp;</label>\r\n        <label class=\"label_size\" style=\"font-family:Roboto, Arial, sans-serif;\"\r\n          *ngIf=\"reportparam.DATE2 && (reportname!='vat register report' && reportname!='vat register report_1')\">To&nbsp;</label>\r\n        <label class=\"label_size\" style=\"font-family:Roboto, Arial, sans-serif;\"\r\n          *ngIf=\"reportparam.DATE2 && (reportname!='vat register report' && reportname!='vat register report_1')\">{{reportparam.DATE2}}</label>\r\n        <label class=\"label_size\" style=\"font-family:Roboto, Arial, sans-serif;\"\r\n          *ngIf=\"reportparam.DATE1 && reportparam.DATE2 && (reportname!='vat register report' && reportname!='vat register report_1')\">({{FromdateInAD}}\r\n          - {{TodateInAD}})</label></b>\r\n      <b><label class=\"label_size\" style=\"font-family:Roboto, Arial, sans-serif;\"\r\n          *ngIf=\"reportparam.DATE && (reportname!='vat register report' && reportname!='vat register report_1')\">({{FromdateInAD}})</label></b>\r\n      <b><label class=\"label_size\" style=\"font-family:Roboto, Arial, sans-serif;\" *ngIf=\"reportmodeisZero == 0\">(@As On Dated:</label>&nbsp;<label\r\n          *ngIf=\"reportmodeisZero == 0\">{{reportparam.DATE1}}&nbsp;</label>\r\n        <label  class=\"label_size\" style=\"font-family:Roboto, Arial, sans-serif;\" *ngIf=\"reportmodeisZero == 0\">To&nbsp;</label><label\r\n          *ngIf=\"reportmodeisZero == 0\">{{reportparam.DATE2}}</label>\r\n        <label *ngIf=\"reportmodeisZero == 0\" style=\"font-family:Roboto, Arial, sans-serif;\" class=\"label_size\">({{FromdateInAD}} - {{TodateInAD}}))</label></b>\r\n        <b><label class=\"label_size\" style=\"width: auto; font-family:Roboto, Arial, sans-serif;\"\r\n          *ngIf=\"divisionDisplayName\" >@Division: {{divisionDisplayName}}&nbsp;</label></b>\r\n          <b><label class=\"label_size\" style=\"width: auto; font-family:Roboto, Arial, sans-serif;\"\r\n            *ngIf=\"costcenterCategoryDisplayName\" >@Cost Center Category: {{costcenterCategoryDisplayName}}&nbsp;</label></b>\r\n          <b><label class=\"label_size\" style=\"width: auto; font-family:Roboto, Arial, sans-serif;\"\r\n          *ngIf=\"costcenterDisplayName\" >@Cost Center: {{costcenterDisplayName}}&nbsp;</label></b>\r\n        <!-- <b><label *ngIf=\"costcenterDisplayName\" style=\"font-family:Roboto, Arial, sans-serif;\" class=\"label_size\">@Cost Center:&nbsp;</label><label\r\n            *ngIf=\"costcenterDisplayName\">{{costcenterDisplayName}}</label></b> -->\r\n      <b><label *ngIf=\"reportmodeisZero == 1\" style=\"font-family:Roboto, Arial, sans-serif;\" class=\"label_size\">(@Voucher Range From&nbsp;</label><label\r\n          *ngIf=\"reportmodeisZero == 1\">{{reportparam.FROM_VNO}}</label>\r\n        <label *ngIf=\"reportmodeisZero == 1\" style=\"font-family:Roboto, Arial, sans-serif;\"class=\"label_size\">To</label>&nbsp;<label\r\n          *ngIf=\"reportmodeisZero == 1\">{{reportparam.TO_VNO}})</label></b>\r\n      <b><label *ngIf=\"detailreportDisplayName\" style=\"font-family:Roboto, Arial, sans-serif;\" class=\"label_size\">{{detailreportDisplayName}}</label></b>\r\n      <b><label class=\"label_size\" style=\"font-family:Roboto, Arial, sans-serif;\"\r\n          *ngIf=\"accountDisplayName && (reportname=='vat register report' || reportname=='vat register report_1' ||\r\n          this.reportname == 'Cash/Bank Book Report' || this.reportname == 'Cash/Bank Book Report_1' ||this.reportname == 'Cash/Bank Book Report_2')\">(@Account:&nbsp;</label>\r\n        <label class=\"label_size\" style=\"font-family:Roboto, Arial, sans-serif;\"\r\n          *ngIf=\"accountDisplayName && (reportname=='vat register report' || reportname=='vat register report_1' ||\r\n          this.reportname == 'Cash/Bank Book Report' || this.reportname == 'Cash/Bank Book Report_1' ||this.reportname == 'Cash/Bank Book Report_2')\">{{accountDisplayName}})</label></b>\r\n      <b><label class=\"label_size\" style=\"font-family:Roboto, Arial, sans-serif;\"\r\n          *ngIf=\"entryuserDisplayName && (reportname=='vat register report' || reportname=='vat register report_1' || reportname=='Day Book Report' || reportname=='Day Book Report_1')\">(@User:&nbsp;</label>\r\n        <label class=\"label_size\" style=\"font-family:Roboto, Arial, sans-serif;\"\r\n          *ngIf=\"entryuserDisplayName && (reportname=='vat register report' || reportname=='vat register report_1' || reportname=='Day Book Report' || reportname=='Day Book Report_1')\">{{entryuserDisplayName}})</label></b>\r\n      <b><label class=\"label_size\" style=\"font-family:Roboto, Arial, sans-serif;\" *ngIf=\"supplierDisplayName\">(@Supplier:&nbsp;</label><label\r\n          *ngIf=\"supplierDisplayName\">{{supplierDisplayName}})</label></b>\r\n      <b><label class=\"label_size\" style=\"font-family:Roboto, Arial, sans-serif;\" *ngIf=\"voucherDisplayName\">(@Voucher No:&nbsp;</label><label\r\n          *ngIf=\"voucherDisplayName\">{{voucherDisplayName}})</label></b>\r\n      <b><label class=\"label_size\" style=\"font-family:Roboto, Arial, sans-serif;\" *ngIf=\"reportTypeDisplay\"></label><label\r\n          *ngIf=\"reportTypeDisplay\">{{reportTypeDisplay}}</label></b>\r\n      <b><label class=\"label_size\" style=\"width: auto; font-family:Roboto, Arial, sans-serif;\"\r\n          *ngIf=\"AreawiseDisplayName\" >@Area: {{AreawiseDisplayName}}&nbsp;</label></b>\r\n      <b><label class=\"label_size\" style=\"width: auto; font-family:Roboto, Arial, sans-serif;\"\r\n          *ngIf=\"PartyGroupDisplayName\" >@PartyGroup: {{PartyGroupDisplayName}}&nbsp;</label></b>\r\n      <b><label class=\"label_size\" style=\"width: auto; font-family:Roboto, Arial, sans-serif;\"\r\n          *ngIf=\"PartyCategoryDisplayName\" >@PartyCategory: {{PartyCategoryDisplayName}}&nbsp;</label></b>\r\n          <b><label class=\"label_size\" style=\"width: auto; font-family:Roboto, Arial, sans-serif;\"\r\n            *ngIf=\"INTERVALNAME\" >@Interval: {{INTERVALNAME}}&nbsp;</label></b>\r\n   \r\n          \r\n    </ng-container>\r\n    <!-- <ng-container *ngIf=\"reportname && reportname =='Additional Cost Detail Report'\">\r\n      <button type=\"button\" class=\"btn btn-info\" (click)=\"SaveReport()\">Save</button>\r\n    </ng-container> -->\r\n    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" style=\"margin-right: 3%;margin-top: 5px;\"\r\n      (click)=\"closeReport(this.activeurlpath)\">&times;</button>\r\n  </div>\r\n  <div class=\" plainBackGround toggable-sidebar\" [ngClass]=\"{ 'mySidenav-show': hideShow }\">\r\n    <button class=\"btn btn-info btn-toggler\" (click)=\"hideShow = !hideShow\">\r\n      <span class=\"glyphicon glyphicon-search\"></span>\r\n      <i class=\" fa fa-angle-double-left\" [ngClass]=\"{ 'toggler-btn-icon-reverse': hideShow }\"></i>\r\n    </button>\r\n    <input class=\"form-control\" style=\"width: 250px;height:25px;\r\n                  margin-right: 50px;\r\n                  margin-bottom: 10px;\" type=\"text\" name=\"search\" [(ngModel)]=\"filter\" placeholder=\"Search in report\">\r\n  </div>\r\n</div>\r\n<div class=\"clearfix\"  style=\"background: #fff;\">\r\n  <div style=\"float:left;width:3%; margin-left: 10px;\">\r\n    <table class=\"LoadSheetMenus\" style=\"margin-left:-7px; \">\r\n      <tr style=\"height:30px;width:30px\">\r\n        <td style=\"border: 1pt solid black;\" class=\"cell-with-comment\">\r\n          <i (click)=\"fiterClickEvent()\" tooltip-placement=\"right\" tooltip=\"Main filters\" style=\"margin:5px\"><span\r\n              class=\"glyphicon glyphicon-filter\" tooltip=\"Main filters\">\r\n            </span></i>\r\n          <span class=\"cell-comment\">\r\n            View Report Dialog Box [F2]\r\n          </span>\r\n        </td>\r\n      </tr>\r\n      <!-- <tr style=\"height:30px;width:30px\">\r\n        <td style=\"border: 1pt solid black;\">\r\n          <i (click)=\"SettingClickEvent()\" style=\"margin:5px\"> <span class=\"glyphicon glyphicon-grain\"></span></i>\r\n        </td>\r\n      </tr> -->\r\n      <tr style=\"height:30px;width:30px\">\r\n        <td style=\"border: 1pt solid black;\" class=\"cell-with-comment\">\r\n          <i (click)=\"ExportReportInExcel('xlsx')\" style=\"margin:5px\"> <span class=\"glyphicon glyphicon-export\"></span></i>\r\n          <span class=\"cell-comment\">\r\n            Save To Excel [F9]\r\n          </span>\r\n        </td>\r\n      </tr>\r\n      <tr style=\"height:30px;width:30px\">\r\n        <td style=\"border: 1pt solid black;\">\r\n          <i (click)=\"SaveInReportColumnFormat()\" style=\"margin:5px\"> <span\r\n              class=\"glyphicon glyphicon-tasks\"></span></i>\r\n        </td>\r\n      </tr>\r\n      <tr style=\"height:30px;width:30px\">\r\n        <td style=\"border: 1pt solid black;\" class=\"cell-with-comment\">\r\n          <i (click)=\"showPreviouslyLoadedReports()\" style=\"margin:5px\"> <span\r\n              class=\"glyphicon glyphicon-open-file\"></span></i>\r\n          <span class=\"cell-comment\">\r\n            Open Report List [Shift+Tab]\r\n          </span>\r\n        </td>\r\n      </tr>\r\n      <tr style=\"height:30px;width:30px\">\r\n        <td style=\"border: 1pt solid black;\" class=\"cell-with-comment\">\r\n          <i (click)=\"printExcelFormat()\" style=\"margin:5px\"> <span class=\"glyphicon glyphicon-print\"></span></i>\r\n          <span class=\"cell-comment\">\r\n            Print Excel Format [Shift+P]\r\n          </span>\r\n        </td>\r\n      </tr>\r\n      <tr style=\"height:30px;width:30px\">\r\n        <td style=\"border: 1pt solid black;\" class=\"cell-with-comment\">\r\n          <i (click)=\"ExportReportInExcel('zip')\" style=\"margin:5px\"> <span class=\"glyphicon glyphicon-download\"></span></i>\r\n          <span class=\"cell-comment\">\r\n            Save To Excel in Zip\r\n          </span>\r\n        </td>\r\n      </tr>\r\n      <!-- <tr style=\"height:30px;width:30px\" *ngIf=\"(reportname == 'Debtors Report' || reportname == 'Debtors Report_1')\">\r\n        <td style=\"border: 1pt solid black;\" class=\"cell-with-comment\">\r\n          <i (click)=\"showcellpayPopup()\" style=\"margin:5px\"> <span class=\"glyphicon glyphicon-hand-right\"></span></i>\r\n          <span class=\"cell-comment\">\r\n            Cellpay Payment\r\n          </span>\r\n        </td>\r\n      </tr> -->\r\n\r\n    </table>\r\n\r\n  </div>\r\n  <div style=\"float:right;width:96%\" class=\"report-table\">\r\n    <div class=\"widgets\">\r\n      <div class=\"row table-container table-containerHeight\">\r\n        <table id=\"BlueHeaderResizableTable\" #reportHtmlTable\r\n          style=\"font-size:12px; width: 98%;overflow-x :auto;overflow-y :scroll;height:93%;\" class=\"reportTabel\">\r\n          <thead *ngIf=\"optionalreportHeaders.length\" style=\"width: 100%;font-weight: bold;\" [ngClass]=\"{'table-first-header':optionalreportHeaders.length}\">\r\n            <tr style=\"height: 25px;\">\r\n              <th *ngFor=\"let column1 of optionalreportHeaders;let id=index\" [style.text-align]=\"column1['alignment']\"\r\n                [attr.colspan]=\"column1.colspan\" width=\"{{column1.width}}\" style=\"font-weight: bold;text-align: center;\"\r\n              [ngClass]=\"(((column1.mappingName=='MAIN GROUP'  || column1.mappingName=='MAINGROUP' || column1.mappingName=='SUB GROUP_A' || column1.mappingName=='SUBGROUP_A' ||\r\n              column1.mappingName=='SUB GROUP_B' || column1.mappingName=='SUBGROUP_B' ||column1.mappingName=='SUB GROUP_C' || column1.mappingName=='SUBGROUP_C' ||\r\n              column1.mappingName=='CATEGORY') && this.reportparam.SHOWGROUPING == 0)?'notdisplay':'') || \r\n              (((column1.mappingName=='SL_BL' || column1.mappingName=='BL_SL' || column1.mappingName=='SL_BL_A' || column1.mappingName=='BL_SL_A') && this.reportparam.SHOWSUBLEDGER == 0)?'notdisplay':'')\">\r\n              {{column1['colGroup']}}\r\n              </th>\r\n            </tr>\r\n\r\n          </thead>\r\n          <thead style=\"width: 100%;\" [ngClass]=\"{'table-second-header':optionalreportHeaders.length, 'table-first-header':!optionalreportHeaders.length}\">\r\n              <tr style=\"height: 25px;\">\r\n                <!-- <th *ngIf=\"(reportname == 'Debtors Report' || reportname == 'Debtors Report_1') && mergereportHeaders.length\" style=\"width: 20px;\"></th> -->\r\n                <th *ngFor=\"let column1 of mergereportHeaders;let i=index\" style=\"font-weight: bold;text-align: center;\"\r\n                  width=\"{{column1.width}}\" [ngStyle]=\"getReportHeadingStyles()\" [ngClass]=\"[(((column1.mappingName=='MAIN GROUP'  || column1.mappingName=='MAINGROUP' || column1.mappingName=='SUB GROUP_A' || column1.mappingName=='SUBGROUP_A' ||\r\n                                          column1.mappingName=='SUB GROUP_B' || column1.mappingName=='SUBGROUP_B' ||column1.mappingName=='SUB GROUP_C' || column1.mappingName=='SUBGROUP_C' ||\r\n                                          column1.mappingName=='CATEGORY') && this.reportparam.SHOWGROUPING == 0)?'notdisplay':'') || \r\n                                          (((column1.mappingName=='SL_BL' || column1.mappingName=='BL_SL' || column1.mappingName=='SL_BL_A' || column1.mappingName=='BL_SL_A') && this.reportparam.SHOWSUBLEDGER == 0)?'notdisplay':''),\r\n                                          (reportname=='Profit Loss Report' || reportname=='Balance Sheet Report') && ShowLineInFinalReport==0? ((i+1 == 2 || i+1 == 3 || i+1 == 4) ? 'noRightBorder':'') : '',\r\n                                          (reportname=='Profit Loss Report' || reportname=='Balance Sheet Report') && ShowLineInFinalReport==0? ((i+1 == 3 || i+1 == 4 || i+1 == 5) ? 'noLeftBorder':'') : '',\r\n                                          (reportname == 'PLACCOUNT' || reportname=='BALANCESHEET') && ShowLineInFinalReport==0 ? ((i+1 == 1 || i+1 == 2 || i+1 == 3 || i+1 == 7 || i+1 == 8 || i+1 == 9) ? 'noRightBorder':'') : '',\r\n                                          (reportname == 'PLACCOUNT' || reportname=='BALANCESHEET') && ShowLineInFinalReport==0 ? ((i+1 == 2 || i+1 == 3 || i+1 == 4 || i+1 == 8 || i+1 == 9 || i+1 == 10) ? 'noLeftBorder':'') : ''\r\n                                          ]\">\r\n                  {{column1.colHeader}}\r\n                </th>\r\n              </tr>\r\n          </thead>\r\n            <tbody style=\"width: fit-content;\" #body>\r\n              <ng-container *ngIf=\"reportname!='PLACCOUNT' && reportname!='BALANCESHEET'\">\r\n                <tr\r\n                *ngFor=\" let data of reportData | filter:filter | paginate: { itemsPerPage: rowsperpage, currentPage: p };let i=index\"\r\n                (dblclick)=\"drillDownReport(data)\" (contextmenu)=\"onRightClick($event,data)\"\r\n                [ngClass]=\"[data.FFLG=='B'?'Bold':'Regular',data.FFLG=='BL'?'BoldLarge':'Regular',data.FFLG=='BR'?'BoldLargeRed':'Regular']\" [class.active]=\"i == HighlightRow\" (click)=\"clicked(i)\">\r\n  <!-- <td *ngIf=\"(reportname == 'Debtors Report' || reportname == 'Debtors Report_1') && reportData.length\" style=\"width: 20px;\">\r\n    <input type=\"checkbox\" [(ngModel)]=\"data.isCheck\" (change)=\"checkData(i,data)\">\r\n  </td> -->\r\n                <td [ngClass]=\"[(data.FFLG=='B')? 'Boldtd':'Regulartd' , \r\n                (reportname=='Profit Loss Report' || reportname=='Balance Sheet Report') && ShowLineInFinalReport==0 ? ((id+1 == 2 || id+1 == 3 || id+1 == 4) ? 'noRightBorder':'') : '',\r\n                (reportname=='Profit Loss Report' || reportname=='Balance Sheet Report') && ShowLineInFinalReport==0? ((id+1 == 3 || id+1 == 4 || id+1 == 5) ? 'noLeftBorder':'') : '',\r\n                (((column.mappingName=='MAIN GROUP' || column.mappingName=='MAINGROUP' || column.mappingName=='SUB GROUP_A' || \r\n                column.mappingName=='SUBGROUP_A' || column.mappingName=='SUB GROUP_B' || column.mappingName=='SUBGROUP_B' ||column.mappingName=='SUB GROUP_C' || \r\n                column.mappingName=='SUBGROUP_C' ||\r\n                column.mappingName=='CATEGORY')  && this.reportparam.SHOWGROUPING == 0)? 'notdisplay':'') || \r\n                (((column.mappingName=='SL_BL' || column.mappingName=='BL_SL' || column.mappingName=='SL_BL_A' || column.mappingName=='BL_SL_A') && this.reportparam.SHOWSUBLEDGER == 0)?'notdisplay':'')\r\n\r\n                ]\"\r\n                 *ngFor=\"let column of reportHeaders;let id=index\"\r\n                  width=\"{{column.width}}\" [style.text-align]=\"column.alignment==0?'inherit':'end'\" style=\"height: 20px !important;\">\r\n   \r\n                   <pre style=\"margin: 0 !important;overflow: hidden;\" [ngStyle]=\"getReportDetailStyles()\">{{data[column.mappingName]}}</pre>\r\n                   </td>\r\n              </tr>\r\n              </ng-container>\r\n              <ng-container *ngIf=\"reportname=='PLACCOUNT' || reportname=='BALANCESHEET'\">\r\n                <tr style=\"width:100%;\"\r\n                *ngFor=\" let data of reportData | filter:filter | paginate: { itemsPerPage: rowsperpage, currentPage: p };let i=index\"\r\n                (dblclick)=\"drillDownReport(data)\" (contextmenu)=\"onRightClick($event,data)\" [class.active]=\"i == HighlightRow\" >\r\n                <ng-container *ngFor=\"let column of reportHeaders;let j=index\">\r\n                  <td [ngClass]=\"[(data.FFLG1=='B')? 'FinalBoldtd':'Regulartd' ,(data.FFLG1=='BL')? 'FinalBoldLarge':'Regulartd',(data.FFLG1=='BR')? 'FinalBoldLargeRed':'Regulartd',\r\n                   (((column.mappingName=='MAIN GROUP' || column.mappingName=='MAINGROUP' || column.mappingName=='SUB GROUP_A' || \r\n                  column.mappingName=='SUBGROUP_A' || column.mappingName=='SUB GROUP_B' || column.mappingName=='SUBGROUP_B' ||column.mappingName=='SUB GROUP_C' || \r\n                  column.mappingName=='SUBGROUP_C' ||\r\n                  column.mappingName=='CATEGORY')  && this.reportparam.SHOWGROUPING == 0)? 'notdisplay':'') ||\r\n                  (((column.mappingName=='SL_BL' || column.mappingName=='BL_SL' || column.mappingName=='SL_BL_A' || column.mappingName=='BL_SL_A') && this.reportparam.SHOWSUBLEDGER == 0)?'notdisplay':''),\r\n                  ((j+1 == 1 || j+1 == 2 || j+1 == 3) && ShowLineInFinalReport==0 ? 'noRightBorder':''),\r\n                  ((j+1 == 2 || j+1 == 3 || j+1 == 4) && ShowLineInFinalReport==0? 'noLeftBorder':''),\r\n                  ((j+1 == 7 || j+1 == 8 || j+1 == 9) && ShowLineInFinalReport==0? 'noRightBorder':''),\r\n                  ((j+1 == 8 || j+1 == 9 || j+1 == 10) && ShowLineInFinalReport==0? 'noLeftBorder':'')\r\n                  ]\"\r\n                   *ngIf=\"j+1<=leftcolumnnumber+1\"\r\n                    width=\"{{column.width}}\" [style.text-align]=\"column.alignment==0?'inherit':'end'\" style=\"height: 20px !important;\" (click)=\"clickedPL(j,column)\">\r\n     \r\n                     <pre style=\"margin: 0 !important;overflow: hidden;\" [ngStyle]=\"getReportDetailStyles()\">{{data[column.mappingName]}}</pre>\r\n                     </td>\r\n                </ng-container>\r\n                <ng-container *ngFor=\"let column of reportHeaders;let k=index\">\r\n                  <td [ngClass]=\"[(data.FFLG2=='B')? 'FinalBoldtd':'Regulartd' ,(data.FFLG2=='BL')? 'FinalBoldLarge':'Regulartd',(data.FFLG2=='BR')? 'FinalBoldLargeRed':'Regulartd',\r\n                   (((column.mappingName=='MAIN GROUP' || column.mappingName=='MAINGROUP' || column.mappingName=='SUB GROUP_A' || \r\n                  column.mappingName=='SUBGROUP_A' || column.mappingName=='SUB GROUP_B' || column.mappingName=='SUBGROUP_B' ||column.mappingName=='SUB GROUP_C' || \r\n                  column.mappingName=='SUBGROUP_C' ||\r\n                  column.mappingName=='CATEGORY')  && this.reportparam.SHOWGROUPING == 0)? 'notdisplay':'') ||\r\n                  (((column.mappingName=='SL_BL' || column.mappingName=='BL_SL' || column.mappingName=='SL_BL_A' || column.mappingName=='BL_SL_A') && this.reportparam.SHOWSUBLEDGER == 0)?'notdisplay':''),\r\n                  ((k+1 == 1 || k+1 == 2 || k+1 == 3) && ShowLineInFinalReport==0? 'noRightBorder':''),\r\n                  ((k+1 == 2 || k+1 == 3 || k+1 == 4) && ShowLineInFinalReport==0? 'noLeftBorder':''),\r\n                  ((k+1 == 7 || k+1 == 8 || k+1 == 9) && ShowLineInFinalReport==0? 'noRightBorder':''),\r\n                  ((k+1 == 8 || k+1 == 9 || k+1 == 10) && ShowLineInFinalReport==0? 'noLeftBorder':'')\r\n                  ]\"\r\n                   *ngIf=\"k+1 >= rightcolumnnumber\"\r\n                    width=\"{{column.width}}\" [style.text-align]=\"column.alignment==0?'inherit':'end'\" style=\"height: 20px !important;\">\r\n     \r\n                     <pre style=\"margin: 0 !important;overflow: hidden;  \" [ngStyle]=\"getReportDetailStyles()\">{{data[column.mappingName]}}</pre>\r\n                     </td>\r\n                </ng-container>\r\n               \r\n              </tr>\r\n              </ng-container>\r\n \r\n            </tbody>\r\n       \r\n          <tfoot style=\"margin-bottom: 0.5%;width: 100%;\">\r\n            <tr *ngFor=\" let data of reportFooter\"\r\n              style=\"font-weight: bold;font-size: inherit;height: 20px !important;color: inherit;\">\r\n              <!-- <td *ngIf=\"(reportname == 'Debtors Report' || reportname == 'Debtors Report_1') && reportFooter.length\" style=\"height: 30px !important;background: #ABDCFB;width: 20px;\">\r\n              </td> -->\r\n              <td *ngFor=\"let column of reportHeaders;let i=index\" width=\"{{column.width}}\"\r\n                [style.text-align]=\"column.alignment==0?'inherit':'end'\"\r\n                 style=\"height: 30px !important;background: #ABDCFB;\"\r\n                  [ngClass]=\"[(((column.mappingName=='MAIN GROUP'  || column.mappingName=='MAINGROUP' || column.mappingName=='SUB GROUP_A' || column.mappingName=='SUBGROUP_A' ||\r\n                  column.mappingName=='SUB GROUP_B' || column.mappingName=='SUBGROUP_B' ||column.mappingName=='SUB GROUP_C' || column.mappingName=='SUBGROUP_C' ||\r\n                  column.mappingName=='CATEGORY') && this.reportparam.SHOWGROUPING == 0)?'notdisplay':'') || \r\n                  (((column.mappingName=='SL_BL' || column.mappingName=='BL_SL' || column.mappingName=='SL_BL_A' || column.mappingName=='BL_SL_A') && this.reportparam.SHOWSUBLEDGER == 0)?'notdisplay':''),\r\n                  (reportname=='Profit Loss Report' || reportname=='Balance Sheet Report') && ShowLineInFinalReport==0 ? ((i+1 == 2 || i+1 == 3 || i+1 == 4) ? 'noRightBorder':'') : '',\r\n                  (reportname=='Profit Loss Report' || reportname=='Balance Sheet Report') && ShowLineInFinalReport==0 ? ((i+1 == 3 || i+1 == 4 || i+1 == 5) ? 'noLeftBorder':'') : '',\r\n                  (reportname == 'PLACCOUNT' || reportname=='BALANCESHEET') && ShowLineInFinalReport==0 ? ((i+1 == 1 || i+1 == 2 || i+1 == 3 || i+1 == 7 || i+1 == 8 || i+1 == 9) ? 'noRightBorder':'') : '',\r\n                  (reportname == 'PLACCOUNT' || reportname=='BALANCESHEET') && ShowLineInFinalReport==0 ? ((i+1 == 2 || i+1 == 3 || i+1 == 4 || i+1 == 8 || i+1 == 9 || i+1 == 10) ? 'noLeftBorder':'') : ''\r\n                  ]\">\r\n                  <pre style=\"margin: 0 !important;overflow: hidden; \"\r\n                   [ngStyle]=\"getReportFooterStyles()\">{{data[column.mappingName]}}</pre>\r\n                  </td>\r\n            </tr>\r\n          </tfoot>\r\n          <div>\r\n            <!-- <div style=\"margin-left: 455px;\">\r\n              <label>Rows Per Page:</label>\r\n              <input type=\"number\" style=\"width: 5%;\" [(ngModel)]=\"rowsperpage\"  >\r\n            </div> -->\r\n            <div style=\"text-align: center;margin-bottom: -14px;\">\r\n              <pagination-controls (pageChange)=\"p = $event\" (click)=\"clickNext()\"></pagination-controls>\r\n            </div>\r\n          </div>\r\n\r\n\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div class=\"modal fade\" bsModal #childModal=\"bs-modal\" role=\"dialog\">\r\n  <div class=\"modal-dialog\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"this.childModal.hide()\">&times;</button>\r\n        <h4 class=\"modal-title\">Information</h4>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        {{DialogMessage}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"modal-sticky\" *ngIf=\"showReportColumnFormatPopup\"\r\n  style=\"overflow: auto;right: 5%;width: 90%;z-index: 9999999\">\r\n\r\n  <div class=\"modal-content modal-content-main-area reportFormsFields\">\r\n\r\n    <div class=\"row\" style=\"display: flex; margin: 10px 0px;\">\r\n      <div class=\"col-md-2\">\r\n        <h4 class=\"modal-title\" id=\"myModalLabel\">Report Format </h4>\r\n      </div>\r\n      <div class=\"col-lg-10\" style=\"display: flex; justify-content: right;\">\r\n        <div class=\"format-btn\"*ngIf=\"ReportColumnName.length > 0\" >\r\n          <button type=\"button\" class=\"btn btn-primary\" (click)=\"refreshReportColumns()\">Refresh</button>\r\n        </div>\r\n\r\n        <div class=\"format-btn\">\r\n          <button type=\"button\" class=\"btn btn-primary\" (click)=\"exportReportFormat()\">Export Format</button>\r\n        </div>\r\n        <div class=\"format-btn\" >\r\n          <button type=\"button\" class=\"btn btn-primary\" (click)=\"OkCommand()\">Save</button>\r\n        </div>\r\n        \r\n        <div class=\"format-btn\" >\r\n          <button type=\"button\" class=\"btn btn-primary\" (click)=\"CancelCommand()\">Cancel</button>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n    <div  style=\" margin-top: 5px; margin-bottom: 15px; display:flex; \">\r\n      \r\n     \r\n      <div class=\"col-md-12\">\r\n        <div class=\"row\" style=\"display:flex\">\r\n          <div class=\"col-lg-4\">\r\n            <div class=\"form-input\">\r\n              <label class=\" label\">Report Name</label>\r\n             <div >\r\n            <input type=\"text\" class=\"form-control\" [readonly]=\"true\" style=\"color: black;\" [(ngModel)]=\"reportname\">\r\n          </div>\r\n            </div>\r\n            <div class=\"form-input\">\r\n              <label class=\" label\" >Report Title</label>\r\n              <div >\r\n                <input type=\"text\" class=\"form-control\" [(ngModel)]=\"reportTitle\" >\r\n              </div>\r\n\r\n            </div>\r\n            <div class=\"form-input\">\r\n              <label class=\" label\">Rows Per Column</label>\r\n              <div >\r\n                <input type=\"text\" class=\"form-control\" [(ngModel)]=\"rowsperpage\" >\r\n              </div>\r\n            </div>\r\n            <div class=\"form-input\">\r\n              <label class=\" label\" >Has Dynamic Columns?</label>\r\n              <div class=\"\">\r\n                <select name=\"dynamic\" id=\"dynamiccolumn\" [(ngModel)]=\"hasDynamicColumns\" class=\"form-control\" style=\"padding:0 !important; height:23px !important; font-size: 12px !important;\">\r\n                  <option value=\"1\">YES</option>\r\n                  <option value=\"0\">NO</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n          <div class=\"col-lg-4\">\r\n            <div class=\"form-input\">\r\n              <label class=\" label\" >Has Dynamic Headers?</label>\r\n              <div class=\"\">\r\n                <select name=\"dynamicheaders\" id=\"dynamicheader\" [(ngModel)]=\"hasDynamicHeaders\" class=\"form-control input-text-element\" style=\" height:23px !important;padding:0 !important; font-size: 12px !important;\">\r\n                  <option value=1>YES</option>\r\n                  <option value=0>NO</option>\r\n                </select>\r\n              </div>\r\n              \r\n            </div>\r\n            <div class=\"form-input\">\r\n              <label class=\" label\" style=\" white-space: nowrap;\">Dynamic Column Level</label>\r\n              <div class=\"\">\r\n                <input type=\"number\" class=\"form-control\" [(ngModel)]=\"dynamicColumnLevel\"\r\n                 \r\n                >\r\n  \r\n              </div>\r\n              \r\n            </div>\r\n            <div class=\"form-input\">\r\n              <label class=\" label\" style=\" white-space: nowrap;\">Dynamic Column Width</label>\r\n              <div class=\"\">\r\n                <input type=\"text\" class=\"form-control\" [(ngModel)]=\"dynamicColumnWidth\"\r\n                >\r\n  \r\n              </div>\r\n              \r\n            </div>\r\n            <div class=\"form-input\">\r\n              <label class=\" label\" style=\"white-space: nowrap;\">Left Columns</label>\r\n              <div class=\"\">\r\n                <input type=\"text\" class=\"form-control\" [(ngModel)]=\"leftcolumnnumber\" >\r\n              </div>\r\n              \r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"col-lg-4\">\r\n            <div class=\"form-input\">\r\n              <label class=\" label\" style=\"white-space: nowrap;\">Right Columns</label>\r\n              <div class=\"\">\r\n                <input type=\"text\" class=\"form-control\" [(ngModel)]=\"rightcolumnnumber\" >\r\n              </div>\r\n\r\n            </div>\r\n            <div class=\"form-input\">\r\n              <label class=\" label\">Merge Header?</label>\r\n              <div class=\"\">\r\n                <select name=\"mergeheader\" id=\"_mergeheader\" [(ngModel)]=\"MergeReportHeader\" class=\"form-control\" \r\n                style=\" height:23px !important; font-size: 12px !important; padding:0 !important;\">\r\n                  <option value=1>YES</option>\r\n                  <option value=0>NO</option>\r\n                </select>\r\n              </div>\r\n              \r\n            </div>\r\n            <div class=\"form-input\">\r\n              <label class=\" label\" style=\"white-space: nowrap;\">Show Line in Final Reports?</label>\r\n              <div class=\"\">\r\n                <select name=\"lineinfinalreports\" id=\"_showline\" [(ngModel)]=\"ShowLineInFinalReport\" class=\"form-control input-text-element\" style=\"font-size: 11px; height: 23px !important; padding:0 !important;\">\r\n                  <option value=1>YES</option>\r\n                  <option value=0>NO</option>\r\n                </select>\r\n              </div>\r\n              \r\n            </div>\r\n\r\n          </div>\r\n\r\n        </div>\r\n       \r\n      </div>\r\n\r\n    </div>\r\n    \r\n    <div class=\"table-responsive\">\r\n\r\n      <table class=\"table\" style=\"display: grid;\">\r\n        <thead>\r\n          <tr>\r\n            <th style=\"width: 55px; \">SI NO </th>\r\n            <th scope=\"col\" style=\"width: 190px; \">Column Name</th>\r\n            <th scope=\"col\" style=\"width: 190px; \">Mapping Name</th>\r\n            <th scope=\"col\" style=\"width: 60px; \">Show</th>\r\n            <th scope=\"col\" style=\"width: 90px; \">Col Width</th>\r\n            <th scope=\"col\" style=\"width: 100px; \">Format</th>\r\n            <th scope=\"col\" style=\"width: 75px; \">Align</th>\r\n            <th scope=\"col\" style=\"width: 120px; \">Column Position</th>\r\n            <th scope=\"col\" style=\"width: 120px; \">Merge Header</th>\r\n            <th scope=\"col\" style=\"width: 120px; \">Group Summary</th>\r\n            <!-- <th scope=\"col\" style=\"width: 140px; \">GS Function</th> -->\r\n            <th scope=\"col\" style=\"width: 120px; \">Table Summary</th>\r\n            <!-- <th scope=\"col\" style=\"width: 140px; \">TS Function</th> -->\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr *ngFor=\" let column of ReportColumnName; let i= index ;\">\r\n            <td style=\"width: 55px; \">{{i+1}}</td>\r\n            <!-- input type=\"checkbox\" name=\"mergeVat\" (change)=\"$event.target.checked?(ReportParameters.MergeVatAc=1):(ReportParameters.MergeVatAc=0)\" [checked]=\"ReportParameters.MergeVatAc == 1\" -->\r\n            <td style=\"width: 190px;line-height: 32px; \">\r\n              <input type=\"text\" style=\"height:26px;margin-top: 2px;\" class=\"form-control\"\r\n                [(ngModel)]=\"column.ColumnName\">\r\n            </td>\r\n            <td style=\"width: 190px;line-height: 32px; \">\r\n              <input type=\"text\" class=\"form-control\" [readonly]=\"true\"\r\n                style=\"color: black;height:26px;margin-top: 2px;\" [(ngModel)]=\"column.MappingName\">\r\n            </td>\r\n            <td style=\"width: 60px;line-height: 32px; \">\r\n              <input type=\"checkbox\" class=\"form-control\" style=\"height:26px;margin-top: 2px;\"\r\n                (change)=\"column.Show = $event.target.checked?1:0\" [(ngModel)]=\"column.Show\">\r\n            </td>\r\n            <td style=\"width: 90px;line-height: 32px; \">\r\n              <input type=\"number\" style=\"height:26px;margin-top: 2px;\" class=\"form-control\"\r\n                [(ngModel)]=\"column.ColWidth\">\r\n            </td>\r\n            <td style=\"width: 100px;line-height: 32px; \">\r\n              <input type=\"text\" class=\"form-control\" style=\"height:26px;margin-top: 2px;\" [(ngModel)]=\"column.Format\">\r\n            </td>\r\n            <td style=\"width: 75px;line-height: 32px; \">\r\n              <input type=\"number\" class=\"form-control\" style=\"height:26px;margin-top: 2px;\" [(ngModel)]=\"column.Align\">\r\n            </td>\r\n            <td style=\"width: 120px;line-height: 32px; \">\r\n              <input type=\"number\" class=\"form-control\" style=\"height:26px;margin-top: 2px;\"\r\n                [(ngModel)]=\"column.ColumnPosition\">\r\n            </td>\r\n            <td style=\"width: 120px;line-height: 32px; \">\r\n              <input type=\"text\" class=\"form-control\" style=\"height:26px;margin-top: 2px;\"\r\n                [(ngModel)]=\"column.ColGroup\">\r\n            </td>\r\n            <td style=\"width: 120px;line-height: 32px; \">\r\n              <input type=\"checkbox\" class=\"form-control\" (change)=\"column.GroupSummary = $event.target.checked?1:0\"\r\n                style=\"height:26px;margin-top: 2px;\" [(ngModel)]=\"column.GroupSummary\">\r\n            </td>\r\n            <!-- <td style=\"width: 140px; \"><input type=\"text\" class=\"form-control\" [(ngModel)]=\"column.GSFunction\"></td> -->\r\n            <td style=\"width: 120px;line-height: 32px; \">\r\n              <input type=\"checkbox\" (change)=\"column.TableSummary = $event.target.checked?1:0\" class=\"form-control\"\r\n                style=\"height:26px;margin-top: 2px;\" [(ngModel)]=\"column.TableSummary\">\r\n            </td>\r\n            <!-- <td style=\"width: 140px; \"><input type=\"text\" class=\"form-control\" [(ngModel)]=\"column.TSFunction\"></td> -->\r\n          </tr>\r\n\r\n        </tbody>\r\n      </table>\r\n\r\n    </div>\r\n\r\n    <!-- <div class=\"modal-footer\">\r\n      <button type=\"button\" class=\"btn btn-primary\" (click)=\"OkCommand()\">Save</button>\r\n\r\n      <button type=\"button\" class=\"btn btn-primary\" (click)=\"CancelCommand()\">Cancel</button>\r\n    </div> -->\r\n  </div>\r\n\r\n</div>\r\n\r\n<div class=\"modal-sticky\" *ngIf=\"showReportListDialog\" style=\"overflow: auto;right: 40%;width: 30%;z-index: 9999999\">\r\n\r\n  <div class=\"modal-content modal-content-main-area\" #datatable>\r\n    <div style=\"height: 28px; margin-top: 5px; \">\r\n      <div class=\"col-md-12\">\r\n        <h4 class=\"modal-title\" id=\"myModalLabel\">Loaded Report List</h4>\r\n      </div>\r\n\r\n    </div>\r\n    <div class=\"table-responsive\">\r\n\r\n      <table class=\"table\" style=\"display: grid;\">\r\n        <thead>\r\n          <tr>\r\n            <th style=\"width: 10px; \">S.N.</th>\r\n            <th>Report Name</th>\r\n            <!-- <th style=\"width: 1%;\" ></th> -->\r\n\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr *ngFor=\" let column of previouslyLoadedReportsList; let i= index ;\"\r\n            (click)=\"onClickLoadedReportList(i,column)\" [class.highlighted]=\"i === selectedRowIndex\">\r\n            <td style=\"width: 52px; \">{{i+1}}</td>\r\n            <td #reportnameinlist id=\"reportname{{i}}\">{{column.reportname}}</td>\r\n            <!-- <td style=\"width: 1%; cursor: pointer;\" (click)=\"popReportandClose(column.activeurlpath)\">&times;</td> -->\r\n          </tr>\r\n\r\n        </tbody>\r\n      </table>\r\n\r\n    </div>\r\n\r\n    <div class=\"modal-footer\">\r\n      <button type=\"button\" class=\"btn btn-primary\" (click)=\"CancelReportList()\">Cancel</button>\r\n    </div>\r\n  </div>\r\n\r\n</div>\r\n\r\n<!-- cellpay payment voucher list -->\r\n\r\n<div class=\"modal-sticky\" *ngIf=\"showCellPayPaymentPopup\"\r\n  style=\"overflow: auto;right: 5%;width: 90%;z-index: 9999999\">\r\n\r\n  <div class=\"modal-content modal-content-main-area\">\r\n    <div style=\"height: 28px; margin-top: 5px; \">\r\n      <div class=\"col-md-2\">\r\n        <h4 class=\"modal-title\" id=\"myModalLabel\">Cellpay Payment</h4>\r\n      </div>\r\n      <div class=\"col-md-12\">\r\n        <div style=\"display: flex;\">\r\n        <div class=\"row\">\r\n          <label class=\"col-md-4 label\" style=\"margin-top: 4px;width: 137px;\">Voucher No</label>\r\n          <div class=\"col-md-3\" style=\"width:55%;margin-left:4px;\">\r\n\r\n            <input type=\"text\" class=\"form-control\" [readonly]=\"true\" style=\"color: black;width: 195px;\" [(ngModel)]=\"this._trnMainService.TrnMainObj.VCHRNO\" disabled>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"row\" style=\"margin-top:-21px;margin-left: 112px;\">\r\n          <button type=\"button\" class=\"btn btn-primary\" (click)=\"OkCellpayCommand()\">Save</button>\r\n        </div>\r\n        \r\n        <div class=\"row\" style=\"margin-top:-21px;margin-left:28px\">\r\n          <button type=\"button\" class=\"btn btn-primary\" (click)=\"CancelCellpayCommand()\">Cancel</button>\r\n        </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-12\">\r\n        <div style=\"display: flex;\">\r\n        <div class=\"row\">\r\n          <label class=\"col-md-4 label\" style=\"margin-top: 4px;width: 137px;\">Payment Mode</label>\r\n          <div class=\"col-md-3\" style=\"width:55%;margin-left:4px;\">\r\n            <input type=\"text\" class=\"form-control\" [readonly]=\"true\" style=\"color: black;width: 195px;\" [(ngModel)]=\"this._trnMainService.TrnMainObj.TRNMODE\">\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <label class=\"col-md-4 label\" style=\"margin-top: 4px;width: 137px;\">Cash/Bank</label>\r\n          <div class=\"col-md-3\" style=\"width:55%;margin-left:4px;\">\r\n            <!-- <input type=\"text\" class=\"form-control\" [readonly]=\"true\" style=\"color: black;width: 195px;\" [(ngModel)]=\"this._trnMainService.TrnMainObj.TRNMODE\"> -->\r\n            <input type=\"text\"  class=\"form-control\" [(ngModel)]=\"_trnMainService.TrnMainObj.TRNACName\" name=\"TRNAC\" \r\n              autocomplete=\"off\" placeholder=\"press ENTER to Select A/C\" (keydown.Enter)=\"showAcPartyList()\" />\r\n          </div>\r\n        </div>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n    <div class=\"table-responsive\">\r\n\r\n      <table class=\"table\" style=\"display: grid;\">\r\n        <thead>\r\n          <tr>\r\n            <th style=\"width: 55px; \">SNO </th>\r\n            <th scope=\"col\" style=\"width: 190px; \">Ledger</th>\r\n            <th scope=\"col\" style=\"width: 190px; \">Amount</th>\r\n            <th scope=\"col\" style=\"width: 190px; \">Narration</th>\r\n            <th scope=\"col\" style=\"width: 190px; \">Bank Code</th>\r\n            <th scope=\"col\" style=\"width: 190px; \">Bank Name</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr *ngFor=\" let data of this._trnMainService.TrnMainObj.TrntranList; let i= index ;\">\r\n            <td style=\"width: 55px; \">{{i+1}}</td>\r\n            <td style=\"width: 190px;line-height: 32px; \">\r\n              <input type=\"text\" style=\"height:26px;margin-top: 2px;\" class=\"form-control\"\r\n                [(ngModel)]=\"data.acitem.ACNAME\" disabled>\r\n            </td>\r\n            <td style=\"width: 190px;line-height: 32px; \">\r\n              <input type=\"text\" style=\"height:26px;margin-top: 2px;\" class=\"form-control\"\r\n                [(ngModel)]=\"data.DRAMNT\" (change)=\"AddCellPayFee()\" [disabled]=\"data.disableCellPayRow == true\">\r\n            </td>\r\n            <td style=\"width: 190px;line-height: 32px; \">\r\n              <input type=\"text\" style=\"height:26px;margin-top: 2px;\" class=\"form-control\"\r\n                [(ngModel)]=\"data.NARATION\" [disabled]=\"data.disableCellPayRow == true\">\r\n            </td>\r\n            <td style=\"width: 190px;line-height: 32px; \">\r\n              <input type=\"text\" style=\"height:26px;margin-top: 2px;\" class=\"form-control\"\r\n                [(ngModel)]=\"data.ChequeNo\" [disabled]=\"data.disableCellPayRow == true\">\r\n            </td>\r\n            <td style=\"width: 190px;line-height: 32px; \">\r\n              <input type=\"text\" style=\"height:26px;margin-top: 2px;\" class=\"form-control\"\r\n                [(ngModel)]=\"data.BANKNAME\" (keyup.Enter)=\"AddCellPayFee()\" [disabled]=\"data.disableCellPayRow == true\">\r\n            </td>\r\n          </tr>\r\n\r\n        </tbody>\r\n      </table>\r\n\r\n    </div>\r\n  </div>\r\n\r\n</div>\r\n<!-- cellpaypayment end -->\r\n\r\n\r\n<div *ngIf=\"contextMenuView.show==true\">\r\n  <app-contextmenu [data]=\"contextMenuView\"></app-contextmenu>\r\n</div>\r\n\r\n\r\n<generic-popup-grid #genericGridACListParty [popupsettings]=\"gridACListPartyPopupSettings\"\r\n  (onItemDoubleClick)=\"onAcPartySelect($event)\"></generic-popup-grid>"

/***/ }),

/***/ 1786:
/***/ (function(module, exports) {

module.exports = "<div #modalcontainer class=\"modal-container\" (mouseout)=\"hideContextMenuWithTimer($event)\" (mouseover)=\"clearContextMenuHideTimer()\"\r\n     [style.left.px]=\"containerPosX\" [style.top.px]=\"containerPosY\">\r\n  <div class=\"modal-tip\" ngClass=\"{{isArrowUpward ? 'modal-tip-upward-arrow' : 'modal-tip-downward-arrow'}}\"></div>\r\n  <ul id=\"left-container\" class=\"left-container\">\r\n    <li *ngFor=\"let item of data.menuItems\">\r\n      <a (click)=\"callSubscriber(item)\" href=\"javascript:void(0)\">{{item.label}}</a>\r\n    </li>\r\n  </ul>\r\n</div>\r\n"

/***/ }),

/***/ 1879:
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),

/***/ 34:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_forms__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ngui_auto_complete__ = __webpack_require__(564);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ngui_auto_complete___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__ngui_auto_complete__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_angular_tree_component__ = __webpack_require__(556);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_ng2_bootstrap__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_ngx_contextmenu__ = __webpack_require__(213);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_ngx_daterangepicker_material__ = __webpack_require__(567);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_ngx_pagination__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_primeng_components_autocomplete_autocomplete__ = __webpack_require__(218);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_primeng_components_autocomplete_autocomplete___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_primeng_components_autocomplete_autocomplete__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__common_Transaction_Components_transaction_service__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__common_nepali_date_picker_nepali_date_picker_module__ = __webpack_require__(558);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__common_popupLists_generic_grid_generic_popup_grid_module__ = __webpack_require__(212);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__common_services_permission_guard_service__ = __webpack_require__(90);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__node_modules_ng2_search_filter__ = __webpack_require__(216);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__theme_nga_module__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__ReportDialogs_AccountLedgerReport_account_ledger_report_component__ = __webpack_require__(1485);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__ReportDialogs_ActualVsBudget_Report_actualvsbudget_report_component__ = __webpack_require__(1486);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__ReportDialogs_AdditionalCost_Itemwise_Report_additionalcost_itemwise_report_component__ = __webpack_require__(1487);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__ReportDialogs_AdditionalCost_Voucherwise_Report_additionalcost_voucherwise_report_component__ = __webpack_require__(1488);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__ReportDialogs_BalanceSheetReport_balance_sheet_report_component__ = __webpack_require__(1489);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__ReportDialogs_BillTrackingReport_billtracking_report_component__ = __webpack_require__(1490);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__ReportDialogs_CashAndBankBookReport_cash_and_bank_book_report_component__ = __webpack_require__(1492);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__ReportDialogs_CashBookReport_cashbookreport_component__ = __webpack_require__(1493);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__ReportDialogs_Consolidated_Balance_Sheet_Report_consolidated_balance_sheet_report_component__ = __webpack_require__(1494);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__ReportDialogs_Consolidated_Profit_Loss_Report_consolidated_profit_loss_report_component__ = __webpack_require__(1495);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__ReportDialogs_Consolidated_Trial_Report_consolidated_trial_balance_report_component__ = __webpack_require__(1496);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__ReportDialogs_Creditors_Report_creditorsreport_component__ = __webpack_require__(1497);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__ReportDialogs_CreditorsBillTrackingReport_creditors_billtracking_report_component__ = __webpack_require__(1498);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__ReportDialogs_CurrentStockWarehousewiseReportAccount_currentstock_warehousewisereport_account_component__ = __webpack_require__(1499);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__ReportDialogs_DateFilters_date_filters_component__ = __webpack_require__(1500);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__ReportDialogs_DayBookReport_day_book_report_component__ = __webpack_require__(1501);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__ReportDialogs_Debit_Note_Register_Report_debitnote_register_report_component__ = __webpack_require__(1502);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__ReportDialogs_Debtors_Report_debtorsreport_component__ = __webpack_require__(1503);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__ReportDialogs_DueVoucherReport_duevoucherreport__ = __webpack_require__(1504);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_35__ReportDialogs_GST_Purchase_Summary_gst_purchase_summary_component__ = __webpack_require__(1505);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_36__ReportDialogs_GST_Sales_Summary_gst_sales_summary_component__ = __webpack_require__(1506);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_37__ReportDialogs_IncomeTax_Depreciation_Report_incometax_depreciation_report_component__ = __webpack_require__(1507);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_38__ReportDialogs_JournalBook_journalbook_component__ = __webpack_require__(1508);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_39__ReportDialogs_LocalPurchasecost_allocation_report_localpurchasecost_allocation_report_component__ = __webpack_require__(1509);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_40__ReportDialogs_MasterDialogReport_MasterDialogReport__ = __webpack_require__(1375);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_41__ReportDialogs_MonthlySalesPaymentReport_monthly_sales_payement_report_component__ = __webpack_require__(1510);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_42__ReportDialogs_One_Lakh_Above_SALES_Report_one_lakh_above_SALES_report_component__ = __webpack_require__(1511);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_43__ReportDialogs_PartyLedger_partyLedger_component__ = __webpack_require__(1513);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_44__ReportDialogs_PartyLedgerReport_party_ledger_report_component__ = __webpack_require__(1512);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_45__ReportDialogs_PostDatedChequeVoucherReport_post_dated_chequereport_component__ = __webpack_require__(1514);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_46__ReportDialogs_ProfitLossReport_profit_loss_report_component__ = __webpack_require__(1515);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_47__ReportDialogs_PurchaseBookReport_PurchaseBookReport__ = __webpack_require__(1516);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_48__ReportDialogs_SalesBookReport_salesbookreport__ = __webpack_require__(1517);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_49__ReportDialogs_SalesReturnReportDetail_salesreturn_reportdetail_component__ = __webpack_require__(1518);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_50__ReportDialogs_SalesReturnSummaryReport_salesreturn_summary_report_component__ = __webpack_require__(1519);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_51__ReportDialogs_SalesReturnSummaryRetailerReport_salesreturnsummary_retailerreport_component__ = __webpack_require__(1520);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_52__ReportDialogs_StockAbcAnalysisReportAccount_stockabc_analysisreport_account_component__ = __webpack_require__(1521);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_53__ReportDialogs_StockLedgerReportAcc_stock_ledger_report_account_component__ = __webpack_require__(1522);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_54__ReportDialogs_StockSummaryReportAccount_stocksummary_report_account_component__ = __webpack_require__(1523);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_55__ReportDialogs_StockValuationReport_stock_valuation_report_component__ = __webpack_require__(1524);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_56__ReportDialogs_SubLedgerAcbaseReport_sub_ledger_acbase_report_component__ = __webpack_require__(1525);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_57__ReportDialogs_SubLedgerReport_sub_ledger_report_component__ = __webpack_require__(1526);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_58__ReportDialogs_SummaryLedgerReport_summaryledgerreport_component__ = __webpack_require__(1527);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_59__ReportDialogs_SummaryPartyLedger_summary_party_ledger_component__ = __webpack_require__(1528);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_60__ReportDialogs_TDS_Report_tds_report_comnponent__ = __webpack_require__(1529);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_61__ReportDialogs_Trial_Balance_Report_trial_balance_report_component__ = __webpack_require__(1530);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_62__ReportDialogs_VAT_Purchase_Register_Report_vat_purchase_register_report_component__ = __webpack_require__(1531);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_63__ReportDialogs_account_filters_account_filters_component__ = __webpack_require__(1532);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_64__ReportDialogs_account_list_account_list_component__ = __webpack_require__(1533);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_65__ReportDialogs_account_payable_account_payable_component__ = __webpack_require__(1534);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_66__ReportDialogs_account_receivable_account_receivable_component__ = __webpack_require__(1535);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_67__ReportDialogs_aging_payable_aging_payable_component__ = __webpack_require__(1536);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_68__ReportDialogs_aging_receivable_aging_receivable_component__ = __webpack_require__(1537);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_69__ReportDialogs_area_filters_area_filters_component__ = __webpack_require__(1538);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_70__ReportDialogs_area_list_area_list_component__ = __webpack_require__(1539);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_71__ReportDialogs_companynorms_depreciation_report_companynorms_deprecaition_report_component__ = __webpack_require__(1540);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_72__ReportDialogs_costcenter_filter_costcenter_filters_component__ = __webpack_require__(1541);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_73__ReportDialogs_costcenter_list_costcenter_list_component__ = __webpack_require__(1542);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_74__ReportDialogs_creditors_aging_report_creditors_aging_report_component__ = __webpack_require__(1543);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_75__ReportDialogs_creditors_outstanding_report_creditors_outstanding_report_component__ = __webpack_require__(1544);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_76__ReportDialogs_debotrs_aging_report_debtors_aging_report_component__ = __webpack_require__(1545);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_77__ReportDialogs_debtors_outstanding_report_debtors_outstanding_report_component__ = __webpack_require__(1546);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_78__ReportDialogs_division_division_component__ = __webpack_require__(1547);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_79__ReportDialogs_faarasset_depreciation_report_faarasset_depreciation_report_component__ = __webpack_require__(1548);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_80__ReportDialogs_one_lakh_above_PURCHASE_report_one_lakh_above_PURCHASE_report_component__ = __webpack_require__(1549);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_81__ReportDialogs_voucher_register_report_voucher_register_report_component__ = __webpack_require__(1550);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_82__Reports_component__ = __webpack_require__(1376);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_83__Reports_routing__ = __webpack_require__(1551);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_84__components_ReportMain_ReportMain__ = __webpack_require__(1377);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_85__context_menu_context_menu_component__ = __webpack_require__(1552);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_86__ReportDialogs_Cash_Collection_Voucher_Report_cash_collection_voucher_report_component__ = __webpack_require__(1491);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReportModule", function() { return ReportModule; });























































































var ReportModule = (function () {
    function ReportModule() {
    }
    return ReportModule;
}());
ReportModule = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["NgModule"])({
        imports: [
            __WEBPACK_IMPORTED_MODULE_0__angular_common__["CommonModule"],
            __WEBPACK_IMPORTED_MODULE_2__angular_forms__["FormsModule"],
            __WEBPACK_IMPORTED_MODULE_15__theme_nga_module__["a" /* NgaModule */],
            __WEBPACK_IMPORTED_MODULE_83__Reports_routing__["a" /* routing */],
            __WEBPACK_IMPORTED_MODULE_2__angular_forms__["ReactiveFormsModule"],
            __WEBPACK_IMPORTED_MODULE_3__ngui_auto_complete__["NguiAutoCompleteModule"],
            __WEBPACK_IMPORTED_MODULE_5_ng2_bootstrap__["a" /* ModalModule */].forRoot(),
            __WEBPACK_IMPORTED_MODULE_8_ngx_pagination__["a" /* NgxPaginationModule */],
            __WEBPACK_IMPORTED_MODULE_9_primeng_components_autocomplete_autocomplete__["AutoCompleteModule"],
            __WEBPACK_IMPORTED_MODULE_14__node_modules_ng2_search_filter__["a" /* Ng2SearchPipeModule */],
            __WEBPACK_IMPORTED_MODULE_7_ngx_daterangepicker_material__["a" /* NgxDaterangepickerMd */].forRoot(),
            __WEBPACK_IMPORTED_MODULE_12__common_popupLists_generic_grid_generic_popup_grid_module__["a" /* GenericPopupGridModule */].forRoot(),
            __WEBPACK_IMPORTED_MODULE_4_angular_tree_component__["d" /* default */],
            __WEBPACK_IMPORTED_MODULE_6_ngx_contextmenu__["a" /* ContextMenuModule */],
            __WEBPACK_IMPORTED_MODULE_11__common_nepali_date_picker_nepali_date_picker_module__["a" /* NepaliDatePickerModule */]
        ],
        declarations: [
            __WEBPACK_IMPORTED_MODULE_85__context_menu_context_menu_component__["a" /* ContextmenuComponent */],
            __WEBPACK_IMPORTED_MODULE_82__Reports_component__["a" /* ReportsComponent */],
            __WEBPACK_IMPORTED_MODULE_84__components_ReportMain_ReportMain__["a" /* ReportMain */],
            __WEBPACK_IMPORTED_MODULE_40__ReportDialogs_MasterDialogReport_MasterDialogReport__["a" /* MasterDialogReport */],
            __WEBPACK_IMPORTED_MODULE_65__ReportDialogs_account_payable_account_payable_component__["a" /* AccountPayableReport */],
            __WEBPACK_IMPORTED_MODULE_66__ReportDialogs_account_receivable_account_receivable_component__["a" /* AccountReceivableReport */],
            __WEBPACK_IMPORTED_MODULE_36__ReportDialogs_GST_Sales_Summary_gst_sales_summary_component__["a" /* GstSalesSummary */],
            __WEBPACK_IMPORTED_MODULE_35__ReportDialogs_GST_Purchase_Summary_gst_purchase_summary_component__["a" /* GstPurchaseSummary */],
            __WEBPACK_IMPORTED_MODULE_67__ReportDialogs_aging_payable_aging_payable_component__["a" /* AgingPayableReport */],
            __WEBPACK_IMPORTED_MODULE_68__ReportDialogs_aging_receivable_aging_receivable_component__["a" /* AgingReceivableReport */],
            __WEBPACK_IMPORTED_MODULE_47__ReportDialogs_PurchaseBookReport_PurchaseBookReport__["a" /* PurchaseBookReport */],
            __WEBPACK_IMPORTED_MODULE_23__ReportDialogs_CashBookReport_cashbookreport_component__["a" /* CashBookReport */],
            __WEBPACK_IMPORTED_MODULE_48__ReportDialogs_SalesBookReport_salesbookreport__["a" /* SalesBookReport */],
            __WEBPACK_IMPORTED_MODULE_38__ReportDialogs_JournalBook_journalbook_component__["a" /* JournalBook */],
            __WEBPACK_IMPORTED_MODULE_34__ReportDialogs_DueVoucherReport_duevoucherreport__["a" /* DueVoucherReport */],
            __WEBPACK_IMPORTED_MODULE_27__ReportDialogs_Creditors_Report_creditorsreport_component__["a" /* CreditorsReport */],
            __WEBPACK_IMPORTED_MODULE_33__ReportDialogs_Debtors_Report_debtorsreport_component__["a" /* DebtorsReport */],
            __WEBPACK_IMPORTED_MODULE_43__ReportDialogs_PartyLedger_partyLedger_component__["a" /* PartyLedger */],
            __WEBPACK_IMPORTED_MODULE_76__ReportDialogs_debotrs_aging_report_debtors_aging_report_component__["a" /* DebtorsAgingReport */],
            __WEBPACK_IMPORTED_MODULE_74__ReportDialogs_creditors_aging_report_creditors_aging_report_component__["a" /* CreditorsAgingReport */],
            __WEBPACK_IMPORTED_MODULE_77__ReportDialogs_debtors_outstanding_report_debtors_outstanding_report_component__["a" /* DebtorsOutstandingReport */],
            __WEBPACK_IMPORTED_MODULE_75__ReportDialogs_creditors_outstanding_report_creditors_outstanding_report_component__["a" /* CreditorsOutstandingReport */],
            __WEBPACK_IMPORTED_MODULE_58__ReportDialogs_SummaryLedgerReport_summaryledgerreport_component__["a" /* SummaryLedgerReport */],
            __WEBPACK_IMPORTED_MODULE_16__ReportDialogs_AccountLedgerReport_account_ledger_report_component__["a" /* AccountLedgerReport */],
            __WEBPACK_IMPORTED_MODULE_59__ReportDialogs_SummaryPartyLedger_summary_party_ledger_component__["a" /* SummaryPartyLedger */],
            __WEBPACK_IMPORTED_MODULE_44__ReportDialogs_PartyLedgerReport_party_ledger_report_component__["a" /* PartyLedgerReport */],
            __WEBPACK_IMPORTED_MODULE_30__ReportDialogs_DateFilters_date_filters_component__["a" /* DateFilters */],
            __WEBPACK_IMPORTED_MODULE_72__ReportDialogs_costcenter_filter_costcenter_filters_component__["a" /* CostcenterFilters */],
            __WEBPACK_IMPORTED_MODULE_32__ReportDialogs_Debit_Note_Register_Report_debitnote_register_report_component__["a" /* DebitNoteRegisterReportComponent */],
            __WEBPACK_IMPORTED_MODULE_62__ReportDialogs_VAT_Purchase_Register_Report_vat_purchase_register_report_component__["a" /* VATpurchaseRegisterReportComponent */],
            __WEBPACK_IMPORTED_MODULE_80__ReportDialogs_one_lakh_above_PURCHASE_report_one_lakh_above_PURCHASE_report_component__["a" /* OneLakhAbovePURCHASEreportComponent */],
            __WEBPACK_IMPORTED_MODULE_42__ReportDialogs_One_Lakh_Above_SALES_Report_one_lakh_above_SALES_report_component__["a" /* OneLakhAboveSALESreportComponent */],
            __WEBPACK_IMPORTED_MODULE_78__ReportDialogs_division_division_component__["a" /* DivisionComponent */],
            __WEBPACK_IMPORTED_MODULE_73__ReportDialogs_costcenter_list_costcenter_list_component__["a" /* CostcenterList */],
            __WEBPACK_IMPORTED_MODULE_70__ReportDialogs_area_list_area_list_component__["a" /* AreaList */],
            __WEBPACK_IMPORTED_MODULE_69__ReportDialogs_area_filters_area_filters_component__["a" /* AreaFilters */],
            __WEBPACK_IMPORTED_MODULE_64__ReportDialogs_account_list_account_list_component__["a" /* AccountList */],
            __WEBPACK_IMPORTED_MODULE_63__ReportDialogs_account_filters_account_filters_component__["a" /* AccountFilters */],
            __WEBPACK_IMPORTED_MODULE_81__ReportDialogs_voucher_register_report_voucher_register_report_component__["a" /* VoucherRegister */],
            __WEBPACK_IMPORTED_MODULE_22__ReportDialogs_CashAndBankBookReport_cash_and_bank_book_report_component__["a" /* CashBankBookReport */],
            __WEBPACK_IMPORTED_MODULE_31__ReportDialogs_DayBookReport_day_book_report_component__["a" /* DayBookReport */],
            __WEBPACK_IMPORTED_MODULE_57__ReportDialogs_SubLedgerReport_sub_ledger_report_component__["a" /* SubLedgerReport */],
            __WEBPACK_IMPORTED_MODULE_56__ReportDialogs_SubLedgerAcbaseReport_sub_ledger_acbase_report_component__["a" /* SubLedgerAcbaseReport */],
            __WEBPACK_IMPORTED_MODULE_61__ReportDialogs_Trial_Balance_Report_trial_balance_report_component__["a" /* TrialBalanceReport */],
            __WEBPACK_IMPORTED_MODULE_17__ReportDialogs_ActualVsBudget_Report_actualvsbudget_report_component__["a" /* ActualVsBudgetReport */],
            __WEBPACK_IMPORTED_MODULE_18__ReportDialogs_AdditionalCost_Itemwise_Report_additionalcost_itemwise_report_component__["a" /* AdditionalCostItemwiseReport */],
            __WEBPACK_IMPORTED_MODULE_19__ReportDialogs_AdditionalCost_Voucherwise_Report_additionalcost_voucherwise_report_component__["a" /* AdditionalCostVoucherwiseReport */],
            // NepaliDatePickerComponent
            __WEBPACK_IMPORTED_MODULE_50__ReportDialogs_SalesReturnSummaryReport_salesreturn_summary_report_component__["a" /* SalesReturnSummaryReport */], __WEBPACK_IMPORTED_MODULE_51__ReportDialogs_SalesReturnSummaryRetailerReport_salesreturnsummary_retailerreport_component__["a" /* SalesReturnSummaryRetailerReport */], __WEBPACK_IMPORTED_MODULE_49__ReportDialogs_SalesReturnReportDetail_salesreturn_reportdetail_component__["a" /* SalesReturnReportDetail */],
            __WEBPACK_IMPORTED_MODULE_52__ReportDialogs_StockAbcAnalysisReportAccount_stockabc_analysisreport_account_component__["a" /* StockAbcAnalysisReportAccount */],
            __WEBPACK_IMPORTED_MODULE_55__ReportDialogs_StockValuationReport_stock_valuation_report_component__["a" /* StockValuationReport */],
            __WEBPACK_IMPORTED_MODULE_54__ReportDialogs_StockSummaryReportAccount_stocksummary_report_account_component__["a" /* StockSummaryReportAccount */],
            __WEBPACK_IMPORTED_MODULE_29__ReportDialogs_CurrentStockWarehousewiseReportAccount_currentstock_warehousewisereport_account_component__["a" /* CurrentStockWarehousWiseReportAccount */],
            __WEBPACK_IMPORTED_MODULE_53__ReportDialogs_StockLedgerReportAcc_stock_ledger_report_account_component__["a" /* StockLedgerReportAccount */],
            __WEBPACK_IMPORTED_MODULE_26__ReportDialogs_Consolidated_Trial_Report_consolidated_trial_balance_report_component__["a" /* ConsolidatedTrialBalanceReport */],
            __WEBPACK_IMPORTED_MODULE_46__ReportDialogs_ProfitLossReport_profit_loss_report_component__["a" /* ProfitLossReport */], __WEBPACK_IMPORTED_MODULE_20__ReportDialogs_BalanceSheetReport_balance_sheet_report_component__["a" /* BalanceSheetReport */],
            __WEBPACK_IMPORTED_MODULE_60__ReportDialogs_TDS_Report_tds_report_comnponent__["a" /* TDSReport */],
            __WEBPACK_IMPORTED_MODULE_24__ReportDialogs_Consolidated_Balance_Sheet_Report_consolidated_balance_sheet_report_component__["a" /* ConsolidatedBalanceSheetReport */],
            __WEBPACK_IMPORTED_MODULE_25__ReportDialogs_Consolidated_Profit_Loss_Report_consolidated_profit_loss_report_component__["a" /* ConsolidatedProfitLossReport */],
            __WEBPACK_IMPORTED_MODULE_21__ReportDialogs_BillTrackingReport_billtracking_report_component__["a" /* BillTrackingReport */],
            __WEBPACK_IMPORTED_MODULE_28__ReportDialogs_CreditorsBillTrackingReport_creditors_billtracking_report_component__["a" /* CrediotrsBillTrackingReport */],
            __WEBPACK_IMPORTED_MODULE_45__ReportDialogs_PostDatedChequeVoucherReport_post_dated_chequereport_component__["a" /* PostDatedChequeVoucherReport */],
            __WEBPACK_IMPORTED_MODULE_41__ReportDialogs_MonthlySalesPaymentReport_monthly_sales_payement_report_component__["a" /* MonthlySalesPaymentReport */],
            __WEBPACK_IMPORTED_MODULE_39__ReportDialogs_LocalPurchasecost_allocation_report_localpurchasecost_allocation_report_component__["a" /* LocalPurchaseCostAllocationReport */],
            __WEBPACK_IMPORTED_MODULE_37__ReportDialogs_IncomeTax_Depreciation_Report_incometax_depreciation_report_component__["a" /* IncomeTaxDepreciationReport */],
            __WEBPACK_IMPORTED_MODULE_71__ReportDialogs_companynorms_depreciation_report_companynorms_deprecaition_report_component__["a" /* CompanyNormsDepreciationReport */],
            __WEBPACK_IMPORTED_MODULE_79__ReportDialogs_faarasset_depreciation_report_faarasset_depreciation_report_component__["a" /* FaarAssetDepreciationReport */],
            __WEBPACK_IMPORTED_MODULE_86__ReportDialogs_Cash_Collection_Voucher_Report_cash_collection_voucher_report_component__["a" /* CashCollectionVoucherReport */]
        ],
        providers: [
            __WEBPACK_IMPORTED_MODULE_13__common_services_permission_guard_service__["a" /* CanActivateTeam */], __WEBPACK_IMPORTED_MODULE_10__common_Transaction_Components_transaction_service__["a" /* TransactionService */]
            // ReportMainService
        ],
        exports: [],
        entryComponents: [__WEBPACK_IMPORTED_MODULE_40__ReportDialogs_MasterDialogReport_MasterDialogReport__["a" /* MasterDialogReport */]],
    })
], ReportModule);



/***/ })

});
//# sourceMappingURL=0.chunk.js.map